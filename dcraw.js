// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 632400;
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,205,204,204,204,204,204,220,63,0,0,0,0,0,0,18,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,13,198,136,68,161,101,218,63,24,9,109,57,151,226,214,63,88,29,57,210,25,24,199,63,246,95,231,166,205,56,203,63,24,9,109,57,151,226,230,63,85,247,200,230,170,121,178,63,75,175,205,198,74,204,147,63,56,129,233,180,110,131,190,63,145,214,24,116,66,104,238,63,2,1,1,3,2,3,2,0,3,2,3,0,1,2,1,0,0,3,0,2,0,1,3,1,0,1,1,2,0,3,3,2,2,3,3,2,3,1,1,3,3,1,2,1,2,0,0,3,0,1,0,1,0,2,0,2,2,0,3,0,1,3,2,1,3,1,1,2,0,1,0,2,1,3,1,3,0,1,3,0,2,0,0,3,3,2,3,1,2,0,2,0,3,2,2,1,2,3,3,1,2,1,2,1,2,1,1,2,3,0,0,1,1,0,0,2,3,0,0,3,0,3,0,3,2,1,2,3,2,3,3,1,1,2,1,0,3,2,3,0,2,3,1,3,1,0,2,0,3,0,3,2,0,1,1,2,0,1,0,2,0,1,1,3,3,2,2,1,1,3,3,0,2,1,3,2,2,3,2,0,0,1,3,0,2,0,1,2,3,0,1,0,1,3,1,2,3,2,3,2,0,2,0,1,1,0,3,0,0,2,0,3,1,0,0,1,1,3,3,2,3,2,2,1,2,1,3,2,3,1,2,1,0,3,0,2,0,2,0,2,0,3,1,0,0,2,0,3,2,1,3,1,1,3,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,0,0,0,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,10,0,67,111,114,114,117,112,116,32,100,97,116,97,32,110,101,97,114,32,48,120,37,108,108,120,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([155,2,102,1,141,1,53,2,196,1,219,2,134,1,111,1,243,1,5,2,95,4,140,1,92,1,192,1,25,2,119,5,229,1,175,1,252,1,176,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,77,251,179,6,144,251,112,6,108,5,148,252,11,1,245,0,151,249,105,8,81,15,175,242,153,253,103,4,229,249,27,8,157,5,99,252,253,1,3,0,12,253,244,4,215,9,41,248,66,255,190,2,162,248,94,9,105,8,151,249,251,2,5,255,60,254,196,3,224,11,32,246,66,255,190,2,170,248,86,9,69,7,187,250,137,3,119,254,80,254,176,3,57,10,199,247,217,252,39,5,7,249,249,8,108,5,148,252,1,3,255,254,26,255,230,2,19,8,237,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,4,121,4,104,4,85,4,154,4,125,4,104,4,85,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,97,107,101,95,100,101,99,111,100,101,114,40,41,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,4,3,5,6,2,7,1,8,9,0,10,11,255,0,2,2,3,1,1,1,1,2,0,0,0,0,0,0,0,3,2,4,1,5,0,6,7,9,8,10,11,255,0,0,6,3,1,1,2,0,0,0,0,0,0,0,0,0,6,5,7,4,8,3,9,2,0,10,1,11,255,0,0,2,2,2,1,4,2,1,2,5,1,1,0,0,0,139,3,4,2,5,1,6,7,8,18,19,17,20,9,21,34,0,33,22,10,240,35,23,36,49,50,24,25,51,37,65,52,66,53,81,54,55,56,41,121,38,26,57,86,87,40,39,82,85,88,67,118,89,119,84,97,249,113,120,117,150,151,73,183,83,215,116,182,152,71,72,149,105,153,145,250,184,104,181,185,214,247,216,103,70,69,148,137,248,129,213,246,180,136,177,42,68,114,217,135,102,212,245,58,167,115,169,168,134,98,199,101,200,201,161,244,209,233,90,146,133,166,231,147,232,193,198,122,100,225,74,106,230,179,241,211,165,138,178,154,186,132,164,99,229,197,243,210,196,130,170,218,228,242,202,131,163,162,195,234,194,226,227,255,255,0,2,2,1,4,1,4,1,3,3,1,0,0,0,0,140,2,3,1,4,5,18,17,6,19,7,8,20,34,9,33,0,35,21,49,50,10,22,240,36,51,65,66,25,23,37,24,81,52,67,82,41,53,97,57,113,98,54,83,38,56,26,55,129,39,145,121,85,69,40,114,89,161,177,68,105,84,88,209,250,87,225,241,185,73,71,99,106,249,86,70,168,42,74,120,153,58,117,116,134,101,193,118,182,150,214,137,133,201,245,149,180,199,247,138,151,184,115,183,216,217,135,167,122,72,130,132,234,244,166,197,90,148,164,198,146,195,104,181,200,228,229,230,233,162,163,227,194,102,103,147,170,212,213,231,248,136,154,215,119,196,100,226,152,165,202,218,232,243,246,169,178,179,242,210,131,186,211,255,255,0,0,6,2,1,3,3,2,5,1,2,2,8,10,0,117,4,5,3,6,2,7,1,8,9,18,19,20,17,21,10,22,23,240,0,34,33,24,35,25,36,50,49,37,51,56,55,52,53,54,57,121,87,88,89,40,86,120,39,65,41,119,38,66,118,153,26,85,152,151,249,72,84,150,137,71,183,73,250,117,104,182,103,105,185,184,216,82,215,136,181,116,81,70,217,248,58,214,135,69,122,149,213,246,134,180,169,148,83,42,168,67,245,247,212,102,167,90,68,138,201,232,200,231,154,106,115,74,97,199,244,198,101,233,114,230,113,145,147,166,218,146,133,98,243,197,178,164,132,186,100,165,179,210,129,229,211,170,196,202,242,177,228,209,131,99,234,195,226,130,241,163,194,161,193,227,162,225,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,106,112,101,103,95,115,116,97,114,116,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,46,37,100,46,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,97,99,107,101,100,95,100,110,103,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,5,4,3,6,2,7,1,0,8,9,11,10,12,0,0,0,0,1,5,1,1,1,1,1,1,2,0,0,0,0,0,0,57,90,56,39,22,5,4,3,2,1,0,11,12,12,0,0,0,1,4,2,3,1,2,0,0,0,0,0,0,0,0,0,5,4,6,3,7,2,8,1,9,0,10,11,12,0,0,0,0,1,4,3,1,1,1,1,1,2,0,0,0,0,0,0,5,6,4,7,8,3,9,2,1,0,10,11,12,13,14,0,0,1,5,1,1,1,1,1,1,1,2,0,0,0,0,0,8,92,75,58,41,7,6,5,4,3,2,1,0,13,14,0,0,1,4,2,2,3,1,2,0,0,0,0,0,0,0,0,7,6,8,5,9,4,10,3,11,12,2,0,1,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,101,110,116,97,120,0,0,0,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,3,0,0,0,78,105,107,111,110,0,0,0,0,0,0,0,69,51,50,48,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,78,105,107,111,110,0,0,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,79,108,121,109,112,117,115,0,0,0,0,0,67,55,52,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,112,109,95,116,104,117,109,98,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,80,54,10,37,100,32,37,100,10,50,53,53,10,0,0,0,112,112,109,49,54,95,116,104,117,109,98,40,41,0,0,0,48,49,50,0,49,48,50,0,0,0,0,0,0,0,0,0,108,97,121,101,114,95,116,104,117,109,98,40,41,0,0,0,80,37,100,10,37,100,32,37,100,10,50,53,53,10,0,0,114,111,108,108,101,105,95,116,104,117,109,98,40,41,0,0,112,104,97,115,101,95,111,110,101,95,102,108,97,116,95,102,105,101,108,100,40,41,0,0,255,255,255,1,1,255,1,1,254,0,0,254,0,2,2,0,254,254,254,2,2,254,2,2,0,0,0,0,0,0,0,0,80,104,97,115,101,32,79,110,101,32,99,111,114,114,101,99,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,112,104,97,115,101,95,111,110,101,95,99,111,114,114,101,99,116,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,5,0,0,0,12,0,0,0,14,0,0,0,13,0,0,0,112,104,97,115,101,95,111,110,101,95,108,111,97,100,95,114,97,119,95,99,40,41,0,0,0,0,0,0,0,0,0,0,104,97,115,115,101,108,98,108,97,100,95,108,111,97,100,95,114,97,119,40,41], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+132000);
/* memory initializer */ allocate([108,101,97,102,95,104,100,114,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,115,105,110,97,114,95,52,115,104,111,116,95,108,111,97,100,95,114,97,119,40,41,0,0,110,111,107,105,97,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,0,0,0,79,109,110,105,86,105,115,105,111,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+142384);
/* memory initializer */ allocate([167,255,196,255,212,255,224,255,234,255,241,255,248,255,254,255,2,0,8,0,15,0,22,0,32,0,44,0,60,0,89,0,253,255,255,255,1,0,3,0,251,255,255,255,1,0,5,0,248,255,254,255,2,0,8,0,243,255,253,255,3,0,13,0,237,255,252,255,4,0,19,0,228,255,250,255,6,0,28,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,86,0,88,0,90,0,92,0,94,0,97,0,99,0,101,0,103,0,105,0,107,0,110,0,112,0,114,0,116,0,118,0,120,0,123,0,125,0,127,0,129,0,131,0,134,0,136,0,138,0,140,0,142,0,144,0,147,0,149,0,151,0,153,0,155,0,158,0,160,0,162,0,164,0,166,0,168,0,171,0,173,0,175,0,177,0,179,0,181,0,184,0,186,0,188,0,190,0,192,0,195,0,197,0,199,0,201,0,203,0,205,0,208,0,210,0,212,0,214,0,216,0,218,0,221,0,223,0,226,0,230,0,235,0,239,0,244,0,248,0,252,0,1,1,5,1,9,1,14,1,18,1,22,1,27,1,31,1,35,1,40,1,44,1,49,1,53,1,57,1,62,1,66,1,70,1,75,1,79,1,83,1,88,1,92,1,96,1,101,1,105,1,109,1,114,1,118,1,123,1,127,1,131,1,136,1,140,1,144,1,149,1,153,1,157,1,162,1,166,1,170,1,175,1,179,1,184,1,188,1,192,1,197,1,201,1,205,1,210,1,214,1,218,1,223,1,227,1,231,1,236,1,240,1,244,1,252,1,7,2,19,2,30,2,41,2,52,2,63,2,75,2,86,2,97,2,108,2,119,2,131,2,142,2,153,2,164,2,175,2,186,2,198,2,209,2,220,2,231,2,242,2,254,2,9,3,20,3,31,3,42,3,54,3,65,3,76,3,87,3,98,3,110,3,121,3,132,3,143,3,154,3,165,3,177,3,188,3,199,3,210,3,221,3,233,3,244,3,255,3,1,1,2,3,3,4,4,2,5,7,6,5,7,6,7,8,1,0,2,1,3,3,4,4,5,2,6,7,7,6,8,5,8,8,2,1,2,3,3,0,3,2,3,4,4,6,5,5,6,7,6,8,2,0,2,1,2,3,3,2,4,4,5,6,6,7,7,5,7,8,2,1,2,4,3,0,3,2,3,3,4,7,5,5,6,6,6,8,2,3,3,1,3,2,3,4,3,5,3,6,4,7,5,0,5,8,2,3,2,6,3,0,3,1,4,4,4,5,4,7,5,2,5,8,2,4,2,7,3,3,3,6,4,1,4,2,4,5,5,0,5,8,2,6,3,1,3,3,3,5,3,7,3,8,4,0,5,2,5,4,2,0,2,1,3,2,3,3,4,4,4,5,5,6,5,7,4,8,1,0,2,2,2,254,1,253,1,3,2,239,2,251,2,5,2,17,2,249,2,2,2,9,2,18,2,238,2,247,2,254,2,7,2,228,2,28,3,207,3,247,3,9,4,49,5,177,5,79,2,255,2,13,2,26,3,39,4,240,5,55,6,219,6,76,2,230,2,243,2,1,3,217,4,16,5,201,6,180,6,37,0,0,0,0,16,0,16,0,16,0,0,0,0,0,0,0,0,5,64,5,16,9,32,14,0,13,64,31,255,15,255,63,255,255,255,63,0,0,0,0,0,0,0,0,162,0,0,0,192,0,0,0,187,0,0,0,92,0,0,0,0,0,0,0,124,2,0,0,168,1,0,0,212,0,0,0,101,105,103,104,116,95,98,105,116,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,107,111,100,97,107,95,99,51,51,48,95,108,111,97,100,95,114,97,119,40,41,0,0,0,107,111,100,97,107,95,99,54,48,51,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,1,5,1,1,2,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,3,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,107,111,100,97,107,95,50,54,50,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,15,16,15,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,7,7,6,6,5,5,4,4,3,3,3,0,3,2,2,1,2,0,0,0,0,115,111,110,121,95,97,114,119,50,95,108,111,97,100,95,114,97,119,40,41,0,0,0,0,4,3,7,3,6,2,5,2,3,4,0,6,9,7,10,8,11,9,12,10,13,10,1,5,8,4,2,4,0,0,0,0,50,48,52,0,0,0,0,0,49,50,48,0,0,0,0,0,48,50,50,52,52,54,56,0,48,50,52,52,54,54,56,0,7,7,0,0,63,55,47,39,31,23,15,7,0,7,7,0,0,63,55,47,39,31,23,15,7,0,3,3,0,0,63,47,31,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+158864);
/* memory initializer */ allocate([37,115,58,32,100,101,99,111,100,101,114,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,10,0,0,0,0,0,102,111,118,101,111,110,95,116,104,117,109,98,40,41,0,0,0,0,0,0,0,0,0,0,102,111,118,101,111,110,95,108,111,97,100,95,99,97,109,102,40,41,0,0,0,0,0,0,37,115,32,104,97,115,32,117,110,107,110,111,119,110,32,67,65,77,70,32,116,121,112,101,32,37,100,46,10,0,0,0,67,77,98,0,0,0,0,0,102,111,118,101,111,110,95,99,97,109,102,95,109,97,116,114,105,120,40,41,0,0,0,0,37,115,58,32,34,37,115,34,32,109,97,116,114,105,120,32,110,111,116,32,102,111,117,110,100,33,10,0,0,0,0,0,102,111,118,101,111,110,95,109,97,107,101,95,99,117,114,118,101,40,41,0,0,0,0,0,255,255,255,255,255,255,0,0,255,255,1,0,0,0,255,255,0,0,1,0,1,0,255,255,1,0,0,0,1,0,1,0,70,111,118,101,111,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,68,97,114,107,83,104,105,101,108,100,67,111,108,82,97,110,103,101,0,0,0,0,0,0,80,111,115,116,80,111,108,121,77,97,116,114,105,120,0,0,83,97,116,117,114,97,116,105,111,110,76,101,118,101,108,0,75,101,101,112,73,109,97,103,101,65,114,101,97,0,0,0,65,99,116,105,118,101,73,109,97,103,101,65,114,101,97,0,67,104,114,111,109,97,68,81,0,0,0,0,0,0,0,0,73,110,99,108,117,100,101,66,108,111,99,107,115,0,0,0,67,111,108,111,114,68,81,0,67,111,108,111,114,68,81,67,97,109,82,71,66,0,0,0,67,111,108,117,109,110,70,105,108,116,101,114,0,0,0,0,68,97,114,107,68,114,105,102,116,0,0,0,0,0,0,0,68,97,114,107,83,104,105,101,108,100,66,111,116,116,111,109,0,0,0,0,0,0,0,0,68,97,114,107,83,104,105,101,108,100,84,111,112,0,0,0,87,104,105,116,101,66,97,108,97,110,99,101,73,108,108,117,109,105,110,97,110,116,115,0,37,115,58,32,73,110,118,97,108,105,100,32,119,104,105,116,101,32,98,97,108,97,110,99,101,32,34,37,115,34,10,0,87,104,105,116,101,66,97,108,97,110,99,101,67,111,114,114,101,99,116,105,111,110,115,0,37,115,82,71,66,78,101,117,116,114,97,108,0,0,0,0,83,112,97,116,105,97,108,71,97,105,110,0,0,0,0,0,66,97,100,80,105,120,101,108,115,0,0,0,0,0,0,0,102,111,118,101,111,110,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,67,50,0,0,0,0,0,114,0,0,0,0,0,0,0,47,46,98,97,100,112,105,120,101,108,115,0,0,0,0,0,37,100,32,37,100,32,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,105,120,101,100,32,100,101,97,100,32,112,105,120,101,108,115,32,97,116,58,0,0,0,32,37,100,44,37,100,0,0,114,98,0,0,0,0,0,0,37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,71,77,32,102,105,108,101,33,10,0,0,0,0,37,115,32,104,97,115,32,116,104,101,32,119,114,111,110,103,32,100,105,109,101,110,115,105,111,110,115,33,10,0,0,0,115,117,98,116,114,97,99,116,40,41,0,0,0,0,0,0,232,217,76,63,49,8,140,62,107,43,246,61,178,157,111,61,32,99,238,60,108,9,121,60,111,18,3,60,224,45,144,59,87,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,119,97,118,101,108,101,116,95,100,101,110,111,105,115,101,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,67,97,110,110,111,116,32,117,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,46,10,0,0,0,83,99,97,108,105,110,103,32,119,105,116,104,32,100,97,114,107,110,101,115,115,32,37,100,44,32,115,97,116,117,114,97,116,105,111,110,32,37,100,44,32,97,110,100,10,109,117,108,116,105,112,108,105,101,114,115,0,0,0,0,0,0,0,0,32,37,102,0,0,0,0,0,67,111,114,114,101,99,116,105,110,103,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,46,46,46,10,0,0,0,0,0,115,99,97,108,101,95,99,111,108,111,114,115,40,41,0,0,112,114,101,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,66,105,108,105,110,101,97,114,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,0,255,0,1,254,254,0,0,1,1,254,255,255,0,0,1,254,255,0,255,0,2,254,255,0,0,0,3,254,255,0,1,1,1,254,0,0,255,0,6,254,0,0,0,1,2,254,0,0,1,0,3,254,1,255,0,0,4,254,1,0,255,1,4,254,1,0,0,0,6,254,1,0,1,0,2,254,2,0,0,1,4,254,2,0,1,0,4,255,254,255,0,0,128,255,254,0,255,0,1,255,254,1,255,0,1,255,254,1,0,1,1,255,255,255,1,0,136,255,255,1,254,0,64,255,255,1,255,0,34,255,255,1,0,0,51,255,255,1,1,1,17,255,0,255,2,0,8,255,0,0,255,0,68,255,0,0,1,0,17,255,0,1,254,1,64,255,0,1,255,0,102,255,0,1,0,1,34,255,0,1,1,0,51,255,0,1,2,1,16,255,1,1,255,1,68,255,1,1,0,0,102,255,1,1,1,0,34,255,1,1,2,0,16,255,2,0,1,0,4,255,2,1,0,1,4,255,2,1,1,0,4,0,254,0,0,1,128,0,255,0,1,1,136,0,255,1,254,0,64,0,255,1,0,0,17,0,255,2,254,0,64,0,255,2,255,0,32,0,255,2,0,0,48,0,255,2,1,1,16,0,0,0,2,1,8,0,0,2,254,1,64,0,0,2,255,0,96,0,0,2,0,1,32,0,0,2,1,0,48,0,0,2,2,1,16,0,1,1,0,0,68,0,1,1,2,0,16,0,1,2,255,1,64,0,1,2,0,0,96,0,1,2,1,0,32,0,1,2,2,0,16,1,254,1,0,0,128,1,255,1,1,0,136,1,0,1,2,0,8,1,0,2,255,0,64,1,0,2,1,0,16,255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255,86,78,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,118,110,103,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,80,80,71,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+189312);
/* memory initializer */ allocate([1,0,0,0,0,0,1,0,255,255,0,0,0,0,255,255,1,0,0,0,0,0,1,0,0,0,1,0,0,0,255,255,2,0,0,0,255,255,0,0,1,0,1,0,1,0,255,255,0,0,0,0,0,0,0,0,0,0,1,0,0,0,254,255,1,0,0,0,254,255,0,0,1,0,1,0,254,255,254,255,1,0,255,255,255,255,1,0,1,0,0,2,1,2,255,1,37,100,45,112,97,115,115,32,88,45,84,114,97,110,115,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,0,0,0,0,120,116,114,97,110,115,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,65,72,68,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,46,46,10,0,0,0,97,104,100,95,105,110,116,101,114,112,111,108,97,116,101,40,41,0,0,0,0,0,0,0,1,2,4,5,7,8,0,1,3,4,6,7,1,2,4,5,7,8,0,3,5,8,4,7,3,6,1,4,2,5,4,7,4,2,6,4,4,2,0,0,77,101,100,105,97,110,32,102,105,108,116,101,114,32,112,97,115,115,32,37,100,46,46,46,10,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,215,179,221,63,215,179,221,191,0,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,63,215,179,93,63,0,0,0,191,0,0,0,0,0,0,128,63,215,179,93,191,0,0,0,191,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,63,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,0,0,128,191,0,0,128,191,0,0,128,63,66,108,101,110,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0,255,255,255,0,255,1,0,1,1,1,1,0,1,255,0,255,82,101,98,117,105,108,100,105,110,103,32,104,105,103,104,108,105,103,104,116,115,46,46,46,10,0,0,0,0,0,0,0,114,101,99,111,118,101,114,95,104,105,103,104,108,105,103,104,116,115,40,41,0,0,0,0,49,49,49,50,52,56,49,49,50,52,56,52,56,52,0,0,0,0,0,0,0,0,0,0,193,191,109,13,89,197,19,157,131,97,107,79,199,127,61,61,83,89,227,199,233,47,149,167,149,31,223,127,43,41,199,13,223,7,239,113,137,61,19,61,59,19,251,13,137,193,101,31,179,13,107,41,227,251,239,163,107,71,127,149,53,167,71,79,199,241,89,149,53,17,41,97,241,61,179,43,13,67,137,193,157,157,137,101,241,233,223,191,61,127,83,151,229,233,149,23,29,61,139,251,199,227,103,167,7,241,113,167,83,181,41,137,229,43,167,23,41,233,79,197,101,109,107,239,13,137,73,47,179,67,83,101,29,73,163,19,137,89,239,107,239,101,29,11,89,19,227,79,157,179,41,67,43,7,29,149,89,89,71,251,229,233,97,71,47,53,127,23,127,239,127,149,149,113,211,163,11,113,163,173,11,59,181,251,163,191,79,131,29,173,233,47,113,101,163,229,7,53,61,13,181,233,229,71,59,157,239,53,163,191,179,223,83,211,151,83,73,113,7,53,97,113,47,67,47,17,223,23,151,251,149,59,127,107,211,37,191,173,199,197,197,181,139,239,47,211,7,107,37,73,149,37,73,109,113,199,167,188,201,173,145,223,133,229,212,120,213,23,70,124,41,76,77,3,233,37,104,17,134,179,189,247,111,97,34,162,38,52,42,190,30,70,20,104,157,68,24,194,64,244,126,95,27,173,11,148,182,103,180,11,225,234,149,156,102,220,231,93,108,5,218,213,223,122,239,246,219,31,130,76,192,104,71,161,189,238,57,80,86,74,221,223,165,248,198,218,202,144,202,1,66,157,139,12,115,67,117,5,148,222,36,179,128,52,229,44,220,155,63,202,51,69,208,219,95,245,82,195,33,218,226,34,114,107,62,208,91,168,135,140,6,93,15,221,9,25,147,208,185,252,139,15,132,96,51,28,155,69,241,240,163,148,58,18,119,51,77,68,120,40,60,158,253,101,87,22,148,107,251,89,208,200,34,54,219,210,99,152,67,161,4,135,134,247,166,38,187,214,89,77,191,106,46,170,43,239,230,120,182,78,224,47,220,124,190,87,25,50,126,42,208,184,186,41,0,60,82,125,168,73,59,45,235,37,73,250,163,170,57,167,197,167,80,17,54,251,198,103,74,245,165,18,101,126,176,223,175,78,179,97,127,47,78,111,107,105,97,0,0,0,75,68,75,0,0,0,0,0,86,69,82,0,0,0,0,0,73,73,73,73,0,0,0,0,77,77,77,77,0,0,0,0,75,67,0,0,0,0,0,0,77,76,89,0,0,0,0,0,78,105,107,111,110,0,0,0,79,76,89,77,80,85,83,0,80,69,78,84,65,88,32,0,83,79,78,89,0,0,0,0,80,97,110,97,115,111,110,105,99,0,0,0,0,0,0,0,70,85,74,73,70,73,76,77,0,0,0,0,0,0,0,0,79,76,89,77,80,0,0,0,76,69,73,67,65,0,0,0,82,105,99,111,104,0,0,0,69,80,83,79,78,0,0,0,65,79,67,0,0,0,0,0,81,86,67,0,0,0,0,0,83,65,77,83,85,78,71,0,78,73,75,79,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,79,78,73,67,65,0,0,0,0,0,0,0,0,0,0,67,97,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,54,53,0,0,0,0,0,78,82,87,32,0,0,0,0,48,49,48,48,0,0,0,0,80,69,78,84,65,88,0,0,48,49,50,51,52,55,56,48,48,48,48,48,48,48,53,56,57,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,62,54,54,54,59,54,65,59,58,59,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,58,37,100,58,37,100,32,37,100,58,37,100,58,37,100,0,0,0,0,0,0,0,69,65,83,84,77,65,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,48,2,64,50,56,58,191,111,16,157,190,110,77,106,190,76,169,157,63,6,127,63,187,55,84,12,188,153,243,28,190,36,183,148,63,0,0,0,0,136,244,6,0,144,244,6,0,152,244,6,0,160,244,6,0,168,244,6,0,176,244,6,0,184,244,6,0,200,244,6,0,216,244,6,0,232,244,6,0,136,244,6,0,248,244,6,0,8,245,6,0,24,245,6,0,40,245,6,0,56,245,6,0,72,245,6,0,88,245,6,0,104,245,6,0,112,245,6,0,120,245,6,0,128,245,6,0,144,245,6,0,136,244,6,0,160,245,6,0,136,244,6,0,136,244,6,0,176,245,6,0,192,245,6,0,136,244,6,0,136,244,6,0,136,244,6,0,136,244,6,0,208,245,6,0,224,245,6,0,136,244,6,0,240,245,6,0,136,244,6,0,0,246,6,0,0,0,0,0,0,0,0,0,0,0,0,0,68,67,66,50,0,0,0,0,86,111,108,97,114,101,0,0,67,97,110,116,97,114,101,0,67,77,111,115,116,0,0,0,86,97,108,101,111,32,54,0,86,97,108,101,111,32,49,49,0,0,0,0,0,0,0,0,86,97,108,101,111,32,50,50,0,0,0,0,0,0,0,0,86,97,108,101,111,32,49,49,112,0,0,0,0,0,0,0,86,97,108,101,111,32,49,55,0,0,0,0,0,0,0,0,65,112,116,117,115,32,49,55,0,0,0,0,0,0,0,0,65,112,116,117,115,32,50,50,0,0,0,0,0,0,0,0,65,112,116,117,115,32,55,53,0,0,0,0,0,0,0,0,65,112,116,117,115,32,54,53,0,0,0,0,0,0,0,0,65,112,116,117,115,32,53,52,83,0,0,0,0,0,0,0,65,112,116,117,115,32,54,53,83,0,0,0,0,0,0,0,65,112,116,117,115,32,55,53,83,0,0,0,0,0,0,0,65,70,105,32,53,0,0,0,65,70,105,32,54,0,0,0,65,70,105,32,55,0,0,0,65,70,105,45,73,73,32,55,0,0,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,55,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,54,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,49,48,0,0,0,0,0,65,112,116,117,115,45,73,73,32,53,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,49,48,82,0,0,0,0,65,112,116,117,115,45,73,73,32,56,0,0,0,0,0,0,65,112,116,117,115,45,73,73,32,49,50,0,0,0,0,0,65,70,105,45,73,73,32,49,50,0,0,0,0,0,0,0,74,80,69,71,95,112,114,101,118,105,101,119,95,100,97,116,97,0,0,0,0,0,0,0,105,99,99,95,99,97,109,101,114,97,95,112,114,111,102,105,108,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,104,111,111,116,79,98,106,95,98,97,99,107,95,116,121,112,101,0,0,0,0,0,0,37,100,0,0,0,0,0,0,105,99,99,95,99,97,109,101,114,97,95,116,111,95,116,111,110,101,95,109,97,116,114,105,120,0,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,99,111,108,111,114,95,109,97,116,114,105,120,0,0,0,37,102,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,110,117,109,98,101,114,95,111,102,95,112,108,97,110,101,115,0,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,114,97,119,95,100,97,116,97,95,114,111,116,97,116,105,111,110,0,0,0,0,0,0,67,97,112,116,80,114,111,102,95,109,111,115,97,105,99,95,112,97,116,116,101,114,110,0,73,109,103,80,114,111,102,95,114,111,116,97,116,105,111,110,95,97,110,103,108,101,0,0,78,101,117,116,79,98,106,95,110,101,117,116,114,97,108,115,0,0,0,0,0,0,0,0,82,111,119,115,95,100,97,116,97,0,0,0,0,0,0,0,148,97,22,73,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,37,250,0,0,40,250,0,0,39,250,0,0,41,250,0,0,255,255,255,255,255,255,255,255,42,250,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,48,49,51,50,52,54,55,0,0,0,0,0,0,0,0,65,100,111,98,101,0,0,0,100,99,114,97,119,0,0,0,85,70,82,97,119,0,0,0,66,105,98,98,108,101,0,0,78,105,107,111,110,32,83,99,97,110,0,0,0,0,0,0,68,105,103,105,116,97,108,32,80,104,111,116,111,32,80,114,111,102,101,115,115,105,111,110,97,108,0,0,0,0,0,0,68,83,76,82,45,65,49,48,48,0,0,0,0,0,0,0,3,4,5,0,0,0,0,0,77,65,84,82,73,88,0,0,76,101,97,102,0,0,0,0,73,109,97,99,111,110,0,0,73,120,112,114,101,115,115,32,37,100,45,77,112,0,0,0,78,101,117,116,114,97,108,32,0,0,0,0,0,0,0,0,37,102,32,37,102,32,37,102,0,0,0,0,0,0,0,0,72,97,115,115,101,108,98,108,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,68,69,66,85,71,32,82,65,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,105,77,65,71,69,32,65,50,48,48,0,0,0,0,0,112,97,114,115,101,95,101,120,116,101,114,110,97,108,95,106,112,101,103,40,41,0,0,0,46,106,112,103,0,0,0,0,46,74,80,71,0,0,0,0,82,101,97,100,105,110,103,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,32,46,46,46,10,0,0,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,109,101,116,97,100,97,116,97,32,102,114,111,109,32,37,115,10,0,0,0,0,0,0,0,0,16,4,243,69,0,0,0,0,80,114,111,49,0,0,0,0,48,49,50,51,52,54,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,48,49,51,52,53,58,48,48,48,48,48,48,48,48,54,48,48,56,0,0,0,0,0,0,48,50,51,52,53,55,48,48,48,48,48,48,48,48,54,48,48,48,0,0,0,0,0,0,48,49,51,52,53,54,55,48,50,56,0,0,0,0,0,0,68,65,84,0,0,0,0,0,84,73,77,0,0,0,0,0,37,100,58,37,100,58,37,100,0,0,0,0,0,0,0,0,72,68,82,0,0,0,0,0,88,32,32,0,0,0,0,0,89,32,32,0,0,0,0,0,84,88,32,0,0,0,0,0,84,89,32,0,0,0,0,0,69,79,72,68,0,0,0,0,82,111,108,108,101,105,0,0,100,53,51,48,102,108,101,120,0,0,0,0,0,0,0,0,77,69,84,65,0,0,0,0,84,72,85,77,66,0,0,0,82,65,87,48,0,0,0,0,48,54,53,51,0,0,0,0,32,99,97,109,101,114,97,0,80,104,97,115,101,32,79,110,101,0,0,0,0,0,0,0,76,105,103,104,116,80,104,97,115,101,0,0,0,0,0,0,72,32,49,48,0,0,0,0,72,32,50,48,0,0,0,0,72,32,50,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,82,73,70,70,0,0,0,0,76,73,83,84,0,0,0,0,110,99,116,103,0,0,0,0,73,68,73,84,0,0,0,0,37,42,115,32,37,115,32,37,100,32,37,100,58,37,100,58,37,100,32,37,100,0,0,0,109,111,111,118,0,0,0,0,117,100,116,97,0,0,0,0,67,78,84,72,0,0,0,0,67,78,68,65,0,0,0,0,83,77,97,76,0,0,0,0,118,37,100,32,37,100,120,37,100,0,0,0,0,0,0,0,67,73,78,69,0,0,0,0,37,115,58,32,84,97,105,108,32,105,115,32,109,105,115,115,105,110,103,44,32,112,97,114,115,105,110,103,32,102,114,111,109,32,104,101,97,100,46,46,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,83,79,0,0,0,0,0,67,65,77,77,65,78,85,70,0,0,0,0,0,0,0,0,67,65,77,77,79,68,69,76,0,0,0,0,0,0,0,0,87,66,95,68,69,83,67,0,84,73,77,69,0,0,0,0,69,88,80,84,73,77,69,0,65,80,69,82,84,85,82,69,0,0,0,0,0,0,0,0,70,76,69,78,71,84,72,0,176,56,7,0,0,0,0,0,174,44,78,241,165,251,151,246,186,38,193,9,53,251,247,8,180,20,0,0,0,0,0,0,200,56,7,0,0,0,0,0,144,83,235,233,231,242,102,9,74,31,97,254,254,27,147,5,30,8,0,0,0,0,0,0,216,56,7,0,0,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,232,56,7,0,0,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,248,56,7,0,0,0,0,0,77,38,127,245,224,250,85,233,8,51,252,11,122,246,3,12,71,34,0,0,0,0,0,0,8,57,7,0,0,0,160,15,44,24,195,250,134,252,0,228,153,56,121,11,176,245,156,12,35,33,0,0,0,0,0,0,24,57,7,0,0,0,150,60,229,26,15,253,168,252,192,238,232,45,105,10,14,251,89,9,92,21,0,0,0,0,0,0,40,57,7,0,0,0,128,60,66,26,133,253,61,252,65,239,172,48,236,7,116,252,114,8,36,22,0,0,0,0,0,0,64,57,7,0,0,0,240,60,108,18,91,2,194,252,138,225,114,60,176,9,40,250,145,7,251,25,0,0,0,0,0,0,88,57,7,0,0,0,108,14,203,24,33,254,52,252,151,223,82,62,176,9,80,248,83,8,225,29,0,0,0,0,0,0,104,57,7,0,0,0,130,60,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,120,57,7,0,0,0,16,53,100,28,198,251,55,252,166,239,63,46,103,10,199,252,237,7,207,22,0,0,0,0,0,0,144,57,7,0,0,0,16,53,188,26,28,252,168,252,220,240,241,45,92,9,175,253,236,6,54,24,0,0,0,0,0,0,160,57,7,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,176,57,7,0,0,0,0,0,75,55,55,236,154,250,106,230,41,57,247,7,169,249,32,7,161,25,0,0,0,0,0,0,192,57,7,0,0,0,255,15,199,25,231,253,133,252,121,224,167,61,120,9,65,248,186,8,38,29,0,0,0,0,0,0,208,57,7,0,0,0,0,0,113,24,209,254,24,252,56,225,5,61,92,9,78,249,112,7,134,27,0,0,0,0,0,0,224,57,7,0,0,0,96,63,183,23,21,253,168,252,27,226,5,60,137,9,23,248,249,9,147,28,0,0,0,0,0,0,240,57,7,0,0,0,147,61,56,19,104,2,175,253,163,230,140,54,224,10,18,249,106,12,93,27,0,0,0,0,0,0,0,58,7,0,0,0,247,47,63,26,30,252,99,252,200,238,138,48,163,8,137,252,81,8,163,23,0,0,0,0,0,0,16,58,7,0,0,0,199,59,122,27,220,252,10,252,188,238,20,49,10,8,173,252,202,7,126,22,0,0,0,0,0,0,32,58,7,0,0,0,15,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,48,58,7,0,0,0,160,15,5,32,48,248,162,251,198,229,255,55,32,10,24,246,106,12,74,32,0,0,0,0,0,0,64,58,7,0,0,0,255,15,130,23,151,253,59,252,59,222,9,62,159,11,6,250,183,6,218,29,0,0,0,0,0,0,80,58,7,0,0,0,142,14,142,27,35,250,34,252,36,224,184,60,252,10,2,251,134,5,116,30,0,0,0,0,0,0,96,58,7,0,0,0,13,57,152,22,250,254,203,252,141,226,216,58,112,10,66,248,121,10,3,29,0,0,0,0,0,0,112,58,7,0,0,0,121,52,155,18,200,2,122,253,91,229,63,56,80,10,127,248,204,12,161,25,0,0,0,0,0,0,128,58,7,0,0,0,215,61,29,27,116,251,167,252,15,241,77,45,230,9,96,254,4,6,151,23,0,0,0,0,0,0,144,58,7,0,0,0,16,53,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,160,58,7,0,0,0,77,53,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,176,58,7,0,0,0,0,60,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,192,58,7,0,0,0,67,14,115,26,141,251,47,252,118,225,19,59,112,11,36,251,157,5,109,29,0,0,0,0,0,0,208,58,7,0,0,0,16,53,44,25,120,252,131,252,45,238,20,48,231,9,121,252,224,7,72,26,0,0,0,0,0,0,224,58,7,0,0,0,194,55,61,25,117,252,142,252,52,239,152,47,74,9,205,252,152,7,43,23,0,0,0,0,0,0,240,58,7,0,0,0,0,0,202,25,183,252,85,252,136,238,170,48,199,8,49,252,247,7,4,24,0,0,0,0,0,0,0,59,7,0,0,0,176,59,227,22,45,255,94,252,193,223,145,62,49,9,60,249,95,7,24,29,0,0,0,0,0,0,24,59,7,0,0,0,128,14,117,25,166,253,157,252,12,224,54,62,74,9,174,249,235,6,209,29,0,0,0,0,0,0,48,59,7,0,0,0,176,59,126,23,36,255,229,252,243,239,238,46,57,9,207,253,32,7,155,22,0,0,0,0,0,0,72,59,7,0,0,0,176,59,147,24,228,253,48,252,98,223,17,63,7,9,78,249,66,7,158,28,0,0,0,0,0,0,96,59,7,0,0,0,128,14,96,24,46,254,202,252,12,224,209,61,196,9,247,248,146,7,106,31,0,0,0,0,0,0,120,59,7,0,0,0,128,14,120,24,186,253,44,253,136,223,76,62,200,9,48,249,127,7,216,33,0,0,0,0,0,0,144,59,7,0,0,0,32,14,22,17,47,14,49,249,160,226,108,59,168,9,180,244,48,14,225,31,0,0,0,0,0,0,160,59,7,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,176,59,7,0,0,0,78,60,191,26,154,253,10,252,195,237,193,49,91,8,83,251,184,9,190,26,0,0,0,0,0,0,192,59,7,0,0,0,32,14,150,26,77,255,4,252,95,224,31,64,151,6,61,243,140,16,10,30,0,0,0,0,0,0,208,59,7,0,85,3,0,0,187,69,148,214,154,3,255,226,22,65,251,2,180,241,52,14,6,87,0,0,0,0,0,0,224,59,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,59,7,0,0,0,0,0,76,235,118,38,240,6,108,13,172,2,99,15,92,234,151,38,56,24,132,250,167,43,217,0,16,60,7,0,0,0,0,0,63,237,3,37,160,7,110,11,75,6,254,15,117,235,180,39,59,23,238,249,131,42,35,2,40,60,7,0,0,0,0,0,85,43,190,240,252,251,73,236,204,48,63,11,21,252,214,6,185,21,0,0,0,0,0,0,64,60,7,0,0,0,0,0,145,47,47,237,211,251,180,249,136,38,1,8,158,255,82,3,119,17,0,0,0,0,0,0,88,60,7,0,0,0,0,0,188,51,131,234,32,251,28,250,130,38,143,7,242,254,59,4,14,17,0,0,0,0,0,0,112,60,7,0,0,0,0,0,50,29,3,247,201,253,40,240,192,44,159,11,34,255,204,2,85,16,0,0,0,0,0,0,136,60,7,0,0,0,0,0,84,31,129,245,86,253,136,241,103,46,4,8,59,252,129,7,180,21,0,0,0,0,0,0,160,60,7,0,0,0,0,0,210,28,25,251,237,251,8,240,219,47,0,8,148,252,154,7,173,22,0,0,0,0,0,0,184,60,7,0,0,0,0,0,86,237,251,36,124,8,135,18,139,251,248,16,230,235,180,38,189,23,226,249,43,43,45,2,208,60,7,0,0,0,0,0,127,35,123,245,231,251,197,229,46,56,233,9,13,247,3,11,110,30,0,0,0,0,0,0,232,60,7,0,0,0,0,0,252,35,35,245,207,251,83,230,109,55,45,10,4,247,28,11,240,29,0,0,0,0,0,0,0,61,7,0,0,0,0,0,29,38,200,244,91,252,172,232,37,54,253,8,170,249,24,9,44,28,0,0,0,0,0,0,24,61,7,0,0,0,0,0,149,38,65,241,153,252,67,226,215,57,0,12,88,250,25,5,61,29,0,0,0,0,0,0,48,61,7,0,0,0,0,0,130,37,17,241,87,252,88,244,231,44,139,6,105,254,135,5,185,19,0,0,0,0,0,0,72,61,7,0,0,0,0,0,200,28,163,247,170,253,11,234,198,51,65,10,118,250,160,6,111,22,0,0,0,0,0,0,96,61,7,0,0,0,0,0,78,39,62,242,25,252,37,226,13,59,170,10,3,253,49,3,155,28,0,0,0,0,0,0,120,61,7,0,34,0,0,0,197,239,90,38,249,5,99,15,231,255,170,17,111,234,142,38,210,25,66,247,121,42,62,5,144,61,7,0,0,0,0,0,157,236,168,38,187,8,34,18,37,252,198,16,214,235,27,39,227,22,22,249,222,43,65,2,168,61,7,0,0,0,0,0,70,41,188,241,151,251,104,230,70,57,214,7,107,247,21,10,246,29,0,0,0,0,0,0,192,61,7,0,0,0,0,0,62,33,73,246,84,252,43,229,151,55,84,11,242,246,13,11,53,35,0,0,0,0,0,0,216,61,7,0,0,0,0,0,227,31,227,246,69,252,230,229,94,55,191,10,227,247,37,10,105,31,0,0,0,0,0,0,240,61,7,0,0,0,0,0,178,34,245,245,161,252,52,231,154,55,240,8,20,250,124,8,169,25,0,0,0,0,0,0,8,62,7,0,0,0,0,0,91,34,78,246,227,252,132,225,43,60,13,10,114,250,204,7,170,27,0,0,0,0,0,0,32,62,7,0,0,0,0,0,248,38,30,241,192,252,53,228,127,56,90,11,123,252,221,3,209,30,0,0,0,0,0,0,56,62,7,0,0,0,0,0,86,48,104,236,231,251,115,249,174,38,30,8,173,255,84,3,75,18,0,0,0,0,0,0,80,62,7,0,0,0,0,0,128,52,248,232,1,251,44,251,126,37,139,7,76,255,233,3,43,18,0,0,0,0,0,0,104,62,7,0,0,0,0,0,32,31,251,245,132,253,199,244,201,41,209,9,180,0,155,2,115,16,0,0,0,0,0,0,128,62,7,0,0,0,0,0,103,31,173,245,114,253,57,241,222,43,114,11,50,255,178,2,98,16,0,0,0,0,0,0,152,62,7,0,0,0,0,0,49,27,107,249,73,253,239,237,145,50,44,7,166,251,104,8,142,21,0,0,0,0,0,0,176,62,7,0,0,0,0,0,178,25,253,254,10,254,170,232,230,50,237,12,204,254,34,4,106,19,0,0,0,0,0,0,200,62,7,0,0,0,0,0,144,48,111,237,33,251,194,247,195,41,93,6,100,254,87,6,62,19,0,0,0,0,0,0,224,62,7,0,0,0,0,0,105,51,181,234,192,250,59,248,158,41,251,5,209,255,247,4,91,19,0,0,0,0,0,0,248,62,7,0,0,0,0,0,74,42,186,241,1,252,113,243,46,44,114,7,0,0,231,3,96,19,0,0,0,0,0,0,16,63,7,0,0,0,0,0,225,48,201,238,38,251,136,245,36,40,101,9,146,252,167,8,126,18,0,0,0,0,0,0,40,63,7,0,0,0,0,0,231,60,254,230,200,249,11,235,142,51,120,8,236,250,32,7,211,19,0,0,0,0,0,0,64,63,7,0,0,0,0,0,161,59,207,231,234,249,227,239,84,47,218,7,136,252,103,6,100,20,0,0,0,0,0,0,88,63,7,0,0,0,0,0,121,55,68,235,35,249,57,232,136,56,81,6,113,247,33,12,228,20,0,0,0,0,0,0,112,63,7,0,0,0,0,0,68,51,47,235,146,250,238,241,138,45,152,7,180,249,47,11,21,19,0,0,0,0,0,0,136,63,7,0,0,0,0,0,211,36,36,244,65,252,235,245,175,41,119,7,241,251,190,7,78,17,0,0,0,0,0,0,160,63,7,0,0,0,0,0,237,56,150,234,246,249,14,251,71,38,188,5,240,251,120,7,226,14,0,0,0,0,0,0,184,63,7,0,0,0,0,0,238,54,177,235,90,250,152,237,182,48,195,8,250,250,236,7,228,18,0,0,0,0,0,0,208,63,7,0,0,0,0,0,54,55,56,234,9,250,57,248,223,41,249,4,122,251,137,7,253,13,0,0,0,0,0,0,240,63,7,0,0,0,0,0,74,54,44,236,89,250,131,250,125,39,17,5,12,255,68,7,103,14,0,0,0,0,0,0,8,64,7,0,0,0,0,0,114,45,172,240,152,251,152,236,154,50,223,7,204,249,88,10,38,28,0,0,0,0,0,0,24,64,7,0,0,0,0,0,67,42,223,240,181,251,217,236,162,53,151,4,37,249,167,14,24,18,0,0,0,0,0,0,40,64,7,0,128,0,255,15,62,38,246,242,165,253,239,246,238,39,51,8,168,254,249,4,191,18,0,0,0,0,0,0,56,64,7,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,72,64,7,0,0,0,0,0,62,13,224,1,12,254,224,252,26,14,84,1,218,253,32,9,168,4,0,0,0,0,0,0,88,253,6,0,0,0,0,0,215,78,57,239,89,254,156,240,226,59,145,15,232,254,6,19,72,38,0,0,0,0,0,0,88,64,7,0,0,0,30,15,97,30,5,5,227,251,192,219,159,64,100,11,163,241,47,22,148,27,0,0,0,0,0,0,112,64,7,0,0,0,0,0,171,26,170,248,36,253,19,223,140,62,4,10,64,253,80,2,233,27,0,0,0,0,0,0,128,64,7,0,0,0,0,0,36,43,208,240,160,251,176,227,64,59,160,8,5,250,229,8,133,31,0,0,0,0,0,0,144,64,7,0,0,0,0,0,223,35,34,246,202,251,219,226,223,58,14,10,26,248,136,9,191,33,0,0,0,0,0,0,160,64,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,176,64,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,192,64,7,0,0,0,233,15,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,208,64,7,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,224,64,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,240,64,7,0,2,2,0,0,1,45,253,238,215,251,132,230,199,53,242,11,70,250,192,7,157,23,0,0,0,0,0,0,0,65,7,0,0,0,0,0,9,48,238,236,78,251,198,247,195,41,87,6,168,255,32,5,182,18,0,0,0,0,0,0,16,65,7,0,0,0,0,0,20,39,109,243,79,251,132,228,199,58,59,8,185,248,5,10,56,30,0,0,0,0,0,0,32,65,7,0,0,2,255,63,137,44,110,238,224,250,32,236,207,49,53,10,186,252,32,6,53,23,0,0,0,0,0,0,48,65,7,0,128,0,0,0,204,48,174,237,134,250,135,228,63,60,111,6,29,250,63,8,17,30,0,0,0,0,0,0,64,65,7,0,0,0,0,0,31,46,252,237,242,250,33,221,72,66,196,7,184,247,181,10,70,31,0,0,0,0,0,0,80,65,7,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,96,65,7,0,0,0,0,0,50,34,84,245,5,252,220,227,221,58,228,8,90,249,30,9,70,27,0,0,0,0,0,0,112,65,7,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,128,65,7,0,0,0,0,0,164,46,177,238,25,251,146,229,92,56,238,9,31,252,141,4,253,28,0,0,0,0,0,0,144,65,7,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,160,65,7,0,0,0,0,0,164,37,12,245,36,252,238,226,192,58,29,10,245,248,7,9,173,33,0,0,0,0,0,0,176,65,7,0,0,0,0,0,84,49,233,236,135,250,51,229,148,58,170,7,106,247,222,10,179,27,0,0,0,0,0,0,192,65,7,0,0,0,0,0,206,39,78,242,224,250,15,228,203,58,190,8,45,248,95,9,81,29,0,0,0,0,0,0,208,65,7,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,224,65,7,0,0,0,0,0,251,40,161,242,135,251,39,227,179,58,234,9,239,248,227,8,244,33,0,0,0,0,0,0,240,65,7,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,0,66,7,0,0,0,0,0,55,48,93,238,251,250,3,228,51,58,131,9,153,248,192,9,96,34,0,0,0,0,0,0,16,66,7,0,0,0,0,0,185,45,90,239,173,251,22,247,39,42,173,6,213,253,177,6,81,19,0,0,0,0,0,0,32,66,7,0,0,0,0,0,213,83,201,213,95,250,228,246,103,41,207,7,33,1,107,3,23,30,0,0,0,0,0,0,48,66,7,0,0,0,0,0,12,48,10,236,232,250,99,220,247,66,206,7,101,248,144,9,164,31,0,0,0,0,0,0,64,66,7,0,0,0,104,15,152,48,142,240,97,251,157,251,202,37,172,6,173,255,78,6,246,15,0,0,0,0,0,0,88,66,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,104,66,7,0,0,0,0,0,122,53,18,235,62,250,215,242,80,45,206,7,124,255,18,6,43,17,0,0,0,0,0,0,120,66,7,0,0,0,0,0,53,47,137,237,71,252,71,243,225,44,210,7,1,254,254,7,240,17,0,0,0,0,0,0,144,66,7,0,0,0,0,0,53,47,137,237,71,252,71,243,225,44,210,7,1,254,254,7,240,17,0,0,0,0,0,0,168,66,7,0,0,0,0,0,96,41,90,239,16,252,70,242,91,44,161,9,154,252,233,7,242,24,0,0,0,0,0,0,184,66,7,0,0,0,0,0,96,41,90,239,16,252,70,242,91,44,161,9,154,252,233,7,242,24,0,0,0,0,0,0,200,66,7,0,0,0,0,0,129,47,151,238,211,251,86,236,74,50,96,9,229,252,188,6,248,26,0,0,0,0,0,0,216,66,7,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,232,66,7,0,0,0,0,0,248,45,149,236,147,251,216,236,127,50,135,8,32,254,187,6,253,17,0,0,0,0,0,0,248,66,7,0,0,0,0,0,40,48,120,235,136,251,139,238,127,50,139,6,169,255,11,5,255,16,0,0,0,0,0,0,8,67,7,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,24,67,7,0,0,0,0,0,78,43,53,238,185,252,72,242,46,44,213,9,209,252,61,5,52,23,0,0,0,0,0,0,40,67,7,0,0,0,0,0,11,42,48,238,107,252,238,242,47,44,18,9,37,254,111,4,211,22,0,0,0,0,0,0,56,67,7,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,72,67,7,0,0,0,0,0,10,33,109,246,169,252,11,238,159,48,103,9,61,250,178,9,126,25,0,0,0,0,0,0,88,67,7,0,0,0,0,0,173,40,100,240,31,252,119,241,120,45,57,9,35,253,4,6,123,23,0,0,0,0,0,0,104,67,7,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,120,67,7,0,0,0,0,0,10,33,109,246,169,252,11,238,159,48,103,9,61,250,178,9,126,25,0,0,0,0,0,0,136,67,7,0,0,0,0,0,197,52,201,231,26,251,178,238,189,49,73,7,181,254,161,5,158,19,0,0,0,0,0,0,152,67,7,0,0,0,0,0,36,36,112,245,216,251,251,232,185,55,181,6,179,251,37,9,253,16,0,0,0,0,0,0,168,67,7,0,0,0,0,0,113,27,121,250,64,253,188,235,197,53,144,5,32,251,182,10,150,23,0,0,0,0,0,0,184,67,7,0,0,0,0,0,67,54,89,232,221,252,47,254,191,38,130,2,73,8,82,0,11,5,0,0,0,0,0,0,200,67,7,0,8,0,0,0,115,68,37,237,50,246,244,2,98,33,119,255,225,23,113,6,202,8,0,0,0,0,0,0,216,67,7,0,8,0,0,0,140,80,108,226,15,245,153,255,89,39,116,254,223,13,23,255,172,8,0,0,0,0,0,0,232,67,7,0,0,0,0,0,116,42,196,248,124,253,255,249,75,43,228,1,39,9,116,2,168,8,0,0,0,0,0,0,248,67,7,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,8,68,7,0,0,0,0,0,96,41,98,247,57,252,104,248,165,45,230,0,158,8,158,2,249,4,0,0,0,0,0,0,24,68,7,0,0,0,0,0,170,38,116,245,84,252,82,246,187,47,206,0,193,7,122,2,7,4,0,0,0,0,0,0,40,68,7,0,178,0,0,0,222,95,148,213,183,242,46,250,106,44,215,254,42,11,163,253,153,12,0,0,0,0,0,0,56,68,7,0,177,0,0,0,2,80,252,227,203,243,247,251,170,40,227,254,238,9,226,0,64,12,0,0,0,0,0,0,72,68,7,0,177,0,0,0,65,92,65,216,179,243,250,247,229,45,240,254,26,10,23,254,125,13,0,0,0,0,0,0,88,68,7,0,176,0,0,0,39,51,169,231,154,0,189,47,235,255,167,247,127,3,250,17,210,8,0,0,0,0,0,0,104,68,7,0,173,0,0,0,68,71,49,231,77,245,233,252,185,43,247,253,127,14,127,255,242,10,0,0,0,0,0,0,120,68,7,0,0,0,0,0,255,45,4,233,182,3,84,37,54,7,250,250,5,252,77,24,168,10,0,0,0,0,0,0,136,68,7,0,0,0,0,0,239,64,91,231,125,250,8,239,99,54,67,1,237,8,18,1,110,11,0,0,0,0,0,0,152,68,7,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,176,68,7,0,0,0,0,0,118,21,89,9,24,255,229,230,26,54,30,11,172,248,157,15,69,21,0,0,0,0,0,0,200,68,7,0,0,0,0,0,111,30,56,12,248,252,116,222,74,64,247,7,105,246,166,15,54,24,0,0,0,0,0,0,224,68,7,0,0,0,0,0,30,64,84,232,66,250,29,242,237,50,217,1,241,9,122,0,84,19,0,0,0,0,0,0,248,68,7,0,0,0,0,0,187,82,132,223,154,244,109,252,11,43,91,255,149,13,76,255,114,16,0,0,0,0,0,0,8,69,7,0,0,0,0,0,186,37,14,243,201,252,213,235,151,49,208,10,194,250,51,7,156,23,0,0,0,0,0,0,24,69,7,0,0,0,124,15,15,41,4,241,178,251,222,228,251,56,254,9,55,250,0,7,102,24], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+453384);
/* memory initializer */ allocate([40,69,7,0,0,0,255,15,5,50,202,237,160,250,200,226,163,59,56,9,166,249,146,8,224,30,0,0,0,0,0,0,56,69,7,0,0,0,0,0,49,44,25,242,179,251,203,240,115,46,209,8,66,251,94,9,44,19,0,0,0,0,0,0,80,69,7,0,0,0,0,0,185,49,147,237,92,251,169,250,227,35,22,10,18,1,92,3,59,17,0,0,0,0,0,0,104,69,7,0,0,0,237,15,229,45,48,240,227,250,181,248,76,41,209,5,118,255,169,5,170,17,0,0,0,0,0,0,128,69,7,0,0,0,241,14,1,44,66,239,32,252,170,237,55,48,87,10,190,251,243,5,71,21,0,0,0,0,0,0,152,69,7,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,168,69,7,0,0,0,0,0,112,15,141,8,193,1,211,229,249,56,227,8,72,238,181,28,136,25,0,0,0,0,0,0,184,69,7,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,200,69,7,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,216,69,7,0,0,0,0,0,234,30,134,5,90,251,183,221,198,64,232,8,5,245,253,17,186,21,0,0,0,0,0,0,80,250,6,0,0,0,0,0,44,32,210,6,222,250,197,223,81,62,124,9,167,241,154,22,139,22,0,0,0,0,0,0,232,69,7,0,0,0,0,0,221,29,19,10,173,250,15,222,77,65,223,7,128,241,53,23,73,23,0,0,0,0,0,0,248,69,7,0,110,0,0,0,55,65,79,241,153,247,155,0,210,37,163,0,105,13,183,3,40,19,0,0,0,0,0,0,8,70,7,0,0,0,125,15,23,35,130,244,61,252,100,230,140,56,189,8,134,246,71,11,78,31,0,0,0,0,0,0,32,70,7,0,0,0,125,15,104,44,202,240,38,251,135,230,22,56,35,9,85,246,240,11,117,28,0,0,0,0,0,0,56,70,7,0,0,0,125,15,184,35,39,245,26,252,236,229,220,56,233,8,90,246,203,11,64,30,0,0,0,0,0,0,80,70,7,0,0,0,139,15,58,36,13,246,113,251,228,223,195,63,151,7,31,247,160,10,148,32,0,0,0,0,0,0,104,70,7,0,0,0,0,0,112,33,73,246,38,252,80,224,175,60,211,10,71,251,44,5,63,30,0,0,0,0,0,0,128,70,7,0,0,0,143,15,137,35,90,245,227,251,119,224,146,60,202,10,58,252,213,3,83,30,0,0,0,0,0,0,152,70,7,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,176,70,7,0,0,0,251,15,44,40,45,243,194,251,235,224,146,61,12,9,195,252,114,3,244,25,0,0,0,0,0,0,192,70,7,0,0,0,251,15,255,39,224,243,181,251,155,224,111,61,147,9,97,252,157,3,215,26,0,0,0,0,0,0,208,70,7,0,0,0,0,0,194,34,35,252,247,251,36,243,99,45,138,6,107,253,106,12,96,20,0,0,0,0,0,0,224,70,7,0,0,0,0,0,14,23,91,252,242,252,233,220,79,65,50,9,134,250,175,5,64,25,0,0,0,0,0,0,240,70,7,0,0,0,0,0,153,29,138,247,98,252,226,226,232,60,142,7,183,246,248,10,158,33,0,0,0,0,0,0,0,71,7,0,0,0,0,0,22,30,59,247,49,252,102,220,90,67,83,7,137,245,239,11,73,33,0,0,0,0,0,0,16,71,7,0,0,0,0,0,132,65,138,237,163,247,69,226,97,61,180,7,226,244,166,13,49,37,0,0,0,0,0,0,32,71,7,0,0,0,188,15,175,32,56,247,5,253,202,221,63,64,118,9,9,250,14,6,117,31,0,0,0,0,0,0,48,71,7,0,0,0,0,0,78,22,123,252,153,253,110,222,233,64,232,7,97,244,24,16,174,26,0,0,0,0,0,0,64,71,7,0,0,0,0,0,247,39,47,245,25,251,147,223,28,62,248,9,227,252,168,2,236,27,0,0,0,0,0,0,80,71,7,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,96,71,7,0,0,0,0,0,231,30,137,247,211,252,49,235,94,51,104,9,248,250,179,9,32,31,0,0,0,0,0,0,112,71,7,0,0,0,185,15,101,27,128,250,133,253,108,235,102,50,80,10,66,250,241,10,211,28,0,0,0,0,0,0,128,71,7,0,0,0,0,0,76,27,152,250,54,253,1,234,98,52,143,9,51,250,156,8,150,28,0,0,0,0,0,0,144,71,7,0,0,0,0,0,70,35,56,248,53,253,239,222,174,63,207,8,127,245,145,12,133,31,0,0,0,0,0,0,160,71,7,0,0,0,0,0,3,28,62,248,120,253,107,224,195,60,158,10,134,247,208,9,33,29,0,0,0,0,0,0,176,71,7,0,0,0,0,0,124,34,154,246,74,253,246,236,59,49,237,9,108,253,229,5,163,29,0,0,0,0,0,0,192,71,7,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,208,71,7,0,0,0,0,0,115,34,17,246,113,252,191,220,32,66,103,8,207,250,189,4,1,33,0,0,0,0,0,0,224,71,7,0,0,0,0,0,80,27,124,249,218,252,54,224,132,61,239,9,150,252,82,3,217,30,0,0,0,0,0,0,240,71,7,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,0,72,7,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,16,72,7,0,0,0,0,0,150,33,224,244,167,252,14,234,38,53,147,8,22,252,237,6,225,27,0,0,0,0,0,0,32,72,7,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,127,246,10,11,128,31,0,0,0,0,0,0,48,72,7,0,0,0,230,61,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,64,72,7,0,0,0,0,0,130,32,216,243,233,251,33,231,6,56,131,8,36,252,102,6,250,24,0,0,0,0,0,0,80,72,7,0,0,0,0,0,76,27,152,250,54,253,1,234,98,52,143,9,51,250,156,8,150,28,0,0,0,0,0,0,96,72,7,0,0,0,0,0,117,34,134,244,239,252,174,239,110,47,239,8,200,252,115,6,204,26,0,0,0,0,0,0,112,72,7,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,128,72,7,0,0,0,7,62,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,144,72,7,0,0,0,0,0,242,31,59,247,159,253,7,237,106,48,216,10,73,251,38,8,130,28,0,0,0,0,0,0,160,72,7,0,0,0,0,0,32,34,102,246,89,252,141,220,254,65,203,8,182,250,218,4,71,32,0,0,0,0,0,0,176,72,7,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,192,72,7,0,0,0,0,0,130,32,216,243,233,251,33,231,6,56,131,8,36,252,102,6,250,24,0,0,0,0,0,0,208,72,7,0,0,0,0,0,223,23,57,245,154,254,12,236,14,42,247,16,255,252,155,6,94,31,0,0,0,0,0,0,224,72,7,0,0,0,0,0,60,35,182,244,53,253,73,238,148,48,44,9,90,252,127,7,174,27,0,0,0,0,0,0,240,72,7,0,0,0,0,0,203,31,133,247,105,253,213,221,157,64,247,8,123,248,216,7,157,31,0,0,0,0,0,0,0,73,7,0,0,0,0,0,52,30,138,246,235,252,210,223,12,62,194,9,165,252,15,3,162,28,0,0,0,0,0,0,16,73,7,0,0,0,0,0,153,36,133,243,233,252,120,238,142,48,253,8,131,252,4,7,216,26,0,0,0,0,0,0,32,73,7,0,0,0,0,0,186,30,196,247,213,253,251,236,195,48,121,10,104,251,21,8,77,29,0,0,0,0,0,0,48,73,7,0,0,0,0,0,181,33,150,246,141,252,161,220,44,66,123,8,46,250,83,5,72,33,0,0,0,0,0,0,64,73,7,0,0,0,0,15,141,28,133,250,249,253,230,222,136,62,62,10,126,246,10,11,128,31,0,0,0,0,0,0,80,73,7,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,96,73,7,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,112,73,7,0,0,0,221,3,94,241,115,41,129,6,149,37,58,249,66,8,171,246,170,27,248,11,78,13,228,23,12,255,128,73,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,144,73,7,0,0,0,0,0,86,51,200,239,196,249,209,237,86,48,234,8,23,249,136,10,55,26,0,0,0,0,0,0,160,73,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,176,73,7,0,0,0,0,0,118,38,219,247,5,252,50,243,101,43,122,8,250,252,86,8,113,22,0,0,0,0,0,0,192,73,7,0,0,0,0,0,16,44,20,242,166,250,209,237,86,48,234,8,113,250,120,8,20,21,0,0,0,0,0,0,208,73,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,224,73,7,0,0,0,0,0,85,234,242,45,141,8,182,22,210,253,14,13,196,236,112,38,61,23,176,2,123,35,96,0,240,73,7,0,0,0,0,0,133,36,85,244,23,252,17,225,150,61,218,8,206,247,120,10,183,26,0,0,0,0,0,0,0,74,7,0,0,0,0,0,8,235,214,44,64,9,161,21,143,255,76,12,151,236,37,39,150,22,10,3,68,35,211,0,16,74,7,0,0,0,0,0,162,30,240,246,32,252,38,224,102,61,39,10,182,251,62,5,136,29,0,0,0,0,0,0,32,74,7,0,0,0,0,0,41,33,233,245,244,251,141,224,223,60,83,10,229,250,127,5,186,28,0,0,0,0,0,0,48,74,7,0,0,0,0,0,35,31,246,246,111,252,253,222,146,61,78,11,94,250,240,5,186,29,0,0,0,0,0,0,64,74,7,0,0,0,0,0,6,32,65,247,44,253,249,236,101,48,238,10,237,251,2,8,13,28,0,0,0,0,0,0,80,74,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,104,74,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,128,74,7,0,0,0,0,0,226,37,217,242,110,252,158,237,40,49,64,9,187,252,200,3,169,22,0,0,0,0,0,0,152,74,7,0,0,0,0,0,168,44,161,241,169,251,159,243,231,43,154,8,233,252,100,5,103,17,0,0,0,0,0,0,176,74,7,0,0,0,0,0,45,43,83,239,0,252,72,248,198,39,40,8,242,253,239,4,117,17,0,0,0,0,0,0,200,74,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,224,74,7,0,200,0,0,0,81,40,176,240,93,252,66,245,138,43,32,7,70,254,9,6,163,21,0,0,0,0,0,0,248,74,7,0,0,0,0,0,70,23,233,249,197,253,75,240,189,44,123,11,134,253,12,6,223,19,0,0,0,0,0,0,8,75,7,0,0,0,0,0,70,23,233,249,197,253,75,240,189,44,123,11,134,253,12,6,223,19,0,0,0,0,0,0,24,75,7,0,0,0,0,0,61,10,168,252,244,1,137,238,57,34,79,22,215,250,84,10,169,46,0,0,0,0,0,0,40,75,7,0,200,0,0,0,212,25,194,250,150,253,246,242,47,43,63,10,82,255,0,7,211,19,0,0,0,0,0,0,56,75,7,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,72,75,7,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,88,75,7,0,0,0,0,0,188,25,231,250,75,253,51,243,235,42,74,10,157,254,224,7,242,19,0,0,0,0,0,0,104,75,7,0,0,0,0,0,34,35,149,245,159,252,14,238,36,48,248,9,69,253,250,6,116,24,0,0,0,0,0,0,120,75,7,0,0,0,0,0,12,41,204,243,7,251,65,232,214,55,109,7,139,249,2,9,93,24,0,0,0,0,0,0,136,75,7,0,0,0,0,0,205,40,222,242,229,250,18,226,74,61,10,8,145,251,152,4,178,29,0,0,0,0,0,0,152,75,7,0,0,0,0,0,12,40,53,242,185,251,54,228,2,58,132,9,85,250,187,6,221,24,0,0,0,0,0,0,168,75,7,0,0,0,0,0,41,42,49,241,134,251,182,226,73,59,184,9,146,250,41,6,153,28,0,0,0,0,0,0,184,75,7,0,0,0,0,0,158,33,51,246,10,252,210,223,98,61,143,10,82,252,211,3,80,30,0,0,0,0,0,0,200,75,7,0,0,0,252,15,201,49,108,238,120,250,82,232,206,56,44,6,114,248,208,8,203,25,0,0,0,0,0,0,216,75,7,0,0,0,0,0,70,46,97,237,79,252,141,228,6,62,65,4,117,245,26,16,119,32,0,0,0,0,0,0,232,75,7,0,0,0,252,15,117,51,132,237,37,250,81,233,212,54,103,7,3,248,148,9,230,27,0,0,0,0,0,0,248,75,7,0,0,0,0,0,148,30,31,249,164,254,100,233,247,54,38,7,219,244,166,17,157,25,0,0,0,0,0,0,8,76,7,0,0,0,0,0,1,35,87,246,196,251,213,224,118,62,19,8,241,246,219,11,57,32,0,0,0,0,0,0,24,76,7,0,0,0,188,15,208,31,187,248,169,251,173,225,22,62,137,7,183,248,238,9,183,29,0,0,0,0,0,0,40,76,7,0,0,0,153,15,15,37,197,244,165,251,147,226,246,60,218,7,174,249,52,8,221,28,0,0,0,0,0,0,56,76,7,0,0,0,0,0,25,24,53,250,235,255,61,228,169,57,232,9,168,244,252,13,120,33,0,0,0,0,0,0,72,76,7,0,0,0,106,15,152,34,234,245,254,251,175,225,150,61,34,8,39,248,15,10,45,29,0,0,0,0,0,0,88,76,7,0,0,0,215,15,42,34,135,246,185,251,86,226,252,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,104,76,7,0,0,0,210,15,41,34,135,246,185,251,86,226,253,60,25,8,12,249,5,9,248,28,0,0,0,0,0,0,120,76,7,0,0,0,0,0,200,31,80,248,213,254,151,234,174,53,79,7,4,246,109,16,230,25,0,0,0,0,0,0,136,76,7,0,0,0,106,15,81,34,31,246,247,251,41,226,8,61,64,8,9,249,252,8,137,30,0,0,0,0,0,0,152,76,7,0,0,0,210,15,152,32,238,246,4,252,84,226,19,61,0,8,44,249,221,8,119,28,0,0,0,0,0,0,168,76,7,0,0,0,236,14,192,43,57,241,211,250,32,238,49,49,158,8,73,253,206,6,80,29,0,0,0,0,0,0,184,76,7,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,200,76,7,0,0,0,175,15,5,33,106,247,188,251,71,226,65,61,216,7,67,249,33,9,144,30,0,0,0,0,0,0,216,76,7,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,232,76,7,0,0,0,253,15,151,32,254,247,3,252,221,225,89,61,55,8,217,248,76,9,43,32,0,0,0,0,0,0,248,76,7,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,8,77,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,24,77,7,0,0,0,0,0,145,44,224,240,143,250,36,238,213,49,211,7,59,253,18,7,247,28,0,0,0,0,0,0,40,77,7,0,0,0,0,0,144,44,63,239,65,251,66,239,97,48,70,8,125,254,187,5,107,30,0,0,0,0,0,0,56,77,7,0,0,0,243,12,182,58,80,234,242,248,109,240,99,48,231,6,176,253,134,6,111,27,0,0,0,0,0,0,72,77,7,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,88,77,7,0,0,0,203,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,104,77,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,120,77,7,0,0,0,0,0,237,35,138,243,109,253,210,245,78,42,247,7,54,254,226,4,82,21,0,0,0,0,0,0,136,77,7,0,0,0,0,0,151,29,145,247,197,253,118,241,77,44,165,10,102,250,3,11,127,24,0,0,0,0,0,0,152,77,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,168,77,7,0,0,0,0,0,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,184,77,7,0,0,0,0,0,7,30,64,248,162,253,25,239,152,46,161,10,155,250,35,9,52,25,0,0,0,0,0,0,200,77,7,0,0,0,0,0,206,36,70,243,57,253,161,245,146,42,223,7,0,254,74,5,136,21,0,0,0,0,0,0,224,77,7,0,0,0,225,15,188,32,186,245,129,253,185,244,229,41,192,9,141,253,147,5,62,21,0,0,0,0,0,0,240,77,7,0,0,0,0,0,46,47,28,237,211,251,241,229,226,55,18,10,238,252,171,3,250,28,0,0,0,0,0,0,0,78,7,0,0,0,0,0,246,45,163,238,213,251,11,229,85,56,147,10,251,251,193,4,148,29,0,0,0,0,0,0,16,78,7,0,0,0,255,15,21,37,169,242,102,253,165,235,46,48,188,12,244,249,214,8,82,25,0,0,0,0,0,0,32,78,7,0,0,0,254,15,97,41,233,241,14,252,7,233,71,51,12,12,80,251,13,7,65,26,0,0,0,0,0,0,48,78,7,0,0,0,254,15,77,45,90,240,231,251,200,234,255,49,141,11,251,251,214,6,116,25,0,0,0,0,0,0,64,78,7,0,0,0,249,15,163,42,163,241,42,252,45,234,186,50,95,11,112,251,176,7,79,24,0,0,0,0,0,0,80,78,7,0,0,0,0,0,2,45,52,240,134,251,128,237,140,47,88,11,36,252,37,7,151,23,0,0,0,0,0,0,96,78,7,0,0,0,0,0,168,32,140,246,144,252,168,240,65,48,203,6,155,250,112,9,53,20,0,0,0,0,0,0,112,78,7,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,128,78,7,0,0,0,0,0,149,42,1,240,206,251,139,251,248,35,245,8,194,255,137,5,38,20,0,0,0,0,0,0,144,78,7,0,0,0,0,0,49,38,101,242,99,252,186,244,33,44,8,7,166,253,127,6,14,20,0,0,0,0,0,0,128,44,2,0,0,0,0,0,238,49,37,240,133,254,34,254,106,35,133,5,60,5,233,5,56,20,0,0,0,0,0,0,160,78,7,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,176,78,7,0,0,0,0,0,77,42,234,244,165,251,109,223,201,61,136,10,187,252,168,2,163,46,0,0,0,0,0,0,192,78,7,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,208,78,7,0,0,0,0,0,131,40,227,246,74,251,16,222,103,63,42,10,50,251,92,4,18,44,0,0,0,0,0,0,224,78,7,0,0,0,0,0,179,37,245,247,91,251,79,221,128,64,183,9,76,250,65,5,191,41,0,0,0,0,0,0,240,78,7,0,0,0,0,0,94,37,209,244,221,252,254,227,68,59,64,8,206,252,35,3,233,37,0,0,0,0,0,0,0,79,7,0,0,0,0,0,87,43,171,243,212,250,71,223,218,61,160,10,172,251,179,3,168,45,0,0,0,0,0,0,16,79,7,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,32,79,7,0,0,0,0,0,226,35,138,245,117,252,11,222,133,64,212,8,151,251,70,4,76,33,0,0,0,0,0,0,48,79,7,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,64,79,7,0,0,0,0,0,49,43,236,241,125,251,224,235,246,50,25,9,230,254,119,1,168,31,0,0,0,0,0,0,80,79,7,0,0,0,0,0,139,34,235,244,143,253,95,236,100,49,108,10,101,254,210,4,242,28,0,0,0,0,0,0,96,79,7,0,0,0,0,0,167,38,251,243,174,252,72,235,235,50,217,9,141,252,232,6,24,27,0,0,0,0,0,0,112,79,7,0,0,0,0,0,247,28,252,247,47,253,190,235,244,49,122,10,90,250,109,8,117,26,0,0,0,0,0,0,128,79,7,0,0,0,0,0,234,31,91,245,129,253,168,238,241,46,184,10,253,252,185,5,199,25,0,0,0,0,0,0,144,79,7,0,0,0,0,0,9,34,239,244,25,253,10,239,124,46,212,10,46,253,7,6,103,24,0,0,0,0,0,0,160,79,7,0,0,0,0,0,182,35,125,244,90,253,56,222,71,66,127,6,80,247,82,11,167,33,0,0,0,0,0,0,176,79,7,0,0,0,0,0,64,33,117,243,237,252,185,239,190,46,183,9,130,253,8,5,166,23,0,0,0,0,0,0,192,79,7,0,0,0,0,62,150,41,247,241,122,251,255,242,179,45,39,7,101,253,58,11,143,24,0,0,0,0,0,0,208,79,7,0,15,0,0,0,66,34,134,243,204,252,201,244,17,44,11,7,255,253,16,6,82,17,0,0,0,0,0,0,232,79,7,0,0,0,127,15,26,35,61,245,222,252,59,231,7,53,5,12,60,250,96,8,235,24,0,0,0,0,0,0,0,80,7,0,0,0,0,0,204,38,12,244,89,252,79,233,19,52,193,10,13,251,107,8,199,21,0,0,0,0,0,0,24,80,7,0,15,0,150,15,125,39,96,242,31,252,220,234,12,50,100,11,231,250,92,8,167,21,0,0,0,0,0,0,48,80,7,0,0,0,148,15,224,42,67,240,139,251,18,225,131,60,40,10,122,249,23,8,54,32,0,0,0,0,0,0,72,80,7,0,15,0,0,0,210,38,36,245,134,252,4,238,105,48,176,9,163,251,0,9,12,18,0,0,0,0,0,0,96,80,7,0,15,0,0,0,71,53,97,234,165,250,94,249,161,37,126,9,60,1,128,4,12,16,0,0,0,0,0,0,120,80,7,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,144,80,7,0,15,0,0,0,12,45,28,239,214,251,185,246,95,42,213,6,204,253,163,6,255,16,0,0,0,0,0,0,168,80,7,0,0,0,0,0,226,30,107,245,174,253,169,231,39,52,148,12,126,248,71,10,137,25,0,0,0,0,0,0,184,80,7,0,15,0,150,15,89,31,106,248,230,251,16,225,32,62,52,8,104,246,189,11,127,27,0,0,0,0,0,0,208,80,7,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,232,80,7,0,0,0,127,15,118,31,163,248,255,251,99,223,239,63,248,7,11,245,214,13,205,29,0,0,0,0,0,0,248,80,7,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,16,81,7,0,0,0,0,0,76,44,27,240,5,251,125,226,162,59,144,9,112,244,98,13,5,30,0,0,0,0,0,0,32,81,7,0,15,0,0,0,140,34,46,242,0,253,131,241,242,45,152,8,70,253,0,7,100,20,0,0,0,0,0,0,56,81,7,0,15,0,0,0,140,34,46,242,0,253,131,241,242,45,152,8,70,253,0,7,100,20,0,0,0,0,0,0,80,81,7,0,15,0,0,0,163,36,61,243,208,252,101,243,40,45,89,7,98,252,136,7,220,20,0,0,0,0,0,0,104,81,7,0,15,0,0,0,163,36,61,243,208,252,101,243,40,45,89,7,98,252,136,7,220,20,0,0,0,0,0,0,128,81,7,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,152,81,7,0,0,0,127,15,208,41,165,239,50,251,134,223,80,62,197,9,104,252,177,3,223,34,0,0,0,0,0,0,168,81,7,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,192,81,7,0,0,0,0,0,112,31,6,245,145,253,206,230,207,52,200,12,92,249,98,8,137,27,0,0,0,0,0,0,208,81,7,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,232,81,7,0,15,0,0,0,192,31,148,245,113,253,10,232,251,51,89,12,10,249,8,10,195,23,0,0,0,0,0,0,248,81,7,0,15,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,16,82,7,0,15,0,0,0,157,42,57,239,76,252,203,250,90,36,95,9,22,0,202,6,230,17,0,0,0,0,0,0,32,82,7,0,15,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,56,82,7,0,15,0,0,0,164,39,97,241,33,252,235,244,102,44,123,6,67,253,101,7,35,19,0,0,0,0,0,0,72,82,7,0,15,0,0,0,150,30,120,245,5,253,3,243,147,45,74,7,127,253,176,6,216,18,0,0,0,0,0,0,96,82,7,0,15,0,0,0,150,30,120,245,5,253,3,243,147,45,74,7,127,253,176,6,216,18,0,0,0,0,0,0,120,82,7,0,15,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,144,82,7,0,15,0,255,15,69,63,254,231,31,249,167,246,13,42,77,7,110,1,190,8,128,20,0,0,0,0,0,0,160,82,7,0,15,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,184,82,7,0,15,0,255,15,128,46,67,238,91,251,205,246,147,42,126,6,216,254,50,6,193,16,0,0,0,0,0,0,200,82,7,0,15,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,224,82,7,0,15,0,255,15,176,31,253,245,28,253,110,241,8,46,149,8,83,252,27,8,69,19,0,0,0,0,0,0,240,82,7,0,15,0,255,15,122,35,165,244,99,252,25,232,65,52,242,11,251,248,81,10,233,21,0,0,0,0,0,0,8,83,7,0,0,0,0,0,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,32,83,7,0,15,0,148,15,7,32,239,247,224,251,68,224,28,63,241,7,102,246,206,11,52,28,0,0,0,0,0,0,56,83,7,0,15,0,60,15,129,39,184,242,166,251,99,237,139,49,13,9,135,254,157,5,54,26,0,0,0,0,0,0,80,83,7,0,15,0,255,15,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,104,83,7,0,15,0,255,15,118,30,254,245,28,253,217,240,64,45,53,10,225,251,200,8,58,21,0,0,0,0,0,0,128,83,7,0,15,0,255,15,102,32,181,244,117,253,227,240,70,45,35,10,97,251,219,8,232,20,0,0,0,0,0,0,152,83,7,0,15,0,146,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,176,83,7,0,15,0,255,15,208,30,146,248,13,252,86,224,213,62,51,8,207,246,50,11,162,28,0,0,0,0,0,0,200,83,7,0,15,0,255,15,91,35,92,246,76,251,164,235,220,51,73,8,83,251,206,9,234,26,0,0,0,0,0,0,224,83,7,0,15,0,255,15,36,32,127,244,108,253,158,240,16,46,126,9,186,251,230,8,161,22,0,0,0,0,0,0,248,83,7,0,15,0,0,0,194,31,15,245,78,252,64,242,25,44,248,9,222,250,207,9,159,22,0,0,0,0,0,0,16,84,7,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,40,84,7,0,15,0,146,15,155,24,70,250,236,253,121,230,28,54,153,11,229,246,40,12,96,23,0,0,0,0,0,0,64,84,7,0,15,0,149,15,100,30,150,246,218,252,183,240,204,45,180,9,6,252,86,9,178,20,0,0,0,0,0,0,88,84,7,0,15,0,0,0,159,25,40,249,21,254,168,241,143,44,26,10,62,252,83,7,10,20,0,0,0,0,0,0,112,84,7,0,15,0,0,0,210,27,196,247,0,254,173,243,193,43,183,8,227,253,143,5,181,19,0,0,0,0,0,0,136,84,7,0,15,0,0,0,114,26,153,248,24,253,144,235,89,51,255,8,128,249,131,10,71,22,0,0,0,0,0,0,160,84,7,0,15,0,0,0,46,32,84,243,89,253,175,240,38,46,80,9,188,252,230,7,220,22,0,0,0,0,0,0,184,84,7,0,15,0,0,0,107,26,129,248,161,252,228,240,251,44,124,10,64,251,83,9,247,22,0,0,0,0,0,0,208,84,7,0,15,0,0,0,186,29,36,245,192,253,250,237,163,47,173,10,161,250,89,9,90,25,0,0,0,0,0,0,232,84,7,0,15,0,0,0,159,33,250,244,216,252,85,241,154,46,1,8,204,252,12,8,104,20,0,0,0,0,0,0,0,85,7,0,15,0,0,0,159,33,250,244,216,252,85,241,154,46,1,8,204,252,12,8,104,20,0,0,0,0,0,0,24,85,7,0,15,0,0,0,98,34,193,243,235,252,177,243,204,44,112,7,218,253,209,6,202,18,0,0,0,0,0,0,48,85,7,0,15,0,0,0,98,34,193,243,235,252,177,243,204,44,112,7,218,253,209,6,202,18,0,0,0,0,0,0,72,85,7,0,0,0,0,0,33,5,63,7,147,255,197,229,36,62,40,3,185,254,48,7,132,23,0,0,0,0,0,0,88,85,7,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,104,85,7,0,0,0,0,0,89,11,220,2,19,255,58,224,242,64,196,5,34,244,157,16,93,29,0,0,0,0,0,0,120,85,7,0,0,0,0,0,164,17,11,255,219,255,148,228,128,58,125,8,122,243,63,18,175,27,0,0,0,0,0,0,136,85,7,0,0,0,0,0,189,19,232,255,139,255,204,233,252,54,166,6,197,245,140,17,217,22,0,0,0,0,0,0,152,85,7,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,168,85,7,0,0,0,0,0,99,31,179,1,62,252,143,232,48,54,16,9,121,251,249,11,58,21,0,0,0,0,0,0,184,85,7,0,192,2,255,255,22,82,45,225,203,245,16,244,169,47,88,3,101,247,5,20,106,31,0,0,0,0,0,0,192,85,7,0,0,0,0,62,194,34,62,246,30,252,184,243,64,44,18,8,8,253,101,5,224,17,0,0,0,0,0,0,208,85,7,0,0,0,255,7,152,41,199,240,225,251,26,248,77,41,132,6,20,254,75,6,134,18,0,0,0,0,0,0,224,85,7,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,248,85,7,0,0,0,0,0,102,20,84,251,218,253,116,230,57,57,217,7,126,249,3,11,25,22,0,0,0,0,0,0,8,86,7,0,0,0,0,0,124,31,139,244,7,253,104,238,90,50,226,6,138,253,209,5,107,20,0,0,0,0,0,0,24,86,7,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,40,86,7,0,0,0,0,0,133,29,38,246,29,253,185,237,149,50,102,7,184,252,241,6,191,20,0,0,0,0,0,0,56,86,7,0,0,0,255,15,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,72,86,7,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,88,86,7,0,0,0,0,0,21,27,36,247,15,253,199,236,75,52,111,6,221,252,105,6,208,23,0,0,0,0,0,0,104,86,7,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,120,86,7,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,136,86,7,0,0,0,0,0,212,39,76,238,240,254,208,240,225,44,96,9,77,251,120,9,213,35,0,0,0,0,0,0,152,86,7,0,0,0,0,0,92,40,94,243,112,251,33,232,47,57,240,5,184,250,87,10,139,32,0,0,0,0,0,0,168,86,7,0,0,0,0,0,190,41,54,240,228,251,245,241,182,51,20,1,48,254,235,4,43,23,0,0,0,0,0,0,184,86,7,0,0,0,255,15,61,47,27,242,125,251,24,252,62,37,197,6,234,255,251,6,224,17,0,0,0,0,0,0,200,86,7,0,0,0,0,0,8,41,122,246,91,251,101,222,79,63,227,9,2,252,95,3,210,47,0,0,0,0,0,0,216,86,7,0,0,0,0,0,211,36,102,245,156,252,187,226,220,62,93,5,105,247,192,12,12,28,0,0,0,0,0,0,232,86,7,0,0,0,0,0,109,46,128,240,63,250,138,239,11,48,124,7,189,252,119,6,173,21,0,0,0,0,0,0,248,86,7,0,0,0,0,0,58,64,116,244,138,246,195,244,96,47,238,2,144,251,178,23,207,17,0,0,0,0,0,0,0,87,7,0,0,0,0,0,244,30,138,248,247,252,222,223,99,60,182,11,19,250,151,8,162,26,182,227,137,44,153,13,16,87,7,0,0,2,0,0,64,33,175,245,74,253,150,224,54,61,222,9,227,248,69,8,246,28,0,0,0,0,0,0,32,87,7,0,0,0,0,0,87,29,245,245,76,253,42,225,240,58,244,11,76,252,87,4,192,31,0,0,0,0,0,0,48,87,7,0,200,0,0,0,196,25,225,247,206,253,82,237,216,50,141,7,54,252,45,6,61,20,0,0,0,0,0,0,64,87,7,0,200,0,0,0,203,33,62,245,223,251,120,242,175,47,93,5,200,253,118,5,82,17,0,0,0,0,0,0,80,87,7,0,200,0,0,0,23,26,223,248,23,253,73,236,200,51,161,7,212,249,118,9,63,20,0,0,0,0,0,0,96,87,7,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,112,87,7,0,0,0,235,15,221,36,5,245,250,252,43,223,87,63,242,8,58,253,84,2,13,28,0,0,0,0,0,0,128,87,7,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,144,87,7,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,160,87,7,0,0,0,0,0,119,38,237,243,96,252,219,222,217,63,177,8,53,253,83,2,191,27,0,0,0,0,0,0,176,87,7,0,0,0,0,0,119,38,237,243,95,252,219,222,218,63,177,8,54,253,83,2,191,27,0,0,0,0,0,0,192,87,7,0,0,0,252,15,150,23,52,250,190,253,70,220,106,65,209,9,149,252,234,2,49,28,0,0,0,0,0,0,208,87,7,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,224,87,7,0,0,0,0,0,150,23,52,250,189,253,71,220,106,65,208,9,149,252,234,2,50,28,0,0,0,0,0,0,240,87,7,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,0,88,7,0,128,0,235,15,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,16,88,7,0,128,0,235,15,158,23,153,251,234,254,58,234,20,51,226,10,77,253,139,5,201,29,0,0,0,0,0,0,32,88,7,0,128,0,235,15,86,19,188,253,153,255,148,235,254,48,213,11,59,253,155,5,203,28,0,0,0,0,0,0,48,88,7,0,128,0,0,0,143,22,219,252,153,254,130,222,167,63,87,9,105,248,37,9,81,28,0,0,0,0,0,0,64,88,7,0,128,0,0,0,37,21,118,251,147,254,223,233,42,51,50,11,160,253,155,4,248,32,0,0,0,0,0,0,80,88,7,0,128,0,0,0,89,20,208,251,115,254,115,221,248,62,103,11,174,249,11,7,206,33,0,0,0,0,0,0,96,88,7,0,128,0,0,0,103,23,60,249,69,254,252,239,213,46,77,9,64,253,187,5,104,23,0,0,0,0,0,0,112,88,7,0,128,0,0,0,151,20,56,253,165,254,247,231,85,53,203,10,191,249,62,9,74,28,0,0,0,0,0,0,128,88,7,0,128,0,0,0,206,22,106,250,10,255,87,242,213,44,249,8,20,253,93,7,146,22,0,0,0,0,0,0,144,88,7,0,128,0,0,0,49,19,227,253,54,255,14,232,201,52,90,11,228,249,103,8,15,28,0,0,0,0,0,0,160,88,7,0,128,0,0,0,151,20,56,253,165,254,247,231,85,53,203,10,191,249,62,9,74,28,0,0,0,0,0,0,176,88,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,192,88,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,208,88,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,224,88,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,240,88,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,0,89,7,0,138,0,0,0,251,26,24,251,123,253,180,236,77,49,16,9,82,249,21,10,86,24,0,0,0,0,0,0,16,89,7,0,116,0,0,0,151,26,186,250,170,254,136,239,129,45,7,10,191,251,209,7,20,25,0,0,0,0,0,0,0,89,7,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,16,89,7,0,128,0,0,0,149,25,242,249,76,254,240,236,147,48,193,10,170,252,76,7,64,27,0,0,0,0,0,0,32,89,7,0,128,0,0,0,241,23,247,249,94,254,190,236,202,48,183,10,47,252,157,6,215,25,0,0,0,0,0,0,48,89,7,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,64,89,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,80,89,7,0,128,0,0,0,181,23,59,251,146,254,155,235,235,49,174,10,0,252,18,8,178,26,0,0,0,0,0,0,96,89,7,0,128,0,0,0,98,23,174,249,97,254,51,238,44,46,48,12,87,253,124,5,59,27,0,0,0,0,0,0,112,89,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,128,89,7,0,128,0,0,0,44,23,44,250,101,254,51,237,253,47,40,11,27,253,244,5,83,26,0,0,0,0,0,0,144,89,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,160,89,7,0,128,0,0,0,103,23,80,250,57,254,100,237,103,47,164,11,61,253,145,5,45,26,0,0,0,0,0,0,176,89,7,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,192,89,7,0,128,0,0,0,115,21,88,251,149,254,169,236,54,48,132,11,113,252,186,6,24,28,0,0,0,0,0,0,208,89,7,0,128,0,0,0,200,24,180,249,50,254,1,237,189,48,121,10,159,252,250,6,243,26,0,0,0,0,0,0,65,103,102,97,80,104,111,116,111,32,68,67,45,56,51,51,109,0,0,0,0,0,0,0,65,112,112,108,101,32,81,117,105,99,107,84,97,107,101,0,67,97,110,111,110,32,69,79,83,32,68,50,48,48,48,0,67,97,110,111,110,32,69,79,83,32,68,54,48,48,48,0,67,97,110,111,110,32,69,79,83,32,68,51,48,0,0,0,67,97,110,111,110,32,69,79,83,32,68,54,48,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,83,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0,0,0,0,67,97,110,111,110,32,69,79,83,32,53,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,54,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,55,68,32,77,97,114,107,32,73,73,0,0,0,0,67,97,110,111,110,32,69,79,83,32,55,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,49,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,50,48,68,97,0,0,67,97,110,111,110,32,69,79,83,32,50,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,51,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,52,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,53,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,54,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,55,48,68,0,0,0,67,97,110,111,110,32,69,79,83,32,49,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,51,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,51,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,52,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,52,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,53,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,53,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,54,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,54,53,48,68,0,0,67,97,110,111,110,32,69,79,83,32,55,48,48,68,0,0,67,97,110,111,110,32,69,79,83,32,49,48,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,49,48,48,68,0,67,97,110,111,110,32,69,79,83,32,49,50,48,48,68,0,67,97,110,111,110,32,69,79,83,32,77,0,0,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+463624);
/* memory initializer */ allocate([114,107,32,73,73,73,0,0,67,97,110,111,110,32,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,83,0,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,67,0,0,67,97,110,111,110,32,69,79,83,45,49,68,32,88,0,0,67,97,110,111,110,32,69,79,83,45,49,68,0,0,0,0,67,97,110,111,110,32,69,79,83,32,67,53,48,48,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,53,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,49,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,50,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,53,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,54,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,32,88,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,49,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,50,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,51,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,53,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,54,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,55,32,88,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,71,57,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,49,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,52,53,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,53,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,54,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,55,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,48,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,57,53,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,48,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,49,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,49,50,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,32,73,83,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,53,48,32,72,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,54,48,32,72,83,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,51,51,48,48,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,65,55,50,48,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,0,0,0,0,0,0,67,97,110,111,110,32,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,0,0,0,67,97,115,105,111,32,69,88,45,83,50,48,0,0,0,0,67,97,115,105,111,32,69,88,45,90,55,53,48,0,0,0,67,97,115,105,111,32,69,88,45,90,49,48,0,0,0,0,67,73,78,69,32,54,53,48,0,0,0,0,0,0,0,0,67,73,78,69,32,54,54,48,0,0,0,0,0,0,0,0,67,111,110,116,97,120,32,78,32,68,105,103,105,116,97,108,0,0,0,0,0,0,0,0,69,112,115,111,110,32,82,45,68,49,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,69,53,53,48,0,0,0,70,117,106,105,102,105,108,109,32,69,57,48,48,0,0,0,70,117,106,105,102,105,108,109,32,70,53,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,54,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,55,55,0,0,0,0,70,117,106,105,102,105,108,109,32,70,55,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,56,0,0,0,0,0,70,117,106,105,102,105,108,109,32,83,49,48,48,70,83,0,70,117,106,105,102,105,108,109,32,83,49,0,0,0,0,0,70,117,106,105,102,105,108,109,32,83,50,48,80,114,111,0,70,117,106,105,102,105,108,109,32,83,50,48,0,0,0,0,70,117,106,105,102,105,108,109,32,83,50,80,114,111,0,0,70,117,106,105,102,105,108,109,32,83,51,80,114,111,0,0,70,117,106,105,102,105,108,109,32,83,53,80,114,111,0,0,70,117,106,105,102,105,108,109,32,83,53,48,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,49,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,53,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,50,48,48,0,0,70,117,106,105,102,105,108,109,32,83,53,54,48,48,0,0,70,117,106,105,102,105,108,109,32,83,54,0,0,0,0,0,70,117,106,105,102,105,108,109,32,83,55,48,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,48,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,53,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,49,48,48,0,0,70,117,106,105,102,105,108,109,32,83,57,54,48,48,0,0,70,117,106,105,102,105,108,109,32,83,76,49,48,48,48,0,70,117,106,105,102,105,108,109,32,73,83,45,49,0,0,0,70,117,106,105,102,105,108,109,32,73,83,32,80,114,111,0,70,117,106,105,102,105,108,109,32,72,83,49,48,32,72,83,49,49,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,72,83,50,0,0,0,0,70,117,106,105,102,105,108,109,32,72,83,51,0,0,0,0,70,117,106,105,102,105,108,109,32,72,83,53,48,69,88,82,0,0,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,70,57,48,48,69,88,82,0,0,0,0,0,0,0,0,70,117,106,105,102,105,108,109,32,88,49,48,48,83,0,0,70,117,106,105,102,105,108,109,32,88,49,48,48,84,0,0,70,117,106,105,102,105,108,109,32,88,49,48,48,0,0,0,70,117,106,105,102,105,108,109,32,88,49,48,0,0,0,0,70,117,106,105,102,105,108,109,32,88,50,48,0,0,0,0,70,117,106,105,102,105,108,109,32,88,51,48,0,0,0,0,70,117,106,105,102,105,108,109,32,88,45,80,114,111,49,0,70,117,106,105,102,105,108,109,32,88,45,65,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,65,50,0,0,0,70,117,106,105,102,105,108,109,32,88,45,69,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,69,50,0,0,0,70,117,106,105,102,105,108,109,32,88,45,77,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,83,49,0,0,0,70,117,106,105,102,105,108,109,32,88,45,84,49,0,0,0,70,117,106,105,102,105,108,109,32,88,70,49,0,0,0,0,70,117,106,105,102,105,108,109,32,88,81,0,0,0,0,0,73,109,97,99,111,110,32,73,120,112,114,101,115,115,0,0,75,111,100,97,107,32,78,67,50,48,48,48,0,0,0,0,75,111,100,97,107,32,68,67,83,51,49,53,67,0,0,0,75,111,100,97,107,32,68,67,83,51,51,48,67,0,0,0,75,111,100,97,107,32,68,67,83,52,50,48,0,0,0,0,75,111,100,97,107,32,68,67,83,52,54,48,0,0,0,0,75,111,100,97,107,32,69,79,83,68,67,83,49,0,0,0,75,111,100,97,107,32,69,79,83,68,67,83,51,66,0,0,75,111,100,97,107,32,68,67,83,53,50,48,67,0,0,0,75,111,100,97,107,32,68,67,83,53,54,48,67,0,0,0,75,111,100,97,107,32,68,67,83,54,50,48,67,0,0,0,75,111,100,97,107,32,68,67,83,54,50,48,88,0,0,0,75,111,100,97,107,32,68,67,83,54,54,48,67,0,0,0,75,111,100,97,107,32,68,67,83,55,50,48,88,0,0,0,75,111,100,97,107,32,68,67,83,55,54,48,67,0,0,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,83,76,82,0,0,0,0,0,0,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,110,120,0,0,0,0,0,0,75,111,100,97,107,32,68,67,83,32,80,114,111,32,49,52,0,0,0,0,0,0,0,0,75,111,100,97,107,32,80,114,111,66,97,99,107,54,52,53,0,0,0,0,0,0,0,0,75,111,100,97,107,32,80,114,111,66,97,99,107,0,0,0,75,111,100,97,107,32,80,55,49,50,0,0,0,0,0,0,75,111,100,97,107,32,80,56,53,48,0,0,0,0,0,0,75,111,100,97,107,32,80,56,56,48,0,0,0,0,0,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,56,48,0,0,0,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,56,49,0,0,0,0,75,111,100,97,107,32,69,97,115,121,83,104,97,114,101,32,90,57,57,48,0,0,0,0,75,111,100,97,107,32,69,65,83,89,83,72,65,82,69,32,90,49,48,49,53,0,0,0,76,101,97,102,32,67,77,111,115,116,0,0,0,0,0,0,76,101,97,102,32,86,97,108,101,111,32,54,0,0,0,0,76,101,97,102,32,65,112,116,117,115,32,53,52,83,0,0,76,101,97,102,32,65,112,116,117,115,32,54,53,0,0,0,76,101,97,102,32,65,112,116,117,115,32,55,53,0,0,0,77,97,109,105,121,97,32,90,68,0,0,0,0,0,0,0,77,105,99,114,111,110,32,50,48,49,48,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,53,0,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,72,105,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,55,0,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,49,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,48,48,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,65,50,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,105,77,65,71,69,32,90,50,0,0,0,0,0,0,0,77,105,110,111,108,116,97,32,68,89,78,65,88,32,53,0,77,105,110,111,108,116,97,32,68,89,78,65,88,32,55,0,77,111,116,111,114,111,108,97,32,80,73,88,76,0,0,0,78,105,107,111,110,32,68,49,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,49,72,0,0,0,0,0,0,0,78,105,107,111,110,32,68,49,88,0,0,0,0,0,0,0,78,105,107,111,110,32,68,49,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,50,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,50,72,0,0,0,0,0,0,0,78,105,107,111,110,32,68,50,88,0,0,0,0,0,0,0,78,105,107,111,110,32,68,51,48,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,49,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,50,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,51,48,48,0,0,0,0,0,78,105,107,111,110,32,68,51,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,51,88,0,0,0,0,0,0,0,78,105,107,111,110,32,68,51,83,0,0,0,0,0,0,0,78,105,107,111,110,32,68,51,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,52,48,88,0,0,0,0,0,0,78,105,107,111,110,32,68,52,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,52,83,0,0,0,0,0,0,0,78,105,107,111,110,32,68,52,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,102,0,0,0,0,0,0,0,0,78,105,107,111,110,32,68,53,48,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,49,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,50,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,51,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,53,48,48,0,0,0,0,0,78,105,107,111,110,32,68,53,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,54,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,54,49,48,0,0,0,0,0,0,78,105,107,111,110,32,68,54,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,55,48,48,48,0,0,0,0,0,78,105,107,111,110,32,68,55,49,48,48,0,0,0,0,0,78,105,107,111,110,32,68,55,50,48,48,0,0,0,0,0,78,105,107,111,110,32,68,55,53,48,0,0,0,0,0,0,78,105,107,111,110,32,68,55,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,55,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,56,49,48,0,0,0,0,0,0,78,105,107,111,110,32,68,56,48,48,0,0,0,0,0,0,78,105,107,111,110,32,68,56,48,0,0,0,0,0,0,0,78,105,107,111,110,32,68,57,48,0,0,0,0,0,0,0,78,105,107,111,110,32,69,55,48,48,0,0,0,0,0,0,78,105,107,111,110,32,69,56,48,48,0,0,0,0,0,0,78,105,107,111,110,32,69,57,53,48,0,0,0,0,0,0,78,105,107,111,110,32,69,57,57,53,0,0,0,0,0,0,78,105,107,111,110,32,69,50,49,48,48,0,0,0,0,0,78,105,107,111,110,32,69,50,53,48,48,0,0,0,0,0,78,105,107,111,110,32,69,51,50,48,48,0,0,0,0,0,78,105,107,111,110,32,69,52,51,48,48,0,0,0,0,0,78,105,107,111,110,32,69,52,53,48,48,0,0,0,0,0,78,105,107,111,110,32,69,53,48,48,48,0,0,0,0,0,78,105,107,111,110,32,69,53,52,48,48,0,0,0,0,0,78,105,107,111,110,32,69,53,55,48,48,0,0,0,0,0,78,105,107,111,110,32,69,56,52,48,48,0,0,0,0,0,78,105,107,111,110,32,69,56,55,48,48,0,0,0,0,0,78,105,107,111,110,32,69,56,56,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,65,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,51,51,48,0,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,51,52,48,0,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,54,48,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,48,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,49,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,55,48,48,0,0,0,0,0,78,105,107,111,110,32,67,79,79,76,80,73,88,32,80,55,56,48,48,0,0,0,0,0,78,105,107,111,110,32,49,32,86,51,0,0,0,0,0,0,78,105,107,111,110,32,49,32,74,52,0,0,0,0,0,0,78,105,107,111,110,32,49,32,74,53,0,0,0,0,0,0,78,105,107,111,110,32,49,32,83,50,0,0,0,0,0,0,78,105,107,111,110,32,49,32,86,50,0,0,0,0,0,0,78,105,107,111,110,32,49,32,74,51,0,0,0,0,0,0,78,105,107,111,110,32,49,32,65,87,49,0,0,0,0,0,78,105,107,111,110,32,49,32,0,0,0,0,0,0,0,0,79,108,121,109,112,117,115,32,67,53,48,53,48,0,0,0,79,108,121,109,112,117,115,32,67,53,48,54,48,0,0,0,79,108,121,109,112,117,115,32,67,55,48,55,48,0,0,0,79,108,121,109,112,117,115,32,67,55,48,0,0,0,0,0,79,108,121,109,112,117,115,32,67,56,48,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,49,48,0,0,0,0,79,108,121,109,112,117,115,32,69,45,49,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,50,48,0,0,0,0,79,108,121,109,112,117,115,32,69,45,51,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,51,51,48,0,0,0,79,108,121,109,112,117,115,32,69,45,51,48,0,0,0,0,79,108,121,109,112,117,115,32,69,45,51,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,52,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,52,49,48,0,0,0,79,108,121,109,112,117,115,32,69,45,52,50,48,0,0,0,79,108,121,109,112,117,115,32,69,45,52,53,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,49,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,50,48,0,0,0,79,108,121,109,112,117,115,32,69,45,53,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,54,48,48,0,0,0,79,108,121,109,112,117,115,32,69,45,54,50,48,0,0,0,79,108,121,109,112,117,115,32,69,45,80,49,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,50,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,51,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,53,0,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,49,115,0,0,79,108,121,109,112,117,115,32,69,45,80,76,49,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,50,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,51,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,53,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,54,0,0,0,79,108,121,109,112,117,115,32,69,45,80,76,55,0,0,0,79,108,121,109,112,117,115,32,69,45,80,77,49,0,0,0,79,108,121,109,112,117,115,32,69,45,80,77,50,0,0,0,79,108,121,109,112,117,115,32,69,45,77,49,48,0,0,0,79,108,121,109,112,117,115,32,69,45,77,49,0,0,0,0,79,108,121,109,112,117,115,32,69,45,77,53,77,97,114,107,73,73,0,0,0,0,0,0,79,108,121,109,112,117,115,32,69,45,77,53,0,0,0,0,79,108,121,109,112,117,115,32,83,80,51,53,48,0,0,0,79,108,121,109,112,117,115,32,83,80,51,0,0,0,0,0,79,108,121,109,112,117,115,32,83,80,53,48,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,49,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,53,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,54,48,85,90,0,79,108,121,109,112,117,115,32,83,80,53,55,48,85,90,0,79,108,121,109,112,117,115,32,83,84,89,76,85,83,49,0,79,108,121,109,112,117,115,32,88,90,45,49,48,0,0,0,79,108,121,109,112,117,115,32,88,90,45,49,0,0,0,0,79,108,121,109,112,117,115,32,88,90,45,50,0,0,0,0,80,101,110,116,97,120,32,42,105,115,116,32,68,76,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,76,0,0,80,101,110,116,97,120,32,42,105,115,116,32,68,83,50,0,80,101,110,116,97,120,32,42,105,115,116,32,68,83,0,0,80,101,110,116,97,120,32,42,105,115,116,32,68,0,0,0,80,101,110,116,97,120,32,75,49,48,68,0,0,0,0,0,80,101,110,116,97,120,32,75,49,0,0,0,0,0,0,0,80,101,110,116,97,120,32,75,50,48,68,0,0,0,0,0,80,101,110,116,97,120,32,75,50,48,48,68,0,0,0,0,80,101,110,116,97,120,32,75,50,48,48,48,0,0,0,0,80,101,110,116,97,120,32,75,45,109,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,120,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,114,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,51,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,53,32,73,73,0,0,0,80,101,110,116,97,120,32,75,45,53,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,55,0,0,0,0,0,0,80,101,110,116,97,120,32,75,45,83,49,0,0,0,0,0,80,101,110,116,97,120,32,54,52,53,68,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,67,77,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,56,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,56,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,56,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,48,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,51,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,52,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,53,48,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,55,0,0,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,49,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,48,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,49,0,0,0,0,0,0,0,0,76,101,105,99,97,32,68,73,71,73,76,85,88,32,51,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,67,49,0,0,0,0,0,0,0,76,101,105,99,97,32,68,73,71,73,76,85,88,32,50,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,48,48,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,40,84,121,112,32,49,48,57,41,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,70,49,0,0,0,0,0,0,0,76,101,105,99,97,32,67,32,40,84,121,112,32,49,49,50,41,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,49,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,50,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,50,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,51,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,51,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,52,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,53,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,53,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,76,88,55,0,0,0,0,0,0,0,76,101,105,99,97,32,68,45,76,85,88,32,54,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,48,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,40,84,121,112,32,49,49,52,41,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,48,48,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,50,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,49,53,48,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,51,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,90,50,48,48,0,0,0,0,0,76,101,105,99,97,32,86,45,76,85,88,32,52,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,70,88,49,53,48,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,48,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,49,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,50,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,51,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,53,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,54,0,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,50,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,51,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,53,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,54,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,70,55,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,50,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,51,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,72,52,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,77,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,77,53,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,49,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,71,88,55,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,54,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,52,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,84,90,55,0,0,0,0,0,0,0,80,97,110,97,115,111,110,105,99,32,68,77,67,45,90,83,53,0,0,0,0,0,0,0,80,104,97,115,101,32,79,110,101,32,72,32,50,48,0,0,80,104,97,115,101,32,79,110,101,32,72,32,50,53,0,0,80,104,97,115,101,32,79,110,101,32,80,32,50,0,0,0,80,104,97,115,101,32,79,110,101,32,80,32,51,48,0,0,80,104,97,115,101,32,79,110,101,32,80,32,52,53,0,0,80,104,97,115,101,32,79,110,101,32,80,52,48,0,0,0,80,104,97,115,101,32,79,110,101,32,80,54,53,0,0,0,82,101,100,32,79,110,101,0,83,97,109,115,117,110,103,32,69,88,49,0,0,0,0,0,83,97,109,115,117,110,103,32,69,88,50,70,0,0,0,0,83,97,109,115,117,110,103,32,69,75,45,71,78,49,50,48,0,0,0,0,0,0,0,0,83,97,109,115,117,110,103,32,78,88,32,109,105,110,105,0,83,97,109,115,117,110,103,32,78,88,51,48,48,48,0,0,83,97,109,115,117,110,103,32,78,88,51,48,0,0,0,0,83,97,109,115,117,110,103,32,78,88,50,48,48,48,0,0,83,97,109,115,117,110,103,32,78,88,50,0,0,0,0,0,83,97,109,115,117,110,103,32,78,88,49,48,48,48,0,0,83,97,109,115,117,110,103,32,78,88,49,49,48,48,0,0,83,97,109,115,117,110,103,32,78,88,49,49,0,0,0,0,83,97,109,115,117,110,103,32,78,88,49,48,0,0,0,0,83,97,109,115,117,110,103,32,78,88,53,48,48,0,0,0,83,97,109,115,117,110,103,32,78,88,53,0,0,0,0,0,83,97,109,115,117,110,103,32,78,88,49,0,0,0,0,0,83,97,109,115,117,110,103,32,87,66,50,48,48,48,0,0,83,97,109,115,117,110,103,32,71,88,45,49,0,0,0,0,83,97,109,115,117,110,103,32,71,88,50,48,0,0,0,0,83,97,109,115,117,110,103,32,83,56,53,0,0,0,0,0,83,105,110,97,114,0,0,0,83,111,110,121,32,68,83,67,45,70,56,50,56,0,0,0,83,111,110,121,32,68,83,67,45,82,49,0,0,0,0,0,83,111,110,121,32,68,83,67,45,86,51,0,0,0,0,0,83,111,110,121,32,68,83,67,45,82,88,49,48,48,77,0,83,111,110,121,32,68,83,67,45,82,88,49,48,48,0,0,83,111,110,121,32,68,83,67,45,82,88,49,48,0,0,0,83,111,110,121,32,68,83,67,45,82,88,49,0,0,0,0,83,111,110,121,32,68,83,76,82,45,65,49,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,50,57,48,0,0,83,111,110,121,32,68,83,76,82,45,65,50,0,0,0,0,83,111,110,121,32,68,83,76,82,45,65,51,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,51,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,53,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,56,48,0,0,83,111,110,121,32,68,83,76,82,45,65,51,57,48,0,0,83,111,110,121,32,68,83,76,82,45,65,52,53,48,0,0,83,111,110,121,32,68,83,76,82,45,65,53,56,48,0,0,83,111,110,121,32,68,83,76,82,45,65,53,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,53,0,0,0,0,83,111,110,121,32,68,83,76,82,45,65,55,48,48,0,0,83,111,110,121,32,68,83,76,82,45,65,56,53,48,0,0,83,111,110,121,32,68,83,76,82,45,65,57,48,48,0,0,83,111,110,121,32,73,76,67,65,45,55,55,77,50,0,0,83,111,110,121,32,73,76,67,69,45,55,77,50,0,0,0,83,111,110,121,32,73,76,67,69,45,55,83,0,0,0,0,83,111,110,121,32,73,76,67,69,45,55,82,0,0,0,0,83,111,110,121,32,73,76,67,69,45,55,0,0,0,0,0,83,111,110,121,32,73,76,67,69,0,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,78,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,82,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,84,0,0,0,0,0,83,111,110,121,32,78,69,88,45,51,78,0,0,0,0,0,83,111,110,121,32,78,69,88,45,51,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,53,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,54,0,0,0,0,0,0,83,111,110,121,32,78,69,88,45,55,0,0,0,0,0,0,83,111,110,121,32,78,69,88,0,0,0,0,0,0,0,0,83,111,110,121,32,83,76,84,45,65,51,51,0,0,0,0,83,111,110,121,32,83,76,84,45,65,51,53,0,0,0,0,83,111,110,121,32,83,76,84,45,65,51,55,0,0,0,0,83,111,110,121,32,83,76,84,45,65,53,53,0,0,0,0,83,111,110,121,32,83,76,84,45,65,53,55,0,0,0,0,83,111,110,121,32,83,76,84,45,65,53,56,0,0,0,0,83,111,110,121,32,83,76,84,45,65,54,53,0,0,0,0,83,111,110,121,32,83,76,84,45,65,55,55,0,0,0,0,83,111,110,121,32,83,76,84,45,65,57,57,0,0,0,0,37,115,32,37,115,0,0,0,15,156,179,63,84,116,100,190,169,19,208,189,153,187,6,191,18,165,189,63,150,67,139,60,52,128,55,188,226,233,149,60,245,74,105,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,0,0,64,63,0,0,224,191,0,0,128,190,0,0,128,190,0,0,64,63,0,0,64,63,0,0,128,190,0,0,128,190,0,0,224,191,0,0,64,63,0,0,16,64,211,77,242,63,25,4,214,190,70,182,243,190,164,112,253,190,170,241,226,63,4,86,142,190,14,45,130,191,20,174,39,191,12,2,43,64,0,0,0,0,0,0,0,0,0,0,0,0,6,216,247,191,235,116,230,63,253,103,185,191,144,101,37,64,0,227,179,63,115,99,6,191,155,3,148,190,129,62,209,62,75,60,154,191,240,136,138,63,91,63,60,64,83,203,232,191,58,12,207,6,4,0,0,0,250,255,0,0,58,12,7,8,4,0,0,0,250,255,0,0,58,12,15,9,4,0,0,0,250,255,0,0,98,12,55,8,18,0,0,0,214,255,20,0,98,12,63,9,18,0,13,0,214,255,235,255,105,12,63,9,0,0,0,0,255,255,0,0,232,12,154,9,0,0,0,0,255,255,0,0,2,13,159,9,9,0,0,0,251,255,0,0,2,13,175,9,9,0,0,0,239,255,4,0,42,13,107,7,15,0,0,0,212,255,20,0,42,13,187,8,15,0,0,0,212,255,20,0,42,13,207,9,15,0,10,0,212,255,235,255,106,14,191,10,3,0,0,0,248,255,253,255,126,14,191,10,0,0,0,0,253,255,0,0,140,14,146,9,0,0,0,0,0,0,254,255,186,14,183,9,17,0,0,0,212,255,19,0,186,14,239,10,17,0,15,0,212,255,237,255,40,15,122,8,6,0,0,0,250,255,0,0,220,15,202,11,0,0,0,0,0,0,254,255,194,16,87,9,3,0,0,0,248,255,255,255,234,16,135,9,17,0,15,0,212,255,237,255,156,17,146,11,0,0,0,0,253,255,252,255,156,17,2,13,0,0,0,0,253,255,250,255,0,0,0,0,152,7,136,5,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,96,8,24,6,4,0,8,0,52,0,2,0,0,0,0,0,0,0,25,0,0,0,176,8,176,5,48,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,72,9,192,6,12,0,6,0,52,0,2,0,0,0,0,0,0,0,0,0,0,0,112,10,176,7,12,0,6,0,44,0,2,0,0,0,0,0,0,0,0,0,0,0,80,12,20,8,64,0,12,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,88,12,40,9,44,0,12,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,16,13,180,9,4,0,6,0,52,0,6,0,0,0,0,0,0,0,0,0,0,0,188,13,24,9,42,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,14,56,9,74,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,14,224,10,52,0,12,0,8,0,12,0,0,0,0,0,0,0,0,0,0,0,104,15,62,10,30,0,18,0,6,0,2,0,0,0,0,0,0,0,0,0,0,0,108,15,62,10,42,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,144,15,62,10,76,0,20,0,0,0,2,0,14,0,0,0,0,0,0,0,0,0,8,16,232,11,48,0,12,0,24,0,12,0,0,0,0,0,0,0,0,0,0,0,20,16,130,8,4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,16,212,10,192,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,52,12,104,0,11,0,8,0,65,0,0,0,0,0,0,0,0,0,0,0,80,16,246,11,96,0,17,0,8,0,0,0,0,0,16,0,0,0,7,0,73,0,96,16,246,11,96,0,17,0,24,0,0,0,0,0,16,0,0,0,0,0,73,0,216,16,60,11,22,0,18,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,17,58,11,62,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,17,138,11,90,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,17,20,13,12,0,10,0,36,0,12,0,0,0,0,0,0,0,18,0,73,0,128,17,38,13,80,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,17,38,13,80,0,50,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,160,18,188,13,96,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,224,18,132,12,62,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,18,156,12,62,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,19,21,13,98,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,246,12,142,0,45,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,160,20,200,13,72,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,20,188,13,142,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,20,0,14,126,0,100,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,240,20,188,13,158,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,21,124,14,72,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,126,14,96,0,17,0,0,0,0,0,0,0,16,0,0,0,0,0,73,0,80,22,190,14,62,0,20,0,10,0,2,0,0,0,0,0,0,0,0,0,0,0,160,22,220,14,158,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,23,110,15,122,0,80,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,192,34,32,23,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,1,69,79,83,32,49,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,69,79,83,45,49,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,1,69,79,83,32,50,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,116,1,69,79,83,45,49,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,52,2,69,79,83,32,51,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,50,2,69,79,83,45,49,68,32,77,97,114,107,32,73,73,32,78,0,0,0,0,144,1,69,79,83,32,52,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,105,1,69,79,83,45,49,68,32,77,97,114,107,32,73,73,73,0,0,0,0,0,97,2,69,79,83,32,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,129,2,69,79,83,45,49,68,32,77,97,114,107,32,73,86,0,0,0,0,0,0,135,2,69,79,83,32,54,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,103,1,69,79,83,45,49,68,83,0,0,0,0,0,0,0,0,0,0,0,0,0,37,3,69,79,83,32,55,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,69,79,83,32,51,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,136,1,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,0,0,0,0,0,118,1,69,79,83,32,52,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,21,2,69,79,83,45,49,68,115,32,77,97,114,107,32,73,73,73,0,0,0,0,137,1,69,79,83,32,51,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,36,3,69,79,83,45,49,68,32,67,0,0,0,0,0,0,0,0,0,0,0,0,54,2,69,79,83,32,52,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,105,2,69,79,83,45,49,68,32,88,0,0,0,0,0,0,0,0,0,0,0,0,82,2,69,79,83,32,53,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,19,2,69,79,83,32,53,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,2,69,79,83,32,53,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,24,2,69,79,83,32,53,68,32,77,97,114,107,32,73,73,0,0,0,0,0,0,134,2,69,79,83,32,54,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,133,2,69,79,83,32,53,68,32,77,97,114,107,32,73,73,73,0,0,0,0,0,1,3,69,79,83,32,54,53,48,68,0,0,0,0,0,0,0,0,0,0,0,0,2,3,69,79,83,32,54,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,3,69,79,83,32,55,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,80,2,69,79,83,32,55,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,2,69,79,83,32,49,48,48,48,68,0,0,0,0,0,0,0,0,0,0,0,136,2,69,79,83,32,49,49,48,48,68,0,0,0,0,0,0,0,0,0,0,0,39,3,69,79,83,32,49,50,48,48,68,0,0,0,0,0,0,0,0,0,0,0,70,3,69,79,83,32,49,48,48,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,68,83,67,45,82,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,83,76,82,45,65,49,48,48,0,0,0,0,0,0,0,0,0,0,0,1,1,68,83,76,82,45,65,57,48,48,0,0,0,0,0,0,0,0,0,0,0,2,1,68,83,76,82,45,65,55,48,48,0,0,0,0,0,0,0,0,0,0,0,3,1,68,83,76,82,45,65,50,48,48,0,0,0,0,0,0,0,0,0,0,0,4,1,68,83,76,82,45,65,51,53,48,0,0,0,0,0,0,0,0,0,0,0,5,1,68,83,76,82,45,65,51,48,48,0,0,0,0,0,0,0,0,0,0,0,8,1,68,83,76,82,45,65,51,51,48,0,0,0,0,0,0,0,0,0,0,0,9,1,68,83,76,82,45,65,50,51,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+473864);
/* memory initializer */ allocate([10,1,68,83,76,82,45,65,50,57,48,0,0,0,0,0,0,0,0,0,0,0,13,1,68,83,76,82,45,65,56,53,48,0,0,0,0,0,0,0,0,0,0,0,17,1,68,83,76,82,45,65,53,53,48,0,0,0,0,0,0,0,0,0,0,0,18,1,68,83,76,82,45,65,53,48,48,0,0,0,0,0,0,0,0,0,0,0,19,1,68,83,76,82,45,65,52,53,48,0,0,0,0,0,0,0,0,0,0,0,22,1,78,69,88,45,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,1,78,69,88,45,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,83,76,84,45,65,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,83,76,84,45,65,53,53,86,0,0,0,0,0,0,0,0,0,0,0,0,26,1,68,83,76,82,45,65,53,54,48,0,0,0,0,0,0,0,0,0,0,0,27,1,68,83,76,82,45,65,53,56,48,0,0,0,0,0,0,0,0,0,0,0,28,1,78,69,88,45,67,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,83,76,84,45,65,51,53,0,0,0,0,0,0,0,0,0,0,0,0,0,30,1,83,76,84,45,65,54,53,86,0,0,0,0,0,0,0,0,0,0,0,0,31,1,83,76,84,45,65,55,55,86,0,0,0,0,0,0,0,0,0,0,0,0,32,1,78,69,88,45,53,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,1,78,69,88,45,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,1,83,76,84,45,65,51,55,0,0,0,0,0,0,0,0,0,0,0,0,0,36,1,83,76,84,45,65,53,55,0,0,0,0,0,0,0,0,0,0,0,0,0,37,1,78,69,88,45,70,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,1,83,76,84,45,65,57,57,86,0,0,0,0,0,0,0,0,0,0,0,0,39,1,78,69,88,45,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,1,78,69,88,45,53,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,1,68,83,67,45,82,88,49,48,48,0,0,0,0,0,0,0,0,0,0,0,42,1,68,83,67,45,82,88,49,0,0,0,0,0,0,0,0,0,0,0,0,0,46,1,73,76,67,69,45,51,48,48,48,0,0,0,0,0,0,0,0,0,0,0,47,1,83,76,84,45,65,53,56,0,0,0,0,0,0,0,0,0,0,0,0,0,49,1,78,69,88,45,51,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,1,73,76,67,69,45,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,1,78,69,88,45,53,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,1,68,83,67,45,82,88,49,48,48,77,50,0,0,0,0,0,0,0,0,0,53,1,68,83,67,45,82,88,49,48,0,0,0,0,0,0,0,0,0,0,0,0,54,1,68,83,67,45,82,88,49,82,0,0,0,0,0,0,0,0,0,0,0,0,55,1,73,76,67,69,45,55,82,0,0,0,0,0,0,0,0,0,0,0,0,0,56,1,73,76,67,69,45,54,48,48,48,0,0,0,0,0,0,0,0,0,0,0,57,1,73,76,67,69,45,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,61,1,68,83,67,45,82,88,49,48,48,77,51,0,0,0,0,0,0,0,0,0,62,1,73,76,67,69,45,55,83,0,0,0,0,0,0,0,0,0,0,0,0,0,63,1,73,76,67,65,45,55,55,77,50,0,0,0,0,0,0,0,0,0,0,0,83,1,73,76,67,69,45,53,49,48,48,0,0,0,0,0,0,0,0,0,0,0,84,1,73,76,67,69,45,55,77,50,0,0,0,0,0,0,0,0,0,0,0,0,90,1,73,76,67,69,45,81,88,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,4,0,3,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,48,56,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,22,0,112,5,16,4,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,49,52,53,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,29,0,64,6,176,4,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,50,48,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,82,77,0,28,10,166,7,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,82,77,0,28,10,166,7,0,0,0,0,0,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,80,164,154,0,28,10,166,7,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,164,154,0,28,10,166,7,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,53,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,208,137,246,0,200,12,165,9,0,0,0,0,9,148,0,0,65,86,84,0,0,0,0,0,0,0,70,45,56,49,48,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,243,0,192,12,144,9,0,0,0,0,8,97,0,1,65,103,102,97,80,104,111,116,111,0,68,67,45,56,51,51,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,247,146,0,228,9,110,7,0,0,0,0,96,97,0,0,65,108,99,97,116,101,108,0,0,0,53,48,51,53,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,197,43,0,104,5,12,4,0,0,0,0,64,73,0,8,66,97,117,109,101,114,0,0,0,0,84,88,71,49,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,4,80,215,80,0,96,9,230,6,12,12,44,2,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,68,51,48,48,0,0,0,0,0,0,0,96,255,99,0,104,10,176,7,4,4,44,4,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,54,48,0,0,0,0,0,0,0,0,64,76,100,0,112,10,176,7,12,8,44,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,0,0,0,0,0,0,96,133,101,0,112,10,200,7,10,6,42,2,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,51,48,0,0,0,0,0,0,0,0,240,168,117,0,72,11,88,8,44,8,4,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,51,32,73,83,0,0,0,0,0,0,0,16,174,140,0,80,12,36,9,36,12,4,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,50,48,0,0,0,0,0,0,0,0,104,10,141,0,80,12,42,9,12,7,44,13,40,73,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,52,55,48,0,0,0,0,0,0,0,0,224,204,157,0,8,13,176,9,6,5,32,3,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,55,50,48,32,73,83,0,0,0,0,0,16,111,158,0,16,13,180,9,12,6,44,6,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,51,48,0,0,0,0,0,0,0,0,88,135,197,0,152,14,212,10,12,6,52,6,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,52,48,0,0,0,0,0,0,0,0,16,151,238,0,8,16,232,11,48,12,24,12,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,53,48,0,0,0,0,0,0,0,0,240,4,236,0,136,14,212,10,6,12,30,0,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,49,48,32,73,83,0,0,0,0,240,9,237,0,144,14,218,10,12,9,44,9,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,49,50,48,32,73,83,0,0,0,0,64,162,28,1,240,15,232,11,24,12,24,12,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,48,32,73,83,0,0,0,0,0,240,234,35,1,72,16,244,11,92,16,4,1,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,0,0,224,183,78,1,112,17,204,12,25,10,73,12,40,22,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,51,48,32,73,83,0,0,0,0,0,0,67,121,1,96,18,176,13,8,16,56,8,40,148,0,2,67,97,110,111,110,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,51,51,48,48,32,73,83,0,0,0,0,32,40,30,0,96,6,187,4,0,2,0,1,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,50,48,48,48,85,88,0,0,0,0,0,0,0,0,0,0,0,0,0,96,25,49,0,32,8,11,6,0,0,10,1,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,51,42,48,48,69,88,0,0,0,0,0,0,0,0,0,0,0,0,0,128,226,94,0,25,10,132,7,0,0,9,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,53,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,0,51,11,133,8,0,0,34,36,0,22,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,54,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,44,0,85,6,184,4,0,0,1,0,0,148,7,13,67,97,115,105,111,0,0,0,0,0,69,88,45,83,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,130,75,0,42,8,42,6,0,0,32,34,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,83,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,92,0,42,9,184,6,2,0,32,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,81,86,45,82,52,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,82,113,0,8,10,136,7,0,0,0,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,53,48,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,233,114,0,42,10,137,7,0,0,22,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,81,86,45,82,53,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,115,0,42,10,140,7,0,0,32,0,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,99,115,0,42,10,145,7,0,0,25,0,0,22,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,78,118,0,42,10,194,7,0,0,32,26,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,142,0,42,11,124,8,0,0,14,30,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,81,165,0,42,12,15,9,0,0,27,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,55,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,118,165,0,42,12,17,9,0,0,25,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,135,167,0,42,12,46,9,0,0,32,32,0,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,80,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,214,187,0,213,12,194,9,0,0,6,30,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,56,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,190,0,0,13,198,9,0,0,47,35,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,236,0,170,14,192,10,0,0,82,0,0,148,0,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,49,48,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,29,1,0,16,228,11,0,0,24,0,80,148,7,1,67,97,115,105,111,0,0,0,0,0,69,88,45,90,82,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,63,117,0,212,8,164,6,0,0,0,0,13,148,0,1,67,97,115,105,111,0,0,0,0,0,81,86,45,52,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,12,0,0,4,1,3,0,1,0,0,0,73,0,0,67,114,101,97,116,105,118,101,0,0,80,67,45,67,65,77,32,54,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,230,183,1,32,17,216,12,0,0,0,0,36,97,0,0,68,74,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,231,0,0,18,216,12,0,0,0,0,0,148,0,0,77,97,116,114,105,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,58,0,64,6,176,4,0,0,0,0,65,73,0,0,70,111,99,117,108,117,115,0,0,0,53,51,49,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,4,0,128,2,224,1,0,0,0,0,0,148,0,0,71,101,110,101,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,0,0,0,1,244,0,1,1,6,1,0,141,0,0,75,111,100,97,107,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,1,0,0,2,244,0,1,1,10,1,0,141,0,0,75,111,100,97,107,0,0,0,0,0,68,67,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,25,0,0,6,52,4,0,52,0,0,0,97,0,0,75,111,100,97,107,0,0,0,0,0,68,67,83,50,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,119,63,0,34,9,243,6,1,33,1,2,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,131,63,0,34,9,243,6,1,33,1,2,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,12,0,74,34,0,208,4,144,3,0,0,16,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,51,0,208,4,144,3,0,0,16,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,51,51,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,11,94,0,48,11,104,8,0,0,0,0,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,23,94,0,48,11,104,8,0,0,0,0,0,148,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,12,0,8,7,0,128,2,224,1,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,139,0,32,11,86,8,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,67,54,48,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,201,186,0,200,15,214,11,2,0,0,13,0,73,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,68,187,0,200,15,214,11,2,0,0,13,0,73,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,123,128,168,18,1,160,15,184,11,0,0,0,0,0,0,0,0,75,111,100,97,107,0,0,0,0,0,49,50,77,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,9,0,128,2,224,1,0,3,0,0,64,148,0,0,75,111,100,97,107,0,0,0,0,0,75,65,73,45,48,51,52,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,234,0,128,12,96,9,0,0,0,0,96,22,0,0,76,101,110,111,118,111,0,0,0,0,65,56,50,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,71,59,0,72,6,183,4,0,0,0,0,96,22,0,0,77,105,99,114,111,110,0,0,0,0,50,48,49,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,12,0,96,17,0,254,5,218,3,0,0,0,0,0,97,0,0,77,105,110,111,108,116,97,0,0,0,82,68,49,55,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,32,24,0,25,5,201,3,0,0,18,6,6,30,4,1,78,105,107,111,110,0,0,0,0,0,69,57,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,37,0,102,6,180,4,0,0,22,1,6,75,5,1,78,105,107,111,110,0,0,0,0,0,69,57,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,44,0,80,6,189,4,0,0,0,7,30,148,0,1,78,105,107,111,110,0,0,0,0,0,69,50,49,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,72,0,16,8,5,6,0,0,0,1,6,225,0,1,78,105,107,111,110,0,0,0,0,0,69,57,57,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,72,0,16,8,6,6,0,0,0,0,30,148,0,1,78,105,107,111,110,0,0,0,0,0,69,51,55,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,89,0,240,8,173,6,0,0,0,1,6,180,0,1,78,105,107,111,110,0,0,0,0,0,69,52,53,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,89,0,240,8,174,6,0,0,0,0,6,22,0,1,78,105,107,111,110,0,0,0,0,0,69,52,51,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,113,0,16,10,133,7,0,0,0,1,6,180,0,1,78,105,107,111,110,0,0,0,0,0,69,53,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,137,0,16,11,70,8,0,0,0,0,30,148,7,1,78,105,107,111,110,0,0,0,0,0,67,79,79,76,80,73,88,32,83,54,0,0,0,0,0,0,0,0,0,0,0,0,0,160,90,0,0,9,182,6,0,0,0,0,30,22,0,0,79,108,121,109,112,117,115,0,0,0,67,55,55,48,85,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,48,0,16,8,4,6,0,0,0,0,0,148,0,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226,73,0,42,8,8,6,0,0,22,0,0,148,7,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,75,93,0,42,9,201,6,0,0,22,0,0,148,7,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,83,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,163,0,0,12,18,9,0,0,0,21,30,148,0,1,80,101,110,116,97,120,0,0,0,0,79,112,116,105,111,32,55,53,48,90,0,0,0,0,0,0,0,0,0,0,0,0,0,38,202,0,160,8,184,11,0,0,0,0,13,97,0,0,80,105,120,101,108,105,110,107,0,0,65,55,56,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,8,0,6,0,0,0,0,96,97,0,0,82,111,118,101,114,83,104,111,116,0,51,51,50,48,65,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,193,4,0,132,2,228,1,0,0,0,0,0,22,0,8,83,84,32,77,105,99,114,111,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,0,0,0,0,0,0,0,163,245,0,216,12,144,9,0,0,24,0,9,148,0,1,83,97,109,115,117,110,103,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,247,0,240,12,144,9,0,0,48,0,9,148,0,1,83,97,109,115,117,110,103,0,0,0,83,56,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,56,1,64,14,248,10,0,0,0,0,13,148,5,1,83,97,109,115,117,110,103,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,110,1,160,15,184,11,0,0,0,0,13,148,5,1,83,97,109,115,117,110,103,0,0,0,87,66,53,53,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,192,0,0,12,0,8,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,2,252,1,240,15,240,15,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,68,88,165,2,240,15,64,21,0,0,0,0,33,97,0,0,83,105,110,97,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,128,21,0,96,5,0,4,0,0,1,0,0,73,0,0,83,111,110,121,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,96,5,0,4,0,0,1,0,97,73,0,0,83,111,110,121,0,0,0,0,0,0,88,67,68,45,83,88,57,49,48,67,82,0,0,0,0,0,0,0,0,0,0,0,112,121,7,0,136,240,6,0,128,121,7,0,136,121,7,0,144,121,7,0,160,121,7,0,168,121,7,0,176,121,7,0,184,250,6,0,192,121,7,0,200,121,7,0,216,239,6,0,160,239,6,0,208,121,7,0,216,121,7,0,88,252,6,0,40,240,6,0,224,121,7,0,232,121,7,0,248,86,7,0,240,121,7,0,0,0,0,0,65,103,102,97,80,104,111,116,111,0,0,0,0,0,0,0,67,97,115,105,111,0,0,0,69,112,115,111,110,0,0,0,70,117,106,105,102,105,108,109,0,0,0,0,0,0,0,0,77,97,109,105,121,97,0,0,77,105,110,111,108,116,97,0,77,111,116,111,114,111,108,97,0,0,0,0,0,0,0,0,75,111,110,105,99,97,0,0,76,101,105,99,97,0,0,0,79,108,121,109,112,117,115,0,80,101,110,116,97,120,0,0,83,97,109,115,117,110,103,0,83,105,103,109,97,0,0,0,83,111,110,121,0,0,0,0,0,0,0,0,0,0,0,0,72,69,65,80,67,67,68,82,0,0,0,0,0,0,0,0,255,216,255,225,0,0,0,0,69,120,105,102,0,0,0,0,65,82,69,67,79,89,75,0,67,111,110,116,97,120,0,0,78,32,68,105,103,105,116,97,108,0,0,0,0,0,0,0,80,88,78,0,0,0,0,0,76,111,103,105,116,101,99,104,0,0,0,0,0,0,0,0,70,111,116,111,109,97,110,32,80,105,120,116,117,114,97,0,113,107,116,107,0,0,0,0,65,112,112,108,101,0,0,0,81,117,105,99,107,84,97,107,101,32,49,48,48,0,0,0,113,107,116,110,0,0,0,0,81,117,105,99,107,84,97,107,101,32,49,53,48,0,0,0,102,116,121,112,113,116,32,32,32,0,0,0,0,0,0,0,0,1,0,1,0,64,0,0,78,79,75,73,65,82,65,87,0,0,0,0,0,0,0,0,78,79,75,73,65,0,0,0,65,82,82,73,0,0,0,0,88,80,68,83,0,0,0,0,82,69,68,49,0,0,0,0,68,83,67,45,73,109,97,103,101,0,0,0,0,0,0,0,80,87,65,68,0,0,0,0,0,77,82,77,0,0,0,0,70,79,86,98,0,0,0,0,67,73,0,0,0,0,0,0,111,118,0,0,0,0,0,0,82,80,95,79,86,0,0,0,66,82,67,77,110,0,0,0,32,68,73,71,73,84,65,76,32,67,65,77,69,82,65,0,70,73,76,69,32,86,69,82,83,73,79,78,0,0,0,0,70,105,110,101,80,105,120,32,0,0,0,0,0,0,0,0,68,105,103,105,116,97,108,32,67,97,109,101,114,97,32,0,75,45,114,0,0,0,0,0,75,45,120,0,0,0,0,0,75,45,53,0,0,0,0,0,75,45,55,0,0,0,0,0,75,45,51,0,0,0,0,0,54,52,53,68,0,0,0,0,75,65,73,45,48,51,52,48,0,0,0,0,0,0,0,0,67,54,48,51,0,0,0,0,80,111,119,101,114,83,104,111,116,32,54,48,48,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,32,90,111,111,109,0,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,53,48,0,0,0,80,111,119,101,114,83,104,111,116,32,80,114,111,55,48,0,80,111,119,101,114,83,104,111,116,32,80,114,111,57,48,32,73,83,0,0,0,0,0,0,80,111,119,101,114,83,104,111,116,32,71,49,0,0,0,0,80,111,119,101,114,83,104,111,116,32,65,54,49,48,0,0,83,50,32,73,83,0,0,0,80,111,119,101,114,83,104,111,116,32,83,88,50,50,48,32,72,83,0,0,0,0,0,0,69,79,83,32,68,50,48,48,48,67,0,0,0,0,0,0,68,49,0,0,0,0,0,0,68,49,88,0,0,0,0,0,68,52,48,88,0,0,0,0,68,54,48,0,0,0,0,0,68,56,48,0,0,0,0,0,68,51,48,48,48,0,0,0,68,51,0,0,0,0,0,0,68,51,83,0,0,0,0,0,68,55,48,48,0,0,0,0,68,51,49,48,48,0,0,0,68,53,48,48,48,0,0,0,68,57,48,0,0,0,0,0,68,53,49,48,48,0,0,0,68,55,48,48,48,0,0,0,67,79,79,76,80,73,88,32,65,0,0,0,0,0,0,0,68,51,50,48,48,0,0,0,68,54,0,0,0,0,0,0,68,56,48,48,0,0,0,0,68,52,0,0,0,0,0,0,68,102,0,0,0,0,0,0,68,52,48,0,0,0,0,0,68,53,48,0,0,0,0,0,68,55,48,0,0,0,0,0,68,49,48,48,0,0,0,0,68,50,48,48,0,0,0,0,68,50,72,0,0,0,0,0,68,50,88,0,0,0,0,0,68,51,48,48,0,0,0,0,67,79,79,76,80,73,88,32,80,0,0,0,0,0,0,0,49,32,0,0,0,0,0,0,69,57,57,53,0,0,0,0,69,50,53,48,48,0,0,0,79,112,116,105,111,32,51,51,87,82,0,0,0,0,0,0,68,105,77,65,71,69,32,90,50,0,0,0,0,0,0,0,83,50,80,114,111,0,0,0,72,83,53,48,69,88,82,0,70,57,48,48,69,88,82,0,75,68,45,52,48,48,90,0,75,68,45,53,49,48,90,0,68,105,77,65,71,69,32,65,0,0,0,0,0,0,0,0,65,76,80,72,65,0,0,0,68,89,78,65,88,0,0,0,77,65,88,88,85,77,0,0,68,89,78,65,88,32,37,45,49,48,115,0,0,0,0,0,68,105,77,65,71,69,32,71,0,0,0,0,0,0,0,0,42,105,115,116,32,68,0,0,42,105,115,116,32,68,83,0,69,88,49,0,0,0,0,0,87,66,50,48,48,48,0,0,87,66,53,53,48,0,0,0,69,88,50,70,0,0,0,0,83,84,86,54,56,48,32,86,71,65,0,0,0,0,0,0,78,57,53,0,0,0,0,0,54,52,48,120,52,56,48,0,86,57,54,67,0,0,0,0,82,66,84,71,0,0,0,0,67,97,116,99,104,76,105,103,104,116,0,0,0,0,0,0,148,97,73,22,0,0,0,0,67,55,55,48,85,90,0,0,69,45,51,48,48,0,0,0,69,45,53,48,48,0,0,0,69,45,51,51,48,0,0,0,83,80,53,53,48,85,90,0,68,83,67,45,70,56,50,56,0,0,0,0,0,0,0,0,82,71,66,69,0,0,0,0,68,83,67,45,86,51,0,0,82,88,49,0,0,0,0,0,65,57,57,0,0,0,0,0,68,83,76,82,45,65,51,53,48,0,0,0,0,0,0,0,80,73,88,76,0,0,0,0,67,51,51,48,0,0,0,0,49,50,77,80,0,0,0,0,69,97,115,121,83,104,97,114,101,0,0,0,0,0,0,0,78,67,50,48,48,48,0,0,69,79,83,68,67,83,0,0,68,67,83,52,0,0,0,0,68,67,83,52,54,48,65,0,68,67,83,54,54,48,77,0,68,67,83,55,54,48,77,0,50,48,88,0,0,0,0,0,77,89,67,89,0,0,0,0,68,67,50,53,0,0,0,0,52,48,0,0,0,0,0,0,68,67,52,48,0,0,0,0,68,67,53,48,0,0,0,0,68,67,49,50,48,0,0,0,68,67,83,50,48,48,0,0,81,117,105,99,107,84,97,107,101,0,0,0,0,0,0,0,37,100,120,37,100,0,0,0,81,117,105,99,107,116,97,107,101,0,0,0,0,0,0,0,37,115,58,32,89,111,117,32,109,117,115,116,32,108,105,110,107,32,100,99,114,97,119,32,119,105,116,104,32,37,115,33,33,10,0,0,0,0,0,0,108,105,98,106,97,115,112,101,114,0,0,0,0,0,0,0,108,105,98,106,112,101,103,0,82,71,66,71,0,0,0,0,71,77,67,89,0,0,0,0,64,220,213,171,200,232,219,63,99,183,207,42,51,165,216,63,114,191,67,81,160,79,194,63,248,198,16,0,28,123,204,63,152,162,92,26,191,240,230,63,225,126,192,3,3,8,175,63,129,91,119,243,84,135,140,63,145,42,138,87,89,219,184,63,1,252,83,170,68,217,230,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,217,175,59,221,121,226,230,63,168,112,4,169,20,59,210,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,13,106,191,181,19,165,63,150,35,100,32,207,174,238,63,27,217,149,150,145,250,226,63,102,78,151,197,196,230,217,63,161,246,91,59,81,18,98,63,210,253,156,130,252,108,184,63,157,246,148,156,19,251,234,63,253,219,101,191,238,116,175,63,68,20,147,55,192,204,135,63,239,171,114,161,242,175,177,63,49,94,243,170,206,106,237,63,74,240,134,52,42,240,224,63,119,245,42,50,58,32,213,63,218,226,26,159,201,254,193,63,207,17,249,46,165,46,185,63,165,107,38,223,108,243,235,63,224,73,11,151,85,216,156,63,167,236,244,131,186,72,145,63,235,1,243,144,41,31,190,63,71,4,227,224,210,177,235,63,80,128,7,0,152,128,7,0,224,128,7,0,40,129,7,0,0,1,0,0,0,0,0,0,160,129,7,0,168,129,7,0,192,129,7,0,208,129,7,0,224,129,7,0,0,0,0,0,115,82,71,66,0,0,0,0,65,100,111,98,101,32,82,71,66,32,40,49,57,57,56,41,0,0,0,0,0,0,0,0,87,105,100,101,71,97,109,117,116,32,68,54,53,0,0,0,80,114,111,80,104,111,116,111,32,68,54,53,0,0,0,0,88,89,90,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,16,2,114,116,110,109,32,66,71,82,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,112,115,99,97,0,0,0,0,0,0,0,0,101,110,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,214,246,0,0,0,0,1,0,45,211,0,0,10,0,0,0,116,114,112,99,0,0,0,0,36,0,0,0,99,115,101,100,0,0,0,0,40,0,0,0,116,112,116,119,0,0,0,0,20,0,0,0,116,112,107,98,0,0,0,0,20,0,0,0,67,82,84,114,0,0,0,0,14,0,0,0,67,82,84,103,0,0,0,0,14,0,0,0,67,82,84,98,0,0,0,0,14,0,0,0,90,89,88,114,0,0,0,0,20,0,0,0,90,89,88,103,0,0,0,0,20,0,0,0,90,89,88,98,0,0,0,0,20,0,0,0,0,0,0,0,81,243,0,0,0,0,1,0,204,22,1,0,0,0,0,0,118,114,117,99,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,99,111,110,118,101,114,116,95,116,111,95,114,103,98,40,41,0,0,0,0,0,0,0,0,97,117,116,111,45,103,101,110,101,114,97,116,101,100,32,98,121,32,100,99,114,97,119,0,66,117,105,108,100,105,110,103,32,104,105,115,116,111,103,114,97,109,115,46,46,46,10,0,67,111,110,118,101,114,116,105,110,103,32,116,111,32,37,115,32,99,111,108,111,114,115,112,97,99,101,46,46,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+484110);
/* memory initializer */ allocate([82,111,116,97,116,105,110,103,32,105,109,97,103,101,32,52,53,32,100,101,103,114,101,101,115,46,46,46,10,0,0,0,102,117,106,105,95,114,111,116,97,116,101,40,41,0,0,0,83,116,114,101,116,99,104,105,110,103,32,116,104,101,32,105,109,97,103,101,46,46,46,10,0,0,0,0,0,0,0,0,115,116,114,101,116,99,104,40,41,0,0,0,0,0,0,0,49,50,52,51,53,56,54,55,0,0,0,0,0,0,0,0,100,99,114,97,119,32,118,57,46,50,53,0,0,0,0,0,37,48,52,100,58,37,48,50,100,58,37,48,50,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,0,0,106,112,101,103,95,116,104,117,109,98,40,41,0,0,0,0,255,225,32,32,69,120,105,102,0,0,0,0,0,0,0,0,119,114,105,116,101,95,112,112,109,95,116,105,102,102,40,41,0,0,0,0,0,0,0,0,80,55,10,87,73,68,84,72,32,37,100,10,72,69,73,71,72,84,32,37,100,10,68,69,80,84,72,32,37,100,10,77,65,88,86,65,76,32,37,100,10,84,85,80,76,84,89,80,69,32,37,115,10,69,78,68,72,68,82,10,0,0,0,0,80,37,100,10,37,100,32,37,100,10,37,100,10,0,0,0,84,90,61,85,84,67,0,0,10,82,97,119,32,112,104,111,116,111,32,100,101,99,111,100,101,114,32,34,100,99,114,97,119,34,32,118,37,115,0,0,57,46,50,53,0,0,0,0,10,85,115,97,103,101,58,32,32,37,115,32,91,79,80,84,73,79,78,93,46,46,46,32,91,70,73,76,69,93,46,46,46,10,10,0,0,0,0,0,45,118,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,98,111,115,101,32,109,101,115,115,97,103,101,115,0,0,0,0,0,0,0,0,45,99,32,32,32,32,32,32,32,32,87,114,105,116,101,32,105,109,97,103,101,32,100,97,116,97,32,116,111,32,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0,0,0,45,101,32,32,32,32,32,32,32,32,69,120,116,114,97,99,116,32,101,109,98,101,100,100,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0,0,0,0,0,0,45,105,32,32,32,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,119,105,116,104,111,117,116,32,100,101,99,111,100,105,110,103,32,116,104,101,109,0,0,45,105,32,45,118,32,32,32,32,32,73,100,101,110,116,105,102,121,32,102,105,108,101,115,32,97,110,100,32,115,104,111,119,32,109,101,116,97,100,97,116,97,0,0,0,0,0,0,45,122,32,32,32,32,32,32,32,32,67,104,97,110,103,101,32,102,105,108,101,32,100,97,116,101,115,32,116,111,32,99,97,109,101,114,97,32,116,105,109,101,115,116,97,109,112,0,45,119,32,32,32,32,32,32,32,32,85,115,101,32,99,97,109,101,114,97,32,119,104,105,116,101,32,98,97,108,97,110,99,101,44,32,105,102,32,112,111,115,115,105,98,108,101,0,45,97,32,32,32,32,32,32,32,32,65,118,101,114,97,103,101,32,116,104,101,32,119,104,111,108,101,32,105,109,97,103,101,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,0,0,0,0,45,65,32,60,120,32,121,32,119,32,104,62,32,65,118,101,114,97,103,101,32,97,32,103,114,101,121,32,98,111,120,32,102,111,114,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,0,0,0,0,0,0,45,114,32,60,114,32,103,32,98,32,103,62,32,83,101,116,32,99,117,115,116,111,109,32,119,104,105,116,101,32,98,97,108,97,110,99,101,0,0,0,43,77,47,45,77,32,32,32,32,32,85,115,101,47,100,111,110,39,116,32,117,115,101,32,97,110,32,101,109,98,101,100,100,101,100,32,99,111,108,111,114,32,109,97,116,114,105,120,0,0,0,0,0,0,0,0,45,67,32,60,114,32,98,62,32,32,67,111,114,114,101,99,116,32,99,104,114,111,109,97,116,105,99,32,97,98,101,114,114,97,116,105,111,110,0,0,45,80,32,60,102,105,108,101,62,32,70,105,120,32,116,104,101,32,100,101,97,100,32,112,105,120,101,108,115,32,108,105,115,116,101,100,32,105,110,32,116,104,105,115,32,102,105,108,101,0,0,0,0,0,0,0,45,75,32,60,102,105,108,101,62,32,83,117,98,116,114,97,99,116,32,100,97,114,107,32,102,114,97,109,101,32,40,49,54,45,98,105,116,32,114,97,119,32,80,71,77,41,0,0,45,107,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,100,97,114,107,110,101,115,115,32,108,101,118,101,108,0,0,0,0,0,0,0,0,45,83,32,60,110,117,109,62,32,32,83,101,116,32,116,104,101,32,115,97,116,117,114,97,116,105,111,110,32,108,101,118,101,108,0,0,0,0,0,0,45,110,32,60,110,117,109,62,32,32,83,101,116,32,116,104,114,101,115,104,111,108,100,32,102,111,114,32,119,97,118,101,108,101,116,32,100,101,110,111,105,115,105,110,103,0,0,0,45,72,32,91,48,45,57,93,32,32,72,105,103,104,108,105,103,104,116,32,109,111,100,101,32,40,48,61,99,108,105,112,44,32,49,61,117,110,99,108,105,112,44,32,50,61,98,108,101,110,100,44,32,51,43,61,114,101,98,117,105,108,100,41,0,0,0,0,0,0,0,0,45,116,32,91,48,45,55,93,32,32,70,108,105,112,32,105,109,97,103,101,32,40,48,61,110,111,110,101,44,32,51,61,49,56,48,44,32,53,61,57,48,67,67,87,44,32,54,61,57,48,67,87,41,0,0,0,45,111,32,91,48,45,53,93,32,32,79,117,116,112,117,116,32,99,111,108,111,114,115,112,97,99,101,32,40,114,97,119,44,115,82,71,66,44,65,100,111,98,101,44,87,105,100,101,44,80,114,111,80,104,111,116,111,44,88,89,90,41,0,0,45,100,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,40,110,111,32,99,111,108,111,114,44,32,110,111,32,105,110,116,101,114,112,111,108,97,116,105,111,110,41,0,0,0,0,45,68,32,32,32,32,32,32,32,32,68,111,99,117,109,101,110,116,32,109,111,100,101,32,119,105,116,104,111,117,116,32,115,99,97,108,105,110,103,32,40,116,111,116,97,108,108,121,32,114,97,119,41,0,0,0,45,106,32,32,32,32,32,32,32,32,68,111,110,39,116,32,115,116,114,101,116,99,104,32,111,114,32,114,111,116,97,116,101,32,114,97,119,32,112,105,120,101,108,115,0,0,0,0,45,87,32,32,32,32,32,32,32,32,68,111,110,39,116,32,97,117,116,111,109,97,116,105,99,97,108,108,121,32,98,114,105,103,104,116,101,110,32,116,104,101,32,105,109,97,103,101,0,0,0,0,0,0,0,0,45,98,32,60,110,117,109,62,32,32,65,100,106,117,115,116,32,98,114,105,103,104,116,110,101,115,115,32,40,100,101,102,97,117,108,116,32,61,32,49,46,48,41,0,0,0,0,0,45,103,32,60,112,32,116,115,62,32,83,101,116,32,99,117,115,116,111,109,32,103,97,109,109,97,32,99,117,114,118,101,32,40,100,101,102,97,117,108,116,32,61,32,50,46,50,50,50,32,52,46,53,41,0,0,45,113,32,91,48,45,51,93,32,32,83,101,116,32,116,104,101,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,113,117,97,108,105,116,121,0,45,104,32,32,32,32,32,32,32,32,72,97,108,102,45,115,105,122,101,32,99,111,108,111,114,32,105,109,97,103,101,32,40,116,119,105,99,101,32,97,115,32,102,97,115,116,32,97,115,32,34,45,113,32,48,34,41,0,0,0,0,0,0,0,45,102,32,32,32,32,32,32,32,32,73,110,116,101,114,112,111,108,97,116,101,32,82,71,71,66,32,97,115,32,102,111,117,114,32,99,111,108,111,114,115,0,0,0,0,0,0,0,45,109,32,60,110,117,109,62,32,32,65,112,112,108,121,32,97,32,51,120,51,32,109,101,100,105,97,110,32,102,105,108,116,101,114,32,116,111,32,82,45,71,32,97,110,100,32,66,45,71,0,0,0,0,0,0,45,115,32,91,48,46,46,78,45,49,93,32,83,101,108,101,99,116,32,111,110,101,32,114,97,119,32,105,109,97,103,101,32,111,114,32,34,97,108,108,34,32,102,114,111,109,32,101,97,99,104,32,102,105,108,101,0,0,0,0,0,0,0,0,45,54,32,32,32,32,32,32,32,32,87,114,105,116,101,32,49,54,45,98,105,116,32,105,110,115,116,101,97,100,32,111,102,32,56,45,98,105,116,0,45,52,32,32,32,32,32,32,32,32,76,105,110,101,97,114,32,49,54,45,98,105,116,44,32,115,97,109,101,32,97,115,32,34,45,54,32,45,87,32,45,103,32,49,32,49,34,0,45,84,32,32,32,32,32,32,32,32,87,114,105,116,101,32,84,73,70,70,32,105,110,115,116,101,97,100,32,111,102,32,80,80,77,0,0,0,0,0,110,98,114,107,83,116,113,109,72,65,67,103,0,0,0,0,49,49,52,49,49,49,49,49,49,52,50,50,0,0,0,0,78,111,110,45,110,117,109,101,114,105,99,32,97,114,103,117,109,101,110,116,32,116,111,32,34,45,37,99,34,10,0,0,97,108,108,0,0,0,0,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,32,34,45,37,99,34,46,10,0,0,78,111,32,102,105,108,101,115,32,116,111,32,112,114,111,99,101,115,115,46,10,0,0,0,87,105,108,108,32,110,111,116,32,119,114,105,116,101,32,97,110,32,105,109,97,103,101,32,116,111,32,116,104,101,32,116,101,114,109,105,110,97,108,33,10,0,0,0,0,0,0,0,37,115,32,104,97,115,32,110,111,32,116,105,109,101,115,116,97,109,112,46,10,0,0,0,37,49,48,108,100,37,49,48,100,32,37,115,10,0,0,0,37,115,32,116,105,109,101,32,115,101,116,32,116,111,32,37,100,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,32,104,97,115,32,110,111,32,116,104,117,109,98,110,97,105,108,46,10,0,0,0,10,70,105,108,101,110,97,109,101,58,32,37,115,10,0,0,84,105,109,101,115,116,97,109,112,58,32,37,115,0,0,0,67,97,109,101,114,97,58,32,37,115,32,37,115,10,0,0,79,119,110,101,114,58,32,37,115,10,0,0,0,0,0,0,68,78,71,32,86,101,114,115,105,111,110,58,32,0,0,0,37,100,37,99,0,0,0,0,73,83,79,32,115,112,101,101,100,58,32,37,100,10,0,0,83,104,117,116,116,101,114,58,32,0,0,0,0,0,0,0,49,47,0,0,0,0,0,0,37,48,46,49,102,32,115,101,99,10,0,0,0,0,0,0,65,112,101,114,116,117,114,101,58,32,102,47,37,48,46,49,102,10,0,0,0,0,0,0,70,111,99,97,108,32,108,101,110,103,116,104,58,32,37,48,46,49,102,32,109,109,10,0,69,109,98,101,100,100,101,100,32,73,67,67,32,112,114,111,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,121,101,115,0,0,0,0,0,110,111,0,0,0,0,0,0,78,117,109,98,101,114,32,111,102,32,114,97,119,32,105,109,97,103,101,115,58,32,37,100,10,0,0,0,0,0,0,0,80,105,120,101,108,32,65,115,112,101,99,116,32,82,97,116,105,111,58,32,37,48,46,54,102,10,0,0,0,0,0,0,84,104,117,109,98,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0,0,70,117,108,108,32,115,105,122,101,58,32,32,32,37,52,100,32,120,32,37,100,10,0,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,102,105,108,101,32,37,115,10,0,0,73,109,97,103,101,32,115,105,122,101,58,32,32,37,52,100,32,120,32,37,100,10,0,0,79,117,116,112,117,116,32,115,105,122,101,58,32,37,52,100,32,120,32,37,100,10,0,0,82,97,119,32,99,111,108,111,114,115,58,32,37,100,0,0,10,70,105,108,116,101,114,32,112,97,116,116,101,114,110,58,32,0,0,0,0,0,0,0,10,68,97,121,108,105,103,104,116,32,109,117,108,116,105,112,108,105,101,114,115,58,0,0,10,67,97,109,101,114,97,32,109,117,108,116,105,112,108,105,101,114,115,58,0,0,0,0,37,115,32,105,115,32,97,32,37,115,32,37,115,32,105,109,97,103,101,46,10,0,0,0,109,97,105,110,40,41,0,0,76,111,97,100,105,110,103,32,37,115,32,37,115,32,105,109,97,103,101,32,102,114,111,109,32,37,115,32,46,46,46,10,0,0,0,0,0,0,0,0,37,115,58,32,34,45,115,32,37,100,34,32,114,101,113,117,101,115,116,115,32,97,32,110,111,110,101,120,105,115,116,101,110,116,32,105,109,97,103,101,33,10,0,0,0,0,0,0,46,116,105,102,102,0,0,0,46,112,103,109,0,46,112,112,109,0,46,112,112,109,0,46,112,97,109,0,0,0,0,0,115,116,97,110,100,97,114,100,32,111,117,116,112,117,116,0,95,37,48,42,100,0,0,0,46,116,104,117,109,98,0,0,119,98,0,0,0,0,0,0,87,114,105,116,105,110,103,32,100,97,116,97,32,116,111,32,37,115,32,46,46,46,10,0,10,98,121,32,68,97,118,101,32,67,111,102,102,105,110,44,32,100,99,111,102,102,105,110,32,97,32,99,121,98,101,114,99,111,109,32,111,32,110,101,116,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,93,61,127,102,158,160,230,63,0,0,0,0,0,136,57,61,68,23,117,250,82,176,230,63,0,0,0,0,0,0,216,60,254,217,11,117,18,192,230,63,0,0,0,0,0,120,40,189,191,118,212,221,220,207,230,63,0,0,0,0,0,192,30,61,41,26,101,60,178,223,230,63,0,0,0,0,0,0,216,188,227,58,89,152,146,239,230,63,0,0,0,0,0,0,188,188,134,147,81,249,125,255,230,63,0,0,0,0,0,216,47,189,163,45,244,102,116,15,231,63,0,0,0,0,0,136,44,189,195,95,236,232,117,31,231,63,0,0,0,0,0,192,19,61,5,207,234,134,130,47,231,63,0,0,0,0,0,48,56,189,82,129,165,72,154,63,231,63,0,0,0,0,0,192,0,189,252,204,215,53,189,79,231,63,0,0,0,0,0,136,47,61,241,103,66,86,235,95,231,63,0,0,0,0,0,224,3,61,72,109,171,177,36,112,231,63,0,0,0,0,0,208,39,189,56,93,222,79,105,128,231,63,0,0,0,0,0,0,221,188,0,29,172,56,185,144,231,63,0,0,0,0,0,0,227,60,120,1,235,115,20,161,231,63,0,0,0,0,0,0,237,188,96,208,118,9,123,177,231,63,0,0,0,0,0,64,32,61,51,193,48,1,237,193,231,63,0,0,0,0,0,0,160,60,54,134,255,98,106,210,231,63,0,0,0,0,0,144,38,189,59,78,207,54,243,226,231,63,0,0,0,0,0,224,2,189,232,195,145,132,135,243,231,63,0,0,0,0,0,88,36,189,78,27,62,84,39,4,232,63,0,0,0,0,0,0,51,61,26,7,209,173,210,20,232,63,0,0,0,0,0,0,15,61,126,205,76,153,137,37,232,63,0,0,0,0,0,192,33,189,208,66,185,30,76,54,232,63,0,0,0,0,0,208,41,61,181,202,35,70,26,71,232,63,0,0,0,0,0,16,71,61,188,91,159,23,244,87,232,63,0,0,0,0,0,96,34,61,175,145,68,155,217,104,232,63,0,0,0,0,0,196,50,189,149,163,49,217,202,121,232,63,0,0,0,0,0,0,35,189,184,101,138,217,199,138,232,63,0,0,0,0,0,128,42,189,0,88,120,164,208,155,232,63,0,0,0,0,0,0,237,188,35,162,42,66,229,172,232,63,0,0,0,0,0,40,51,61,250,25,214,186,5,190,232,63,0,0,0,0,0,180,66,61,131,67,181,22,50,207,232,63,0,0,0,0,0,208,46,189,76,102,8,94,106,224,232,63,0,0,0,0,0,80,32,189,7,120,21,153,174,241,232,63,0,0,0,0,0,40,40,61,14,44,40,208,254,2,233,63,0,0,0,0,0,176,28,189,150,255,145,11,91,20,233,63,0,0,0,0,0,224,5,189,249,47,170,83,195,37,233,63,0,0,0,0,0,64,245,60,74,198,205,176,55,55,233,63,0,0,0,0,0,32,23,61,174,152,95,43,184,72,233,63,0,0,0,0,0,0,9,189,203,82,200,203,68,90,233,63,0,0,0,0,0,104,37,61,33,111,118,154,221,107,233,63,0,0,0,0,0,208,54,189,42,78,222,159,130,125,233,63,0,0,0,0,0,0,1,189,163,35,122,228,51,143,233,63,0,0,0,0,0,0,45,61,4,6,202,112,241,160,233,63,0,0,0,0,0,164,56,189,137,255,83,77,187,178,233,63,0,0,0,0,0,92,53,61,91,241,163,130,145,196,233,63,0,0,0,0,0,184,38,61,197,184,75,25,116,214,233,63,0,0,0,0,0,0,236,188,142,35,227,25,99,232,233,63,0,0,0,0,0,208,23,61,2,243,7,141,94,250,233,63,0,0,0,0,0,64,22,61,77,229,93,123,102,12,234,63,0,0,0,0,0,0,245,188,246,184,142,237,122,30,234,63,0,0,0,0,0,224,9,61,39,46,74,236,155,48,234,63,0,0,0,0,0,216,42,61,93,10,70,128,201,66,234,63,0,0,0,0,0,240,26,189,155,37,62,178,3,85,234,63,0,0,0,0,0,96,11,61,19,98,244,138,74,103,234,63,0,0,0,0,0,136,56,61,167,179,48,19,158,121,234,63,0,0,0,0,0,32,17,61,141,46,193,83,254,139,234,63,0,0,0,0,0,192,6,61,210,252,121,85,107,158,234,63,0,0,0,0,0,184,41,189,184,111,53,33,229,176,234,63,0,0,0,0,0,112,43,61,129,243,211,191,107,195,234,63,0,0,0,0,0,0,217,60,128,39,60,58,255,213,234,63,0,0,0,0,0,0,228,60,163,210,90,153,159,232,234,63,0,0,0,0,0,144,44,189,103,243,34,230,76,251,234,63,0,0,0,0,0,80,22,61,144,183,141,41,7,14,235,63,0,0,0,0,0,212,47,61,169,137,154,108,206,32,235,63,0,0,0,0,0,112,18,61,75,26,79,184,162,51,235,63,0,0,0,0,0,71,77,61,231,71,183,21,132,70,235,63,0,0,0,0,0,56,56,189,58,89,229,141,114,89,235,63,0,0,0,0,0,0,152,60,106,197,241,41,110,108,235,63,0,0,0,0,0,208,10,61,80,94,251,242,118,127,235,63,0,0,0,0,0,128,222,60,178,73,39,242,140,146,235,63,0,0,0,0,0,192,4,189,3,6,161,48,176,165,235,63,0,0,0,0,0,112,13,189,102,111,154,183,224,184,235,63,0,0,0,0,0,144,13,61,255,193,75,144,30,204,235,63,0,0,0,0,0,160,2,61,111,161,243,195,105,223,235,63,0,0,0,0,0,120,31,189,184,29,215,91,194,242,235,63,0,0,0,0,0,160,16,189,233,178,65,97,40,6,236,63,0,0,0,0,0,64,17,189,224,82,133,221,155,25,236,63,0,0,0,0,0,224,11,61,238,100,250,217,28,45,236,63,0,0,0,0,0,64,9,189,47,208,255,95,171,64,236,63,0,0,0,0,0,208,14,189,21,253,250,120,71,84,236,63,0,0,0,0,0,102,57,61,203,208,87,46,241,103,236,63,0,0,0,0,0,16,26,189,182,193,136,137,168,123,236,63,0,0,0,0,128,69,88,189,51,231,6,148,109,143,236,63,0,0,0,0,0,72,26,189,223,196,81,87,64,163,236,63,0,0,0,0,0,0,203,60,148,144,239,220,32,183,236,63,0,0,0,0,0,64,1,61,137,22,109,46,15,203,236,63,0,0,0,0,0,32,240,60,18,196,93,85,11,223,236,63,0,0,0,0,0,96,243,60,59,171,91,91,21,243,236,63,0,0,0,0,0,144,6,189,188,137,7,74,45,7,237,63,0,0,0,0,0,160,9,61,250,200,8,43,83,27,237,63,0,0,0,0,0,224,21,189,133,138,13,8,135,47,237,63,0,0,0,0,0,40,29,61,3,162,202,234,200,67,237,63,0,0,0,0,0,160,1,61,145,164,251,220,24,88,237,63,0,0,0,0,0,0,223,60,161,230,98,232,118,108,237,63,0,0,0,0,0,160,3,189,78,131,201,22,227,128,237,63,0,0,0,0,0,216,12,189,144,96,255,113,93,149,237,63,0,0,0,0,0,192,244,60,174,50,219,3,230,169,237,63,0,0,0,0,0,144,255,60,37,131,58,214,124,190,237,63,0,0,0,0,0,128,233,60,69,180,1,243,33,211,237,63,0,0,0,0,0,32,245,188,191,5,28,100,213,231,237,63,0,0,0,0,0,112,29,189,236,154,123,51,151,252,237,63,0,0,0,0,0,20,22,189,94,125,25,107,103,17,238,63,0,0,0,0,0,72,11,61,231,163,245,20,70,38,238,63,0,0,0,0,0,206,64,61,92,238,22,59,51,59,238,63,0,0,0,0,0,104,12,61,180,63,139,231,46,80,238,63,0,0,0,0,0,48,9,189,104,109,103,36,57,101,238,63,0,0,0,0,0,0,229,188,68,76,199,251,81,122,238,63,0,0,0,0,0,248,7,189,38,183,205,119,121,143,238,63,0,0,0,0,0,112,243,188,232,144,164,162,175,164,238,63,0,0,0,0,0,208,229,60,228,202,124,134,244,185,238,63,0,0,0,0,0,26,22,61,13,104,142,45,72,207,238,63,0,0,0,0,0,80,245,60,20,133,24,162,170,228,238,63,0,0,0,0,0,64,198,60,19,90,97,238,27,250,238,63,0,0,0,0,0,128,238,188,6,65,182,28,156,15,239,63,0,0,0,0,0,136,250,188,99,185,107,55,43,37,239,63,0,0,0,0,0,144,44,189,117,114,221,72,201,58,239,63,0,0,0,0,0,0,170,60,36,69,110,91,118,80,239,63,0,0,0,0,0,240,244,188,253,68,136,121,50,102,239,63,0,0,0,0,0,128,202,60,56,190,156,173,253,123,239,63,0,0,0,0,0,188,250,60,130,60,36,2,216,145,239,63,0,0,0,0,0,96,212,188,142,144,158,129,193,167,239,63,0,0,0,0,0,12,11,189,17,213,146,54,186,189,239,63,0,0,0,0,0,224,192,188,148,113,143,43,194,211,239,63,0,0,0,0,128,222,16,189,238,35,42,107,217,233,239,63,0,0,0,0,0,67,238,60,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,190,188,90,250,26,11,240,63,0,0,0,0,0,64,179,188,3,51,251,169,61,22,240,63,0,0,0,0,0,23,18,189,130,2,59,20,104,33,240,63,0,0,0,0,0,64,186,60,108,128,119,62,154,44,240,63,0,0,0,0,0,152,239,60,202,187,17,46,212,55,240,63,0,0,0,0,0,64,199,188,137,127,110,232,21,67,240,63,0,0,0,0,0,48,216,60,103,84,246,114,95,78,240,63,0,0,0,0,0,63,26,189,90,133,21,211,176,89,240,63,0,0,0,0,0,132,2,189,149,31,60,14,10,101,240,63,0,0,0,0,0,96,241,60,26,247,221,41,107,112,240,63,0,0,0,0,0,36,21,61,45,168,114,43,212,123,240,63,0,0,0,0,0,160,233,188,208,155,117,24,69,135,240,63,0,0,0,0,0,64,230,60,200,7,102,246,189,146,240,63,0,0,0,0,0,120,0,189,131,243,198,202,62,158,240,63,0,0,0,0,0,0,152,188,48,57,31,155,199,169,240,63,0,0,0,0,0,160,255,60,252,136,249,108,88,181,240,63,0,0,0,0,0,200,250,188,138,108,228,69,241,192,240,63,0,0,0,0,0,192,217,60,22,72,114,43,146,204,240,63,0,0,0,0,0,32,5,61,216,93,57,35,59,216,240,63,0,0,0,0,0,208,250,188,243,209,211,50,236,227,240,63,0,0,0,0,0,172,27,61,166,169,223,95,165,239,240,63,0,0,0,0,0,232,4,189,240,210,254,175,102,251,240,63,0,0,0,0,0,48,13,189,75,35,215,40,48,7,241,63,0,0,0,0,0,80,241,60,91,91,18,208,1,19,241,63,0,0,0,0,0,0,236,60,249,42,94,171,219,30,241,63,0,0,0,0,0,188,22,61,213,49,108,192,189,42,241,63,0,0,0,0,0,64,232,60,125,4,242,20,168,54,241,63,0,0,0,0,0,208,14,189,233,45,169,174,154,66,241,63,0,0,0,0,0,224,232,60,56,49,79,147,149,78,241,63,0,0,0,0,0,64,235,60,113,142,165,200,152,90,241,63,0,0,0,0,0,48,5,61,223,195,113,84,164,102,241,63,0,0,0,0,0,56,3,61,17,82,125,60,184,114,241,63,0,0,0,0,0,212,40,61,159,187,149,134,212,126,241,63,0,0,0,0,0,208,5,189,147,141,140,56,249,138,241,63,0,0,0,0,0,136,28,189,102,93,55,88,38,151,241,63,0,0,0,0,0,240,17,61,167,203,111,235,91,163,241,63,0,0,0,0,0,72,16,61,227,135,19,248,153,175,241,63,0,0,0,0,0,57,71,189,84,93,4,132,224,187,241,63,0,0,0,0,0,228,36,61,67,28,40,149,47,200,241,63,0,0,0,0,0,32,10,189,178,185,104,49,135,212,241,63,0,0,0,0,0,128,227,60,49,64,180,94,231,224,241,63,0,0,0,0,0,192,234,60,56,217,252,34,80,237,241,63,0,0,0,0,0,144,1,61,247,205,56,132,193,249,241,63,0,0,0,0,0,120,27,189,143,141,98,136,59,6,242,63,0,0,0,0,0,148,45,61,30,168,120,53,190,18,242,63,0,0,0,0,0,0,216,60,65,221,125,145,73,31,242,63,0,0,0,0,0,52,43,61,35,19,121,162,221,43,242,63,0,0,0,0,0,248,25,61,231,97,117,110,122,56,242,63,0,0,0,0,0,200,25,189,39,20,130,251,31,69,242,63,0,0,0,0,0,48,2,61,2,166,178,79,206,81,242,63,0,0,0,0,0,72,19,189,176,206,30,113,133,94,242,63,0,0,0,0,0,112,18,61,22,125,226,101,69,107,242,63,0,0,0,0,0,208,17,61,15,224,29,52,14,120,242,63,0,0,0,0,0,238,49,61,62,99,245,225,223,132,242,63,0,0,0,0,0,192,20,189,48,187,145,117,186,145,242,63,0,0,0,0,0,216,19,189,9,223,31,245,157,158,242,63,0,0,0,0,0,176,8,61,155,14,209,102,138,171,242,63,0,0,0,0,0,124,34,189,58,218,218,208,127,184,242,63,0,0,0,0,0,52,42,61,249,26,119,57,126,197,242,63,0,0,0,0,0,128,16,189,217,2,228,166,133,210,242,63,0,0,0,0,0,208,14,189,121,21,100,31,150,223,242,63,0,0,0,0,0,32,244,188,207,46,62,169,175,236,242,63,0,0,0,0,0,152,36,189,34,136,189,74,210,249,242,63,0,0,0,0,0,48,22,189,37,182,49,10,254,6,243,63,0,0,0,0,0,54,50,189,11,165,238,237,50,20,243,63,0,0,0,0,128,223,112,189,184,215,76,252,112,33,243,63,0,0,0,0,0,72,34,189,162,233,168,59,184,46,243,63,0,0,0,0,0,152,37,189,102,23,100,178,8,60,243,63,0,0,0,0,0,208,30,61,39,250,227,102,98,73,243,63,0,0,0,0,0,0,220,188,15,159,146,95,197,86,243,63,0,0,0,0,0,216,48,189,185,136,222,162,49,100,243,63,0,0,0,0,0,200,34,61,57,170,58,55,167,113,243,63,0,0,0,0,0,96,32,61,254,116,30,35,38,127,243,63,0,0,0,0,0,96,22,189,56,216,5,109,174,140,243,63,0,0,0,0,0,224,10,189,195,62,113,27,64,154,243,63,0,0,0,0,0,114,68,189,32,160,229,52,219,167,243,63,0,0,0,0,0,32,8,61,149,110,236,191,127,181,243,63,0,0,0,0,0,128,62,61,242,168,19,195,45,195,243,63,0,0,0,0,0,128,239,60,34,225,237,68,229,208,243,63,0,0,0,0,0,160,23,189,187,52,18,76,166,222,243,63,0,0,0,0,0,48,38,61,204,78,28,223,112,236,243,63,0,0,0,0,0,166,72,189,140,126,172,4,69,250,243,63,0,0,0,0,0,220,60,189,187,160,103,195,34,8,244,63,0,0,0,0,0,184,37,61,149,46,247,33,10,22,244,63,0,0,0,0,0,192,30,61,70,70,9,39,251,35,244,63,0,0,0,0,0,96,19,189,32,169,80,217,245,49,244,63,0,0,0,0,0,152,35,61,235,185,132,63,250,63,244,63,0,0,0,0,0,0,250,60,25,137,97,96,8,78,244,63,0,0,0,0,0,192,246,188,1,210,167,66,32,92,244,63,0,0,0,0,0,192,11,189,22,0,29,237,65,106,244,63,0,0,0,0,0,128,18,189,38,51,139,102,109,120,244,63,0,0,0,0,0,224,48,61,0,60,193,181,162,134,244,63,0,0,0,0,0,64,45,189,4,175,146,225,225,148,244,63,0,0,0,0,0,32,12,61,114,211,215,240,42,163,244,63,0,0,0,0,0,80,30,189,1,184,109,234,125,177,244,63,0,0,0,0,0,128,7,61,225,41,54,213,218,191,244,63,0,0,0,0,0,128,19,189,50,193,23,184,65,206,244,63,0,0,0,0,0,128,0,61,219,221,253,153,178,220,244,63,0,0,0,0,0,112,44,61,150,171,216,129,45,235,244,63,0,0,0,0,0,224,28,189,2,45,157,118,178,249,244,63,0,0,0,0,0,32,25,61,193,49,69,127,65,8,245,63,0,0,0,0,0,192,8,189,42,102,207,162,218,22,245,63,0,0,0,0,0,0,250,188,234,81,63,232,125,37,245,63,0,0,0,0,0,8,74,61,218,78,157,86,43,52,245,63,0,0,0,0,0,216,38,189,26,172,246,244,226,66,245,63,0,0,0,0,0,68,50,189,219,148,93,202,164,81,245,63,0,0,0,0,0,60,72,61,107,17,233,221,112,96,245,63,0,0,0,0,0,176,36,61,222,41,181,54,71,111,245,63,0,0,0,0,0,90,65,61,14,196,226,219,39,126,245,63,0,0,0,0,0,224,41,189,111,199,151,212,18,141,245,63,0,0,0,0,0,8,35,189,76,11,255,39,8,156,245,63,0,0,0,0,0,236,77,61,39,84,72,221,7,171,245,63,0,0,0,0,0,0,196,188,244,122,168,251,17,186,245,63,0,0,0,0,0,8,48,61,11,70,89,138,38,201,245,63,0,0,0,0,0,200,38,189,63,142,153,144,69,216,245,63,0,0,0,0,0,154,70,61,225,32,173,21,111,231,245,63,0,0,0,0,0,64,27,189,202,235,220,32,163,246,245,63,0,0,0,0,0,112,23,61,184,220,118,185,225,5,246,63,0,0,0,0,0,248,38,61,21,247,205,230,42,21,246,63,0,0,0,0,0,0,1,61,49,85,58,176,126,36,246,63,0,0,0,0,0,208,21,189,181,41,25,29,221,51,246,63,0,0,0,0,0,208,18,189,19,195,204,52,70,67,246,63,0,0,0,0,0,128,234,188,250,142,188,254,185,82,246,63,0,0,0,0,0,96,40,189,151,51,85,130,56,98,246,63,0,0,0,0,0,254,113,61,142,50,8,199,193,113,246,63,0,0,0,0,0,32,55,189,126,169,76,212,85,129,246,63,0,0,0,0,0,128,230,60,113,148,158,177,244,144,246,63,0,0,0,0,0,120,41,189,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+623424);




/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _floorf=Math_floor;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }
  
  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (!_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  var _sqrtf=Math_sqrt;

   
  Module["_strncpy"] = _strncpy;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  function _swab(src, dest, nbytes) {
      // void swab(const void *restrict src, void *restrict dest, ssize_t nbytes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/swab.html
      if (nbytes < 0) return;
      nbytes -= nbytes % 2;
      for (var i = 0; i < nbytes; i += 2) {
        var first = HEAP8[(((src)+(i))>>0)];
        var second = HEAP8[(((src)+(i + 1))>>0)];
        HEAP8[(((dest)+(i))>>0)]=second;
        HEAP8[(((dest)+(i + 1))>>0)]=first;
      }
    }


  
  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }function _ntohl() {
  return _htonl.apply(null, arguments)
  }

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }

  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }function _ntohs() {
  return _htons.apply(null, arguments)
  }

  function _putc() {
  return _fputc.apply(null, arguments)
  }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  var _emscripten_prep_setjmp=true;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc_unlocked() {
  return _fgetc.apply(null, arguments)
  }

  var _BDtoIHigh=true;

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }


  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }


  
  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  
  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  
  function ___errno_location() {
      return ___errno_state;
    }function _perror(s) {
      // void perror(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/perror.html
      var stdout = HEAP32[((_stdout)>>2)];
      if (s) {
        _fputs(s, stdout);
        _fputc(58, stdout);
        _fputc(32, stdout);
      }
      var errnum = HEAP32[((___errno_location())>>2)];
      _puts(_strerror(errnum));
    }

  
  
  
  var ___tm_formatted=allocate(44, "i8", ALLOC_STATIC);function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
      writeStringToMemory(s, buf);
      return buf;
    }function _ctime_r(time, buf) {
      var stack = Runtime.stackSave();
      var rv = _asctime_r(_localtime_r(time, Runtime.stackAlloc(44)), buf);
      Runtime.stackRestore(stack);
      return rv;
    }function _ctime(timer) {
      return _ctime_r(timer, ___tm_current);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          argIndex = Runtime.prepVararg(argIndex, '*');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              argIndex = Runtime.prepVararg(argIndex, '*');
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)>>0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            argIndex = Runtime.prepVararg(argIndex, '*');
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)>>0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var quarter = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
            if (format[formatIndex] == 'h') {
              quarter = true;
              formatIndex++;
            }
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return fields; // Stop here.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          argIndex = Runtime.prepVararg(argIndex, '*');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          var base = 10;
          switch (type) {
            case 'X': case 'x':
              base = 16;
            case 'd': case 'u': case 'i':
              if (quarter) {
                HEAP8[((argPtr)>>0)]=parseInt(text, base);
              } else if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, base);
              } else if (longLong) {
                (tempI64 = [parseInt(text, base)>>>0,(tempDouble=parseInt(text, base),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, base);
              }
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))>>0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  var _llvm_pow_f64=Math_pow;


  var _emscripten_cleanup_setjmp=true;



  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

   
  Module["_strcat"] = _strcat;


   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  function _isatty(fildes) {
      // int isatty(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/isatty.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // HACK - implement tcgetattr
      if (!stream.tty) {
        ___setErrNo(ERRNO_CODES.ENOTTY);
        return 0;
      }
      return 1;
    }


  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }


  var _fabs=Math_abs;

  var _floor=Math_floor;


  function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;

  var _emscripten_check_longjmp=true;


  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }

  var _BDtoILow=true;

  var _log=Math_log;

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  function _fseeko() {
  return _fseek.apply(null, arguments)
  }

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_di": invoke_di, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_fabs": _fabs, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_fgetc": _fgetc, "_getcwd": _getcwd, "_sqrtf": _sqrtf, "_ntohl": _ntohl, "_fread": _fread, "_ctime": _ctime, "_ctime_r": _ctime_r, "_lseek": _lseek, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_getc": _getc, "_putenv": _putenv, "_ungetc": _ungetc, "_feof": _feof, "_floor": _floor, "_ntohs": _ntohs, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_fflush": _fflush, "_htonl": _htonl, "_time": _time, "_localtime": _localtime, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_localtime_r": _localtime_r, "_fscanf": _fscanf, "_open": _open, "_sbrk": _sbrk, "_tzset": _tzset, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_perror": _perror, "_sysconf": _sysconf, "_utime": _utime, "___setErrNo": ___setErrNo, "_putc": _putc, "_fseeko": _fseeko, "_putchar": _putchar, "_abort": _abort, "_cos": _cos, "_fseek": _fseek, "_asctime_r": _asctime_r, "_pread": _pread, "_getc_unlocked": _getc_unlocked, "_printf": _printf, "_fclose": _fclose, "_floorf": _floorf, "_sqrt": _sqrt, "_log": _log, "_htons": _htons, "_write": _write, "_fsync": _fsync, "_ftell": _ftell, "___errno_location": ___errno_location, "_puts": _puts, "_recv": _recv, "_swab": _swab, "_ftello": _ftello, "_mkport": _mkport, "__scanString": __scanString, "_fgets": _fgets, "__getFloat": __getFloat, "_fputc": _fputc, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_isatty": _isatty, "_mktime": _mktime, "_fwrite": _fwrite, "_tmpnam": _tmpnam, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_fputs": _fputs, "_tmpfile": _tmpfile, "_fopen": _fopen, "_close": _close, "_read": _read, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var invoke_di=env.invoke_di;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _fgetc=env._fgetc;
  var _getcwd=env._getcwd;
  var _sqrtf=env._sqrtf;
  var _ntohl=env._ntohl;
  var _fread=env._fread;
  var _ctime=env._ctime;
  var _ctime_r=env._ctime_r;
  var _lseek=env._lseek;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _getc=env._getc;
  var _putenv=env._putenv;
  var _ungetc=env._ungetc;
  var _feof=env._feof;
  var _floor=env._floor;
  var _ntohs=env._ntohs;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _htonl=env._htonl;
  var _time=env._time;
  var _localtime=env._localtime;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _localtime_r=env._localtime_r;
  var _fscanf=env._fscanf;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _tzset=env._tzset;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _perror=env._perror;
  var _sysconf=env._sysconf;
  var _utime=env._utime;
  var ___setErrNo=env.___setErrNo;
  var _putc=env._putc;
  var _fseeko=env._fseeko;
  var _putchar=env._putchar;
  var _abort=env._abort;
  var _cos=env._cos;
  var _fseek=env._fseek;
  var _asctime_r=env._asctime_r;
  var _pread=env._pread;
  var _getc_unlocked=env._getc_unlocked;
  var _printf=env._printf;
  var _fclose=env._fclose;
  var _floorf=env._floorf;
  var _sqrt=env._sqrt;
  var _log=env._log;
  var _htons=env._htons;
  var _write=env._write;
  var _fsync=env._fsync;
  var _ftell=env._ftell;
  var ___errno_location=env.___errno_location;
  var _puts=env._puts;
  var _recv=env._recv;
  var _swab=env._swab;
  var _ftello=env._ftello;
  var _mkport=env._mkport;
  var __scanString=env.__scanString;
  var _fgets=env._fgets;
  var __getFloat=env.__getFloat;
  var _fputc=env._fputc;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _isatty=env._isatty;
  var _mktime=env._mktime;
  var _fwrite=env._fwrite;
  var _tmpnam=env._tmpnam;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _fputs=env._fputs;
  var _tmpfile=env._tmpfile;
  var _fopen=env._fopen;
  var _close=env._close;
  var _read=env._read;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _fcol($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[584>>2]|0;
 if ((($0|0) == 1)) {
  $1 = HEAP16[592>>1]|0;
  $2 = $1&65535;
  $3 = (($2) + ($col))|0;
  $4 = $3 & 15;
  $5 = HEAP16[600>>1]|0;
  $6 = $5&65535;
  $7 = (($6) + ($row))|0;
  $8 = $7 & 15;
  $9 = ((328 + ($8<<4)|0) + ($4)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $$0 = $11;
  return ($$0|0);
 } else if ((($0|0) == 9)) {
  $12 = (($col) + 6)|0;
  $13 = (($12|0) % 6)&-1;
  $14 = (($row) + 6)|0;
  $15 = (($14|0) % 6)&-1;
  $16 = ((608 + (($15*6)|0)|0) + ($13)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $$0 = $18;
  return ($$0|0);
 } else {
  $19 = $row << 1;
  $20 = $19 & 14;
  $21 = $col & 1;
  $22 = $20 | $21;
  $23 = $22 << 1;
  $24 = $0 >>> $23;
  $25 = $24 & 3;
  $$0 = $25;
  return ($$0|0);
 }
 return (0)|0;
}
function _my_memmem($haystack,$haystacklen,$needle,$needlelen) {
 $haystack = $haystack|0;
 $haystacklen = $haystacklen|0;
 $needle = $needle|0;
 $needlelen = $needlelen|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sum = (($haystacklen) - ($needlelen))|0;
 $0 = (($haystack) + ($$sum)|0);
 $1 = ($$sum|0)<(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $c$01 = $haystack;
 }
 while(1) {
  $2 = (_memcmp($c$01,$needle,$needlelen)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = $c$01;
   label = 4;
   break;
  }
  $4 = (($c$01) + 1|0);
  $5 = ($4>>>0)>($0>>>0);
  if ($5) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $c$01 = $4;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _my_strcasestr($haystack,$needle) {
 $haystack = $haystack|0;
 $needle = $needle|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $c$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$haystack>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_strlen(($needle|0))|0);
 $c$01 = $haystack;
 while(1) {
  $3 = (_strncasecmp($c$01,$needle,$2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = $c$01;
   label = 5;
   break;
  }
  $5 = (($c$01) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$0 = 0;
   label = 5;
   break;
  } else {
   $c$01 = $5;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _merror($ptr,$where) {
 $ptr = $ptr|0;
 $where = $where|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($ptr|0)==(0|0);
 if ($0) {
  $1 = HEAP32[_stderr>>2]|0;
  $2 = HEAP32[680>>2]|0;
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $where;
  (_fprintf(($1|0),(648|0),($vararg_buffer|0))|0);
  _longjmp((688|0),1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _derror() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[848>>2]|0;
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = HEAP32[_stderr>>2]|0;
   $3 = HEAP32[680>>2]|0;
   HEAP32[$vararg_buffer>>2] = $3;
   (_fprintf(($2|0),(856|0),($vararg_buffer|0))|0);
   $4 = HEAP32[864>>2]|0;
   $5 = (_feof(($4|0))|0);
   $6 = ($5|0)==(0);
   $7 = HEAP32[_stderr>>2]|0;
   if ($6) {
    $8 = HEAP32[864>>2]|0;
    $9 = (_ftello(($8|0))|0);
    $10 = ($9|0)<(0);
    $11 = $10 << 31 >> 31;
    $12 = $vararg_buffer1;
    $13 = $12;
    HEAP32[$13>>2] = $9;
    $14 = (($12) + 4)|0;
    $15 = $14;
    HEAP32[$15>>2] = $11;
    (_fprintf(($7|0),(896|0),($vararg_buffer1|0))|0);
    break;
   } else {
    (_fwrite((872|0),23,1,($7|0))|0);
    break;
   }
  }
 } while(0);
 $16 = HEAP32[848>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[848>>2] = $17;
 STACKTOP = sp;return;
}
function _sget2($s) {
 $s = $s|0;
 var $$0 = 0, $$0$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[928>>1]|0;
 $1 = ($0<<16>>16)==(18761);
 $2 = HEAP8[$s>>0]|0;
 $3 = $2&255;
 if ($1) {
  $4 = (($s) + 1|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = $6 << 8;
  $8 = $7 | $3;
  $$0$in = $8;
  $$0 = $$0$in&65535;
  return ($$0|0);
 } else {
  $9 = $3 << 8;
  $10 = (($s) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 | $9;
  $$0$in = $13;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 return (0)|0;
}
function _get2() {
 var $0 = 0, $1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $str = sp;
 HEAP16[$str>>1] = -1;
 $0 = HEAP32[864>>2]|0;
 (_fread(($str|0),1,2,($0|0))|0);
 $1 = (_sget2($str)|0);
 STACKTOP = sp;return ($1|0);
}
function _sget4($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[928>>1]|0;
 $1 = ($0<<16>>16)==(18761);
 $2 = HEAP8[$s>>0]|0;
 $3 = $2&255;
 if ($1) {
  $4 = (($s) + 1|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = $6 << 8;
  $8 = $7 | $3;
  $9 = (($s) + 2|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 << 16;
  $13 = $8 | $12;
  $14 = (($s) + 3|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 24;
  $18 = $13 | $17;
  $$0 = $18;
  return ($$0|0);
 } else {
  $19 = $3 << 24;
  $20 = (($s) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 16;
  $24 = $23 | $19;
  $25 = (($s) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 8;
  $29 = $24 | $28;
  $30 = (($s) + 3|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $29 | $32;
  $$0 = $33;
  return ($$0|0);
 }
 return (0)|0;
}
function _get4() {
 var $0 = 0, $1 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $str = sp;
 HEAP32[$str>>2] = -1;
 $0 = HEAP32[864>>2]|0;
 (_fread(($str|0),1,4,($0|0))|0);
 $1 = (_sget4($str)|0);
 STACKTOP = sp;return ($1|0);
}
function _getint($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(3);
 if ($0) {
  $1 = (_get2()|0);
  $2 = $1&65535;
  $4 = $2;
  return ($4|0);
 } else {
  $3 = (_get4()|0);
  $4 = $3;
  return ($4|0);
 }
 return (0)|0;
}
function _int_to_float($i) {
 $i = $i|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAP32[tempDoublePtr>>2]=$i,+HEAPF32[tempDoublePtr>>2]);
 return (+$0);
}
function _getreal($type) {
 $type = $type|0;
 var $$0 = 0.0, $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $8 = 0.0, $9 = 0, $tmp = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u = sp;
 switch ($type|0) {
 case 3:  {
  $0 = (_get2()|0);
  $1 = (+($0&65535));
  $$0 = $1;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 5:  {
  $4 = (_get4()|0);
  $5 = (+($4>>>0));
  HEAPF64[$u>>3] = $5;
  $6 = (_get4()|0);
  $7 = (+($6>>>0));
  $8 = $5 / $7;
  $$0 = $8;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 8:  {
  $9 = (_get2()|0);
  $10 = (+($9<<16>>16));
  $$0 = $10;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 4:  {
  $2 = (_get4()|0);
  $3 = (+($2>>>0));
  $$0 = $3;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 10:  {
  $13 = (_get4()|0);
  $14 = (+($13|0));
  HEAPF64[$u>>3] = $14;
  $15 = (_get4()|0);
  $16 = (+($15|0));
  $17 = $14 / $16;
  $$0 = $17;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 11:  {
  $18 = (_get4()|0);
  $19 = (+_int_to_float($18));
  $20 = $19;
  $$0 = $20;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 9:  {
  $11 = (_get4()|0);
  $12 = (+($11|0));
  $$0 = $12;
  STACKTOP = sp;return (+$$0);
  break;
 }
 case 12:  {
  $21 = HEAP16[928>>1]|0;
  $22 = ($21<<16>>16)==(18761);
  $23 = (_ntohs(4660)|0);
  $24 = ($23<<16>>16)==(4660);
  $tmp = $22 ^ $24;
  $25 = $tmp&1;
  $26 = $25 ^ 1;
  $27 = (0 - ($26))|0;
  $28 = $27 & 7;
  $29 = HEAP32[864>>2]|0;
  $30 = (_getc_unlocked(($29|0))|0);
  $31 = $30&255;
  $32 = (($u) + ($28)|0);
  HEAP8[$32>>0] = $31;
  $33 = HEAP32[864>>2]|0;
  $34 = (_getc_unlocked(($33|0))|0);
  $35 = $34&255;
  $36 = $28 ^ 1;
  $37 = (($u) + ($36)|0);
  HEAP8[$37>>0] = $35;
  $38 = HEAP32[864>>2]|0;
  $39 = (_getc_unlocked(($38|0))|0);
  $40 = $39&255;
  $41 = $28 ^ 2;
  $42 = (($u) + ($41)|0);
  HEAP8[$42>>0] = $40;
  $43 = HEAP32[864>>2]|0;
  $44 = (_getc_unlocked(($43|0))|0);
  $45 = $44&255;
  $46 = $28 ^ 3;
  $47 = (($u) + ($46)|0);
  HEAP8[$47>>0] = $45;
  $48 = HEAP32[864>>2]|0;
  $49 = (_getc_unlocked(($48|0))|0);
  $50 = $49&255;
  $51 = $28 ^ 4;
  $52 = (($u) + ($51)|0);
  HEAP8[$52>>0] = $50;
  $53 = HEAP32[864>>2]|0;
  $54 = (_getc_unlocked(($53|0))|0);
  $55 = $54&255;
  $56 = $28 ^ 5;
  $57 = (($u) + ($56)|0);
  HEAP8[$57>>0] = $55;
  $58 = HEAP32[864>>2]|0;
  $59 = (_getc_unlocked(($58|0))|0);
  $60 = $59&255;
  $61 = $28 ^ 6;
  $62 = (($u) + ($61)|0);
  HEAP8[$62>>0] = $60;
  $63 = HEAP32[864>>2]|0;
  $64 = (_getc_unlocked(($63|0))|0);
  $65 = $64&255;
  $66 = $28 ^ 7;
  $67 = (($u) + ($66)|0);
  HEAP8[$67>>0] = $65;
  $68 = +HEAPF64[$u>>3];
  $$0 = $68;
  STACKTOP = sp;return (+$$0);
  break;
 }
 default: {
  $69 = HEAP32[864>>2]|0;
  $70 = (_getc_unlocked(($69|0))|0);
  $71 = (+($70|0));
  $$0 = $71;
  STACKTOP = sp;return (+$$0);
 }
 }
 return +(0.0);
}
function _read_shorts($pixel,$count) {
 $pixel = $pixel|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[864>>2]|0;
 $1 = (_fread(($pixel|0),2,($count|0),($0|0))|0);
 $2 = ($1>>>0)<($count>>>0);
 if ($2) {
  _derror();
 }
 $3 = HEAP16[928>>1]|0;
 $4 = ($3<<16>>16)==(18761);
 $5 = (_ntohs(4660)|0);
 $6 = ($5<<16>>16)==(4660);
 $tmp = $4 ^ $6;
 if ($tmp) {
  return;
 }
 $7 = $count << 1;
 _swab(($pixel|0),($pixel|0),($7|0));
 return;
}
function _cubic_spline($x_,$y_,$len) {
 $x_ = $x_|0;
 $y_ = $y_|0;
 $len = $len|0;
 var $$lcssa = 0, $$lcssa30 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0;
 var $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0;
 var $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $acc$0$lcssa = 0.0, $acc$034 = 0.0, $exitcond = 0;
 var $exitcond65 = 0, $exitcond66 = 0, $exitcond67 = 0, $exitcond68 = 0, $i$0$lcssa = 0, $i$056 = 0, $i$152 = 0, $i$249 = 0, $i$347 = 0, $i$444 = 0, $i$540 = 0, $i$633 = 0, $j$041 = 0, $j$135 = 0, $j$231 = 0, $y_out$032 = 0.0, $y_out$1 = 0.0, $y_out$1$lcssa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $len << 1;
 $1 = $len << 3;
 $2 = (($1) + 20)|0;
 $3 = (_calloc($2,$0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = (($3) + ($0<<2)|0);
 HEAP32[$3>>2] = $5;
 $6 = ($0|0)>(1);
 if ($6) {
  $7 = $len << 1;
  $8 = (($7) + -1)|0;
  $11 = $5;$i$056 = 1;
  while(1) {
   $9 = Math_imul($i$056, $0)|0;
   $10 = (($11) + ($9<<2)|0);
   $12 = (($3) + ($i$056<<2)|0);
   HEAP32[$12>>2] = $10;
   $13 = (($i$056) + 1)|0;
   $14 = HEAP32[$3>>2]|0;
   $exitcond68 = ($i$056|0)==($8|0);
   if ($exitcond68) {
    $$lcssa30 = $14;$i$0$lcssa = $7;
    break;
   } else {
    $11 = $14;$i$056 = $13;
   }
  }
 } else {
  $$lcssa30 = $5;$i$0$lcssa = 1;
 }
 $15 = Math_imul($i$0$lcssa, $i$0$lcssa)|0;
 $$sum = (($15) + ($i$0$lcssa))|0;
 $$sum1 = (($$sum) + ($i$0$lcssa))|0;
 $$sum2 = (($$sum1) + ($i$0$lcssa))|0;
 $$sum3 = (($$sum2) + ($len))|0;
 $16 = ($len|0)>(0);
 $17 = (($len) + -1)|0;
 if ($16) {
  $i$152 = 0;
  while(1) {
   $18 = (($x_) + ($i$152<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (+($19|0));
   $21 = $20 / 65535.0;
   $22 = $21;
   $$sum23 = (($i$152) + ($$sum2))|0;
   $23 = (($$lcssa30) + ($$sum23<<2)|0);
   HEAPF32[$23>>2] = $22;
   $24 = (($y_) + ($i$152<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (+($25|0));
   $27 = $26 / 65535.0;
   $28 = $27;
   $$sum24 = (($i$152) + ($$sum3))|0;
   $29 = (($$lcssa30) + ($$sum24<<2)|0);
   HEAPF32[$29>>2] = $28;
   $30 = (($i$152) + 1)|0;
   $exitcond67 = ($i$152|0)==($17|0);
   if ($exitcond67) {
    break;
   } else {
    $i$152 = $30;
   }
  }
  $31 = (($len) + -1)|0;
  $32 = ($len|0)>(1);
  if ($32) {
   $i$249 = $31;
   while(1) {
    $$sum17 = (($i$249) + ($$sum3))|0;
    $36 = (($$lcssa30) + ($$sum17<<2)|0);
    $37 = +HEAPF32[$36>>2];
    $38 = (($i$249) + -1)|0;
    $$sum18 = (($38) + ($$sum3))|0;
    $39 = (($$lcssa30) + ($$sum18<<2)|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $37 - $40;
    $$sum19 = (($i$249) + ($$sum2))|0;
    $42 = (($$lcssa30) + ($$sum19<<2)|0);
    $43 = +HEAPF32[$42>>2];
    $$sum20 = (($38) + ($$sum2))|0;
    $44 = (($$lcssa30) + ($$sum20<<2)|0);
    $45 = +HEAPF32[$44>>2];
    $46 = $43 - $45;
    $47 = $41 / $46;
    $$sum21 = (($i$249) + ($15))|0;
    $48 = (($$lcssa30) + ($$sum21<<2)|0);
    HEAPF32[$48>>2] = $47;
    $49 = +HEAPF32[$42>>2];
    $50 = +HEAPF32[$44>>2];
    $51 = $49 - $50;
    $$sum22 = (($38) + ($$sum1))|0;
    $52 = (($$lcssa30) + ($$sum22<<2)|0);
    HEAPF32[$52>>2] = $51;
    $53 = ($i$249|0)>(1);
    if ($53) {
     $i$249 = $38;
    } else {
     $33 = $31;
     break;
    }
   }
  } else {
   $33 = $31;
  }
 } else {
  $33 = $17;
 }
 $34 = ($33|0)>(1);
 if ($34) {
  $35 = (($len) + -2)|0;
  $i$347 = 1;
  while(1) {
   $58 = (($i$347) + -1)|0;
   $$sum13 = (($58) + ($$sum1))|0;
   $59 = (($$lcssa30) + ($$sum13<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $$sum14 = (($i$347) + ($$sum1))|0;
   $61 = (($$lcssa30) + ($$sum14<<2)|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $60 + $62;
   $64 = $63 * 2.0;
   $65 = (($3) + ($i$347<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) + ($i$347<<2)|0);
   HEAPF32[$67>>2] = $64;
   $68 = ($i$347|0)>(1);
   if ($68) {
    $69 = +HEAPF32[$59>>2];
    $70 = HEAP32[$65>>2]|0;
    $71 = (($70) + ($58<<2)|0);
    HEAPF32[$71>>2] = $69;
    $72 = +HEAPF32[$59>>2];
    $73 = (($3) + ($58<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + ($i$347<<2)|0);
    HEAPF32[$75>>2] = $72;
   }
   $76 = (($i$347) + 1)|0;
   $$sum15 = (($76) + ($15))|0;
   $77 = (($$lcssa30) + ($$sum15<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $$sum16 = (($i$347) + ($15))|0;
   $79 = (($$lcssa30) + ($$sum16<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $78 - $80;
   $82 = $81 * 6.0;
   $83 = HEAP32[$65>>2]|0;
   $84 = (($83) + ($33<<2)|0);
   HEAPF32[$84>>2] = $82;
   $exitcond66 = ($i$347|0)==($35|0);
   if ($exitcond66) {
    break;
   } else {
    $i$347 = $76;
   }
  }
 }
 $54 = (($len) + -2)|0;
 $55 = ($54|0)>(1);
 if ($55) {
  $56 = ($len|0)<(2);
  $57 = (($len) + -3)|0;
  $i$444 = 1;
  while(1) {
   $86 = (($i$444) + 1)|0;
   $87 = (($3) + ($86<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (($88) + ($i$444<<2)|0);
   $90 = +HEAPF32[$89>>2];
   $91 = (($3) + ($i$444<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($92) + ($i$444<<2)|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $90 / $94;
   if (!($56)) {
    $96 = HEAP32[$91>>2]|0;
    $97 = HEAP32[$87>>2]|0;
    $j$041 = 1;
    while(1) {
     $98 = (($96) + ($j$041<<2)|0);
     $99 = +HEAPF32[$98>>2];
     $100 = $95 * $99;
     $101 = (($97) + ($j$041<<2)|0);
     $102 = +HEAPF32[$101>>2];
     $103 = $102 - $100;
     HEAPF32[$101>>2] = $103;
     $104 = (($j$041) + 1)|0;
     $105 = ($j$041|0)<($33|0);
     if ($105) {
      $j$041 = $104;
     } else {
      break;
     }
    }
   }
   $exitcond65 = ($i$444|0)==($57|0);
   if ($exitcond65) {
    break;
   } else {
    $i$444 = $86;
   }
  }
 }
 $85 = ($len|0)>(2);
 if ($85) {
  $i$540 = $54;
  while(1) {
   $106 = ($i$540|0)>($54|0);
   $107 = (($3) + ($i$540<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   if ($106) {
    $$lcssa = $108;$acc$0$lcssa = 0.0;
   } else {
    $109 = HEAP32[$107>>2]|0;
    $112 = $108;$acc$034 = 0.0;$j$135 = $i$540;
    while(1) {
     $111 = (($112) + ($j$135<<2)|0);
     $113 = +HEAPF32[$111>>2];
     $$sum12 = (($j$135) + ($$sum))|0;
     $114 = (($$lcssa30) + ($$sum12<<2)|0);
     $115 = +HEAPF32[$114>>2];
     $116 = $113 * $115;
     $117 = $acc$034 + $116;
     $118 = (($j$135) + 1)|0;
     $119 = ($j$135|0)<($54|0);
     if ($119) {
      $112 = $109;$acc$034 = $117;$j$135 = $118;
     } else {
      $$lcssa = $109;$acc$0$lcssa = $117;
      break;
     }
    }
   }
   $120 = (($$lcssa) + ($33<<2)|0);
   $121 = +HEAPF32[$120>>2];
   $122 = $121 - $acc$0$lcssa;
   $123 = (($$lcssa) + ($i$540<<2)|0);
   $124 = +HEAPF32[$123>>2];
   $125 = $122 / $124;
   $$sum11 = (($i$540) + ($$sum))|0;
   $126 = (($$lcssa30) + ($$sum11<<2)|0);
   HEAPF32[$126>>2] = $125;
   $127 = (($i$540) + -1)|0;
   $128 = ($i$540|0)>(1);
   if ($128) {
    $i$540 = $127;
   } else {
    break;
   }
  }
 }
 $110 = ($len|0)>(1);
 $i$633 = 0;
 while(1) {
  $129 = (+($i$633|0));
  $130 = $129 / 65535.0;
  $131 = $130;
  if ($110) {
   $j$231 = 0;$y_out$032 = 0.0;
   while(1) {
    $$sum4 = (($j$231) + ($$sum2))|0;
    $132 = (($$lcssa30) + ($$sum4<<2)|0);
    $133 = +HEAPF32[$132>>2];
    $134 = !($133 <= $131);
    if ($134) {
     $y_out$1 = $y_out$032;
    } else {
     $135 = (($j$231) + 1)|0;
     $$sum5 = (($135) + ($$sum2))|0;
     $136 = (($$lcssa30) + ($$sum5<<2)|0);
     $137 = +HEAPF32[$136>>2];
     $138 = !($131 <= $137);
     if ($138) {
      $y_out$1 = $y_out$032;
     } else {
      $139 = $131 - $133;
      $$sum6 = (($j$231) + ($$sum3))|0;
      $140 = (($$lcssa30) + ($$sum6<<2)|0);
      $141 = +HEAPF32[$140>>2];
      $$sum7 = (($135) + ($$sum3))|0;
      $142 = (($$lcssa30) + ($$sum7<<2)|0);
      $143 = +HEAPF32[$142>>2];
      $144 = $143 - $141;
      $$sum8 = (($j$231) + ($$sum1))|0;
      $145 = (($$lcssa30) + ($$sum8<<2)|0);
      $146 = +HEAPF32[$145>>2];
      $147 = $144 / $146;
      $148 = $146 * 2.0;
      $$sum9 = (($j$231) + ($$sum))|0;
      $149 = (($$lcssa30) + ($$sum9<<2)|0);
      $150 = +HEAPF32[$149>>2];
      $151 = $148 * $150;
      $$sum10 = (($135) + ($$sum))|0;
      $152 = (($$lcssa30) + ($$sum10<<2)|0);
      $153 = +HEAPF32[$152>>2];
      $154 = $146 * $153;
      $155 = $151 + $154;
      $156 = $155 / 6.0;
      $157 = $147 - $156;
      $158 = $139 * $157;
      $159 = $141 + $158;
      $160 = $159;
      $161 = $150;
      $162 = $161 * 0.5;
      $163 = $139;
      $164 = $163 * $162;
      $165 = $163 * $164;
      $166 = $165 + $160;
      $167 = $153 - $150;
      $168 = $146 * 6.0;
      $169 = $167 / $168;
      $170 = $139 * $169;
      $171 = $139 * $170;
      $172 = $139 * $171;
      $173 = $172;
      $174 = $166 + $173;
      $175 = $174;
      $y_out$1 = $175;
     }
    }
    $176 = (($j$231) + 1)|0;
    $177 = ($176|0)<($33|0);
    if ($177) {
     $j$231 = $176;$y_out$032 = $y_out$1;
    } else {
     $y_out$1$lcssa = $y_out$1;
     break;
    }
   }
   $178 = $y_out$1$lcssa < 0.0;
   if ($178) {
    $187 = 0;
   } else {
    $179 = $y_out$1$lcssa;
    $180 = !($y_out$1$lcssa >= 1.0);
    if ($180) {
     $182 = $179;
     label = 33;
    } else {
     $187 = 65535;
    }
   }
  } else {
   $182 = 0.0;
   label = 33;
  }
  if ((label|0) == 33) {
   label = 0;
   $181 = $182 * 65535.0;
   $183 = $181 + 0.5;
   $184 = (~~(($183))&65535);
   $185 = $184&65535;
   $187 = $185;
  }
  $186 = $187&65535;
  $188 = (936 + ($i$633<<1)|0);
  HEAP16[$188>>1] = $186;
  $189 = (($i$633) + 1)|0;
  $exitcond = ($189|0)==(65536);
  if ($exitcond) {
   break;
  } else {
   $i$633 = $189;
  }
 }
 _free($3);
 return;
}
function _canon_600_fixed_wb($temp) {
 $temp = $temp|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $frac$0 = 0.0, $hi$0$lcssa = 0, $lo$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lo$0 = 4;
 while(1) {
  $0 = (($lo$0) + -1)|0;
  $1 = ($0|0)==(0);
  if ($1) {
   $$lcssa = $0;
   break;
  }
  $2 = (132008 + (($0*10)|0)|0);
  $3 = HEAP16[$2>>1]|0;
  $4 = $3 << 16 >> 16;
  $5 = ($4|0)>($temp|0);
  if ($5) {
   $lo$0 = $0;
  } else {
   $$lcssa = $0;
   break;
  }
 }
 $6 = ($temp|0)>(667);
 if ($6) {
  $7 = ($temp|0)>(731);
  if ($7) {
   $61 = ($temp|0)>(1119);
   $$ = $61 ? 3 : 2;
   $hi$0$lcssa = $$;
  } else {
   $hi$0$lcssa = 1;
  }
 } else {
  $hi$0$lcssa = 0;
 }
 $8 = ($$lcssa|0)==($hi$0$lcssa|0);
 if ($8) {
  $frac$0 = 0.0;
 } else {
  $9 = (132008 + (($$lcssa*10)|0)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = (($temp) - ($11))|0;
  $13 = (+($12|0));
  $14 = (132008 + (($hi$0$lcssa*10)|0)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = (($16) - ($11))|0;
  $18 = (+($17|0));
  $19 = $13 / $18;
  $frac$0 = $19;
 }
 $20 = 1.0 - $frac$0;
 $21 = ((132008 + (($hi$0$lcssa*10)|0)|0) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = (+($22<<16>>16));
 $24 = $frac$0 * $23;
 $25 = ((132008 + (($$lcssa*10)|0)|0) + 2|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = (+($26<<16>>16));
 $28 = $20 * $27;
 $29 = $24 + $28;
 $30 = 1.0 / $29;
 HEAPF32[132048>>2] = $30;
 $31 = ((132008 + (($hi$0$lcssa*10)|0)|0) + 4|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = (+($32<<16>>16));
 $34 = $frac$0 * $33;
 $35 = ((132008 + (($$lcssa*10)|0)|0) + 4|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = (+($36<<16>>16));
 $38 = $20 * $37;
 $39 = $34 + $38;
 $40 = 1.0 / $39;
 HEAPF32[((132048 + 4|0))>>2] = $40;
 $41 = ((132008 + (($hi$0$lcssa*10)|0)|0) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = (+($42<<16>>16));
 $44 = $frac$0 * $43;
 $45 = ((132008 + (($$lcssa*10)|0)|0) + 6|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = (+($46<<16>>16));
 $48 = $20 * $47;
 $49 = $44 + $48;
 $50 = 1.0 / $49;
 HEAPF32[((132048 + 8|0))>>2] = $50;
 $51 = ((132008 + (($hi$0$lcssa*10)|0)|0) + 8|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = (+($52<<16>>16));
 $54 = $frac$0 * $53;
 $55 = ((132008 + (($$lcssa*10)|0)|0) + 8|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = (+($56<<16>>16));
 $58 = $20 * $57;
 $59 = $54 + $58;
 $60 = 1.0 / $59;
 HEAPF32[((132048 + 12|0))>>2] = $60;
 return;
}
function _canon_600_color($ratio,$mar) {
 $ratio = $ratio|0;
 $mar = $mar|0;
 var $$ = 0, $$0 = 0, $$off = 0, $$pr = 0, $$pr3 = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var $clipped$2 = 0, $ispos = 0, $miss$1 = 0, $neg = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[132064>>2];
 $1 = $0 != 0.0;
 $2 = (($ratio) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 do {
  if ($1) {
   $4 = ($3|0)<(-104);
   if ($4) {
    HEAP32[$2>>2] = -104;
    $clipped$2 = 1;
    break;
   }
   $$pr = HEAP32[$2>>2]|0;
   $5 = ($$pr|0)>(12);
   if ($5) {
    HEAP32[$2>>2] = 12;
    $clipped$2 = 1;
   } else {
    $clipped$2 = 0;
   }
  } else {
   $$off = (($3) + 264)|0;
   $6 = ($$off>>>0)>(725);
   if ($6) {
    $$0 = 2;
    return ($$0|0);
   }
   $7 = ($3|0)<(-50);
   if ($7) {
    HEAP32[$2>>2] = -50;
    $clipped$2 = 1;
    break;
   }
   $$pr3 = HEAP32[$2>>2]|0;
   $8 = ($$pr3|0)>(307);
   if ($8) {
    HEAP32[$2>>2] = 307;
    $clipped$2 = 1;
   } else {
    $clipped$2 = 0;
   }
  }
 } while(0);
 $9 = +HEAPF32[132064>>2];
 $10 = $9 != 0.0;
 if ($10) {
  label = 13;
 } else {
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11|0)<(197);
  if ($12) {
   label = 13;
  } else {
   $17 = ($11*48)|0;
   $18 = $17 >> 10;
   $19 = (($18) + -123)|0;
   $21 = $19;
  }
 }
 if ((label|0) == 13) {
  $13 = HEAP32[$2>>2]|0;
  $14 = ($13*398)|0;
  $15 = $14 >> 10;
  $16 = (-38 - ($15))|0;
  $21 = $16;
 }
 $20 = (($21) - ($mar))|0;
 $22 = HEAP32[$ratio>>2]|0;
 $23 = ($20|0)>($22|0);
 if (!($23)) {
  $24 = (($21) + 20)|0;
  $25 = ($24|0)<($22|0);
  $26 = ($clipped$2|0)!=(0);
  $or$cond = $26 | $25;
  if (!($or$cond)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $27 = HEAP32[$ratio>>2]|0;
 $28 = (($21) - ($27))|0;
 $ispos = ($28|0)>(-1);
 $neg = (0 - ($28))|0;
 $29 = $ispos ? $28 : $neg;
 $30 = $mar << 2;
 $31 = ($29|0)<($30|0);
 if (!($31)) {
  $$0 = 2;
  return ($$0|0);
 }
 $32 = ($28|0)<(-20);
 $$ = $32 ? -20 : $28;
 $33 = ($$|0)>($mar|0);
 $miss$1 = $33 ? $mar : $$;
 $34 = (($21) - ($miss$1))|0;
 HEAP32[$ratio>>2] = $34;
 $$0 = 1;
 return ($$0|0);
}
function _canon_600_auto_wb() {
 var $$off = 0, $$off$1 = 0, $$off$2 = 0, $$off$3 = 0, $$off$4 = 0, $$off$5 = 0, $$off$6 = 0, $$off$7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$022 = 0, $count = 0, $exitcond26 = 0, $i$013 = 0, $ispos = 0, $ispos$1 = 0, $ispos$2 = 0, $ispos$3 = 0, $mar$0 = 0, $mar$1 = 0, $neg = 0, $neg$1 = 0;
 var $neg$2 = 0, $neg$3 = 0, $ratio = 0, $row$023 = 0, $stat = 0, $test = 0, $total = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $count = sp;
 $test = sp + 96|0;
 $total = sp + 32|0;
 $ratio = sp + 16|0;
 $stat = sp + 8|0;
 $0 = $count;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 dest=$total+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = +HEAPF32[132072>>2];
 $5 = $4;
 $6 = $5 + 0.5;
 $7 = (~~(($6)));
 $8 = ($7|0)<(10);
 if ($8) {
  $mar$0 = 150;
 } else {
  $9 = ($7|0)>(12);
  if ($9) {
   $mar$0 = 20;
  } else {
   $10 = Math_imul($7, -20)|0;
   $11 = (($10) + 280)|0;
   $mar$0 = $11;
  }
 }
 $12 = +HEAPF32[132064>>2];
 $13 = $12 != 0.0;
 $mar$1 = $13 ? 80 : $mar$0;
 $14 = HEAP16[132080>>1]|0;
 $15 = $14&65535;
 $16 = (($15) + -14)|0;
 $17 = ($16|0)>(14);
 if ($17) {
  $row$023 = 14;
  while(1) {
   $18 = HEAP16[132088>>1]|0;
   $19 = ($18&65535)>(10);
   if ($19) {
    $col$022 = 10;
    while(1) {
     $20 = HEAP32[584>>2]|0;
     $21 = HEAP16[132096>>1]|0;
     $22 = $21&65535;
     $23 = HEAP16[132104>>1]|0;
     $24 = $23&65535;
     $25 = HEAP32[132112>>2]|0;
     $i$013 = 0;
     while(1) {
      $26 = $i$013 >> 1;
      $27 = (($26) + ($row$023))|0;
      $28 = $27 << 1;
      $29 = $28 & 14;
      $30 = $i$013 & 1;
      $31 = $30 | $col$022;
      $32 = $29 | $30;
      $33 = $32 << 1;
      $34 = $20 >>> $33;
      $35 = $34 & 3;
      $36 = $27 >> $22;
      $37 = Math_imul($36, $24)|0;
      $38 = $31 >> $22;
      $39 = (($37) + ($38))|0;
      $40 = ((($25) + ($39<<3)|0) + ($35<<1)|0);
      $41 = HEAP16[$40>>1]|0;
      $42 = $41&65535;
      $43 = $i$013 & 4;
      $44 = $35 | $43;
      $45 = (($test) + ($44<<2)|0);
      HEAP32[$45>>2] = $42;
      $46 = (($i$013) + 1)|0;
      $exitcond26 = ($46|0)==(8);
      if ($exitcond26) {
       break;
      } else {
       $i$013 = $46;
      }
     }
     $50 = HEAP32[$test>>2]|0;
     $$off = (($50) + -150)|0;
     $51 = ($$off>>>0)>(1350);
     do {
      if (!($51)) {
       $47 = (($test) + 4|0);
       $48 = HEAP32[$47>>2]|0;
       $$off$1 = (($48) + -150)|0;
       $49 = ($$off$1>>>0)>(1350);
       if (!($49)) {
        $176 = (($test) + 8|0);
        $177 = HEAP32[$176>>2]|0;
        $$off$2 = (($177) + -150)|0;
        $178 = ($$off$2>>>0)>(1350);
        if (!($178)) {
         $179 = (($test) + 12|0);
         $180 = HEAP32[$179>>2]|0;
         $$off$3 = (($180) + -150)|0;
         $181 = ($$off$3>>>0)>(1350);
         if (!($181)) {
          $182 = (($test) + 16|0);
          $183 = HEAP32[$182>>2]|0;
          $$off$4 = (($183) + -150)|0;
          $184 = ($$off$4>>>0)>(1350);
          if (!($184)) {
           $185 = (($test) + 20|0);
           $186 = HEAP32[$185>>2]|0;
           $$off$5 = (($186) + -150)|0;
           $187 = ($$off$5>>>0)>(1350);
           if (!($187)) {
            $188 = (($test) + 24|0);
            $189 = HEAP32[$188>>2]|0;
            $$off$6 = (($189) + -150)|0;
            $190 = ($$off$6>>>0)>(1350);
            if (!($190)) {
             $191 = (($test) + 28|0);
             $192 = HEAP32[$191>>2]|0;
             $$off$7 = (($192) + -150)|0;
             $193 = ($$off$7>>>0)>(1350);
             if (!($193)) {
              $59 = HEAP32[$test>>2]|0;
              $60 = (($test) + 16|0);
              $61 = HEAP32[$60>>2]|0;
              $62 = (($59) - ($61))|0;
              $ispos = ($62|0)>(-1);
              $neg = (0 - ($62))|0;
              $63 = $ispos ? $62 : $neg;
              $64 = ($63|0)>(50);
              if (!($64)) {
               $52 = (($test) + 4|0);
               $53 = HEAP32[$52>>2]|0;
               $54 = (($test) + 20|0);
               $55 = HEAP32[$54>>2]|0;
               $56 = (($53) - ($55))|0;
               $ispos$1 = ($56|0)>(-1);
               $neg$1 = (0 - ($56))|0;
               $57 = $ispos$1 ? $56 : $neg$1;
               $58 = ($57|0)>(50);
               if (!($58)) {
                $194 = (($test) + 8|0);
                $195 = HEAP32[$194>>2]|0;
                $196 = (($test) + 24|0);
                $197 = HEAP32[$196>>2]|0;
                $198 = (($195) - ($197))|0;
                $ispos$2 = ($198|0)>(-1);
                $neg$2 = (0 - ($198))|0;
                $199 = $ispos$2 ? $198 : $neg$2;
                $200 = ($199|0)>(50);
                if (!($200)) {
                 $201 = (($test) + 12|0);
                 $202 = HEAP32[$201>>2]|0;
                 $203 = (($test) + 28|0);
                 $204 = HEAP32[$203>>2]|0;
                 $205 = (($202) - ($204))|0;
                 $ispos$3 = ($205|0)>(-1);
                 $neg$3 = (0 - ($205))|0;
                 $206 = $ispos$3 ? $205 : $neg$3;
                 $207 = ($206|0)>(50);
                 if (!($207)) {
                  $208 = (($test) + 4|0);
                  $209 = HEAP32[$208>>2]|0;
                  $210 = HEAP32[$test>>2]|0;
                  $211 = (($209) - ($210))|0;
                  $212 = $211 << 10;
                  $213 = (($212|0) / ($210|0))&-1;
                  HEAP32[$ratio>>2] = $213;
                  $214 = (($test) + 12|0);
                  $215 = HEAP32[$214>>2]|0;
                  $216 = (($test) + 8|0);
                  $217 = HEAP32[$216>>2]|0;
                  $218 = (($215) - ($217))|0;
                  $219 = $218 << 10;
                  $220 = (($219|0) / ($217|0))&-1;
                  $221 = (($ratio) + 4|0);
                  HEAP32[$221>>2] = $220;
                  $222 = (_canon_600_color($ratio,$mar$1)|0);
                  HEAP32[$stat>>2] = $222;
                  $223 = (($test) + 20|0);
                  $224 = HEAP32[$223>>2]|0;
                  $225 = (($test) + 16|0);
                  $226 = HEAP32[$225>>2]|0;
                  $227 = (($224) - ($226))|0;
                  $228 = $227 << 10;
                  $229 = (($228|0) / ($226|0))&-1;
                  $230 = (($ratio) + 8|0);
                  HEAP32[$230>>2] = $229;
                  $231 = (($test) + 28|0);
                  $232 = HEAP32[$231>>2]|0;
                  $233 = (($test) + 24|0);
                  $234 = HEAP32[$233>>2]|0;
                  $235 = (($232) - ($234))|0;
                  $236 = $235 << 10;
                  $237 = (($236|0) / ($234|0))&-1;
                  $238 = (($ratio) + 12|0);
                  HEAP32[$238>>2] = $237;
                  $239 = (($ratio) + 8|0);
                  $240 = (_canon_600_color($239,$mar$1)|0);
                  $241 = (($stat) + 4|0);
                  HEAP32[$241>>2] = $240;
                  $242 = HEAP32[$stat>>2]|0;
                  $86 = $240 | $242;
                  $243 = ($86|0)>(1);
                  if ($243) {
                   break;
                  }
                  $65 = HEAP32[$stat>>2]|0;
                  $66 = ($65|0)==(0);
                  if (!($66)) {
                   $67 = HEAP32[$test>>2]|0;
                   $68 = HEAP32[$ratio>>2]|0;
                   $69 = (($68) + 1024)|0;
                   $70 = Math_imul($69, $67)|0;
                   $71 = $70 >> 10;
                   $72 = (($test) + 4|0);
                   HEAP32[$72>>2] = $71;
                   $73 = (($test) + 8|0);
                   $74 = HEAP32[$73>>2]|0;
                   $75 = (($ratio) + 4|0);
                   $76 = HEAP32[$75>>2]|0;
                   $77 = (($76) + 1024)|0;
                   $78 = Math_imul($77, $74)|0;
                   $79 = $78 >> 10;
                   $80 = (($test) + 12|0);
                   HEAP32[$80>>2] = $79;
                  }
                  $81 = (($stat) + 4|0);
                  $82 = HEAP32[$81>>2]|0;
                  $83 = ($82|0)==(0);
                  if (!($83)) {
                   $244 = (($test) + 16|0);
                   $245 = HEAP32[$244>>2]|0;
                   $246 = (($ratio) + 8|0);
                   $247 = HEAP32[$246>>2]|0;
                   $248 = (($247) + 1024)|0;
                   $249 = Math_imul($248, $245)|0;
                   $250 = $249 >> 10;
                   $251 = (($test) + 20|0);
                   HEAP32[$251>>2] = $250;
                   $252 = (($test) + 24|0);
                   $253 = HEAP32[$252>>2]|0;
                   $254 = (($ratio) + 12|0);
                   $255 = HEAP32[$254>>2]|0;
                   $256 = (($255) + 1024)|0;
                   $257 = Math_imul($256, $253)|0;
                   $258 = $257 >> 10;
                   $259 = (($test) + 28|0);
                   HEAP32[$259>>2] = $258;
                  }
                  $84 = HEAP32[$test>>2]|0;
                  $85 = (($total) + ($86<<5)|0);
                  $87 = HEAP32[$85>>2]|0;
                  $88 = (($87) + ($84))|0;
                  HEAP32[$85>>2] = $88;
                  $89 = (($test) + 4|0);
                  $90 = HEAP32[$89>>2]|0;
                  $91 = ((($total) + ($86<<5)|0) + 4|0);
                  $92 = HEAP32[$91>>2]|0;
                  $93 = (($92) + ($90))|0;
                  HEAP32[$91>>2] = $93;
                  $94 = (($test) + 8|0);
                  $95 = HEAP32[$94>>2]|0;
                  $96 = ((($total) + ($86<<5)|0) + 8|0);
                  $97 = HEAP32[$96>>2]|0;
                  $98 = (($97) + ($95))|0;
                  HEAP32[$96>>2] = $98;
                  $99 = (($test) + 12|0);
                  $100 = HEAP32[$99>>2]|0;
                  $101 = ((($total) + ($86<<5)|0) + 12|0);
                  $102 = HEAP32[$101>>2]|0;
                  $103 = (($102) + ($100))|0;
                  HEAP32[$101>>2] = $103;
                  $104 = (($test) + 16|0);
                  $105 = HEAP32[$104>>2]|0;
                  $106 = ((($total) + ($86<<5)|0) + 16|0);
                  $107 = HEAP32[$106>>2]|0;
                  $108 = (($107) + ($105))|0;
                  HEAP32[$106>>2] = $108;
                  $109 = (($test) + 20|0);
                  $110 = HEAP32[$109>>2]|0;
                  $111 = ((($total) + ($86<<5)|0) + 20|0);
                  $112 = HEAP32[$111>>2]|0;
                  $113 = (($112) + ($110))|0;
                  HEAP32[$111>>2] = $113;
                  $114 = (($test) + 24|0);
                  $115 = HEAP32[$114>>2]|0;
                  $116 = ((($total) + ($86<<5)|0) + 24|0);
                  $117 = HEAP32[$116>>2]|0;
                  $118 = (($117) + ($115))|0;
                  HEAP32[$116>>2] = $118;
                  $119 = (($test) + 28|0);
                  $120 = HEAP32[$119>>2]|0;
                  $121 = ((($total) + ($86<<5)|0) + 28|0);
                  $122 = HEAP32[$121>>2]|0;
                  $123 = (($122) + ($120))|0;
                  HEAP32[$121>>2] = $123;
                  $124 = (($count) + ($86<<2)|0);
                  $125 = HEAP32[$124>>2]|0;
                  $126 = (($125) + 1)|0;
                  HEAP32[$124>>2] = $126;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     } while(0);
     $127 = (($col$022) + 2)|0;
     $128 = HEAP16[132088>>1]|0;
     $129 = $128&65535;
     $130 = ($127|0)<($129|0);
     if ($130) {
      $col$022 = $127;
     } else {
      break;
     }
    }
   }
   $131 = (($row$023) + 4)|0;
   $132 = HEAP16[132080>>1]|0;
   $133 = $132&65535;
   $134 = (($133) + -14)|0;
   $135 = ($131|0)<($134|0);
   if ($135) {
    $row$023 = $131;
   } else {
    break;
   }
  }
 }
 $136 = HEAP32[$count>>2]|0;
 $137 = (($count) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = $138 | $136;
 $140 = ($139|0)==(0);
 if ($140) {
  STACKTOP = sp;return;
 }
 $141 = ($136*200)|0;
 $142 = ($141|0)<($138|0);
 $143 = $142&1;
 $144 = (($total) + ($143<<5)|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ((($total) + ($143<<5)|0) + 16|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = (($147) + ($145))|0;
 $149 = (+($148|0));
 $150 = 1.0 / $149;
 $151 = $150;
 HEAPF32[132048>>2] = $151;
 $152 = ((($total) + ($143<<5)|0) + 4|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ((($total) + ($143<<5)|0) + 20|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($155) + ($153))|0;
 $157 = (+($156|0));
 $158 = 1.0 / $157;
 $159 = $158;
 HEAPF32[((132048 + 4|0))>>2] = $159;
 $160 = ((($total) + ($143<<5)|0) + 8|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ((($total) + ($143<<5)|0) + 24|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = (($163) + ($161))|0;
 $165 = (+($164|0));
 $166 = 1.0 / $165;
 $167 = $166;
 HEAPF32[((132048 + 8|0))>>2] = $167;
 $168 = ((($total) + ($143<<5)|0) + 12|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ((($total) + ($143<<5)|0) + 28|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = (($171) + ($169))|0;
 $173 = (+($172|0));
 $174 = 1.0 / $173;
 $175 = $174;
 HEAPF32[((132048 + 12|0))>>2] = $175;
 STACKTOP = sp;return;
}
function _canon_600_coeff() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $brmerge = 0, $c$08 = 0, $c$08$1 = 0;
 var $c$08$2 = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $notlhs = 0, $notlhs6 = 0, $notrhs = 0, $notrhs7 = 0, $or$cond$not = 0, $or$cond3$not = 0, $or$cond5 = 0, $t$0 = 0, $t$0$mux = 0, $t$1 = 0, $t$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[((132048 + 4|0))>>2];
 $1 = +HEAPF32[((132048 + 8|0))>>2];
 $2 = $0 / $1;
 $3 = +HEAPF32[((132048 + 12|0))>>2];
 $4 = $3 / $1;
 $5 = $2;
 $notlhs = $2 > 1.0;
 $notrhs = $5 <= 1.28;
 $or$cond3$not = $notlhs & $notrhs;
 $6 = $4;
 $7 = $6 < 0.87890000000000001;
 $or$cond5 = $or$cond3$not & $7;
 $t$0 = $or$cond5&1;
 $notlhs6 = !($5 > 1.28);
 $notrhs7 = !($2 <= 2.0);
 $or$cond$not = $notrhs7 | $notlhs6;
 $brmerge = $or$cond$not | $7;
 $t$0$mux = $or$cond$not ? $t$0 : 3;
 if ($brmerge) {
  $t$1 = $t$0$mux;
 } else {
  $8 = !($4 <= 2.0);
  if ($8) {
   $t$1 = $t$0;
  } else {
   $t$1 = 4;
  }
 }
 $9 = +HEAPF32[132064>>2];
 $10 = $9 != 0.0;
 $t$2 = $10 ? 5 : $t$1;
 HEAP32[132264>>2] = 0;
 $11 = HEAP32[132272>>2]|0;
 $12 = ($11|0)==(0);
 $13 = (($11) + -1)|0;
 if ($12) {
  return;
 } else {
  $c$08 = 0;
 }
 while(1) {
  $14 = ((132120 + (($t$2*24)|0)|0) + ($c$08<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = (+($15<<16>>16));
  $17 = $16 * 9.765625E-4;
  $18 = $17;
  $19 = (132280 + ($c$08<<2)|0);
  HEAPF32[$19>>2] = $18;
  $20 = (($c$08) + 1)|0;
  $exitcond = ($c$08|0)==($13|0);
  if ($exitcond) {
   break;
  } else {
   $c$08 = $20;
  }
 }
 if ($12) {
  return;
 } else {
  $c$08$1 = 0;
 }
 while(1) {
  $21 = (($c$08$1) + 4)|0;
  $22 = ((132120 + (($t$2*24)|0)|0) + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = (+($23<<16>>16));
  $25 = $24 * 9.765625E-4;
  $26 = $25;
  $27 = ((132280 + ($c$08$1<<2)|0) + 16|0);
  HEAPF32[$27>>2] = $26;
  $28 = (($c$08$1) + 1)|0;
  $exitcond$1 = ($c$08$1|0)==($13|0);
  if ($exitcond$1) {
   break;
  } else {
   $c$08$1 = $28;
  }
 }
 if ($12) {
  return;
 } else {
  $c$08$2 = 0;
 }
 while(1) {
  $29 = (($c$08$2) + 8)|0;
  $30 = ((132120 + (($t$2*24)|0)|0) + ($29<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = (+($31<<16>>16));
  $33 = $32 * 9.765625E-4;
  $34 = $33;
  $35 = ((132280 + ($c$08$2<<2)|0) + 32|0);
  HEAPF32[$35>>2] = $34;
  $36 = (($c$08$2) + 1)|0;
  $exitcond$2 = ($c$08$2|0)==($13|0);
  if ($exitcond$2) {
   break;
  } else {
   $c$08$2 = $36;
  }
 }
 return;
}
function _canon_600_load_raw() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $dp$01 = 0, $irow$03 = 0, $pix$02 = 0, $row$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0;
 $data = sp;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($data) + 1120|0);
 $irow$03 = 0;$row$04 = 0;
 while(1) {
  $3 = HEAP32[864>>2]|0;
  $4 = (_fread(($data|0),1,1120,($3|0))|0);
  $5 = ($4>>>0)<(1120);
  if ($5) {
   _derror();
  }
  $6 = HEAP32[132328>>2]|0;
  $7 = HEAP16[132336>>1]|0;
  $8 = $7&65535;
  $9 = Math_imul($8, $row$04)|0;
  $10 = (($6) + ($9<<1)|0);
  $dp$01 = $data;$pix$02 = $10;
  while(1) {
   $11 = HEAP8[$dp$01>>0]|0;
   $12 = $11&255;
   $13 = $12 << 2;
   $14 = (($dp$01) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 >>> 6;
   $18 = $17 | $13;
   $19 = $18&65535;
   HEAP16[$pix$02>>1] = $19;
   $20 = (($dp$01) + 2|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 << 2;
   $24 = HEAP8[$14>>0]|0;
   $25 = $24&255;
   $26 = $25 >>> 4;
   $27 = $26 & 3;
   $28 = $27 | $23;
   $29 = $28&65535;
   $30 = (($pix$02) + 2|0);
   HEAP16[$30>>1] = $29;
   $31 = (($dp$01) + 3|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $33 << 2;
   $35 = HEAP8[$14>>0]|0;
   $36 = $35&255;
   $37 = $36 >>> 2;
   $38 = $37 & 3;
   $39 = $38 | $34;
   $40 = $39&65535;
   $41 = (($pix$02) + 4|0);
   HEAP16[$41>>1] = $40;
   $42 = (($dp$01) + 4|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $44 << 2;
   $46 = HEAP8[$14>>0]|0;
   $47 = $46&255;
   $48 = $47 & 3;
   $49 = $48 | $45;
   $50 = $49&65535;
   $51 = (($pix$02) + 6|0);
   HEAP16[$51>>1] = $50;
   $52 = (($dp$01) + 5|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $54 << 2;
   $56 = (($dp$01) + 9|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 & 3;
   $60 = $59 | $55;
   $61 = $60&65535;
   $62 = (($pix$02) + 8|0);
   HEAP16[$62>>1] = $61;
   $63 = (($dp$01) + 6|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $64&255;
   $66 = $65 << 2;
   $67 = HEAP8[$56>>0]|0;
   $68 = $67&255;
   $69 = $68 >>> 2;
   $70 = $69 & 3;
   $71 = $70 | $66;
   $72 = $71&65535;
   $73 = (($pix$02) + 10|0);
   HEAP16[$73>>1] = $72;
   $74 = (($dp$01) + 7|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $76 << 2;
   $78 = HEAP8[$56>>0]|0;
   $79 = $78&255;
   $80 = $79 >>> 4;
   $81 = $80 & 3;
   $82 = $81 | $77;
   $83 = $82&65535;
   $84 = (($pix$02) + 12|0);
   HEAP16[$84>>1] = $83;
   $85 = (($dp$01) + 8|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = $87 << 2;
   $89 = HEAP8[$56>>0]|0;
   $90 = $89&255;
   $91 = $90 >>> 6;
   $92 = $91 | $88;
   $93 = $92&65535;
   $94 = (($pix$02) + 14|0);
   HEAP16[$94>>1] = $93;
   $95 = (($dp$01) + 10|0);
   $96 = (($pix$02) + 16|0);
   $97 = ($95>>>0)<($2>>>0);
   if ($97) {
    $dp$01 = $95;$pix$02 = $96;
   } else {
    break;
   }
  }
  $98 = (($row$04) + 2)|0;
  $99 = HEAP16[132080>>1]|0;
  $100 = $99&65535;
  $101 = ($98|0)>($100|0);
  $$ = $101 ? 1 : $98;
  $102 = (($irow$03) + 1)|0;
  $103 = $99&65535;
  $104 = ($102|0)<($103|0);
  if ($104) {
   $irow$03 = $102;$row$04 = $$;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _canon_600_correct() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$01 = 0, $row$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  _canon_600_fixed_wb(1311);
  _canon_600_auto_wb();
  _canon_600_coeff();
  $42 = HEAP32[132360>>2]|0;
  $43 = (1023 - ($42))|0;
  $44 = ($43*1109)|0;
  $45 = $44 >>> 9;
  HEAP32[132368>>2] = $45;
  HEAP32[132360>>2] = 0;
  return;
 }
 $2 = HEAP32[584>>2]|0;
 $3 = HEAP32[132112>>2]|0;
 $4 = HEAP32[132360>>2]|0;
 $row$02 = 0;
 while(1) {
  $5 = HEAP16[132088>>1]|0;
  $6 = ($5<<16>>16)==(0);
  if (!($6)) {
   $7 = $row$02 << 1;
   $8 = $7 & 14;
   $9 = $row$02 & 3;
   $col$01 = 0;
   while(1) {
    $10 = $col$01 & 1;
    $11 = $10 | $8;
    $12 = $11 << 1;
    $13 = $2 >>> $12;
    $14 = $13 & 3;
    $15 = HEAP16[132096>>1]|0;
    $16 = $15&65535;
    $17 = $row$02 >> $16;
    $18 = HEAP16[132104>>1]|0;
    $19 = $18&65535;
    $20 = Math_imul($17, $19)|0;
    $21 = $col$01 >> $16;
    $22 = (($20) + ($21))|0;
    $23 = ((($3) + ($22<<3)|0) + ($14<<1)|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = $24&65535;
    $26 = (($25) - ($4))|0;
    $27 = ($26|0)<(0);
    $$ = $27 ? 0 : $26;
    $28 = ((132344 + ($9<<2)|0) + ($10<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = $29 << 16 >> 16;
    $31 = Math_imul($$, $30)|0;
    $32 = $31 >>> 9;
    $33 = $32&65535;
    HEAP16[$23>>1] = $33;
    $34 = (($col$01) + 1)|0;
    $35 = HEAP16[132088>>1]|0;
    $36 = $35&65535;
    $37 = ($34|0)<($36|0);
    if ($37) {
     $col$01 = $34;
    } else {
     break;
    }
   }
  }
  $38 = (($row$02) + 1)|0;
  $39 = HEAP16[132080>>1]|0;
  $40 = $39&65535;
  $41 = ($38|0)<($40|0);
  if ($41) {
   $row$02 = $38;
  } else {
   break;
  }
 }
 _canon_600_fixed_wb(1311);
 _canon_600_auto_wb();
 _canon_600_coeff();
 $42 = HEAP32[132360>>2]|0;
 $43 = (1023 - ($42))|0;
 $44 = ($43*1109)|0;
 $45 = $44 >>> 9;
 HEAP32[132368>>2] = $45;
 HEAP32[132360>>2] = 0;
 return;
}
function _canon_s2is() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $row$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $row$01 = 0;
 while(1) {
  $2 = HEAP32[864>>2]|0;
  $3 = ($row$01*3340)|0;
  $4 = (($3) + 3284)|0;
  (_fseek(($2|0),($4|0),0)|0);
  $5 = HEAP32[864>>2]|0;
  $6 = (_getc(($5|0))|0);
  $7 = ($6|0)>(15);
  $0 = (($row$01) + 1)|0;
  if ($7) {
   $$0 = 1;
   label = 4;
   break;
  }
  $1 = ($0>>>0)<(100);
  if ($1) {
   $row$01 = $0;
  } else {
   $$0 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _getbithuff($nbits,$huff) {
 $nbits = $nbits|0;
 $huff = $huff|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nbits|0)>(25);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($nbits|0)<(0);
 if ($1) {
  HEAP32[132392>>2] = 0;
  HEAP32[132384>>2] = 0;
  HEAP32[132376>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($nbits|0)==(0);
 $3 = HEAP32[132384>>2]|0;
 $4 = ($3|0)<(0);
 $or$cond = $2 | $4;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP32[132392>>2]|0;
 $6 = ($5|0)==(0);
 $7 = HEAP32[132384>>2]|0;
 $8 = ($7|0)<($nbits|0);
 $or$cond57 = $6 & $8;
 L11: do {
  if ($or$cond57) {
   while(1) {
    $9 = HEAP32[864>>2]|0;
    $10 = (_getc_unlocked(($9|0))|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     label = 9;
     break L11;
    }
    $12 = HEAP32[132400>>2]|0;
    $13 = ($12|0)!=(0);
    $14 = ($10|0)==(255);
    $or$cond3 = $14 & $13;
    if ($or$cond3) {
     $17 = HEAP32[864>>2]|0;
     $18 = (_getc_unlocked(($17|0))|0);
     $19 = ($18|0)!=(0);
     $20 = $19&1;
     HEAP32[132392>>2] = $20;
     $21 = HEAP32[132376>>2]|0;
     if ($19) {
      $34 = $21;
      break L11;
     } else {
      $23 = $21;
     }
    } else {
     HEAP32[132392>>2] = 0;
     $15 = HEAP32[132376>>2]|0;
     $23 = $15;
    }
    $22 = $23 << 8;
    $24 = $10 & 255;
    $25 = $22 | $24;
    HEAP32[132376>>2] = $25;
    $26 = HEAP32[132384>>2]|0;
    $27 = (($26) + 8)|0;
    HEAP32[132384>>2] = $27;
    $28 = HEAP32[132392>>2]|0;
    $29 = ($28|0)==(0);
    $30 = ($27|0)<($nbits|0);
    $or$cond5 = $29 & $30;
    if (!($or$cond5)) {
     label = 9;
     break;
    }
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $16 = HEAP32[132376>>2]|0;
  $34 = $16;
 }
 $31 = HEAP32[132384>>2]|0;
 $32 = (32 - ($31))|0;
 $33 = $34 << $32;
 $35 = (32 - ($nbits))|0;
 $36 = $33 >>> $35;
 $37 = ($huff|0)==(0|0);
 if ($37) {
  $46 = (($31) - ($nbits))|0;
  HEAP32[132384>>2] = $46;
  $47 = $46;$c$2 = $36;
 } else {
  $38 = (($huff) + ($36<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = $40 >>> 8;
  $42 = (($31) - ($41))|0;
  HEAP32[132384>>2] = $42;
  $43 = HEAP16[$38>>1]|0;
  $44 = $43&65535;
  $45 = $44 & 255;
  $47 = $42;$c$2 = $45;
 }
 $48 = ($47|0)<(0);
 if (!($48)) {
  $$0 = $c$2;
  return ($$0|0);
 }
 _derror();
 $$0 = $c$2;
 return ($$0|0);
}
function _make_decoder_ref($source) {
 $source = $source|0;
 var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $h$09 = 0, $h$1$lcssa = 0, $h$15 = 0, $h$2$lcssa = 0, $h$23 = 0, $h$3 = 0, $i$06 = 0, $j$04 = 0, $len$010 = 0, $max$0$lcssa = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$source>>2]|0;
 $1 = (($0) + 16|0);
 HEAP32[$source>>2] = $1;
 $2 = (($0) + 15|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = (($0) + 14|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $37 = (($0) + 13|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)==(0);
   if ($39) {
    $40 = (($0) + 12|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)==(0);
    if ($42) {
     $43 = (($0) + 11|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(0);
     if ($45) {
      $46 = (($0) + 10|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = ($47<<24>>24)==(0);
      if ($48) {
       $49 = (($0) + 9|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $52 = (($0) + 8|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = ($53<<24>>24)==(0);
        if ($54) {
         $55 = (($0) + 7|0);
         $56 = HEAP8[$55>>0]|0;
         $57 = ($56<<24>>24)==(0);
         if ($57) {
          $58 = (($0) + 6|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = ($59<<24>>24)==(0);
          if ($60) {
           $61 = (($0) + 5|0);
           $62 = HEAP8[$61>>0]|0;
           $63 = ($62<<24>>24)==(0);
           if ($63) {
            $64 = (($0) + 4|0);
            $65 = HEAP8[$64>>0]|0;
            $66 = ($65<<24>>24)==(0);
            if ($66) {
             $67 = (($0) + 3|0);
             $68 = HEAP8[$67>>0]|0;
             $69 = ($68<<24>>24)==(0);
             if ($69) {
              $70 = (($0) + 2|0);
              $71 = HEAP8[$70>>0]|0;
              $72 = ($71<<24>>24)==(0);
              if ($72) {
               $73 = (($0) + 1|0);
               $74 = HEAP8[$73>>0]|0;
               $75 = ($74<<24>>24)==(0);
               if ($75) {
                $76 = HEAP8[$0>>0]|0;
                $not$ = ($76<<24>>24)!=(0);
                $$ = $not$&1;
                $max$0$lcssa = $$;
               } else {
                $max$0$lcssa = 2;
               }
              } else {
               $max$0$lcssa = 3;
              }
             } else {
              $max$0$lcssa = 4;
             }
            } else {
             $max$0$lcssa = 5;
            }
           } else {
            $max$0$lcssa = 6;
           }
          } else {
           $max$0$lcssa = 7;
          }
         } else {
          $max$0$lcssa = 8;
         }
        } else {
         $max$0$lcssa = 9;
        }
       } else {
        $max$0$lcssa = 10;
       }
      } else {
       $max$0$lcssa = 11;
      }
     } else {
      $max$0$lcssa = 12;
     }
    } else {
     $max$0$lcssa = 13;
    }
   } else {
    $max$0$lcssa = 14;
   }
  } else {
   $max$0$lcssa = 15;
  }
 } else {
  $max$0$lcssa = 16;
 }
 $8 = 1 << $max$0$lcssa;
 $9 = (($8) + 1)|0;
 $10 = (_calloc($9,2)|0);
 _merror($10,132408);
 $11 = $max$0$lcssa&65535;
 HEAP16[$10>>1] = $11;
 $12 = ($max$0$lcssa|0)==(0);
 if ($12) {
  return ($10|0);
 } else {
  $h$09 = 1;$len$010 = 1;
 }
 while(1) {
  $$sum = (($len$010) + -1)|0;
  $13 = (($0) + ($$sum)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $h$1$lcssa = $h$09;
  } else {
   $16 = (($max$0$lcssa) - ($len$010))|0;
   $17 = 1 << $16;
   $18 = ($16|0)==(31);
   $19 = $len$010 << 8;
   $h$15 = $h$09;$i$06 = 0;
   while(1) {
    if ($18) {
     $h$2$lcssa = $h$15;
    } else {
     $h$23 = $h$15;$j$04 = 0;
     while(1) {
      $20 = ($h$23|0)>($8|0);
      if ($20) {
       $h$3 = $h$23;
      } else {
       $21 = HEAP32[$source>>2]|0;
       $22 = HEAP8[$21>>0]|0;
       $23 = $22&255;
       $24 = $23 | $19;
       $25 = $24&65535;
       $26 = (($h$23) + 1)|0;
       $27 = (($10) + ($h$23<<1)|0);
       HEAP16[$27>>1] = $25;
       $h$3 = $26;
      }
      $28 = (($j$04) + 1)|0;
      $29 = ($28|0)<($17|0);
      if ($29) {
       $h$23 = $h$3;$j$04 = $28;
      } else {
       $h$2$lcssa = $h$3;
       break;
      }
     }
    }
    $30 = (($i$06) + 1)|0;
    $31 = HEAP32[$source>>2]|0;
    $32 = (($31) + 1|0);
    HEAP32[$source>>2] = $32;
    $33 = HEAP8[$13>>0]|0;
    $34 = $33&255;
    $35 = ($30|0)<($34|0);
    if ($35) {
     $h$15 = $h$2$lcssa;$i$06 = $30;
    } else {
     $h$1$lcssa = $h$2$lcssa;
     break;
    }
   }
  }
  $36 = (($len$010) + 1)|0;
  $exitcond = ($max$0$lcssa|0)==($len$010|0);
  if ($exitcond) {
   break;
  } else {
   $h$09 = $h$1$lcssa;$len$010 = $36;
  }
 }
 return ($10|0);
}
function _make_decoder($source) {
 $source = $source|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $source;
 $1 = (_make_decoder_ref($0)|0);
 STACKTOP = sp;return ($1|0);
}
function _crw_init_tables($table,$huff) {
 $table = $table|0;
 $huff = $huff|0;
 var $$table = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($table>>>0)>(2);
 $$table = $0 ? 2 : $table;
 $1 = (132424 + (($$table*29)|0)|0);
 $2 = (_make_decoder($1)|0);
 HEAP32[$huff>>2] = $2;
 $3 = (132512 + (($$table*180)|0)|0);
 $4 = (_make_decoder($3)|0);
 $5 = (($huff) + 4|0);
 HEAP32[$5>>2] = $4;
 return;
}
function _canon_has_lowbits() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $ret$01 = 0, $ret$1 = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16384|0;
 $test = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),0,0)|0);
 $1 = HEAP32[864>>2]|0;
 (_fread(($test|0),1,16384,($1|0))|0);
 $i$02 = 540;$ret$01 = 1;
 while(1) {
  $2 = (($test) + ($i$02)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(-1);
  if ($4) {
   $5 = (($i$02) + 1)|0;
   $6 = (($test) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $ret$1 = 0;
   } else {
    $$0 = 1;
    label = 5;
    break;
   }
  } else {
   $ret$1 = $ret$01;
  }
  $9 = (($i$02) + 1)|0;
  $10 = ($9>>>0)<(16383);
  if ($10) {
   $i$02 = $9;$ret$01 = $ret$1;
  } else {
   $$0 = $ret$1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _canon_load_raw() {
 var $$ = 0, $$4 = 0, $$4$1 = 0, $$4$2 = 0, $$4$3 = 0, $$lcssa = 0, $$lcssa36 = 0, $$neg = 0, $$neg5 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0;
 var $block$010 = 0, $carry$023 = 0, $carry$1$lcssa = 0, $carry$111 = 0, $diff$0 = 0, $diffbuf = 0, $exitcond31 = 0, $exitcond32 = 0, $huff = 0, $i$07 = 0, $i$1 = 0, $i$28 = 0, $i$316 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$1 = 0, $or$cond3$2 = 0, $or$cond3$3 = 0, $pnum$024 = 0, $pnum$1$lcssa = 0;
 var $pnum$112 = 0, $pnum$29 = 0, $prow$017 = 0, $row$022 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $huff = sp + 264|0;
 $diffbuf = sp + 8|0;
 $base = sp;
 $0 = HEAP32[133056>>2]|0;
 _crw_init_tables($0,$huff);
 $1 = (_canon_has_lowbits()|0);
 $2 = ($1|0)!=(0);
 if (!($2)) {
  HEAP32[132368>>2] = 1023;
 }
 $3 = HEAP32[864>>2]|0;
 $4 = HEAP16[133064>>1]|0;
 $5 = $4&65535;
 $6 = Math_imul($5, $1)|0;
 $7 = HEAP16[132336>>1]|0;
 $8 = $7&65535;
 $9 = Math_imul($6, $8)|0;
 $10 = (($9|0) / 4)&-1;
 $11 = (($10) + 540)|0;
 (_fseek(($3|0),($11|0),0)|0);
 HEAP32[132400>>2] = 1;
 (_getbithuff(-1,0)|0);
 $12 = HEAP16[133064>>1]|0;
 $13 = ($12<<16>>16)==(0);
 if ($13) {
  $146 = HEAP32[$huff>>2]|0;
  _free($146);
  $147 = (($huff) + 4|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
  STACKTOP = sp;return;
 }
 $14 = $12&65535;
 $15 = (($base) + 4|0);
 $22 = $14;$carry$023 = 0;$pnum$024 = 0;$row$022 = 0;
 while(1) {
  $16 = HEAP32[132328>>2]|0;
  $17 = HEAP16[132336>>1]|0;
  $18 = $17&65535;
  $19 = Math_imul($18, $row$022)|0;
  $20 = (($16) + ($19<<1)|0);
  $21 = (($22) - ($row$022))|0;
  $23 = ($21|0)>(8);
  $$ = $23 ? 8 : $21;
  $24 = Math_imul($18, $$)|0;
  $25 = $24 >> 6;
  $26 = ($25|0)>(0);
  if ($26) {
   $27 = $25 << 6;
   $28 = (($25) + -1)|0;
   $block$010 = 0;$carry$111 = $carry$023;$pnum$112 = $pnum$024;
   while(1) {
    _memset(($diffbuf|0),0,256)|0;
    $i$07 = 0;
    while(1) {
     $29 = ($i$07|0)>(0);
     $30 = $29&1;
     $31 = (($huff) + ($30<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP16[$32>>1]|0;
     $34 = $33&65535;
     $35 = (($32) + 2|0);
     $36 = (_getbithuff($34,$35)|0);
     $37 = ($36|0)==(0);
     $38 = ($i$07|0)!=(0);
     $or$cond = $38 & $37;
     if ($or$cond) {
      break;
     }
     $39 = ($36|0)==(255);
     if ($39) {
      $i$1 = $i$07;
     } else {
      $40 = $36 >> 4;
      $41 = (($40) + ($i$07))|0;
      $42 = $36 & 15;
      $43 = ($42|0)==(0);
      if ($43) {
       $i$1 = $41;
      } else {
       $44 = (_getbithuff($42,0)|0);
       $45 = (($42) + -1)|0;
       $46 = 1 << $45;
       $47 = $44 & $46;
       $48 = ($47|0)==(0);
       if ($48) {
        $$neg = -1 << $42;
        $$neg5 = (($$neg) + 1)|0;
        $49 = (($$neg5) + ($44))|0;
        $diff$0 = $49;
       } else {
        $diff$0 = $44;
       }
       $50 = ($41|0)<(64);
       if ($50) {
        $51 = (($diffbuf) + ($41<<2)|0);
        HEAP32[$51>>2] = $diff$0;
        $i$1 = $41;
       } else {
        $i$1 = $41;
       }
      }
     }
     $52 = (($i$1) + 1)|0;
     $53 = ($52|0)<(64);
     if ($53) {
      $i$07 = $52;
     } else {
      break;
     }
    }
    $54 = HEAP32[$diffbuf>>2]|0;
    $55 = (($54) + ($carry$111))|0;
    HEAP32[$diffbuf>>2] = $55;
    $56 = $block$010 << 6;
    $57 = (($56) + ($19))|0;
    $i$28 = 0;$pnum$29 = $pnum$112;
    while(1) {
     $58 = (($pnum$29) + 1)|0;
     $59 = HEAP16[132336>>1]|0;
     $60 = $59&65535;
     $61 = (($pnum$29|0) % ($60|0))&-1;
     $62 = ($61|0)==(0);
     if ($62) {
      HEAP32[$15>>2] = 512;
      HEAP32[$base>>2] = 512;
     }
     $63 = (($diffbuf) + ($i$28<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $i$28 & 1;
     $66 = (($base) + ($65<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($67) + ($64))|0;
     HEAP32[$66>>2] = $68;
     $69 = $68&65535;
     $$sum = (($57) + ($i$28))|0;
     $70 = (($16) + ($$sum<<1)|0);
     HEAP16[$70>>1] = $69;
     $71 = $68 & 64512;
     $72 = ($71|0)==(0);
     if (!($72)) {
      _derror();
     }
     $73 = (($i$28) + 1)|0;
     $exitcond31 = ($73|0)==(64);
     if ($exitcond31) {
      break;
     } else {
      $i$28 = $73;$pnum$29 = $58;
     }
    }
    $74 = (($pnum$112) + 64)|0;
    $75 = (($block$010) + 1)|0;
    $exitcond32 = ($block$010|0)==($28|0);
    if ($exitcond32) {
     $$lcssa36 = $55;
     break;
    } else {
     $block$010 = $75;$carry$111 = $55;$pnum$112 = $74;
    }
   }
   $76 = (($pnum$024) + ($27))|0;
   $carry$1$lcssa = $$lcssa36;$pnum$1$lcssa = $76;
  } else {
   $carry$1$lcssa = $carry$023;$pnum$1$lcssa = $pnum$024;
  }
  if ($2) {
   $77 = HEAP32[864>>2]|0;
   $78 = (_ftell(($77|0))|0);
   $79 = HEAP32[864>>2]|0;
   $80 = HEAP16[132336>>1]|0;
   $81 = $80&65535;
   $82 = Math_imul($81, $row$022)|0;
   $83 = (($82|0) / 4)&-1;
   $84 = (($83) + 26)|0;
   (_fseek(($79|0),($84|0),0)|0);
   $85 = HEAP16[132336>>1]|0;
   $86 = ($85<<16>>16)==(0);
   $87 = HEAP32[864>>2]|0;
   if ($86) {
    $$lcssa = $87;
   } else {
    $88 = $87;$i$316 = 0;$prow$017 = $20;
    while(1) {
     $89 = (_getc_unlocked(($88|0))|0);
     $90 = HEAP16[$prow$017>>1]|0;
     $91 = $90&65535;
     $92 = $91 << 2;
     $93 = $89 & 3;
     $94 = $92 | $93;
     $95 = HEAP16[132336>>1]|0;
     $96 = ($95<<16>>16)==(2672);
     $97 = ($94>>>0)<(512);
     $or$cond3 = $96 & $97;
     $98 = (($94) + 2)|0;
     $$4 = $or$cond3 ? $98 : $94;
     $99 = $$4&65535;
     HEAP16[$prow$017>>1] = $99;
     $100 = (($prow$017) + 2|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101&65535;
     $103 = $102 << 2;
     $104 = $89 >>> 2;
     $105 = $104 & 3;
     $106 = $103 | $105;
     $107 = HEAP16[132336>>1]|0;
     $108 = ($107<<16>>16)==(2672);
     $109 = ($106>>>0)<(512);
     $or$cond3$1 = $108 & $109;
     $110 = (($106) + 2)|0;
     $$4$1 = $or$cond3$1 ? $110 : $106;
     $111 = $$4$1&65535;
     HEAP16[$100>>1] = $111;
     $112 = (($prow$017) + 4|0);
     $113 = HEAP16[$112>>1]|0;
     $114 = $113&65535;
     $115 = $114 << 2;
     $116 = $89 >>> 4;
     $117 = $116 & 3;
     $118 = $115 | $117;
     $119 = HEAP16[132336>>1]|0;
     $120 = ($119<<16>>16)==(2672);
     $121 = ($118>>>0)<(512);
     $or$cond3$2 = $120 & $121;
     $122 = (($118) + 2)|0;
     $$4$2 = $or$cond3$2 ? $122 : $118;
     $123 = $$4$2&65535;
     HEAP16[$112>>1] = $123;
     $124 = (($prow$017) + 6|0);
     $125 = HEAP16[$124>>1]|0;
     $126 = $125&65535;
     $127 = $126 << 2;
     $128 = $89 >>> 6;
     $129 = $128 & 3;
     $130 = $127 | $129;
     $131 = HEAP16[132336>>1]|0;
     $132 = ($131<<16>>16)==(2672);
     $133 = ($130>>>0)<(512);
     $or$cond3$3 = $132 & $133;
     $134 = (($130) + 2)|0;
     $$4$3 = $or$cond3$3 ? $134 : $130;
     $135 = $$4$3&65535;
     HEAP16[$124>>1] = $135;
     $scevgep = (($prow$017) + 8|0);
     $136 = (($i$316) + 1)|0;
     $137 = HEAP16[132336>>1]|0;
     $138 = $137&65535;
     $139 = $138 << 1;
     $140 = ($136|0)<($139|0);
     $141 = HEAP32[864>>2]|0;
     if ($140) {
      $88 = $141;$i$316 = $136;$prow$017 = $scevgep;
     } else {
      $$lcssa = $141;
      break;
     }
    }
   }
   (_fseek(($$lcssa|0),($78|0),0)|0);
  }
  $142 = (($row$022) + 8)|0;
  $143 = HEAP16[133064>>1]|0;
  $144 = $143&65535;
  $145 = ($144|0)>($142|0);
  if ($145) {
   $22 = $144;$carry$023 = $carry$1$lcssa;$pnum$024 = $pnum$1$lcssa;$row$022 = $142;
  } else {
   break;
  }
 }
 $146 = HEAP32[$huff>>2]|0;
 _free($146);
 $147 = (($huff) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 _free($148);
 STACKTOP = sp;return;
}
function _ljpeg_start($jh,$info_only) {
 $jh = $jh|0;
 $info_only = $info_only|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$27 = 0, $data = 0, $dp = 0, $or$cond = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65552|0;
 $data = sp + 8|0;
 $dp = sp;
 dest=$jh+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($jh) + 24|0);
 HEAP32[$0>>2] = 2147483647;
 $1 = HEAP32[864>>2]|0;
 (_fread(($data|0),2,1,($1|0))|0);
 $2 = (($data) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(-40);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($data) + 2|0);
 $6 = (($data) + 3|0);
 $7 = (($data) + 7|0);
 $8 = (($jh) + 16|0);
 $9 = (($jh) + 4|0);
 $10 = (($data) + 4|0);
 $11 = (($jh) + 8|0);
 $12 = (($data) + 5|0);
 $13 = (($jh) + 16|0);
 $14 = (($jh) + 12|0);
 $15 = ($info_only|0)==(0);
 L4: while(1) {
  $16 = HEAP32[864>>2]|0;
  (_fread(($data|0),2,2,($16|0))|0);
  $17 = HEAP8[$data>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = HEAP8[$2>>0]|0;
  $21 = $20&255;
  $22 = $19 | $21;
  $23 = HEAP8[$5>>0]|0;
  $24 = $23&255;
  $25 = $24 << 8;
  $26 = HEAP8[$6>>0]|0;
  $27 = $26&255;
  $28 = $25 | $27;
  $29 = (($28) + -2)|0;
  $30 = ($22>>>0)<(65281);
  if ($30) {
   $$0 = 0;
   label = 24;
   break;
  }
  $31 = HEAP32[864>>2]|0;
  (_fread(($data|0),1,($29|0),($31|0))|0);
  switch ($22|0) {
  case 65475:  {
   $32 = HEAP8[$7>>0]|0;
   $33 = $32&255;
   $34 = $33 >>> 4;
   $35 = $33 & 15;
   $36 = Math_imul($34, $35)|0;
   $37 = (($36) + 3)|0;
   $38 = $37 & 3;
   HEAP32[$8>>2] = $38;
   break;
  }
  case 65498:  {
   label = 12;
   break L4;
   break;
  }
  case 65501:  {
   $91 = HEAP8[$data>>0]|0;
   $92 = $91&255;
   $93 = $92 << 8;
   $94 = HEAP8[$2>>0]|0;
   $95 = $94&255;
   $96 = $93 | $95;
   HEAP32[$0>>2] = $96;
   continue L4;
   break;
  }
  case 65472:  {
   break;
  }
  case 65476:  {
   if (!($15)) {
    continue L4;
   }
   HEAP32[$dp>>2] = $data;
   $61 = (($data) + ($29)|0);
   $62 = ($28>>>0)>(2);
   if ($62) {
    $64 = $data;
   } else {
    continue L4;
   }
   while(1) {
    $63 = (($64) + 1|0);
    HEAP32[$dp>>2] = $63;
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = ($65&255)<(4);
    if (!($67)) {
     break;
    }
    $68 = (_make_decoder_ref($dp)|0);
    $69 = ((($jh) + ($66<<2)|0) + 52|0);
    HEAP32[$69>>2] = $68;
    $70 = ((($jh) + ($66<<2)|0) + 76|0);
    HEAP32[$70>>2] = $68;
    $71 = HEAP32[$dp>>2]|0;
    $72 = ($71>>>0)<($61>>>0);
    if ($72) {
     $64 = $71;
    } else {
     break;
    }
   }
   $97 = ($22|0)==(65498);
   if ($97) {
    break L4;
   } else {
    continue L4;
   }
   break;
  }
  default: {
   continue L4;
  }
  }
  $39 = HEAP8[$data>>0]|0;
  $40 = $39&255;
  HEAP32[$jh>>2] = $40;
  $41 = HEAP8[$2>>0]|0;
  $42 = $41&255;
  $43 = $42 << 8;
  $44 = HEAP8[$5>>0]|0;
  $45 = $44&255;
  $46 = $43 | $45;
  HEAP32[$9>>2] = $46;
  $47 = HEAP8[$6>>0]|0;
  $48 = $47&255;
  $49 = $48 << 8;
  $50 = HEAP8[$10>>0]|0;
  $51 = $50&255;
  $52 = $49 | $51;
  HEAP32[$11>>2] = $52;
  $53 = HEAP8[$12>>0]|0;
  $54 = $53&255;
  $55 = HEAP32[$13>>2]|0;
  $56 = (($54) + ($55))|0;
  HEAP32[$14>>2] = $56;
  $57 = ($29|0)!=(9);
  $58 = HEAP32[133072>>2]|0;
  $59 = ($58|0)!=(0);
  $or$cond = $57 | $59;
  if ($or$cond) {
   continue;
  }
  $60 = HEAP32[864>>2]|0;
  (_getc(($60|0))|0);
 }
 if ((label|0) == 12) {
  $73 = HEAP8[$data>>0]|0;
  $74 = $73&255;
  $75 = $74 << 1;
  $76 = $75 | 1;
  $77 = (($data) + ($76)|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($jh) + 20|0);
  HEAP32[$80>>2] = $79;
  $81 = HEAP8[$data>>0]|0;
  $82 = $81&255;
  $83 = $82 << 1;
  $84 = (($83) + 3)|0;
  $85 = (($data) + ($84)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $87 & 15;
  $89 = HEAP32[$jh>>2]|0;
  $90 = (($89) - ($88))|0;
  HEAP32[$jh>>2] = $90;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$0|0);
 }
 $98 = ($info_only|0)==(0);
 if (!($98)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $99 = (($jh) + 12|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)>(6);
 if ($101) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $102 = (($jh) + 52|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)==(0|0);
 if ($104) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $105 = (($jh) + 56|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)==(0|0);
 if ($107) {
  $111 = (($jh) + 52|0);
  $112 = HEAP32[$111>>2]|0;
  HEAP32[$105>>2] = $112;
 }
 $108 = (($jh) + 60|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0|0);
 if ($110) {
  $136 = (($jh) + 56|0);
  $137 = HEAP32[$136>>2]|0;
  HEAP32[$108>>2] = $137;
 }
 $138 = (($jh) + 64|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)==(0|0);
 if ($140) {
  $141 = (($jh) + 60|0);
  $142 = HEAP32[$141>>2]|0;
  HEAP32[$138>>2] = $142;
 }
 $143 = (($jh) + 68|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ($144|0)==(0|0);
 if ($145) {
  $146 = (($jh) + 64|0);
  $147 = HEAP32[$146>>2]|0;
  HEAP32[$143>>2] = $147;
 }
 $148 = (($jh) + 72|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(0|0);
 if ($150) {
  $151 = (($jh) + 68|0);
  $152 = HEAP32[$151>>2]|0;
  HEAP32[$148>>2] = $152;
 }
 $123 = (($jh) + 16|0);
 $153 = HEAP32[$123>>2]|0;
 $154 = ($153|0)==(0);
 if (!($154)) {
  $113 = (($jh) + 56|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($jh) + 60|0);
  HEAP32[$115>>2] = $114;
  $116 = HEAP32[$113>>2]|0;
  $117 = (($jh) + 64|0);
  HEAP32[$117>>2] = $116;
  $118 = HEAP32[$113>>2]|0;
  $119 = (($jh) + 68|0);
  HEAP32[$119>>2] = $118;
  $120 = HEAP32[$113>>2]|0;
  $121 = (($jh) + 72|0);
  HEAP32[$121>>2] = $120;
  $122 = HEAP32[$123>>2]|0;
  $124 = ($122|0)>(0);
  if ($124) {
   $c$27 = 0;
   while(1) {
    $125 = HEAP32[$102>>2]|0;
    $126 = (($c$27) + 1)|0;
    $127 = ((($jh) + ($126<<2)|0) + 52|0);
    HEAP32[$127>>2] = $125;
    $128 = HEAP32[$123>>2]|0;
    $129 = ($126|0)<($128|0);
    if ($129) {
     $c$27 = $126;
    } else {
     break;
    }
   }
  }
 }
 $130 = (($jh) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = HEAP32[$99>>2]|0;
 $133 = Math_imul($132, $131)|0;
 $134 = (_calloc($133,4)|0);
 $135 = (($jh) + 92|0);
 HEAP32[$135>>2] = $134;
 _merror($134,133080);
 HEAP32[132400>>2] = 1;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _ljpeg_end($jh) {
 $jh = $jh|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($jh) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 $3 = (($jh) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  _free($4);
 }
 $6 = (($jh) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  _free($7);
 }
 $9 = (($jh) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = (($jh) + 92|0);
  $13 = HEAP32[$12>>2]|0;
  _free($13);
  return;
 }
 _free($10);
 $12 = (($jh) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 return;
}
function _ljpeg_diff($huff) {
 $huff = $huff|0;
 var $$0 = 0, $$neg = 0, $$neg2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$huff>>1]|0;
 $1 = $0&65535;
 $2 = (($huff) + 2|0);
 $3 = (_getbithuff($1,$2)|0);
 $4 = ($3|0)==(16);
 if ($4) {
  $5 = HEAP32[133072>>2]|0;
  $6 = (($5) + -1)|0;
  $7 = ($6>>>0)>(16842750);
  if ($7) {
   $$0 = -32768;
   return ($$0|0);
  }
 }
 $8 = (_getbithuff($3,0)|0);
 $9 = (($3) + -1)|0;
 $10 = 1 << $9;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = $8;
  return ($$0|0);
 }
 $$neg = -1 << $3;
 $$neg2 = (($$neg) + 1)|0;
 $13 = (($$neg2) + ($8))|0;
 $$0 = $13;
 return ($$0|0);
}
function _ljpeg_row($jrow,$jh) {
 $jrow = $jrow|0;
 $jh = $jh|0;
 var $$lcssa = 0, $$lcssa25 = 0, $$promoted = 0, $$promoted13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$211 = 0, $col$015 = 0, $mark$0 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond4 = 0, $or$cond6 = 0, $pred$0 = 0, $pred$1 = 0, $row = 0, $spred$017 = 0, $spred$1$lcssa = 0, $spred$112 = 0, $spred$2 = 0, $spred$2$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $row = sp;
 $0 = (($jh) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = Math_imul($1, $jrow)|0;
 $3 = (($jh) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2|0) % ($4|0))&-1;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$jh>>2]|0;
  $8 = (($7) + -1)|0;
  $9 = 1 << $8;
  $10 = (($jh) + 28|0);
  HEAP32[$10>>2] = $9;
  $11 = HEAP32[$jh>>2]|0;
  $12 = (($11) + -1)|0;
  $13 = 1 << $12;
  $14 = (($jh) + 32|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$jh>>2]|0;
  $16 = (($15) + -1)|0;
  $17 = 1 << $16;
  $18 = (($jh) + 36|0);
  HEAP32[$18>>2] = $17;
  $19 = HEAP32[$jh>>2]|0;
  $20 = (($19) + -1)|0;
  $21 = 1 << $20;
  $22 = (($jh) + 40|0);
  HEAP32[$22>>2] = $21;
  $23 = HEAP32[$jh>>2]|0;
  $24 = (($23) + -1)|0;
  $25 = 1 << $24;
  $26 = (($jh) + 44|0);
  HEAP32[$26>>2] = $25;
  $27 = HEAP32[$jh>>2]|0;
  $28 = (($27) + -1)|0;
  $29 = 1 << $28;
  $30 = (($jh) + 48|0);
  HEAP32[$30>>2] = $29;
  $31 = ($jrow|0)==(0);
  if (!($31)) {
   $32 = HEAP32[864>>2]|0;
   (_fseek(($32|0),-2,1)|0);
   $mark$0 = 0;
   while(1) {
    $33 = $mark$0 << 8;
    $34 = $33 & 16776960;
    $35 = HEAP32[864>>2]|0;
    $36 = (_getc_unlocked(($35|0))|0);
    $37 = (($34) + ($36))|0;
    $38 = ($36|0)==(-1);
    $39 = $37 & 65520;
    $40 = ($39|0)==(65488);
    $or$cond3 = $38 | $40;
    if ($or$cond3) {
     break;
    } else {
     $mark$0 = $37;
    }
   }
  }
  (_getbithuff(-1,0)|0);
 }
 $46 = (($jh) + 92|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$0>>2]|0;
 $49 = (($jh) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = Math_imul($50, $48)|0;
 $52 = $jrow & 1;
 $53 = (0 - ($52))|0;
 $54 = $51 & $53;
 $55 = (($47) + ($54<<1)|0);
 HEAP32[$row>>2] = $55;
 $56 = $jrow & 1;
 $57 = $56 ^ 1;
 $58 = (0 - ($57))|0;
 $59 = $51 & $58;
 $60 = (($47) + ($59<<1)|0);
 $61 = (($row) + 4|0);
 HEAP32[$61>>2] = $60;
 $62 = $jrow & 1;
 $63 = (0 - ($62))|0;
 $64 = $51 & $63;
 $65 = (($47) + ($64<<1)|0);
 $66 = (($row) + 8|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$0>>2]|0;
 $68 = ($67|0)>(0);
 if (!($68)) {
  $150 = (($row) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  STACKTOP = sp;return ($151|0);
 }
 $41 = (($jh) + 12|0);
 $42 = (($jh) + 16|0);
 $43 = ($jrow|0)!=(0);
 $44 = (($jh) + 20|0);
 $45 = (($row) + 4|0);
 $col$015 = 0;$spred$017 = 0;
 while(1) {
  $69 = HEAP32[$41>>2]|0;
  $70 = ($69|0)>(0);
  if ($70) {
   $71 = ($col$015|0)==(0);
   $72 = ($col$015|0)!=(0);
   $or$cond = $43 & $72;
   $$promoted = HEAP32[$row>>2]|0;
   $$promoted13 = HEAP32[$45>>2]|0;
   $84 = $$promoted;$92 = $$promoted13;$c$211 = 0;$spred$112 = $spred$017;
   while(1) {
    $73 = ((($jh) + ($c$211<<2)|0) + 52|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (_ljpeg_diff($74)|0);
    $76 = HEAP32[$42>>2]|0;
    $77 = ($76|0)==(0);
    $78 = ($c$211|0)>($76|0);
    $or$cond4 = $77 | $78;
    $79 = $c$211 | $col$015;
    $80 = ($79|0)==(0);
    $or$cond6 = $80 | $or$cond4;
    do {
     if ($or$cond6) {
      if ($71) {
       $87 = ((($jh) + ($c$211<<2)|0) + 28|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (($88) + ($75))|0;
       HEAP32[$87>>2] = $89;
       $pred$1 = $88;
       break;
      } else {
       $81 = HEAP32[$41>>2]|0;
       $82 = (0 - ($81))|0;
       $83 = (($84) + ($82<<1)|0);
       $85 = HEAP16[$83>>1]|0;
       $86 = $85&65535;
       $pred$0 = $86;
       label = 14;
       break;
      }
     } else {
      $pred$0 = $spred$112;
      label = 14;
     }
    } while(0);
    L23: do {
     if ((label|0) == 14) {
      label = 0;
      if ($or$cond) {
       $90 = HEAP32[$44>>2]|0;
       switch ($90|0) {
       case 2:  {
        $91 = HEAP16[$92>>1]|0;
        $93 = $91&65535;
        $pred$1 = $93;
        break L23;
        break;
       }
       case 5:  {
        $108 = HEAP16[$92>>1]|0;
        $109 = $108&65535;
        $110 = HEAP32[$41>>2]|0;
        $111 = (0 - ($110))|0;
        $112 = (($92) + ($111<<1)|0);
        $113 = HEAP16[$112>>1]|0;
        $114 = $113&65535;
        $115 = (($109) - ($114))|0;
        $116 = $115 >> 1;
        $117 = (($116) + ($pred$0))|0;
        $pred$1 = $117;
        break L23;
        break;
       }
       case 6:  {
        $118 = HEAP16[$92>>1]|0;
        $119 = $118&65535;
        $120 = HEAP32[$41>>2]|0;
        $121 = (0 - ($120))|0;
        $122 = (($92) + ($121<<1)|0);
        $123 = HEAP16[$122>>1]|0;
        $124 = $123&65535;
        $125 = (($pred$0) - ($124))|0;
        $126 = $125 >> 1;
        $127 = (($126) + ($119))|0;
        $pred$1 = $127;
        break L23;
        break;
       }
       case 7:  {
        $128 = HEAP16[$92>>1]|0;
        $129 = $128&65535;
        $130 = (($129) + ($pred$0))|0;
        $131 = $130 >> 1;
        $pred$1 = $131;
        break L23;
        break;
       }
       case 1:  {
        $pred$1 = $pred$0;
        break L23;
        break;
       }
       case 3:  {
        $94 = HEAP32[$41>>2]|0;
        $95 = (0 - ($94))|0;
        $96 = (($92) + ($95<<1)|0);
        $97 = HEAP16[$96>>1]|0;
        $98 = $97&65535;
        $pred$1 = $98;
        break L23;
        break;
       }
       case 4:  {
        $99 = HEAP16[$92>>1]|0;
        $100 = $99&65535;
        $101 = (($100) + ($pred$0))|0;
        $102 = HEAP32[$41>>2]|0;
        $103 = (0 - ($102))|0;
        $104 = (($92) + ($103<<1)|0);
        $105 = HEAP16[$104>>1]|0;
        $106 = $105&65535;
        $107 = (($101) - ($106))|0;
        $pred$1 = $107;
        break L23;
        break;
       }
       default: {
        $pred$1 = 0;
        break L23;
       }
       }
      } else {
       $pred$1 = $pred$0;
      }
     }
    } while(0);
    $132 = (($pred$1) + ($75))|0;
    $133 = $132&65535;
    HEAP16[$84>>1] = $133;
    $134 = $132 & 65535;
    $135 = HEAP32[$jh>>2]|0;
    $136 = $134 >>> $135;
    $137 = ($136|0)==(0);
    if (!($137)) {
     _derror();
    }
    $138 = HEAP32[$42>>2]|0;
    $139 = ($c$211|0)>($138|0);
    if ($139) {
     $spred$2 = $spred$112;
    } else {
     $140 = HEAP16[$84>>1]|0;
     $141 = $140&65535;
     $spred$2 = $141;
    }
    $142 = (($84) + 2|0);
    $143 = (($92) + 2|0);
    $144 = (($c$211) + 1)|0;
    $145 = HEAP32[$41>>2]|0;
    $146 = ($144|0)<($145|0);
    if ($146) {
     $84 = $142;$92 = $143;$c$211 = $144;$spred$112 = $spred$2;
    } else {
     $$lcssa = $142;$$lcssa25 = $143;$spred$2$lcssa = $spred$2;
     break;
    }
   }
   HEAP32[$row>>2] = $$lcssa;
   HEAP32[$45>>2] = $$lcssa25;
   $spred$1$lcssa = $spred$2$lcssa;
  } else {
   $spred$1$lcssa = $spred$017;
  }
  $147 = (($col$015) + 1)|0;
  $148 = HEAP32[$0>>2]|0;
  $149 = ($147|0)<($148|0);
  if ($149) {
   $col$015 = $147;$spred$017 = $spred$1$lcssa;
  } else {
   break;
  }
 }
 $150 = (($row) + 8|0);
 $151 = HEAP32[$150>>2]|0;
 STACKTOP = sp;return ($151|0);
}
function _lossless_jpeg_load_raw() {
 var $$ = 0, $$1 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
 var $col$09 = 0, $col$1$lcssa = 0, $col$14 = 0, $col$2 = 0, $col$3 = 0, $exitcond = 0, $jcol$02 = 0, $jh = 0, $jrow$07 = 0, $row$08 = 0, $row$2$lcssa = 0, $row$2$ph = 0, $row$23 = 0, $row$3 = 0, $row$4 = 0, $row$4$ = 0, $rp$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $jh = sp;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($jh) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($jh) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $3)|0;
 $7 = (($jh) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = ($6|0)>(0);
  $11 = Math_imul($5, $3)|0;
  $12 = (($11) + -1)|0;
  $col$09 = 0;$jrow$07 = 0;$row$08 = 0;
  while(1) {
   $13 = (_ljpeg_row($jrow$07,$jh)|0);
   $14 = HEAP32[133096>>2]|0;
   $15 = $14 & 1;
   $16 = ($15|0)==(0);
   do {
    if ($16) {
     $row$2$ph = $row$08;
    } else {
     $17 = $jrow$07 & 1;
     $18 = ($17|0)==(0);
     if ($18) {
      $23 = (($jrow$07|0) / 2)&-1;
      $row$2$ph = $23;
      break;
     } else {
      $19 = HEAP16[132080>>1]|0;
      $20 = $19&65535;
      $21 = (($20) + -1)|0;
      $$neg = (($jrow$07|0) / -2)&-1;
      $22 = (($21) + ($$neg))|0;
      $row$2$ph = $22;
      break;
     }
    }
   } while(0);
   if ($10) {
    $24 = HEAP32[132328>>2]|0;
    $25 = Math_imul($jrow$07, $6)|0;
    $col$14 = $col$09;$jcol$02 = 0;$row$23 = $row$2$ph;$rp$05 = $13;
    while(1) {
     $26 = (($rp$05) + 2|0);
     $27 = HEAP16[$rp$05>>1]|0;
     $28 = $27&65535;
     $29 = (936 + ($28<<1)|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = HEAP16[133104>>1]|0;
     $32 = ($31<<16>>16)==(0);
     if ($32) {
      $col$2 = $col$14;$row$3 = $row$23;
     } else {
      $33 = (($jcol$02) + ($25))|0;
      $34 = HEAP16[((133104 + 2|0))>>1]|0;
      $35 = $34&65535;
      $36 = HEAP16[133064>>1]|0;
      $37 = $36&65535;
      $38 = Math_imul($37, $35)|0;
      $39 = (($33|0) / ($38|0))&-1;
      $40 = $31&65535;
      $41 = ($39|0)>=($40|0);
      $$ = $41 ? $40 : $39;
      $42 = Math_imul($$, $38)|0;
      $43 = (($33) - ($42))|0;
      $44 = $41 ? 2 : 1;
      $45 = (133104 + ($44<<1)|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = (($43|0) / ($47|0))&-1;
      $49 = (($43|0) % ($47|0))&-1;
      $50 = Math_imul($$, $35)|0;
      $51 = (($49) + ($50))|0;
      $col$2 = $51;$row$3 = $48;
     }
     $52 = HEAP16[132336>>1]|0;
     $53 = $52&65535;
     $54 = ($52<<16>>16)==(3984);
     if ($54) {
      $55 = (($col$2) + -2)|0;
      $56 = ($col$2|0)<(2);
      if ($56) {
       $57 = (($row$3) + -1)|0;
       $58 = (($53) + ($55))|0;
       $col$3 = $58;$row$4 = $57;
      } else {
       $col$3 = $55;$row$4 = $row$3;
      }
     } else {
      $col$3 = $col$2;$row$4 = $row$3;
     }
     $59 = HEAP16[133064>>1]|0;
     $60 = $59&65535;
     $61 = ($row$4>>>0)<($60>>>0);
     if ($61) {
      $62 = HEAP16[132336>>1]|0;
      $63 = $62&65535;
      $64 = Math_imul($63, $row$4)|0;
      $65 = (($64) + ($col$3))|0;
      $66 = (($24) + ($65<<1)|0);
      HEAP16[$66>>1] = $30;
     }
     $67 = (($col$3) + 1)|0;
     $68 = HEAP16[132336>>1]|0;
     $69 = $68&65535;
     $70 = ($67|0)<($69|0);
     $71 = $70&1;
     $72 = $71 ^ 1;
     $row$4$ = (($72) + ($row$4))|0;
     $$1 = $70 ? $67 : 0;
     $73 = (($jcol$02) + 1)|0;
     $exitcond = ($jcol$02|0)==($12|0);
     if ($exitcond) {
      $col$1$lcssa = $$1;$row$2$lcssa = $row$4$;
      break;
     } else {
      $col$14 = $$1;$jcol$02 = $73;$row$23 = $row$4$;$rp$05 = $26;
     }
    }
   } else {
    $col$1$lcssa = $col$09;$row$2$lcssa = $row$2$ph;
   }
   $74 = (($jrow$07) + 1)|0;
   $75 = HEAP32[$7>>2]|0;
   $76 = ($74|0)<($75|0);
   if ($76) {
    $col$09 = $col$1$lcssa;$jrow$07 = $74;$row$08 = $row$2$lcssa;
   } else {
    break;
   }
  }
 }
 _ljpeg_end($jh);
 STACKTOP = sp;return;
}
function _canon_sraw_load_raw() {
 var $$ = 0, $$$1 = 0, $$$2 = 0, $$lcssa = 0, $$lcssa19 = 0, $$pr = 0, $$sum = 0, $$sum10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$041 = 0, $col$045 = 0, $col$124 = 0, $col$226 = 0, $cp$0$lcssa = 0, $cp$036 = 0, $ecol$067 = 0;
 var $ecol$1 = 0, $hue$0 = 0, $ip$0$lcssa = 0, $ip$028 = 0, $isdigittmp = 0, $jcol$069 = 0, $jcol$1$lcssa = 0, $jcol$158 = 0, $jcol$2$lcssa = 0, $jcol$248 = 0, $jh = 0, $jrow$068 = 0, $jrow$1$lcssa = 0, $jrow$157 = 0, $jrow$2$lcssa = 0, $jrow$247 = 0, $jrow$3 = 0, $or$cond = 0, $pix = 0, $row$056 = 0;
 var $row$132 = 0, $rp$070 = 0, $rp$1$lcssa = 0, $rp$159 = 0, $rp$2$lcssa = 0, $rp$249 = 0, $rp$3 = 0, $rp$421 = 0, $sext = 0, $slice$066 = 0, $v = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $jh = sp + 40|0;
 $pix = sp + 24|0;
 $v = sp + 12|0;
 ;HEAP32[$v+0>>2]=0|0;HEAP32[$v+4>>2]=0|0;HEAP32[$v+8>>2]=0|0;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($jh) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(4);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($jh) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 1;
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = Math_imul($7, $8)|0;
 $10 = HEAP16[133104>>1]|0;
 $19 = $10;$ecol$067 = 0;$jcol$069 = 0;$jrow$068 = 0;$rp$070 = 0;$slice$066 = 0;
 while(1) {
  $13 = HEAP16[((133104 + 2|0))>>1]|0;
  $14 = $13&65535;
  $15 = $14 << 1;
  $16 = HEAP32[$2>>2]|0;
  $17 = (($15|0) / ($16|0))&-1;
  $18 = (($17) + ($ecol$067))|0;
  $20 = ($19<<16>>16)==(0);
  if ($20) {
   label = 7;
  } else {
   $21 = HEAP16[132336>>1]|0;
   $22 = $21&65535;
   $23 = (($22) + -1)|0;
   $24 = ($18|0)>($23|0);
   if ($24) {
    label = 7;
   } else {
    $ecol$1 = $18;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $25 = HEAP16[132336>>1]|0;
   $26 = $25&65535;
   $27 = $26 & 65534;
   $ecol$1 = $27;
  }
  $28 = HEAP16[132080>>1]|0;
  $29 = ($28<<16>>16)==(0);
  if ($29) {
   $jcol$1$lcssa = $jcol$069;$jrow$1$lcssa = $jrow$068;$rp$1$lcssa = $rp$070;
  } else {
   $30 = ($ecol$067|0)<($ecol$1|0);
   $jcol$158 = $jcol$069;$jrow$157 = $jrow$068;$row$056 = 0;$rp$159 = $rp$070;
   while(1) {
    $31 = HEAP32[132112>>2]|0;
    $32 = HEAP16[132088>>1]|0;
    $33 = $32&65535;
    $34 = Math_imul($33, $row$056)|0;
    if ($30) {
     $col$045 = $ecol$067;$jcol$248 = $jcol$158;$jrow$247 = $jrow$157;$rp$249 = $rp$159;
     while(1) {
      $35 = (($jcol$248|0) % ($9|0))&-1;
      $36 = ($35|0)==(0);
      if ($36) {
       $37 = (($jrow$247) + 1)|0;
       $38 = (_ljpeg_row($jrow$247,$jh)|0);
       $jrow$3 = $37;$rp$3 = $38;
      } else {
       $jrow$3 = $jrow$247;$rp$3 = $rp$249;
      }
      $39 = HEAP16[132088>>1]|0;
      $40 = $39&65535;
      $41 = ($col$045|0)<($40|0);
      if ($41) {
       $42 = HEAP32[$2>>2]|0;
       $43 = ($42|0)>(2);
       if ($43) {
        $44 = (($col$045) + ($34))|0;
        $45 = HEAP32[$2>>2]|0;
        $46 = (($45) + -2)|0;
        $c$041 = 0;
        while(1) {
         $47 = (($c$041) + ($35))|0;
         $48 = (($rp$3) + ($47<<1)|0);
         $49 = HEAP16[$48>>1]|0;
         $50 = $c$041 >> 1;
         $51 = HEAP16[132088>>1]|0;
         $52 = $51&65535;
         $53 = Math_imul($52, $50)|0;
         $54 = $c$041 & 1;
         $55 = (($44) + ($54))|0;
         $$sum10 = (($55) + ($53))|0;
         $56 = (($31) + ($$sum10<<3)|0);
         HEAP16[$56>>1] = $49;
         $57 = (($c$041) + 1)|0;
         $58 = ($57|0)<($46|0);
         if ($58) {
          $c$041 = $57;
         } else {
          $$lcssa19 = $45;
          break;
         }
        }
       } else {
        $$lcssa19 = $42;
       }
       $59 = (($35) + -2)|0;
       $60 = (($59) + ($$lcssa19))|0;
       $61 = (($rp$3) + ($60<<1)|0);
       $62 = HEAP16[$61>>1]|0;
       $63 = $62&65535;
       $64 = (($63) + 49152)|0;
       $65 = $64&65535;
       $$sum = (($col$045) + ($34))|0;
       $66 = ((($31) + ($$sum<<3)|0) + 2|0);
       HEAP16[$66>>1] = $65;
       $67 = HEAP32[$2>>2]|0;
       $68 = (($35) + -1)|0;
       $69 = (($68) + ($67))|0;
       $70 = (($rp$3) + ($69<<1)|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = $71&65535;
       $73 = (($72) + 49152)|0;
       $74 = $73&65535;
       $75 = ((($31) + ($$sum<<3)|0) + 4|0);
       HEAP16[$75>>1] = $74;
      }
      $76 = (($col$045) + 2)|0;
      $77 = HEAP32[$2>>2]|0;
      $78 = (($77) + ($35))|0;
      $79 = ($76|0)<($ecol$1|0);
      if ($79) {
       $col$045 = $76;$jcol$248 = $78;$jrow$247 = $jrow$3;$rp$249 = $rp$3;
      } else {
       $jcol$2$lcssa = $78;$jrow$2$lcssa = $jrow$3;$rp$2$lcssa = $rp$3;
       break;
      }
     }
    } else {
     $jcol$2$lcssa = $jcol$158;$jrow$2$lcssa = $jrow$157;$rp$2$lcssa = $rp$159;
    }
    $80 = HEAP32[$2>>2]|0;
    $81 = $80 >> 1;
    $82 = (($row$056) + -1)|0;
    $83 = (($82) + ($81))|0;
    $84 = HEAP16[132080>>1]|0;
    $85 = $84&65535;
    $86 = ($83|0)<($85|0);
    if ($86) {
     $jcol$158 = $jcol$2$lcssa;$jrow$157 = $jrow$2$lcssa;$row$056 = $83;$rp$159 = $rp$2$lcssa;
    } else {
     $jcol$1$lcssa = $jcol$2$lcssa;$jrow$1$lcssa = $jrow$2$lcssa;$rp$1$lcssa = $rp$2$lcssa;
     break;
    }
   }
  }
  $87 = (($slice$066) + 1)|0;
  $88 = HEAP16[133104>>1]|0;
  $89 = $88&65535;
  $90 = ($slice$066|0)<($89|0);
  if ($90) {
   $19 = $88;$ecol$067 = $ecol$1;$jcol$069 = $jcol$1$lcssa;$jrow$068 = $jrow$1$lcssa;$rp$070 = $rp$1$lcssa;$slice$066 = $87;
  } else {
   break;
  }
 }
 $11 = HEAP8[133112>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L35: do {
  if ($12) {
   $cp$0$lcssa = 133112;
  } else {
   $92 = $11;$cp$036 = 133112;
   while(1) {
    $91 = $92 << 24 >> 24;
    $isdigittmp = (($91) + -48)|0;
    $93 = ($isdigittmp>>>0)>(9);
    if (!($93)) {
     $cp$0$lcssa = $cp$036;
     break L35;
    }
    $94 = (($cp$036) + 1|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = ($95<<24>>24)==(0);
    if ($96) {
     $cp$0$lcssa = $94;
     break;
    } else {
     $92 = $95;$cp$036 = $94;
    }
   }
  }
 } while(0);
 $97 = (($v) + 4|0);
 $98 = (($v) + 8|0);
 HEAP32[$vararg_buffer>>2] = $v;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $97;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $98;
 (_sscanf($cp$0$lcssa,133176,$vararg_buffer)|0);
 $99 = (($jh) + 16|0);
 $100 = HEAP32[133192>>2]|0;
 $101 = ($100>>>0)>(2147484288);
 if ($101) {
  label = 25;
 } else {
  $102 = HEAP32[$99>>2]|0;
  $103 = $102 << 2;
  $104 = (($103) + 4)|0;
  $105 = HEAP32[$v>>2]|0;
  $106 = ($105*1000)|0;
  $107 = HEAP32[$97>>2]|0;
  $108 = (($106) + ($107))|0;
  $109 = ($108*1000)|0;
  $110 = HEAP32[$98>>2]|0;
  $111 = (($109) + ($110))|0;
  $112 = ($100|0)==(-2147483112);
  $113 = ($111|0)>(1000006);
  $or$cond = $112 & $113;
  if ($or$cond) {
   label = 25;
  } else {
   $hue$0 = $104;
  }
 }
 if ((label|0) == 25) {
  $114 = HEAP32[$99>>2]|0;
  $115 = $114 << 1;
  $hue$0 = $115;
 }
 $116 = HEAP32[132112>>2]|0;
 $117 = HEAP16[132080>>1]|0;
 $118 = ($117<<16>>16)==(0);
 if ($118) {
  $ip$0$lcssa = $116;
 } else {
  $119 = HEAP32[$99>>2]|0;
  $120 = $119 >> 1;
  $ip$028 = $116;$row$132 = 0;
  while(1) {
   $128 = $120 & $row$132;
   $129 = ($128|0)==(0);
   $$pr = HEAP16[132088>>1]|0;
   if ($129) {
    $132 = $$pr;
    label = 32;
   } else {
    $130 = ($$pr<<16>>16)==(0);
    if ($130) {
     $$lcssa = 0;
    } else {
     $col$124 = 0;
     while(1) {
      $134 = HEAP16[132080>>1]|0;
      $135 = $134&65535;
      $136 = (($135) + -1)|0;
      $137 = ($row$132|0)==($136|0);
      $138 = HEAP16[132088>>1]|0;
      $139 = $138&65535;
      $140 = (($col$124) - ($139))|0;
      $141 = ((($ip$028) + ($140<<3)|0) + 2|0);
      $142 = HEAP16[$141>>1]|0;
      if ($137) {
       $143 = ((($ip$028) + ($col$124<<3)|0) + 2|0);
       HEAP16[$143>>1] = $142;
      } else {
       $144 = $142 << 16 >> 16;
       $145 = (($139) + ($col$124))|0;
       $146 = ((($ip$028) + ($145<<3)|0) + 2|0);
       $147 = HEAP16[$146>>1]|0;
       $148 = $147 << 16 >> 16;
       $149 = (($144) + 1)|0;
       $150 = (($149) + ($148))|0;
       $151 = $150 >>> 1;
       $152 = $151&65535;
       $153 = ((($ip$028) + ($col$124<<3)|0) + 2|0);
       HEAP16[$153>>1] = $152;
      }
      $154 = HEAP16[132080>>1]|0;
      $155 = $154&65535;
      $156 = (($155) + -1)|0;
      $157 = ($row$132|0)==($156|0);
      $158 = HEAP16[132088>>1]|0;
      $159 = $158&65535;
      $160 = (($col$124) - ($159))|0;
      $161 = ((($ip$028) + ($160<<3)|0) + 4|0);
      $162 = HEAP16[$161>>1]|0;
      if ($157) {
       $306 = ((($ip$028) + ($col$124<<3)|0) + 4|0);
       HEAP16[$306>>1] = $162;
      } else {
       $296 = $162 << 16 >> 16;
       $297 = (($159) + ($col$124))|0;
       $298 = ((($ip$028) + ($297<<3)|0) + 4|0);
       $299 = HEAP16[$298>>1]|0;
       $300 = $299 << 16 >> 16;
       $301 = (($296) + 1)|0;
       $302 = (($301) + ($300))|0;
       $303 = $302 >>> 1;
       $304 = $303&65535;
       $305 = ((($ip$028) + ($col$124<<3)|0) + 4|0);
       HEAP16[$305>>1] = $304;
      }
      $307 = (($col$124) + 2)|0;
      $308 = HEAP16[132088>>1]|0;
      $309 = $308&65535;
      $310 = ($307|0)<($309|0);
      if ($310) {
       $col$124 = $307;
      } else {
       $132 = $308;
       label = 32;
       break;
      }
     }
    }
   }
   if ((label|0) == 32) {
    label = 0;
    $131 = $132&65535;
    $133 = ($132&65535)>(1);
    if ($133) {
     $col$226 = 1;
     while(1) {
      $163 = (($col$226) + -1)|0;
      $164 = (($col$226) + 1)|0;
      $165 = HEAP16[132088>>1]|0;
      $166 = $165&65535;
      $167 = (($166) + -1)|0;
      $168 = ($col$226|0)==($167|0);
      $169 = ((($ip$028) + ($163<<3)|0) + 2|0);
      $170 = HEAP16[$169>>1]|0;
      if ($168) {
       $171 = ((($ip$028) + ($col$226<<3)|0) + 2|0);
       HEAP16[$171>>1] = $170;
      } else {
       $172 = $170 << 16 >> 16;
       $173 = ((($ip$028) + ($164<<3)|0) + 2|0);
       $174 = HEAP16[$173>>1]|0;
       $175 = $174 << 16 >> 16;
       $176 = (($172) + 1)|0;
       $177 = (($176) + ($175))|0;
       $178 = $177 >>> 1;
       $179 = $178&65535;
       $180 = ((($ip$028) + ($col$226<<3)|0) + 2|0);
       HEAP16[$180>>1] = $179;
      }
      $181 = HEAP16[132088>>1]|0;
      $182 = $181&65535;
      $183 = (($182) + -1)|0;
      $184 = ($col$226|0)==($183|0);
      $185 = ((($ip$028) + ($163<<3)|0) + 4|0);
      $186 = HEAP16[$185>>1]|0;
      if ($184) {
       $320 = ((($ip$028) + ($col$226<<3)|0) + 4|0);
       HEAP16[$320>>1] = $186;
      } else {
       $311 = $186 << 16 >> 16;
       $312 = ((($ip$028) + ($164<<3)|0) + 4|0);
       $313 = HEAP16[$312>>1]|0;
       $314 = $313 << 16 >> 16;
       $315 = (($311) + 1)|0;
       $316 = (($315) + ($314))|0;
       $317 = $316 >>> 1;
       $318 = $317&65535;
       $319 = ((($ip$028) + ($col$226<<3)|0) + 4|0);
       HEAP16[$319>>1] = $318;
      }
      $321 = (($col$226) + 2)|0;
      $322 = HEAP16[132088>>1]|0;
      $323 = $322&65535;
      $324 = ($321|0)<($323|0);
      if ($324) {
       $col$226 = $321;
      } else {
       $$lcssa = $323;
       break;
      }
     }
    } else {
     $$lcssa = $131;
    }
   }
   $187 = (($row$132) + 1)|0;
   $188 = (($ip$028) + ($$lcssa<<3)|0);
   $189 = HEAP16[132080>>1]|0;
   $190 = $189&65535;
   $191 = ($187|0)<($190|0);
   if ($191) {
    $ip$028 = $188;$row$132 = $187;
   } else {
    $ip$0$lcssa = $188;
    break;
   }
  }
 }
 $121 = ($116>>>0)<($ip$0$lcssa>>>0);
 L75: do {
  if ($121) {
   $122 = HEAP32[133192>>2]|0;
   $123 = ($122>>>0)<(2147484184);
   $124 = (($pix) + 8|0);
   $125 = (($pix) + 4|0);
   $126 = (($pix) + 4|0);
   $127 = (($pix) + 8|0);
   $rp$421 = $116;
   while(1) {
    switch ($122|0) {
    case -2147483112: case -2147483056: case -2147483039: case -2147483007: case -2147483001:  {
     $192 = (($rp$421) + 2|0);
     $193 = HEAP16[$192>>1]|0;
     $194 = $193 << 16 >> 16;
     $195 = $194 << 2;
     $196 = (($195) + ($hue$0))|0;
     $197 = $196&65535;
     HEAP16[$192>>1] = $197;
     $198 = (($rp$421) + 4|0);
     $199 = HEAP16[$198>>1]|0;
     $200 = $199 << 16 >> 16;
     $201 = $200 << 2;
     $202 = (($201) + ($hue$0))|0;
     $203 = $202&65535;
     HEAP16[$198>>1] = $203;
     $204 = HEAP16[$rp$421>>1]|0;
     $205 = $204 << 16 >> 16;
     $206 = HEAP16[$192>>1]|0;
     $207 = $206 << 16 >> 16;
     $208 = ($207*50)|0;
     $sext = $202 << 16;
     $209 = $sext >> 16;
     $210 = ($209*22929)|0;
     $211 = (($210) + ($208))|0;
     $212 = $211 >> 14;
     $213 = (($212) + ($205))|0;
     HEAP32[$pix>>2] = $213;
     $214 = HEAP16[$rp$421>>1]|0;
     $215 = $214 << 16 >> 16;
     $216 = HEAP16[$192>>1]|0;
     $217 = $216 << 16 >> 16;
     $218 = HEAP16[$198>>1]|0;
     $219 = $218 << 16 >> 16;
     $220 = Math_imul($219, -11751)|0;
     $221 = Math_imul($217, -5640)|0;
     $222 = (($220) + ($221))|0;
     $223 = $222 >> 14;
     $224 = (($223) + ($215))|0;
     HEAP32[$126>>2] = $224;
     $225 = HEAP16[$rp$421>>1]|0;
     $226 = $225 << 16 >> 16;
     $227 = HEAP16[$192>>1]|0;
     $228 = $227 << 16 >> 16;
     $229 = ($228*29040)|0;
     $230 = HEAP16[$198>>1]|0;
     $231 = $230 << 16 >> 16;
     $232 = Math_imul($231, -101)|0;
     $233 = (($229) + ($232))|0;
     $234 = $233 >> 14;
     $235 = (($234) + ($226))|0;
     HEAP32[$127>>2] = $235;
     break;
    }
    default: {
     if ($123) {
      $236 = HEAP16[$rp$421>>1]|0;
      $237 = $236&65535;
      $238 = (($237) + 65024)|0;
      $239 = $238&65535;
      HEAP16[$rp$421>>1] = $239;
     }
     $240 = HEAP16[$rp$421>>1]|0;
     $241 = $240 << 16 >> 16;
     $242 = (($rp$421) + 4|0);
     $243 = HEAP16[$242>>1]|0;
     $244 = $243 << 16 >> 16;
     $245 = (($244) + ($241))|0;
     HEAP32[$pix>>2] = $245;
     $246 = HEAP16[$rp$421>>1]|0;
     $247 = $246 << 16 >> 16;
     $248 = (($rp$421) + 2|0);
     $249 = HEAP16[$248>>1]|0;
     $250 = $249 << 16 >> 16;
     $251 = (($250) + ($247))|0;
     HEAP32[$124>>2] = $251;
     $252 = HEAP16[$rp$421>>1]|0;
     $253 = $252 << 16 >> 16;
     $254 = HEAP16[$248>>1]|0;
     $255 = $254 << 16 >> 16;
     $256 = Math_imul($255, -778)|0;
     $257 = HEAP16[$242>>1]|0;
     $258 = $257 << 16 >> 16;
     $259 = $258 << 11;
     $260 = (($256) - ($259))|0;
     $261 = $260 >> 12;
     $262 = (($261) + ($253))|0;
     HEAP32[$125>>2] = $262;
    }
    }
    $263 = HEAP32[$pix>>2]|0;
    $264 = HEAP16[133200>>1]|0;
    $265 = $264&65535;
    $266 = Math_imul($265, $263)|0;
    $267 = $266 >> 10;
    $268 = ($267|0)<(65535);
    $$ = $268 ? $267 : 65535;
    $269 = ($$|0)<(0);
    $270 = $$&65535;
    $271 = $269 ? 0 : $270;
    HEAP16[$rp$421>>1] = $271;
    $272 = (($pix) + 4|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = HEAP16[((133200 + 2|0))>>1]|0;
    $275 = $274&65535;
    $276 = Math_imul($275, $273)|0;
    $277 = $276 >> 10;
    $278 = ($277|0)<(65535);
    $$$1 = $278 ? $277 : 65535;
    $279 = ($$$1|0)<(0);
    $280 = $$$1&65535;
    $281 = $279 ? 0 : $280;
    $282 = (($rp$421) + 2|0);
    HEAP16[$282>>1] = $281;
    $283 = (($pix) + 8|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = HEAP16[((133200 + 4|0))>>1]|0;
    $286 = $285&65535;
    $287 = Math_imul($286, $284)|0;
    $288 = $287 >> 10;
    $289 = ($288|0)<(65535);
    $$$2 = $289 ? $288 : 65535;
    $290 = ($$$2|0)<(0);
    $291 = $$$2&65535;
    $292 = $290 ? 0 : $291;
    $293 = (($rp$421) + 4|0);
    HEAP16[$293>>1] = $292;
    $294 = (($rp$421) + 8|0);
    $295 = ($294>>>0)<($ip$0$lcssa>>>0);
    if ($295) {
     $rp$421 = $294;
    } else {
     break L75;
    }
   }
  }
 } while(0);
 _ljpeg_end($jh);
 HEAP32[132368>>2] = 16383;
 STACKTOP = sp;return;
}
function _adobe_copy_pixel($row,$col,$rp) {
 $row = $row|0;
 $col = $col|0;
 $rp = $rp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$04 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[133208>>2]|0;
 $1 = ($0|0)==(2);
 $2 = HEAP32[8>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 & $3;
 if ($or$cond) {
  $4 = HEAP32[$rp>>2]|0;
  $5 = (($4) + 2|0);
  HEAP32[$rp>>2] = $5;
 }
 $6 = HEAP32[132328>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $25 = HEAP16[132080>>1]|0;
  $26 = $25&65535;
  $27 = ($26>>>0)>($row>>>0);
  if ($27) {
   $28 = HEAP16[132088>>1]|0;
   $29 = $28&65535;
   $30 = ($29>>>0)<=($col>>>0);
   $31 = HEAP32[133216>>2]|0;
   $32 = ($31|0)==(0);
   $or$cond6 = $30 | $32;
   if (!($or$cond6)) {
    $33 = HEAP32[$rp>>2]|0;
    $34 = HEAP32[132112>>2]|0;
    $35 = HEAP32[133216>>2]|0;
    $c$04 = 0;
    while(1) {
     $36 = (($33) + ($c$04<<1)|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = (936 + ($38<<1)|0);
     $40 = HEAP16[$39>>1]|0;
     $41 = HEAP16[132088>>1]|0;
     $42 = $41&65535;
     $43 = Math_imul($42, $row)|0;
     $44 = (($43) + ($col))|0;
     $45 = ((($34) + ($44<<3)|0) + ($c$04<<1)|0);
     HEAP16[$45>>1] = $40;
     $46 = (($c$04) + 1)|0;
     $47 = ($46>>>0)<($35>>>0);
     if ($47) {
      $c$04 = $46;
     } else {
      break;
     }
    }
   }
  }
  $48 = HEAP32[133216>>2]|0;
  $49 = HEAP32[$rp>>2]|0;
  $50 = (($49) + ($48<<1)|0);
  $storemerge = $50;
 } else {
  $8 = HEAP16[133064>>1]|0;
  $9 = $8&65535;
  $10 = ($9>>>0)>($row>>>0);
  if ($10) {
   $11 = HEAP16[132336>>1]|0;
   $12 = $11&65535;
   $13 = ($12>>>0)>($col>>>0);
   if ($13) {
    $14 = HEAP32[$rp>>2]|0;
    $15 = HEAP16[$14>>1]|0;
    $16 = $15&65535;
    $17 = (936 + ($16<<1)|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = Math_imul($12, $row)|0;
    $20 = (($19) + ($col))|0;
    $21 = (($6) + ($20<<1)|0);
    HEAP16[$21>>1] = $18;
   }
  }
  $22 = HEAP32[133208>>2]|0;
  $23 = HEAP32[$rp>>2]|0;
  $24 = (($23) + ($22<<1)|0);
  $storemerge = $24;
 }
 HEAP32[$rp>>2] = $storemerge;
 $51 = HEAP32[133208>>2]|0;
 $52 = ($51|0)==(2);
 $53 = HEAP32[8>>2]|0;
 $54 = ($53|0)!=(0);
 $or$cond3 = $52 & $54;
 if (!($or$cond3)) {
  return;
 }
 $55 = (($storemerge) + -2|0);
 HEAP32[$rp>>2] = $55;
 return;
}
function _lossless_dng_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$07 = 0, $col$1$lcssa = 0, $col$13 = 0, $col$2 = 0, $jcol$01 = 0, $jh = 0, $jrow$05 = 0, $jwide$0 = 0, $row$06 = 0, $row$1$lcssa = 0;
 var $row$12 = 0, $row$2 = 0, $rp = 0, $tcol$012 = 0, $tcol$1 = 0, $trow$011 = 0, $trow$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $jh = sp + 8|0;
 $rp = sp;
 $0 = HEAP16[133064>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($jh) + 8|0);
 $3 = (($jh) + 4|0);
 $4 = (($jh) + 12|0);
 $tcol$012 = 0;$trow$011 = 0;
 while(1) {
  $5 = HEAP32[864>>2]|0;
  $6 = (_ftell(($5|0))|0);
  $7 = HEAP32[133224>>2]|0;
  $8 = ($7>>>0)<(2147483647);
  if ($8) {
   $9 = HEAP32[864>>2]|0;
   $10 = (_get4()|0);
   (_fseek(($9|0),($10|0),0)|0);
  }
  $11 = (_ljpeg_start($jh,0)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 19;
   break;
  }
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[584>>2]|0;
  $15 = ($14|0)==(0);
  if ($15) {
   $jwide$0 = $13;
  } else {
   $16 = HEAP32[$4>>2]|0;
   $17 = Math_imul($16, $13)|0;
   $jwide$0 = $17;
  }
  $18 = HEAP32[133208>>2]|0;
  $19 = (($jwide$0>>>0) / ($18>>>0))&-1;
  $20 = HEAP32[$3>>2]|0;
  $21 = ($20|0)==(0);
  if (!($21)) {
   $22 = ($19|0)==(0);
   $col$07 = 0;$jrow$05 = 0;$row$06 = 0;
   while(1) {
    $23 = (_ljpeg_row($jrow$05,$jh)|0);
    HEAP32[$rp>>2] = $23;
    if ($22) {
     $col$1$lcssa = $col$07;$row$1$lcssa = $row$06;
    } else {
     $col$13 = $col$07;$jcol$01 = 0;$row$12 = $row$06;
     while(1) {
      $24 = (($row$12) + ($trow$011))|0;
      $25 = (($col$13) + ($tcol$012))|0;
      _adobe_copy_pixel($24,$25,$rp);
      $26 = (($col$13) + 1)|0;
      $27 = HEAP32[133232>>2]|0;
      $28 = ($26>>>0)<($27>>>0);
      if ($28) {
       $29 = HEAP16[132336>>1]|0;
       $30 = $29&65535;
       $31 = ($26>>>0)<($30>>>0);
       if ($31) {
        $col$2 = $26;$row$2 = $row$12;
       } else {
        label = 13;
       }
      } else {
       label = 13;
      }
      if ((label|0) == 13) {
       label = 0;
       $32 = (($row$12) + 1)|0;
       $col$2 = 0;$row$2 = $32;
      }
      $33 = (($jcol$01) + 1)|0;
      $34 = ($33>>>0)<($19>>>0);
      if ($34) {
       $col$13 = $col$2;$jcol$01 = $33;$row$12 = $row$2;
      } else {
       $col$1$lcssa = $col$2;$row$1$lcssa = $row$2;
       break;
      }
     }
    }
    $35 = (($jrow$05) + 1)|0;
    $36 = HEAP32[$3>>2]|0;
    $37 = ($35>>>0)<($36>>>0);
    if ($37) {
     $col$07 = $col$1$lcssa;$jrow$05 = $35;$row$06 = $row$1$lcssa;
    } else {
     break;
    }
   }
  }
  $38 = HEAP32[864>>2]|0;
  $39 = (($6) + 4)|0;
  (_fseek(($38|0),($39|0),0)|0);
  $40 = HEAP32[133232>>2]|0;
  $41 = (($40) + ($tcol$012))|0;
  $42 = HEAP16[132336>>1]|0;
  $43 = $42&65535;
  $44 = ($41>>>0)<($43>>>0);
  if ($44) {
   $tcol$1 = $41;$trow$1 = $trow$011;
  } else {
   $45 = HEAP32[133224>>2]|0;
   $46 = (($45) + ($trow$011))|0;
   $tcol$1 = 0;$trow$1 = $46;
  }
  _ljpeg_end($jh);
  $47 = HEAP16[133064>>1]|0;
  $48 = $47&65535;
  $49 = ($trow$1>>>0)<($48>>>0);
  if ($49) {
   $tcol$012 = $tcol$1;$trow$011 = $trow$1;
  } else {
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function _packed_dng_load_raw() {
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$01 = 0;
 var $col$12 = 0, $row$04 = 0, $rp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rp = sp;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = HEAP32[133216>>2]|0;
 $3 = $2 << 1;
 $4 = (_calloc($1,$3)|0);
 _merror($4,133240);
 $5 = HEAP16[133064>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  _free($4);
  STACKTOP = sp;return;
 }
 $row$04 = 0;
 while(1) {
  $7 = HEAP32[133264>>2]|0;
  $8 = ($7|0)==(16);
  if ($8) {
   $9 = HEAP16[132336>>1]|0;
   $10 = $9&65535;
   $11 = HEAP32[133216>>2]|0;
   $12 = Math_imul($10, $11)|0;
   _read_shorts($4,$12);
   $$pr = HEAP16[132336>>1]|0;
   $28 = $$pr;
  } else {
   (_getbithuff(-1,0)|0);
   $13 = HEAP16[132336>>1]|0;
   $14 = $13&65535;
   $15 = HEAP32[133216>>2]|0;
   $16 = Math_imul($14, $15)|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $28 = $13;
   } else {
    $col$01 = 0;
    while(1) {
     $18 = HEAP32[133264>>2]|0;
     $19 = (_getbithuff($18,0)|0);
     $20 = $19&65535;
     $21 = (($4) + ($col$01<<1)|0);
     HEAP16[$21>>1] = $20;
     $22 = (($col$01) + 1)|0;
     $23 = HEAP16[132336>>1]|0;
     $24 = $23&65535;
     $25 = HEAP32[133216>>2]|0;
     $26 = Math_imul($24, $25)|0;
     $27 = ($22>>>0)<($26>>>0);
     if ($27) {
      $col$01 = $22;
     } else {
      $28 = $23;
      break;
     }
    }
   }
  }
  HEAP32[$rp>>2] = $4;
  $29 = ($28<<16>>16)==(0);
  if (!($29)) {
   $col$12 = 0;
   while(1) {
    _adobe_copy_pixel($row$04,$col$12,$rp);
    $30 = (($col$12) + 1)|0;
    $31 = HEAP16[132336>>1]|0;
    $32 = $31&65535;
    $33 = ($30|0)<($32|0);
    if ($33) {
     $col$12 = $30;
    } else {
     break;
    }
   }
  }
  $34 = (($row$04) + 1)|0;
  $35 = HEAP16[133064>>1]|0;
  $36 = $35&65535;
  $37 = ($34|0)<($36|0);
  if ($37) {
   $row$04 = $34;
  } else {
   break;
  }
 }
 _free($4);
 STACKTOP = sp;return;
}
function _pentax_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $c$017 = 0, $c$115 = 0, $c$211 = 0, $col$03 = 0, $exitcond = 0, $exitcond20 = 0, $exitcond21 = 0, $hpred = 0, $huff = 0, $i$07 = 0, $row$04 = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8272|0;
 $bit = sp + 8208|0;
 $huff = sp + 12|0;
 $vpred = sp;
 $hpred = sp + 8|0;
 $0 = $vpred;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = HEAP32[864>>2]|0;
 $5 = HEAP32[133272>>2]|0;
 (_fseek(($4|0),($5|0),0)|0);
 $6 = (_get2()|0);
 $7 = $6&65535;
 $8 = (($7) + 12)|0;
 $9 = $8 & 15;
 $10 = HEAP32[864>>2]|0;
 (_fseek(($10|0),12,1)|0);
 $11 = ($9|0)==(0);
 if (!($11)) {
  $12 = $6&65535;
  $13 = (($12) + 12)|0;
  $14 = $13 & 15;
  $15 = (($14) + -1)|0;
  $c$017 = 0;
  while(1) {
   $21 = (_get2()|0);
   $22 = (($bit) + ($c$017<<1)|0);
   HEAP16[$22>>1] = $21;
   $23 = (($c$017) + 1)|0;
   $exitcond21 = ($c$017|0)==($15|0);
   if ($exitcond21) {
    break;
   } else {
    $c$017 = $23;
   }
  }
  $16 = ($9|0)==(0);
  if (!($16)) {
   $17 = $6&65535;
   $18 = (($17) + 12)|0;
   $19 = $18 & 15;
   $20 = (($19) + -1)|0;
   $c$115 = 0;
   while(1) {
    $29 = HEAP32[864>>2]|0;
    $30 = (_getc_unlocked(($29|0))|0);
    $31 = $30&65535;
    $32 = ((($bit) + ($c$115<<1)|0) + 30|0);
    HEAP16[$32>>1] = $31;
    $33 = (($c$115) + 1)|0;
    $exitcond20 = ($c$115|0)==($20|0);
    if ($exitcond20) {
     break;
    } else {
     $c$115 = $33;
    }
   }
   $24 = ($9|0)==(0);
   if (!($24)) {
    $25 = $6&65535;
    $26 = (($25) + 12)|0;
    $27 = $26 & 15;
    $28 = (($27) + -1)|0;
    $c$211 = 0;
    while(1) {
     $34 = (($bit) + ($c$211<<1)|0);
     $35 = HEAP16[$34>>1]|0;
     $36 = $35&65535;
     $37 = $35&65535;
     $38 = ((($bit) + ($c$211<<1)|0) + 30|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39&65535;
     $41 = 4096 >>> $40;
     $42 = (($37) + 4095)|0;
     $43 = (($42) + ($41))|0;
     $44 = $43 & 4095;
     $45 = ($36>>>0)>($44>>>0);
     if (!($45)) {
      $46 = HEAP16[$34>>1]|0;
      $47 = $46&65535;
      $48 = HEAP16[$38>>1]|0;
      $49 = $48&65535;
      $50 = 4096 >>> $49;
      $51 = (($47) + 4095)|0;
      $52 = (($51) + ($50))|0;
      $53 = $52 & 4095;
      $55 = $40;$i$07 = $36;
      while(1) {
       $54 = $55 << 8;
       $56 = $54 | $c$211;
       $57 = $56&65535;
       $58 = (($i$07) + 1)|0;
       $59 = (($huff) + ($58<<1)|0);
       HEAP16[$59>>1] = $57;
       $60 = ($i$07|0)<($53|0);
       if ($60) {
        $55 = $49;$i$07 = $58;
       } else {
        break;
       }
      }
     }
     $61 = (($c$211) + 1)|0;
     $exitcond = ($c$211|0)==($28|0);
     if ($exitcond) {
      break;
     } else {
      $c$211 = $61;
     }
    }
   }
  }
 }
 HEAP16[$huff>>1] = 12;
 $62 = HEAP32[864>>2]|0;
 $63 = HEAP32[133280>>2]|0;
 (_fseek(($62|0),($63|0),0)|0);
 (_getbithuff(-1,0)|0);
 $64 = HEAP16[133064>>1]|0;
 $65 = ($64<<16>>16)==(0);
 if ($65) {
  STACKTOP = sp;return;
 } else {
  $row$04 = 0;
 }
 while(1) {
  $66 = HEAP16[132336>>1]|0;
  $67 = ($66<<16>>16)==(0);
  if (!($67)) {
   $68 = $row$04 & 1;
   $col$03 = 0;
   while(1) {
    $69 = (_ljpeg_diff($huff)|0);
    $70 = ($col$03|0)<(2);
    if ($70) {
     $71 = ((($vpred) + ($68<<2)|0) + ($col$03<<1)|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72&65535;
     $74 = (($73) + ($69))|0;
     $75 = $74&65535;
     HEAP16[$71>>1] = $75;
     $76 = (($hpred) + ($col$03<<1)|0);
     HEAP16[$76>>1] = $75;
    } else {
     $77 = $col$03 & 1;
     $78 = (($hpred) + ($77<<1)|0);
     $79 = HEAP16[$78>>1]|0;
     $80 = $79&65535;
     $81 = (($80) + ($69))|0;
     $82 = $81&65535;
     HEAP16[$78>>1] = $82;
    }
    $83 = $col$03 & 1;
    $84 = (($hpred) + ($83<<1)|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = HEAP16[132336>>1]|0;
    $87 = $86&65535;
    $88 = Math_imul($87, $row$04)|0;
    $89 = (($88) + ($col$03))|0;
    $90 = HEAP32[132328>>2]|0;
    $91 = (($90) + ($89<<1)|0);
    HEAP16[$91>>1] = $85;
    $92 = HEAP16[$84>>1]|0;
    $93 = $92&65535;
    $94 = HEAP32[133264>>2]|0;
    $95 = $93 >>> $94;
    $96 = ($95|0)==(0);
    if (!($96)) {
     _derror();
    }
    $97 = (($col$03) + 1)|0;
    $98 = HEAP16[132336>>1]|0;
    $99 = $98&65535;
    $100 = ($97|0)<($99|0);
    if ($100) {
     $col$03 = $97;
    } else {
     break;
    }
   }
  }
  $101 = (($row$04) + 1)|0;
  $102 = HEAP16[133064>>1]|0;
  $103 = $102&65535;
  $104 = ($101|0)<($103|0);
  if ($104) {
   $row$04 = $101;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _nikon_load_raw() {
 var $$ = 0, $$$7 = 0, $$7 = 0, $$neg = 0, $$old = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$011 = 0, $diff$0 = 0, $exitcond = 0, $hpred = 0, $huff$0$lcssa = 0, $huff$016 = 0, $huff$1 = 0, $i$023 = 0, $i$120 = 0, $max$0 = 0, $max$0$lcssa = 0, $max$0$ph = 0, $max$113 = 0, $max$2 = 0, $min$012 = 0, $min$1 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $row$014 = 0, $split$0$ph = 0, $step$0 = 0, $tree$1 = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vpred = sp + 8|0;
 $hpred = sp;
 $0 = HEAP32[864>>2]|0;
 $1 = HEAP32[133272>>2]|0;
 (_fseek(($0|0),($1|0),0)|0);
 $2 = HEAP32[864>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = HEAP32[864>>2]|0;
 $5 = (_getc_unlocked(($4|0))|0);
 $6 = $3 & 65535;
 $7 = ($6|0)==(73);
 $8 = $5 & 65535;
 $9 = ($8|0)==(88);
 $or$cond3 = $7 | $9;
 if ($or$cond3) {
  $10 = HEAP32[864>>2]|0;
  (_fseek(($10|0),2110,1)|0);
 }
 $11 = ($6|0)==(70);
 $$ = $11 ? 2 : 0;
 $12 = HEAP32[133264>>2]|0;
 $13 = ($12|0)==(14);
 $14 = (($$) + 3)|0;
 $tree$1 = $13 ? $14 : $$;
 _read_shorts($vpred,4);
 $15 = HEAP32[133264>>2]|0;
 $16 = 1 << $15;
 $17 = $16 & 32767;
 $18 = (_get2()|0);
 $19 = $18&65535;
 $20 = ($18&65535)>(1);
 if ($20) {
  $21 = (($19) + -1)|0;
  $22 = (($17|0) / ($21|0))&-1;
  $step$0 = $22;
 } else {
  $step$0 = 0;
 }
 do {
  if ((($6|0) == 70)) {
   $max$0$ph = $17;$split$0$ph = 0;
  } else if ((($6|0) == 68)) {
   $23 = ($8|0)==(32);
   $24 = ($step$0|0)>(0);
   $or$cond = $23 & $24;
   if (!($or$cond)) {
    $56 = ($18&65535)<(16386);
    if ($56) {
     label = 15;
     break;
    } else {
     $max$0$ph = $17;$split$0$ph = 0;
     break;
    }
   }
   $25 = ($18<<16>>16)==(0);
   if (!($25)) {
    $26 = $18&65535;
    $27 = (($26) + -1)|0;
    $i$023 = 0;
    while(1) {
     $29 = (_get2()|0);
     $30 = Math_imul($i$023, $step$0)|0;
     $31 = (936 + ($30<<1)|0);
     HEAP16[$31>>1] = $29;
     $32 = (($i$023) + 1)|0;
     $exitcond = ($i$023|0)==($27|0);
     if ($exitcond) {
      break;
     } else {
      $i$023 = $32;
     }
    }
   }
   $28 = ($15>>>0)<(15);
   if ($28) {
    $i$120 = 0;
    while(1) {
     $33 = (($i$120|0) % ($step$0|0))&-1;
     $34 = (($i$120) - ($33))|0;
     $35 = (936 + ($34<<1)|0);
     $36 = HEAP16[$35>>1]|0;
     $37 = $36&65535;
     $38 = (($step$0) - ($33))|0;
     $39 = Math_imul($37, $38)|0;
     $40 = (($34) + ($step$0))|0;
     $41 = (936 + ($40<<1)|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = $42&65535;
     $44 = Math_imul($43, $33)|0;
     $45 = (($44) + ($39))|0;
     $46 = (($45|0) / ($step$0|0))&-1;
     $47 = $46&65535;
     $48 = (936 + ($i$120<<1)|0);
     HEAP16[$48>>1] = $47;
     $49 = (($i$120) + 1)|0;
     $50 = ($49|0)<($17|0);
     if ($50) {
      $i$120 = $49;
     } else {
      break;
     }
    }
   }
   $51 = HEAP32[864>>2]|0;
   $52 = HEAP32[133272>>2]|0;
   $53 = (($52) + 562)|0;
   (_fseek(($51|0),($53|0),0)|0);
   $54 = (_get2()|0);
   $55 = $54&65535;
   $max$0$ph = $17;$split$0$ph = $55;
  } else {
   $$old = ($18&65535)<(16386);
   if ($$old) {
    label = 15;
   } else {
    $max$0$ph = $17;$split$0$ph = 0;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  _read_shorts(936,$19);
  $max$0$ph = $19;$split$0$ph = 0;
 }
 $max$0 = $max$0$ph;
 while(1) {
  $57 = (($max$0) + -2)|0;
  $58 = (936 + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = (($max$0) + -1)|0;
  $61 = (936 + ($60<<1)|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = ($59<<16>>16)==($62<<16>>16);
  if ($63) {
   $max$0 = $60;
  } else {
   $max$0$lcssa = $max$0;
   break;
  }
 }
 $64 = (133288 + ($tree$1<<5)|0);
 $65 = (_make_decoder($64)|0);
 $66 = HEAP32[864>>2]|0;
 $67 = HEAP32[133280>>2]|0;
 (_fseek(($66|0),($67|0),0)|0);
 (_getbithuff(-1,0)|0);
 $68 = HEAP16[132080>>1]|0;
 $69 = ($68<<16>>16)==(0);
 if ($69) {
  $huff$0$lcssa = $65;
  _free($huff$0$lcssa);
  STACKTOP = sp;return;
 }
 $70 = ($split$0$ph|0)!=(0);
 $71 = (($tree$1) + 1)|0;
 $72 = (133288 + ($71<<5)|0);
 $huff$016 = $65;$max$113 = $max$0$lcssa;$min$012 = 0;$row$014 = 0;
 while(1) {
  $73 = ($row$014|0)==($split$0$ph|0);
  $or$cond6 = $70 & $73;
  if ($or$cond6) {
   _free($huff$016);
   $74 = (_make_decoder($72)|0);
   $75 = (($max$113) + 32)|0;
   $huff$1 = $74;$max$2 = $75;$min$1 = 16;
  } else {
   $huff$1 = $huff$016;$max$2 = $max$113;$min$1 = $min$012;
  }
  $76 = HEAP16[132336>>1]|0;
  $77 = ($76<<16>>16)==(0);
  if (!($77)) {
   $78 = (($huff$1) + 2|0);
   $79 = $row$014 & 1;
   $col$011 = 0;
   while(1) {
    $80 = HEAP16[$huff$1>>1]|0;
    $81 = $80&65535;
    $82 = (_getbithuff($81,$78)|0);
    $83 = $82 & 15;
    $84 = $82 >> 4;
    $85 = (($83) - ($84))|0;
    $86 = (_getbithuff($85,0)|0);
    $87 = $86 << 1;
    $88 = $87 | 1;
    $89 = $88 << $84;
    $90 = $89 >>> 1;
    $91 = (($83) + -1)|0;
    $92 = 1 << $91;
    $93 = $90 & $92;
    $94 = ($93|0)==(0);
    if ($94) {
     $95 = ($84|0)==(0);
     $96 = $95&1;
     $$neg = -1 << $83;
     $97 = (($96) + ($$neg))|0;
     $98 = (($97) + ($90))|0;
     $diff$0 = $98;
    } else {
     $diff$0 = $90;
    }
    $99 = ($col$011|0)<(2);
    if ($99) {
     $100 = ((($vpred) + ($79<<2)|0) + ($col$011<<1)|0);
     $101 = HEAP16[$100>>1]|0;
     $102 = $101&65535;
     $103 = (($102) + ($diff$0))|0;
     $104 = $103&65535;
     HEAP16[$100>>1] = $104;
     $105 = (($hpred) + ($col$011<<1)|0);
     HEAP16[$105>>1] = $104;
    } else {
     $106 = $col$011 & 1;
     $107 = (($hpred) + ($106<<1)|0);
     $108 = HEAP16[$107>>1]|0;
     $109 = $108&65535;
     $110 = (($109) + ($diff$0))|0;
     $111 = $110&65535;
     HEAP16[$107>>1] = $111;
    }
    $112 = $col$011 & 1;
    $113 = (($hpred) + ($112<<1)|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = $114&65535;
    $116 = (($115) + ($min$1))|0;
    $117 = $116 & 65535;
    $118 = ($117|0)<($max$2|0);
    if (!($118)) {
     _derror();
    }
    $119 = HEAP16[$113>>1]|0;
    $120 = ($119<<16>>16)<(16383);
    $121 = $119 << 16 >> 16;
    $$7 = $120 ? $121 : 16383;
    $122 = ($$7|0)<(0);
    $$$7 = $122 ? 0 : $$7;
    $123 = (936 + ($$$7<<1)|0);
    $124 = HEAP16[$123>>1]|0;
    $125 = HEAP16[132336>>1]|0;
    $126 = $125&65535;
    $127 = Math_imul($126, $row$014)|0;
    $128 = (($127) + ($col$011))|0;
    $129 = HEAP32[132328>>2]|0;
    $130 = (($129) + ($128<<1)|0);
    HEAP16[$130>>1] = $124;
    $131 = (($col$011) + 1)|0;
    $132 = HEAP16[132336>>1]|0;
    $133 = $132&65535;
    $134 = ($131|0)<($133|0);
    if ($134) {
     $col$011 = $131;
    } else {
     break;
    }
   }
  }
  $135 = (($row$014) + 1)|0;
  $136 = HEAP16[132080>>1]|0;
  $137 = $136&65535;
  $138 = ($135|0)<($137|0);
  if ($138) {
   $huff$016 = $huff$1;$max$113 = $max$2;$min$012 = $min$1;$row$014 = $135;
  } else {
   $huff$0$lcssa = $huff$1;
   break;
  }
 }
 _free($huff$0$lcssa);
 STACKTOP = sp;return;
}
function _nikon_yuv_load_raw() {
 var $$ = 0, $$$ = 0, $$$$1 = 0, $$$$2 = 0, $$$1 = 0, $$$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $col$08 = 0, $rgb = 0, $row$09 = 0, $yuv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $yuv = sp + 16|0;
 $rgb = sp;
 $0 = HEAP16[133064>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($yuv) + 12|0);
 $3 = (($yuv) + 8|0);
 $4 = (($rgb) + 4|0);
 $5 = (($rgb) + 8|0);
 $row$09 = 0;
 while(1) {
  $6 = HEAP16[132336>>1]|0;
  $7 = ($6<<16>>16)==(0);
  if (!($7)) {
   $col$08 = 0;
   while(1) {
    $8 = $col$08 & 1;
    $9 = ($8|0)==(0);
    if ($9) {
     $10 = HEAP32[864>>2]|0;
     $11 = (_getc_unlocked(($10|0))|0);
     $12 = ($11|0)<(0);
     $13 = $12 << 31 >> 31;
     $14 = HEAP32[864>>2]|0;
     $15 = (_getc_unlocked(($14|0))|0);
     $16 = ($15|0)<(0);
     $17 = $16 << 31 >> 31;
     $18 = (_bitshift64Shl(($15|0),($17|0),8)|0);
     $19 = tempRet0;
     $20 = $18 | $11;
     $21 = $19 | $13;
     $22 = HEAP32[864>>2]|0;
     $23 = (_getc_unlocked(($22|0))|0);
     $24 = ($23|0)<(0);
     $25 = $24 << 31 >> 31;
     $26 = (_bitshift64Shl(($23|0),($25|0),16)|0);
     $27 = tempRet0;
     $28 = $26 | $20;
     $29 = $27 | $21;
     $30 = HEAP32[864>>2]|0;
     $31 = (_getc_unlocked(($30|0))|0);
     $32 = ($31|0)<(0);
     $33 = $32 << 31 >> 31;
     $34 = (_bitshift64Shl(($31|0),($33|0),24)|0);
     $35 = tempRet0;
     $36 = $34 | $28;
     $37 = $35 | $29;
     $38 = HEAP32[864>>2]|0;
     $39 = (_getc_unlocked(($38|0))|0);
     $40 = $39 | $37;
     $41 = HEAP32[864>>2]|0;
     $42 = (_getc_unlocked(($41|0))|0);
     $43 = (_bitshift64Shl(($42|0),0,40)|0);
     $44 = tempRet0;
     $45 = $43 | $36;
     $46 = $44 | $40;
     $47 = $20 & 4095;
     HEAP32[$yuv>>2] = $47;
     $48 = (_bitshift64Lshr(($28|0),($29|0),12)|0);
     $49 = tempRet0;
     $50 = $48 & 4095;
     $51 = (($yuv) + 4|0);
     HEAP32[$51>>2] = $50;
     $52 = (_bitshift64Lshr(($36|0),($40|0),24)|0);
     $53 = tempRet0;
     $54 = $52 & 4095;
     $55 = (_i64Add(($54|0),0,-2048,0)|0);
     $56 = tempRet0;
     $57 = (($yuv) + 8|0);
     HEAP32[$57>>2] = $55;
     $58 = (_bitshift64Lshr(($45|0),($46|0),36)|0);
     $59 = tempRet0;
     $60 = $58 & 4095;
     $61 = (_i64Add(($60|0),0,-2048,0)|0);
     $62 = tempRet0;
     $63 = (($yuv) + 12|0);
     HEAP32[$63>>2] = $61;
    }
    $64 = (($yuv) + ($8<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (+($65|0));
    $67 = HEAP32[$2>>2]|0;
    $68 = (+($67|0));
    $69 = $68 * 1.3707050000000001;
    $70 = $66 + $69;
    $71 = (~~(($70)));
    HEAP32[$rgb>>2] = $71;
    $72 = HEAP32[$64>>2]|0;
    $73 = (+($72|0));
    $74 = HEAP32[$3>>2]|0;
    $75 = (+($74|0));
    $76 = $75 * 0.33763300000000002;
    $77 = $73 - $76;
    $78 = HEAP32[$2>>2]|0;
    $79 = (+($78|0));
    $80 = $79 * 0.69800099999999998;
    $81 = $77 - $80;
    $82 = (~~(($81)));
    HEAP32[$4>>2] = $82;
    $83 = HEAP32[$64>>2]|0;
    $84 = (+($83|0));
    $85 = HEAP32[$3>>2]|0;
    $86 = (+($85|0));
    $87 = $86 * 1.7324459999999999;
    $88 = $84 + $87;
    $89 = (~~(($88)));
    HEAP32[$5>>2] = $89;
    $90 = HEAP32[132112>>2]|0;
    $91 = HEAP32[$rgb>>2]|0;
    $92 = ($91|0)<(4095);
    $$ = $92 ? $91 : 4095;
    $93 = ($$|0)<(0);
    $$$ = $93 ? 0 : $$;
    $94 = (936 + ($$$<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = (+($96|0));
    $98 = +HEAPF32[133480>>2];
    $99 = $97 / $98;
    $100 = (~~(($99))&65535);
    $101 = HEAP16[132088>>1]|0;
    $102 = $101&65535;
    $103 = Math_imul($102, $row$09)|0;
    $104 = (($103) + ($col$08))|0;
    $105 = (($90) + ($104<<3)|0);
    HEAP16[$105>>1] = $100;
    $106 = (($rgb) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)<(4095);
    $$$1 = $108 ? $107 : 4095;
    $109 = ($$$1|0)<(0);
    $$$$1 = $109 ? 0 : $$$1;
    $110 = (936 + ($$$$1<<1)|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = $111&65535;
    $113 = (+($112|0));
    $114 = +HEAPF32[((133480 + 4|0))>>2];
    $115 = $113 / $114;
    $116 = (~~(($115))&65535);
    $117 = HEAP16[132088>>1]|0;
    $118 = $117&65535;
    $119 = Math_imul($118, $row$09)|0;
    $120 = (($119) + ($col$08))|0;
    $121 = ((($90) + ($120<<3)|0) + 2|0);
    HEAP16[$121>>1] = $116;
    $122 = (($rgb) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)<(4095);
    $$$2 = $124 ? $123 : 4095;
    $125 = ($$$2|0)<(0);
    $$$$2 = $125 ? 0 : $$$2;
    $126 = (936 + ($$$$2<<1)|0);
    $127 = HEAP16[$126>>1]|0;
    $128 = $127&65535;
    $129 = (+($128|0));
    $130 = +HEAPF32[((133480 + 8|0))>>2];
    $131 = $129 / $130;
    $132 = (~~(($131))&65535);
    $133 = HEAP16[132088>>1]|0;
    $134 = $133&65535;
    $135 = Math_imul($134, $row$09)|0;
    $136 = (($135) + ($col$08))|0;
    $137 = ((($90) + ($136<<3)|0) + 4|0);
    HEAP16[$137>>1] = $132;
    $138 = (($col$08) + 1)|0;
    $139 = HEAP16[132336>>1]|0;
    $140 = $139&65535;
    $141 = ($138|0)<($140|0);
    if ($141) {
     $col$08 = $138;
    } else {
     break;
    }
   }
  }
  $142 = (($row$09) + 1)|0;
  $143 = HEAP16[133064>>1]|0;
  $144 = $143&65535;
  $145 = ($142|0)<($144|0);
  if ($145) {
   $row$09 = $142;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _nikon_e995() {
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $histo = 0, $i$02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $histo = sp;
 _memset(($histo|0),0,1024)|0;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),-2000,2)|0);
 $i$02 = 0;
 while(1) {
  $1 = HEAP32[864>>2]|0;
  $2 = (_getc_unlocked(($1|0))|0);
  $3 = (($histo) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$3>>2] = $5;
  $6 = (($i$02) + 1)|0;
  $exitcond = ($6|0)==(2000);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $6;
  }
 }
 $10 = HEAP32[$histo>>2]|0;
 $11 = ($10|0)<(200);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($histo) + 340|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(200);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($histo) + 680|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(200);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($histo) + 1020|0);
 $16 = HEAP32[$15>>2]|0;
 $not$ = ($16|0)>(199);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _nikon_e2100() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $t = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),0,0)|0);
 $1 = (($t) + 2|0);
 $2 = (($t) + 4|0);
 $3 = (($t) + 7|0);
 $4 = (($t) + 9|0);
 $5 = (($t) + 1|0);
 $6 = (($t) + 6|0);
 $7 = (($t) + 8|0);
 $8 = (($t) + 11|0);
 $i$01 = 0;
 while(1) {
  $11 = HEAP32[864>>2]|0;
  (_fread(($t|0),1,12,($11|0))|0);
  $12 = HEAP8[$1>>0]|0;
  $13 = HEAP8[$2>>0]|0;
  $14 = $13 & $12;
  $15 = HEAP8[$3>>0]|0;
  $16 = $14 & $15;
  $17 = HEAP8[$4>>0]|0;
  $18 = $16 & $17;
  $19 = $18&255;
  $20 = $19 >>> 4;
  $21 = HEAP8[$5>>0]|0;
  $22 = $21&255;
  $23 = HEAP8[$6>>0]|0;
  $24 = $23&255;
  $25 = HEAP8[$7>>0]|0;
  $26 = $25&255;
  $27 = HEAP8[$8>>0]|0;
  $28 = $27&255;
  $29 = $22 & 3;
  $30 = $29 & $20;
  $31 = $30 & $24;
  $32 = $31 & $26;
  $33 = $32 & $28;
  $34 = ($33|0)==(3);
  $9 = (($i$01) + 1)|0;
  if (!($34)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $10 = ($9|0)<(1024);
  if ($10) {
   $i$01 = $9;
  } else {
   $$0 = 1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _nikon_3700() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $dp = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),3072,0)|0);
 $1 = HEAP32[864>>2]|0;
 (_fread(($dp|0),1,24,($1|0))|0);
 $2 = (($dp) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 4;
 $6 = $5 & 48;
 $7 = (($dp) + 20|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $6 | $10;
 if ((($11|0) == 0)) {
  (_strcpy((133624|0),(((133496 + 4|0))|0))|0);
  (_strcpy((133688|0),(((133496 + 16|0))|0))|0);
  STACKTOP = sp;return;
 } else if ((($11|0) == 50)) {
  (_strcpy((133624|0),(((133496 + 68|0))|0))|0);
  (_strcpy((133688|0),(((133496 + 80|0))|0))|0);
  STACKTOP = sp;return;
 } else if ((($11|0) == 51)) {
  (_strcpy((133624|0),(((133496 + 100|0))|0))|0);
  (_strcpy((133688|0),(((133496 + 112|0))|0))|0);
  STACKTOP = sp;return;
 } else if ((($11|0) == 3)) {
  (_strcpy((133624|0),(((133496 + 36|0))|0))|0);
  (_strcpy((133688|0),(((133496 + 48|0))|0))|0);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _minolta_z2() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$02 = 0, $not$ = 0, $nz$0$ = 0, $nz$0$$lcssa = 0, $nz$01 = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $tail = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),-424,2)|0);
 $1 = HEAP32[864>>2]|0;
 (_fread(($tail|0),1,424,($1|0))|0);
 $i$02 = 0;$nz$01 = 0;
 while(1) {
  $2 = (($tail) + ($i$02)|0);
  $3 = HEAP8[$2>>0]|0;
  $not$ = ($3<<24>>24)!=(0);
  $4 = $not$&1;
  $nz$0$ = (($4) + ($nz$01))|0;
  $5 = (($i$02) + 1)|0;
  $exitcond = ($5|0)==(424);
  if ($exitcond) {
   $nz$0$$lcssa = $nz$0$;
   break;
  } else {
   $i$02 = $5;$nz$01 = $nz$0$;
  }
 }
 $6 = ($nz$0$$lcssa|0)>(20);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _ppm_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP16[133752>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[133760>>1]|0;
 $3 = $2&65535;
 $4 = ($1*3)|0;
 $5 = Math_imul($4, $3)|0;
 HEAP32[133768>>2] = $5;
 $6 = (_malloc($5)|0);
 _merror($6,133776);
 $7 = HEAP32[133792>>2]|0;
 $8 = HEAP16[133752>>1]|0;
 $9 = $8&65535;
 $10 = HEAP16[133760>>1]|0;
 $11 = $10&65535;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 (_fprintf(($7|0),(133800|0),($vararg_buffer|0))|0);
 $12 = HEAP32[133768>>2]|0;
 $13 = HEAP32[864>>2]|0;
 (_fread(($6|0),1,($12|0),($13|0))|0);
 $14 = HEAP32[133768>>2]|0;
 $15 = HEAP32[133792>>2]|0;
 (_fwrite(($6|0),1,($14|0),($15|0))|0);
 _free($6);
 STACKTOP = sp;return;
}
function _ppm16_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP16[133752>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[133760>>1]|0;
 $3 = $2&65535;
 $4 = ($1*3)|0;
 $5 = Math_imul($4, $3)|0;
 HEAP32[133768>>2] = $5;
 $6 = (_calloc($5,2)|0);
 _merror($6,133816);
 $7 = HEAP32[133768>>2]|0;
 _read_shorts($6,$7);
 $8 = HEAP32[133768>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = HEAP32[133768>>2]|0;
  $i$01 = 0;
  while(1) {
   $11 = (($6) + ($i$01<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12&65535) >>> 8;
   $14 = $13&255;
   $15 = (($6) + ($i$01)|0);
   HEAP8[$15>>0] = $14;
   $16 = (($i$01) + 1)|0;
   $17 = ($16>>>0)<($10>>>0);
   if ($17) {
    $i$01 = $16;
   } else {
    break;
   }
  }
 }
 $18 = HEAP32[133792>>2]|0;
 $19 = HEAP16[133752>>1]|0;
 $20 = $19&65535;
 $21 = HEAP16[133760>>1]|0;
 $22 = $21&65535;
 HEAP32[$vararg_buffer>>2] = $20;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 (_fprintf(($18|0),(133800|0),($vararg_buffer|0))|0);
 $23 = HEAP32[133768>>2]|0;
 $24 = HEAP32[133792>>2]|0;
 (_fwrite(($6|0),1,($23|0),($24|0))|0);
 _free($6);
 STACKTOP = sp;return;
}
function _layer_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[133840>>2]|0;
 $1 = $0 >>> 5;
 $2 = $1 & 7;
 HEAP32[132272>>2] = $2;
 $3 = HEAP16[133752>>1]|0;
 $4 = $3&65535;
 $5 = HEAP16[133760>>1]|0;
 $6 = $5&65535;
 $7 = Math_imul($6, $4)|0;
 HEAP32[133768>>2] = $7;
 $8 = HEAP32[132272>>2]|0;
 $9 = (_calloc($8,$7)|0);
 _merror($9,133848);
 $10 = HEAP32[133792>>2]|0;
 $11 = HEAP32[132272>>2]|0;
 $12 = $11 >>> 1;
 $13 = (($12) + 5)|0;
 $14 = HEAP16[133752>>1]|0;
 $15 = $14&65535;
 $16 = HEAP16[133760>>1]|0;
 $17 = $16&65535;
 HEAP32[$vararg_buffer>>2] = $13;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $17;
 (_fprintf(($10|0),(133864|0),($vararg_buffer|0))|0);
 $18 = HEAP32[133768>>2]|0;
 $19 = HEAP32[132272>>2]|0;
 $20 = HEAP32[864>>2]|0;
 (_fread(($9|0),($18|0),($19|0),($20|0))|0);
 $21 = HEAP32[133768>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  _free($9);
  STACKTOP = sp;return;
 } else {
  $i$02 = 0;
 }
 while(1) {
  $23 = HEAP32[132272>>2]|0;
  $24 = ($23|0)==(0);
  if (!($24)) {
   $c$01 = 0;
   while(1) {
    $25 = HEAP32[133768>>2]|0;
    $26 = HEAP32[133840>>2]|0;
    $27 = $26 >>> 8;
    $28 = ((133832 + ($27<<2)|0) + ($c$01)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = (($30) + -48)|0;
    $32 = Math_imul($31, $25)|0;
    $33 = (($32) + ($i$02))|0;
    $34 = (($9) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35 << 24 >> 24;
    $37 = HEAP32[133792>>2]|0;
    (_putc(($36|0),($37|0))|0);
    $38 = (($c$01) + 1)|0;
    $39 = HEAP32[132272>>2]|0;
    $40 = ($38>>>0)<($39>>>0);
    if ($40) {
     $c$01 = $38;
    } else {
     break;
    }
   }
  }
  $41 = (($i$02) + 1)|0;
  $42 = HEAP32[133768>>2]|0;
  $43 = ($41>>>0)<($42>>>0);
  if ($43) {
   $i$02 = $41;
  } else {
   break;
  }
 }
 _free($9);
 STACKTOP = sp;return;
}
function _rollei_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP16[133752>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[133760>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($3, $1)|0;
 HEAP32[133768>>2] = $4;
 $5 = (_calloc($4,2)|0);
 _merror($5,133880);
 $6 = HEAP32[133792>>2]|0;
 $7 = HEAP16[133752>>1]|0;
 $8 = $7&65535;
 $9 = HEAP16[133760>>1]|0;
 $10 = $9&65535;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 (_fprintf(($6|0),(133800|0),($vararg_buffer|0))|0);
 $11 = HEAP32[133768>>2]|0;
 _read_shorts($5,$11);
 $12 = HEAP32[133768>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  _free($5);
  STACKTOP = sp;return;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $14 = (($5) + ($i$01<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = $16 << 3;
  $18 = HEAP32[133792>>2]|0;
  (_putc(($17|0),($18|0))|0);
  $19 = HEAP16[$14>>1]|0;
  $20 = $19&65535;
  $21 = $20 >>> 5;
  $22 = $21 << 2;
  $23 = HEAP32[133792>>2]|0;
  (_putc(($22|0),($23|0))|0);
  $24 = HEAP16[$14>>1]|0;
  $25 = $24&65535;
  $26 = $25 >>> 11;
  $27 = $26 << 3;
  $28 = HEAP32[133792>>2]|0;
  (_putc(($27|0),($28|0))|0);
  $29 = (($i$01) + 1)|0;
  $30 = HEAP32[133768>>2]|0;
  $31 = ($29>>>0)<($30>>>0);
  if ($31) {
   $i$01 = $29;
  } else {
   break;
  }
 }
 _free($5);
 STACKTOP = sp;return;
}
function _rollei_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $buffer$011 = 0, $isix$010 = 0, $iten$09 = 0, $pixel = 0, $todo = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $pixel = sp + 64|0;
 $todo = sp;
 $0 = HEAP16[132336>>1]|0;
 $1 = HEAP16[133064>>1]|0;
 $2 = HEAP32[864>>2]|0;
 $3 = (_fread(($pixel|0),1,10,($2|0))|0);
 $4 = ($3|0)==(10);
 if (!($4)) {
  HEAP32[132368>>2] = 1023;
  STACKTOP = sp;return;
 }
 $5 = $0&65535;
 $6 = ($5*5)|0;
 $7 = $1&65535;
 $8 = Math_imul($6, $7)|0;
 $9 = $8 >>> 3;
 $10 = (($todo) + 4|0);
 $buffer$011 = 0;$isix$010 = $9;$iten$09 = 0;
 while(1) {
  $11 = (($iten$09) + 1)|0;
  HEAP32[$todo>>2] = $iten$09;
  $12 = HEAP8[$pixel>>0]|0;
  $13 = $12&255;
  $14 = $13 << 8;
  $15 = (($pixel) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $14 | $17;
  $19 = (($todo) + 4|0);
  HEAP32[$19>>2] = $18;
  $20 = HEAP8[$pixel>>0]|0;
  $21 = $20&255;
  $22 = $21 >>> 2;
  $23 = $buffer$011 << 6;
  $24 = $22 | $23;
  $25 = (($iten$09) + 2)|0;
  $26 = (($todo) + 8|0);
  HEAP32[$26>>2] = $11;
  $27 = (($pixel) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 8;
  $31 = (($pixel) + 3|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $30 | $33;
  $35 = (($todo) + 12|0);
  HEAP32[$35>>2] = $34;
  $36 = HEAP8[$27>>0]|0;
  $37 = $36&255;
  $38 = $37 >>> 2;
  $39 = $24 << 6;
  $40 = $38 | $39;
  $41 = (($iten$09) + 3)|0;
  $42 = (($todo) + 16|0);
  HEAP32[$42>>2] = $25;
  $43 = (($pixel) + 4|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = (($pixel) + 5|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $46 | $49;
  $51 = (($todo) + 20|0);
  HEAP32[$51>>2] = $50;
  $52 = HEAP8[$43>>0]|0;
  $53 = $52&255;
  $54 = $53 >>> 2;
  $55 = $40 << 6;
  $56 = $54 | $55;
  $57 = (($iten$09) + 4)|0;
  $58 = (($todo) + 24|0);
  HEAP32[$58>>2] = $41;
  $59 = (($pixel) + 6|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 << 8;
  $63 = (($pixel) + 7|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $62 | $65;
  $67 = (($todo) + 28|0);
  HEAP32[$67>>2] = $66;
  $68 = HEAP8[$59>>0]|0;
  $69 = $68&255;
  $70 = $69 >>> 2;
  $71 = $56 << 6;
  $72 = $70 | $71;
  $73 = (($todo) + 32|0);
  HEAP32[$73>>2] = $57;
  $74 = (($pixel) + 8|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $76 << 8;
  $78 = (($pixel) + 9|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $77 | $80;
  $82 = (($todo) + 36|0);
  HEAP32[$82>>2] = $81;
  $83 = HEAP8[$74>>0]|0;
  $84 = $83&255;
  $85 = $84 >>> 2;
  $86 = $72 << 6;
  $87 = $85 | $86;
  $88 = (($iten$09) + 5)|0;
  $89 = (($isix$010) + 1)|0;
  $90 = (($todo) + 40|0);
  HEAP32[$90>>2] = $isix$010;
  $91 = $40 >>> 2;
  $92 = $91 & 4095;
  $93 = (($todo) + 44|0);
  HEAP32[$93>>2] = $92;
  $94 = (($isix$010) + 2)|0;
  $95 = (($todo) + 48|0);
  HEAP32[$95>>2] = $89;
  $96 = $72 >>> 4;
  $97 = $96 & 4194303;
  $98 = (($todo) + 52|0);
  HEAP32[$98>>2] = $97;
  $99 = (($todo) + 56|0);
  HEAP32[$99>>2] = $94;
  $100 = (($todo) + 60|0);
  HEAP32[$100>>2] = $87;
  $101 = (($isix$010) + 3)|0;
  $102 = HEAP32[132328>>2]|0;
  $103 = HEAP32[$10>>2]|0;
  $104 = $103 & 1023;
  $105 = $104&65535;
  $106 = HEAP32[$todo>>2]|0;
  $107 = (($102) + ($106<<1)|0);
  HEAP16[$107>>1] = $105;
  $108 = (($todo) + 12|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $109 & 1023;
  $111 = $110&65535;
  $112 = (($todo) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($102) + ($113<<1)|0);
  HEAP16[$114>>1] = $111;
  $115 = (($todo) + 20|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & 1023;
  $118 = $117&65535;
  $119 = (($todo) + 16|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($102) + ($120<<1)|0);
  HEAP16[$121>>1] = $118;
  $122 = (($todo) + 28|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = $123 & 1023;
  $125 = $124&65535;
  $126 = (($todo) + 24|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($102) + ($127<<1)|0);
  HEAP16[$128>>1] = $125;
  $129 = (($todo) + 36|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130 & 1023;
  $132 = $131&65535;
  $133 = (($todo) + 32|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($102) + ($134<<1)|0);
  HEAP16[$135>>1] = $132;
  $136 = (($todo) + 44|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 & 1023;
  $139 = $138&65535;
  $140 = (($todo) + 40|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($102) + ($141<<1)|0);
  HEAP16[$142>>1] = $139;
  $143 = (($todo) + 52|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $144 & 1023;
  $146 = $145&65535;
  $147 = (($todo) + 48|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($102) + ($148<<1)|0);
  HEAP16[$149>>1] = $146;
  $150 = (($todo) + 60|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $151 & 1023;
  $153 = $152&65535;
  $154 = (($todo) + 56|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($102) + ($155<<1)|0);
  HEAP16[$156>>1] = $153;
  $157 = HEAP32[864>>2]|0;
  $158 = (_fread(($pixel|0),1,10,($157|0))|0);
  $159 = ($158|0)==(10);
  if ($159) {
   $buffer$011 = $87;$isix$010 = $101;$iten$09 = $88;
  } else {
   break;
  }
 }
 HEAP32[132368>>2] = 1023;
 STACKTOP = sp;return;
}
function _raw($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[133064>>1]|0;
 $1 = $0&65535;
 $2 = ($1>>>0)>($row>>>0);
 if (!($2)) {
  $12 = 0;
  return ($12|0);
 }
 $3 = HEAP16[132336>>1]|0;
 $4 = $3&65535;
 $5 = ($4>>>0)>($col>>>0);
 if (!($5)) {
  $12 = 0;
  return ($12|0);
 }
 $6 = Math_imul($4, $row)|0;
 $7 = (($6) + ($col))|0;
 $8 = HEAP32[132328>>2]|0;
 $9 = (($8) + ($7<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11;
 return ($12|0);
}
function _phase_one_flat_field($is_float,$nc) {
 $is_float = $is_float|0;
 $nc = $nc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$013 = 0, $c$117 = 0, $c$220 = 0, $c$330 = 0, $col$024 = 0, $div = 0, $div4 = 0, $exitcond = 0, $exitcond44 = 0, $exitcond45 = 0, $exitcond46 = 0, $head = 0, $mult = 0, $or$cond = 0, $or$cond36 = 0, $or$cond5 = 0, $or$cond523 = 0, $row$037 = 0;
 var $x$014 = 0, $x$129 = 0, $x$233 = 0, $y$042 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $head = sp + 16|0;
 $mult = sp;
 _read_shorts($head,8);
 $0 = (($head) + 4|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($head) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = Math_imul($5, $2)|0;
 $7 = (($head) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = Math_imul($6, $9)|0;
 $11 = (($head) + 10|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = Math_imul($10, $13)|0;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $div = (($1&65535) / ($8&65535))&-1;
 $16 = $div&65535;
 $17 = (($1&65535) % ($8&65535))&-1;
 $18 = ($17<<16>>16)!=(0);
 $19 = $18&1;
 $20 = (($19) + ($16))|0;
 $div4 = (($4&65535) / ($12&65535))&-1;
 $21 = $div4&65535;
 $22 = (($4&65535) % ($12&65535))&-1;
 $23 = ($22<<16>>16)!=(0);
 $24 = $23&1;
 $25 = Math_imul($20, $nc)|0;
 $26 = (_calloc($25,4)|0);
 _merror($26,133896);
 $27 = (0 - ($21))|0;
 $28 = ($24|0)==($27|0);
 if (!($28)) {
  $29 = ($20|0)==(0);
  $30 = (($head) + 2|0);
  $31 = ($20>>>0)>(1);
  $32 = ($20|0)==(0);
  $33 = ($nc|0)==(0);
  $34 = ($nc|0)==(0);
  $35 = ($nc|0)>(2);
  $36 = ($nc|0)==(0);
  $37 = ($nc|0)==(0);
  $38 = ($is_float|0)==(0);
  $39 = $18&1;
  $40 = (($1&65535) / ($8&65535))&-1;
  $41 = $40&65535;
  $42 = (($39) + ($41))|0;
  $43 = $18&1;
  $44 = $40&65535;
  $45 = (($43) + ($44))|0;
  $46 = $18&1;
  $47 = (($1&65535) / ($8&65535))&-1;
  $48 = $47&65535;
  $49 = (($46) + ($48))|0;
  $50 = $23&1;
  $51 = (($4&65535) / ($12&65535))&-1;
  $52 = $51&65535;
  $53 = (($50) + ($52))|0;
  $y$042 = 0;
  while(1) {
   if (!($29)) {
    $54 = ($y$042|0)==(0);
    $x$014 = 0;
    while(1) {
     if (!($37)) {
      $c$013 = 0;
      while(1) {
       if ($38) {
        $56 = (_get2()|0);
        $57 = $56&65535;
        $58 = (+($57|0));
        $59 = $58 * 3.0517578125E-5;
        $61 = $59;
       } else {
        $55 = (+_getreal(11));
        $61 = $55;
       }
       $60 = $61;
       $62 = Math_imul($c$013, $20)|0;
       $63 = (($62) + ($x$014))|0;
       $64 = (($26) + ($63<<2)|0);
       if ($54) {
        HEAPF32[$64>>2] = $60;
       } else {
        $65 = +HEAPF32[$64>>2];
        $66 = $60 - $65;
        $67 = HEAP16[$11>>1]|0;
        $68 = $67&65535;
        $69 = (+($68|0));
        $70 = $66 / $69;
        $71 = $c$013 | 1;
        $72 = Math_imul($71, $20)|0;
        $73 = (($72) + ($x$014))|0;
        $74 = (($26) + ($73<<2)|0);
        HEAPF32[$74>>2] = $70;
       }
       $75 = (($c$013) + 2)|0;
       $76 = ($75>>>0)<($nc>>>0);
       if ($76) {
        $c$013 = $75;
       } else {
        break;
       }
      }
     }
     $77 = (($x$014) + 1)|0;
     $exitcond = ($77|0)==($42|0);
     if ($exitcond) {
      break;
     } else {
      $x$014 = $77;
     }
    }
   }
   $78 = ($y$042|0)==(0);
   L25: do {
    if (!($78)) {
     $79 = HEAP16[$30>>1]|0;
     $80 = $79&65535;
     $81 = HEAP16[$11>>1]|0;
     $82 = $81&65535;
     $83 = Math_imul($82, $y$042)|0;
     $84 = (($83) + ($80))|0;
     $85 = (($84) - ($82))|0;
     $86 = HEAP16[133064>>1]|0;
     $87 = $86&65535;
     $88 = ($85>>>0)<($87>>>0);
     $89 = ($85>>>0)<($84>>>0);
     $or$cond36 = $89 & $88;
     if ($or$cond36) {
      $90 = HEAP32[584>>2]|0;
      $91 = HEAP32[132328>>2]|0;
      $row$037 = $85;
      while(1) {
       $92 = HEAP16[$30>>1]|0;
       $93 = $92&65535;
       $94 = HEAP16[$3>>1]|0;
       $95 = $94&65535;
       $96 = (($95) + ($93))|0;
       $97 = HEAP16[$11>>1]|0;
       $98 = $97&65535;
       $99 = (($96) - ($98))|0;
       $100 = ($row$037>>>0)<($99>>>0);
       if (!($100)) {
        break L25;
       }
       if ($31) {
        $x$129 = 1;
        while(1) {
         if (!($34)) {
          $101 = HEAP16[$7>>1]|0;
          $102 = $101&65535;
          $103 = (+($102|0));
          $c$117 = 0;
          while(1) {
           $104 = Math_imul($c$117, $20)|0;
           $105 = (($104) + ($x$129))|0;
           $106 = (($105) + -1)|0;
           $107 = (($26) + ($106<<2)|0);
           $108 = +HEAPF32[$107>>2];
           $109 = (($mult) + ($c$117<<2)|0);
           HEAPF32[$109>>2] = $108;
           $110 = (($26) + ($105<<2)|0);
           $111 = +HEAPF32[$110>>2];
           $112 = $111 - $108;
           $113 = $112 / $103;
           $114 = $c$117 | 1;
           $115 = (($mult) + ($114<<2)|0);
           HEAPF32[$115>>2] = $113;
           $116 = (($c$117) + 2)|0;
           $117 = ($116>>>0)<($nc>>>0);
           if ($117) {
            $c$117 = $116;
           } else {
            break;
           }
          }
         }
         $118 = HEAP16[$head>>1]|0;
         $119 = $118&65535;
         $120 = HEAP16[$7>>1]|0;
         $121 = $120&65535;
         $122 = Math_imul($121, $x$129)|0;
         $123 = (($122) + ($119))|0;
         $124 = (($123) - ($121))|0;
         $125 = HEAP16[132336>>1]|0;
         $126 = $125&65535;
         $127 = ($124>>>0)<($126>>>0);
         $128 = ($124>>>0)<($123>>>0);
         $or$cond523 = $128 & $127;
         L39: do {
          if ($or$cond523) {
           $col$024 = $124;
           while(1) {
            $129 = HEAP16[$head>>1]|0;
            $130 = $129&65535;
            $131 = HEAP16[$0>>1]|0;
            $132 = $131&65535;
            $133 = (($132) + ($130))|0;
            $134 = HEAP16[$7>>1]|0;
            $135 = $134&65535;
            $136 = (($133) - ($135))|0;
            $137 = ($col$024>>>0)<($136>>>0);
            if (!($137)) {
             break L39;
            }
            if ($35) {
             $138 = HEAP16[600>>1]|0;
             $139 = $138&65535;
             $140 = (($row$037) - ($139))|0;
             $141 = $140 << 1;
             $142 = $141 & 14;
             $143 = HEAP16[592>>1]|0;
             $144 = $143&65535;
             $145 = (($col$024) - ($144))|0;
             $146 = $145 & 1;
             $147 = $142 | $146;
             $148 = $147 << 1;
             $149 = $90 >>> $148;
             $150 = $149 & 3;
             $151 = $149 & 1;
             $152 = ($151|0)==(0);
             if ($152) {
              $162 = $150;
              label = 28;
             }
            } else {
             $162 = 0;
             label = 28;
            }
            if ((label|0) == 28) {
             label = 0;
             $153 = HEAP16[132336>>1]|0;
             $154 = $153&65535;
             $155 = Math_imul($154, $row$037)|0;
             $156 = (($155) + ($col$024))|0;
             $157 = (($91) + ($156<<1)|0);
             $158 = HEAP16[$157>>1]|0;
             $159 = $158&65535;
             $160 = (+($159|0));
             $161 = (($mult) + ($162<<2)|0);
             $163 = +HEAPF32[$161>>2];
             $164 = $163 * $160;
             $165 = (~~(($164))>>>0);
             $166 = ($165>>>0)<(65535);
             $167 = $165&65535;
             $168 = $166 ? $167 : -1;
             HEAP16[$157>>1] = $168;
            }
            if (!($36)) {
             $c$220 = 0;
             while(1) {
              $169 = $c$220 | 1;
              $170 = (($mult) + ($169<<2)|0);
              $171 = +HEAPF32[$170>>2];
              $172 = (($mult) + ($c$220<<2)|0);
              $173 = +HEAPF32[$172>>2];
              $174 = $171 + $173;
              HEAPF32[$172>>2] = $174;
              $175 = (($c$220) + 2)|0;
              $176 = ($175>>>0)<($nc>>>0);
              if ($176) {
               $c$220 = $175;
              } else {
               break;
              }
             }
            }
            $177 = (($col$024) + 1)|0;
            $178 = HEAP16[132336>>1]|0;
            $179 = $178&65535;
            $180 = ($177>>>0)<($179>>>0);
            $181 = ($177>>>0)<($123>>>0);
            $or$cond5 = $181 & $180;
            if ($or$cond5) {
             $col$024 = $177;
            } else {
             break;
            }
           }
          }
         } while(0);
         $182 = (($x$129) + 1)|0;
         $exitcond44 = ($182|0)==($45|0);
         if ($exitcond44) {
          break;
         } else {
          $x$129 = $182;
         }
        }
       }
       if (!($32)) {
        $x$233 = 0;
        while(1) {
         if (!($33)) {
          $c$330 = 0;
          while(1) {
           $183 = $c$330 | 1;
           $184 = Math_imul($183, $20)|0;
           $185 = (($184) + ($x$233))|0;
           $186 = (($26) + ($185<<2)|0);
           $187 = +HEAPF32[$186>>2];
           $188 = Math_imul($c$330, $20)|0;
           $189 = (($188) + ($x$233))|0;
           $190 = (($26) + ($189<<2)|0);
           $191 = +HEAPF32[$190>>2];
           $192 = $187 + $191;
           HEAPF32[$190>>2] = $192;
           $193 = (($c$330) + 2)|0;
           $194 = ($193>>>0)<($nc>>>0);
           if ($194) {
            $c$330 = $193;
           } else {
            break;
           }
          }
         }
         $195 = (($x$233) + 1)|0;
         $exitcond45 = ($195|0)==($49|0);
         if ($exitcond45) {
          break;
         } else {
          $x$233 = $195;
         }
        }
       }
       $196 = (($row$037) + 1)|0;
       $197 = HEAP16[133064>>1]|0;
       $198 = $197&65535;
       $199 = ($196>>>0)<($198>>>0);
       $200 = ($196>>>0)<($84>>>0);
       $or$cond = $200 & $199;
       if ($or$cond) {
        $row$037 = $196;
       } else {
        break;
       }
      }
     }
    }
   } while(0);
   $201 = (($y$042) + 1)|0;
   $exitcond46 = ($201|0)==($53|0);
   if ($exitcond46) {
    break;
   } else {
    $y$042 = $201;
   }
  }
 }
 _free($26);
 STACKTOP = sp;return;
}
function _phase_one_correct() {
 var $$in = 0, $$lcssa = 0, $$lcssa190 = 0, $$lcssa191 = 0, $$mux = 0.0, $$not = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0;
 var $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0.0, $1020 = 0, $1021 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0;
 var $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0.0;
 var $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0.0, $598 = 0.0, $599 = 0, $6 = 0, $60 = 0.0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0;
 var $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0.0, $635 = 0.0, $636 = 0, $637 = 0.0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0.0, $646 = 0.0, $647 = 0.0, $648 = 0;
 var $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0, $661 = 0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0.0, $67 = 0.0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0.0, $680 = 0.0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0.0, $700 = 0, $701 = 0.0;
 var $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0.0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0;
 var $720 = 0, $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0.0, $762 = 0.0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0.0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0.0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0.0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0.0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0.0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge = 0, $cf = 0, $col$095 = 0, $col$1 = 0, $col$1$1 = 0, $col$2113 = 0, $col$3 = 0, $col$459 = 0, $cx = 0, $dev = 0, $exitcond147 = 0;
 var $exitcond149 = 0, $exitcond152 = 0, $exitcond155 = 0, $exitcond156 = 0, $exitcond156$1 = 0, $exitcond158 = 0, $exitcond164 = 0, $exitcond165 = 0, $head = 0, $i$10110 = 0, $i$10110$1 = 0, $i$194 = 0, $i$392 = 0, $i$5$max$0$1 = 0, $i$5$max$0$2 = 0, $i$5$max$0$3 = 0, $i$774 = 0, $i$9109 = 0, $ispos = 0, $ispos12 = 0;
 var $ispos12$1 = 0, $ispos12$2 = 0, $ispos12$3 = 0, $j$169 = 0, $j$169$1 = 0, $j$265 = 0, $j$265$1 = 0, $j$3$lcssa = 0, $j$3$lcssa$1 = 0, $j$352 = 0, $j$352$1 = 0, $k$1$1178 = 0, $k$1176 = 0, $lc = 0, $mindiff$0125 = 0, $mindiff$1 = 0, $mult = 0, $neg = 0, $neg13 = 0, $neg13$1 = 0;
 var $neg13$2 = 0, $neg13$3 = 0, $off_412$0126 = 0, $off_412$1 = 0, $off_412$1$lcssa = 0, $or$cond = 0, $or$cond11 = 0, $or$cond15 = 0, $or$cond15$1 = 0, $or$cond7 = 0, $or$cond9 = 0, $poly = 0, $qc4$1123 = 0, $qlin_applied$0128 = 0, $qlin_applied$1 = 0, $qmult = 0, $qmult_applied$0127 = 0, $qmult_applied$1 = 0, $qr$0104 = 0, $qr$2112 = 0;
 var $qr3$1124 = 0, $ref = 0, $ref2 = 0, $row$099 = 0, $row$186 = 0, $row$2 = 0, $row$2$1 = 0, $row$3116 = 0, $row$4 = 0, $row$562 = 0, $sum$275 = 0, $val = 0, $xval = 0, $yval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $val = sp + 280|0;
 $dev = sp + 264|0;
 $head = sp + 224|0;
 $poly = sp + 192|0;
 $mult = sp + 184|0;
 $yval = sp + 176|0;
 $xval = sp + 168|0;
 $lc = sp + 344|0;
 $ref = sp + 312|0;
 $cx = sp + 92|0;
 $cf = sp + 16|0;
 $qmult = sp;
 $ref2 = sp + 296|0;
 $0 = HEAP32[136>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[133944>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[168>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[_stderr>>2]|0;
  (_fwrite((133952|0),24,1,($6|0))|0);
 }
 $7 = HEAP32[864>>2]|0;
 $8 = HEAP32[133272>>2]|0;
 (_fseek(($7|0),($8|0),0)|0);
 $9 = (_get2()|0);
 HEAP16[928>>1] = $9;
 $10 = HEAP32[864>>2]|0;
 (_fseek(($10|0),6,1)|0);
 $11 = HEAP32[864>>2]|0;
 $12 = HEAP32[133272>>2]|0;
 $13 = (_get4()|0);
 $14 = (($13) + ($12))|0;
 (_fseek(($11|0),($14|0),0)|0);
 $15 = (_get4()|0);
 (_get4()|0);
 $16 = ($15|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = (($cf) + 32|0);
 $18 = (($cx) + 32|0);
 $19 = (($qmult) + 4|0);
 $20 = (($qmult) + 8|0);
 $21 = (($qmult) + 12|0);
 $22 = (($ref) + 30|0);
 $23 = (($cf) + 68|0);
 $24 = (($cx) + 68|0);
 $25 = (($cf) + 72|0);
 $26 = (($cx) + 72|0);
 $27 = (($poly) + 24|0);
 $28 = (($poly) + 12|0);
 $29 = (($poly) + 20|0);
 $30 = (($poly) + 4|0);
 $$in = $15;$mindiff$0125 = 2147483647;$off_412$0126 = 0;$qlin_applied$0128 = 0;$qmult_applied$0127 = 0;
 while(1) {
  $31 = (($$in) + -1)|0;
  $32 = (_get4()|0);
  $33 = (_get4()|0);
  $34 = (_get4()|0);
  $35 = HEAP32[864>>2]|0;
  $36 = (_ftell(($35|0))|0);
  $37 = HEAP32[864>>2]|0;
  $38 = HEAP32[133272>>2]|0;
  $39 = (($38) + ($34))|0;
  (_fseek(($37|0),($39|0),0)|0);
  L12: do {
   switch ($32|0) {
   case 1049:  {
    (_get4()|0);
    $42 = (+_getreal(11));
    $43 = $42;
    HEAPF32[$poly>>2] = $43;
    $44 = (+_getreal(11));
    $45 = $44;
    $46 = (($poly) + 4|0);
    HEAPF32[$46>>2] = $45;
    $47 = (+_getreal(11));
    $48 = $47;
    $49 = (($poly) + 8|0);
    HEAPF32[$49>>2] = $48;
    $50 = (+_getreal(11));
    $51 = $50;
    $52 = (($poly) + 12|0);
    HEAPF32[$52>>2] = $51;
    $53 = (+_getreal(11));
    $54 = $53;
    $55 = (($poly) + 16|0);
    HEAPF32[$55>>2] = $54;
    $56 = (+_getreal(11));
    $57 = $56;
    $58 = (($poly) + 20|0);
    HEAPF32[$58>>2] = $57;
    $59 = (+_getreal(11));
    $60 = $59;
    $61 = (($poly) + 24|0);
    HEAPF32[$61>>2] = $60;
    $62 = (+_getreal(11));
    $63 = $62;
    $64 = (($poly) + 28|0);
    HEAPF32[$64>>2] = $63;
    $65 = +HEAPF32[((133984 + 32|0))>>2];
    $66 = $65 - $63;
    $67 = +HEAPF32[$27>>2];
    $68 = $66 * $67;
    $69 = $68 + 1.0;
    $70 = +HEAPF32[$28>>2];
    $71 = $70 + $69;
    HEAPF32[$28>>2] = $71;
    $72 = +HEAPF32[$29>>2];
    $73 = +HEAPF32[$30>>2];
    $i$194 = 0;
    while(1) {
     $81 = (+($i$194|0));
     $82 = $81 * $72;
     $83 = $82 + $71;
     $84 = $81 * $83;
     $85 = $73 + $84;
     $86 = $85 < 65535.0;
     $87 = $86 ? $85 : 65535.0;
     $88 = $87 < 0.0;
     $89 = (~~(($87))&65535);
     $90 = $88 ? 0 : $89;
     $91 = (936 + ($i$194<<1)|0);
     HEAP16[$91>>1] = $90;
     $92 = (($i$194) + 1)|0;
     $exitcond149 = ($92|0)==(65536);
     if ($exitcond149) {
      label = 9;
      break;
     } else {
      $i$194 = $92;
     }
    }
    break;
   }
   case 1024:  {
    $40 = (($33) + -8)|0;
    $41 = ($40|0)>(-1);
    if ($41) {
     $311 = $40;
     while(1) {
      $147 = (_get2()|0);
      $148 = $147&65535;
      $149 = (_get2()|0);
      $150 = $149&65535;
      $151 = (_get2()|0);
      (_get2()|0);
      $152 = HEAP16[132336>>1]|0;
      $153 = ($147&65535)<($152&65535);
      do {
       if ($153) {
        if ((($151<<16>>16) == 129)) {
         $269 = HEAP16[133064>>1]|0;
         $270 = ($149&65535)<($269&65535);
         if (!($270)) {
          break;
         }
         $271 = HEAP32[584>>2]|0;
         $272 = HEAP16[600>>1]|0;
         $273 = $272&65535;
         $274 = (($150) - ($273))|0;
         $275 = $274 << 1;
         $276 = $275 & 14;
         $277 = HEAP16[592>>1]|0;
         $278 = $277&65535;
         $279 = (($148) - ($278))|0;
         $280 = $279 & 1;
         $281 = $276 | $280;
         $282 = $281 << 1;
         $283 = $271 >>> $282;
         $284 = $283 & 3;
         $285 = ($284|0)!=(1);
         $286 = $285&1;
         $287 = $286 << 2;
         $288 = $287 | 8;
         $i$774 = $287;$sum$275 = 0;
         while(1) {
          $289 = (133920 + ($i$774<<1)|0);
          $290 = HEAP8[$289>>0]|0;
          $291 = $290 << 24 >> 24;
          $292 = (($291) + ($150))|0;
          $293 = ((133920 + ($i$774<<1)|0) + 1|0);
          $294 = HEAP8[$293>>0]|0;
          $295 = $294 << 24 >> 24;
          $296 = (($295) + ($148))|0;
          $297 = (_raw($292,$296)|0);
          $298 = (($297) + ($sum$275))|0;
          $299 = (($i$774) + 1)|0;
          $300 = ($299|0)<($288|0);
          if ($300) {
           $i$774 = $299;$sum$275 = $298;
          } else {
           $$lcssa191 = $298;
           break;
          }
         }
         $301 = (($$lcssa191) + 4)|0;
         $302 = $301 >>> 3;
         $303 = $302&65535;
         $304 = HEAP16[132336>>1]|0;
         $305 = $304&65535;
         $306 = Math_imul($305, $150)|0;
         $307 = (($306) + ($148))|0;
         $308 = HEAP32[132328>>2]|0;
         $309 = (($308) + ($307<<1)|0);
         HEAP16[$309>>1] = $303;
         break;
        } else if (!((($151<<16>>16) == 131) | (($151<<16>>16) == 137))) {
         break;
        }
        $154 = HEAP16[133064>>1]|0;
        $155 = ($154<<16>>16)==(0);
        if (!($155)) {
         $156 = (($148) + -2)|0;
         $157 = (($148) + 2)|0;
         $row$186 = 0;
         while(1) {
          $158 = HEAP32[584>>2]|0;
          $159 = HEAP16[600>>1]|0;
          $160 = $159&65535;
          $161 = (($row$186) - ($160))|0;
          $162 = $161 << 1;
          $163 = $162 & 14;
          $164 = HEAP16[592>>1]|0;
          $165 = $164&65535;
          $166 = (($148) - ($165))|0;
          $167 = $166 & 1;
          $168 = $163 | $167;
          $169 = $168 << 1;
          $170 = $158 >>> $169;
          $171 = $170 & 3;
          $172 = ($171|0)==(1);
          if ($172) {
           $173 = (($row$186) + -1)|0;
           $174 = (($148) + -1)|0;
           $175 = (_raw($173,$174)|0);
           HEAP32[$val>>2] = $175;
           $176 = (($row$186) + -1)|0;
           $177 = (($148) + 1)|0;
           $178 = (_raw($176,$177)|0);
           $179 = (($val) + 4|0);
           HEAP32[$179>>2] = $178;
           $180 = (($178) + ($175))|0;
           $181 = (($row$186) + 1)|0;
           $182 = (($148) + -1)|0;
           $183 = (_raw($181,$182)|0);
           $184 = (($val) + 8|0);
           HEAP32[$184>>2] = $183;
           $185 = (($183) + ($180))|0;
           $186 = (($row$186) + 1)|0;
           $187 = (($148) + 1)|0;
           $188 = (_raw($186,$187)|0);
           $189 = (($val) + 12|0);
           HEAP32[$189>>2] = $188;
           $190 = (($188) + ($185))|0;
           $191 = HEAP32[$val>>2]|0;
           $192 = $191 << 2;
           $193 = (($192) - ($190))|0;
           $ispos12 = ($193|0)>(-1);
           $neg13 = (0 - ($193))|0;
           $194 = $ispos12 ? $193 : $neg13;
           HEAP32[$dev>>2] = $194;
           $195 = (($val) + 4|0);
           $196 = HEAP32[$195>>2]|0;
           $197 = $196 << 2;
           $198 = (($197) - ($190))|0;
           $ispos12$1 = ($198|0)>(-1);
           $neg13$1 = (0 - ($198))|0;
           $199 = $ispos12$1 ? $198 : $neg13$1;
           $200 = (($dev) + 4|0);
           HEAP32[$200>>2] = $199;
           $201 = HEAP32[$dev>>2]|0;
           $202 = ($201|0)<($199|0);
           $i$5$max$0$1 = $202&1;
           $203 = (($val) + 8|0);
           $204 = HEAP32[$203>>2]|0;
           $205 = $204 << 2;
           $206 = (($205) - ($190))|0;
           $ispos12$2 = ($206|0)>(-1);
           $neg13$2 = (0 - ($206))|0;
           $207 = $ispos12$2 ? $206 : $neg13$2;
           $208 = (($dev) + 8|0);
           HEAP32[$208>>2] = $207;
           $209 = (($dev) + ($i$5$max$0$1<<2)|0);
           $210 = HEAP32[$209>>2]|0;
           $211 = ($210|0)<($207|0);
           $i$5$max$0$2 = $211 ? 2 : $i$5$max$0$1;
           $212 = (($val) + 12|0);
           $213 = HEAP32[$212>>2]|0;
           $214 = $213 << 2;
           $215 = (($214) - ($190))|0;
           $ispos12$3 = ($215|0)>(-1);
           $neg13$3 = (0 - ($215))|0;
           $216 = $ispos12$3 ? $215 : $neg13$3;
           $217 = (($dev) + 12|0);
           HEAP32[$217>>2] = $216;
           $218 = (($dev) + ($i$5$max$0$2<<2)|0);
           $219 = HEAP32[$218>>2]|0;
           $220 = ($219|0)<($216|0);
           $i$5$max$0$3 = $220 ? 3 : $i$5$max$0$2;
           $221 = (($val) + ($i$5$max$0$3<<2)|0);
           $222 = HEAP32[$221>>2]|0;
           $223 = (($190) - ($222))|0;
           $224 = (+($223|0));
           $225 = $224 / 3.0;
           $226 = $225 + 0.5;
           $227 = (~~(($226))&65535);
           $228 = HEAP16[132336>>1]|0;
           $229 = $228&65535;
           $230 = Math_imul($229, $row$186)|0;
           $231 = (($230) + ($148))|0;
           $232 = HEAP32[132328>>2]|0;
           $233 = (($232) + ($231<<1)|0);
           HEAP16[$233>>1] = $227;
          } else {
           $234 = (($row$186) + -2)|0;
           $235 = (($148) + -2)|0;
           $236 = (_raw($234,$235)|0);
           $237 = (($row$186) + -2)|0;
           $238 = (($148) + 2)|0;
           $239 = (_raw($237,$238)|0);
           $240 = (($239) + ($236))|0;
           $241 = (($row$186) + 2)|0;
           $242 = (($148) + -2)|0;
           $243 = (_raw($241,$242)|0);
           $244 = (($243) + ($240))|0;
           $245 = (($row$186) + 2)|0;
           $246 = (($148) + 2)|0;
           $247 = (_raw($245,$246)|0);
           $248 = (($247) + ($244))|0;
           $249 = (+($248|0));
           $250 = $249 * 0.073223300000000005;
           $251 = $250 + 0.5;
           $252 = (_raw($row$186,$156)|0);
           $253 = (_raw($row$186,$157)|0);
           $254 = (($253) + ($252))|0;
           $255 = (+($254|0));
           $256 = $255 * 0.35355340000000002;
           $257 = $251 + $256;
           $258 = (~~(($257))&65535);
           $259 = HEAP16[132336>>1]|0;
           $260 = $259&65535;
           $261 = Math_imul($260, $row$186)|0;
           $262 = (($261) + ($148))|0;
           $263 = HEAP32[132328>>2]|0;
           $264 = (($263) + ($262<<1)|0);
           HEAP16[$264>>1] = $258;
          }
          $265 = (($row$186) + 1)|0;
          $266 = HEAP16[133064>>1]|0;
          $267 = $266&65535;
          $268 = ($265>>>0)<($267>>>0);
          if ($268) {
           $row$186 = $265;
          } else {
           break;
          }
         }
        }
       }
      } while(0);
      $310 = (($311) + -8)|0;
      $312 = ($310|0)>(-1);
      if ($312) {
       $311 = $310;
      } else {
       $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
       break;
      }
     }
    } else {
     $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
    }
    break;
   }
   case 1050:  {
    $93 = (+_getreal(11));
    $94 = $93;
    HEAPF32[$poly>>2] = $94;
    $95 = (+_getreal(11));
    $96 = $95;
    $97 = (($poly) + 4|0);
    HEAPF32[$97>>2] = $96;
    $98 = (+_getreal(11));
    $99 = $98;
    $100 = (($poly) + 8|0);
    HEAPF32[$100>>2] = $99;
    $101 = (+_getreal(11));
    $102 = $101;
    $103 = (($poly) + 12|0);
    HEAPF32[$103>>2] = $102;
    $i$392 = 0;
    while(1) {
     $104 = (+($i$392|0));
     $105 = $104 * 0.0;
     $106 = (($poly) + 12|0);
     $107 = +HEAPF32[$106>>2];
     $108 = $105 + $107;
     $109 = $104 * $108;
     $110 = (($poly) + 8|0);
     $111 = +HEAPF32[$110>>2];
     $112 = $109 + $111;
     $113 = $104 * $112;
     $114 = (($poly) + 4|0);
     $115 = +HEAPF32[$114>>2];
     $116 = $113 + $115;
     $117 = $104 * $116;
     $118 = +HEAPF32[$poly>>2];
     $119 = $117 + $118;
     $120 = $104 + $119;
     $121 = $120 < 65535.0;
     $122 = $121 ? $120 : 65535.0;
     $123 = $122 < 0.0;
     $$not = $121 ^ 1;
     $brmerge = $123 | $$not;
     $$mux = $123 ? 0.0 : 65535.0;
     $124 = $brmerge ? $$mux : $120;
     $125 = (~~(($124))&65535);
     $126 = (936 + ($i$392<<1)|0);
     HEAP16[$126>>1] = $125;
     $127 = (($i$392) + 1)|0;
     $exitcond147 = ($127|0)==(65536);
     if ($exitcond147) {
      label = 9;
      break;
     } else {
      $i$392 = $127;
     }
    }
    break;
   }
   case 1025:  {
    _phase_one_flat_field(1,2);
    $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
    break;
   }
   case 1040: case 1046:  {
    _phase_one_flat_field(0,2);
    $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
    break;
   }
   case 1035:  {
    _phase_one_flat_field(0,4);
    $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
    break;
   }
   case 1042:  {
    $313 = HEAP32[864>>2]|0;
    (_fseek(($313|0),36,1)|0);
    $314 = (_get2()|0);
    $315 = $314&65535;
    $316 = HEAP32[((133984 + 8|0))>>2]|0;
    $317 = (($315) - ($316))|0;
    $ispos = ($317|0)>(-1);
    $neg = (0 - ($317))|0;
    $318 = $ispos ? $317 : $neg;
    $319 = ($mindiff$0125|0)>($318|0);
    if ($319) {
     $320 = HEAP32[864>>2]|0;
     $321 = (_ftell(($320|0))|0);
     $322 = (($321) + -38)|0;
     $mindiff$1 = $318;$off_412$1 = $322;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
    } else {
     $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
    }
    break;
   }
   default: {
    $323 = ($32|0)!=(1055);
    $324 = ($qlin_applied$0128|0)!=(0);
    $or$cond7 = $324 | $323;
    if ($or$cond7) {
     $362 = ($32|0)!=(1054);
     $363 = ($qmult_applied$0127|0)!=(0);
     $or$cond9 = $363 | $362;
     if (!($or$cond9)) {
      ;HEAP32[$qmult+0>>2]=HEAP32[134024+0>>2]|0;HEAP32[$qmult+4>>2]=HEAP32[134024+4>>2]|0;HEAP32[$qmult+8>>2]=HEAP32[134024+8>>2]|0;
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      $364 = (+_getreal(11));
      $365 = $364 + 1.0;
      $366 = $365;
      HEAPF32[$qmult>>2] = $366;
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      $367 = (+_getreal(11));
      $368 = $367 + 1.0;
      $369 = $368;
      HEAPF32[$19>>2] = $369;
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      $370 = (+_getreal(11));
      $371 = $370 + 1.0;
      $372 = $371;
      HEAPF32[$20>>2] = $372;
      (_get4()|0);
      (_get4()|0);
      (_get4()|0);
      $373 = (+_getreal(11));
      $374 = $373 + 1.0;
      $375 = $374;
      HEAPF32[$21>>2] = $375;
      $376 = HEAP16[133064>>1]|0;
      $377 = ($376<<16>>16)==(0);
      if ($377) {
       $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = 1;
       break L12;
      }
      $378 = HEAP32[((133984 + 16|0))>>2]|0;
      $379 = HEAP32[((133984 + 24|0))>>2]|0;
      $380 = HEAP32[132328>>2]|0;
      $row$3116 = 0;
      while(1) {
       $381 = HEAP16[132336>>1]|0;
       $382 = ($381<<16>>16)==(0);
       if (!($382)) {
        $383 = $381&65535;
        $384 = ($row$3116>>>0)>=($379>>>0);
        $385 = $384&1;
        $391 = $383;$col$2113 = 0;
        while(1) {
         $386 = ($col$2113>>>0)>=($378>>>0);
         $387 = $386&1;
         $388 = ((($qmult) + ($385<<3)|0) + ($387<<2)|0);
         $389 = +HEAPF32[$388>>2];
         $390 = Math_imul($391, $row$3116)|0;
         $392 = (($390) + ($col$2113))|0;
         $393 = (($380) + ($392<<1)|0);
         $394 = HEAP16[$393>>1]|0;
         $395 = $394&65535;
         $396 = (+($395|0));
         $397 = $389 * $396;
         $398 = (~~(($397)));
         $399 = ($398|0)<(65535);
         $400 = $399 ? $398 : 65535;
         $401 = ($400|0)<(0);
         $402 = $400&65535;
         $403 = $401 ? 0 : $402;
         HEAP16[$393>>1] = $403;
         $404 = (($col$2113) + 1)|0;
         $405 = HEAP16[132336>>1]|0;
         $406 = $405&65535;
         $407 = ($404>>>0)<($406>>>0);
         if ($407) {
          $391 = $406;$col$2113 = $404;
         } else {
          break;
         }
        }
       }
       $408 = (($row$3116) + 1)|0;
       $409 = HEAP16[133064>>1]|0;
       $410 = $409&65535;
       $411 = ($408>>>0)<($410>>>0);
       if ($411) {
        $row$3116 = $408;
       } else {
        $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = 1;
        break L12;
       }
      }
     }
     $412 = ($32|0)!=(1073);
     $or$cond11 = $363 | $412;
     if ($or$cond11) {
      $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
      break L12;
     }
     $919 = (_get4()|0);
     $920 = $919&65535;
     HEAP16[$ref2>>1] = $920;
     $921 = (_get4()|0);
     $922 = $921&65535;
     $923 = (($ref2) + 2|0);
     HEAP16[$923>>1] = $922;
     $924 = (_get4()|0);
     $925 = $924&65535;
     $926 = (($ref2) + 4|0);
     HEAP16[$926>>1] = $925;
     $927 = (_get4()|0);
     $928 = $927&65535;
     $929 = (($ref2) + 6|0);
     HEAP16[$929>>1] = $928;
     $930 = (_get4()|0);
     $931 = $930&65535;
     $932 = (($ref2) + 8|0);
     HEAP16[$932>>1] = $931;
     $933 = (_get4()|0);
     $934 = $933&65535;
     $935 = (($ref2) + 10|0);
     HEAP16[$935>>1] = $934;
     $936 = (_get4()|0);
     $937 = $936&65535;
     $938 = (($ref2) + 12|0);
     HEAP16[$938>>1] = $937;
     $939 = (_get4()|0);
     $940 = $939&65535;
     HEAP16[$lc>>1] = $940;
     $941 = (_get4()|0);
     $942 = $941&65535;
     $943 = (($lc) + 2|0);
     HEAP16[$943>>1] = $942;
     $944 = (_get4()|0);
     $945 = $944&65535;
     $946 = (($lc) + 4|0);
     HEAP16[$946>>1] = $945;
     $947 = (_get4()|0);
     $948 = $947&65535;
     $949 = (($lc) + 6|0);
     HEAP16[$949>>1] = $948;
     $950 = (_get4()|0);
     $951 = $950&65535;
     $952 = (($lc) + 8|0);
     HEAP16[$952>>1] = $951;
     $953 = (_get4()|0);
     $954 = $953&65535;
     $955 = (($lc) + 10|0);
     HEAP16[$955>>1] = $954;
     $956 = (_get4()|0);
     $957 = $956&65535;
     $958 = (($lc) + 12|0);
     HEAP16[$958>>1] = $957;
     $959 = (_get4()|0);
     $960 = $959&65535;
     $961 = (($lc) + 14|0);
     HEAP16[$961>>1] = $960;
     $962 = (_get4()|0);
     $963 = $962&65535;
     $964 = (($lc) + 16|0);
     HEAP16[$964>>1] = $963;
     $965 = (_get4()|0);
     $966 = $965&65535;
     $967 = (($lc) + 18|0);
     HEAP16[$967>>1] = $966;
     $968 = (_get4()|0);
     $969 = $968&65535;
     $970 = (($lc) + 20|0);
     HEAP16[$970>>1] = $969;
     $971 = (_get4()|0);
     $972 = $971&65535;
     $973 = (($lc) + 22|0);
     HEAP16[$973>>1] = $972;
     $974 = (_get4()|0);
     $975 = $974&65535;
     $976 = (($lc) + 24|0);
     HEAP16[$976>>1] = $975;
     $977 = (_get4()|0);
     $978 = $977&65535;
     $979 = (($lc) + 26|0);
     HEAP16[$979>>1] = $978;
     $980 = (_get4()|0);
     $981 = $980&65535;
     $982 = (($lc) + 28|0);
     HEAP16[$982>>1] = $981;
     $983 = (_get4()|0);
     $984 = $983&65535;
     $985 = (($lc) + 30|0);
     HEAP16[$985>>1] = $984;
     $986 = (_get4()|0);
     $987 = $986&65535;
     $988 = (($lc) + 32|0);
     HEAP16[$988>>1] = $987;
     $989 = (_get4()|0);
     $990 = $989&65535;
     $991 = (($lc) + 34|0);
     HEAP16[$991>>1] = $990;
     $992 = (_get4()|0);
     $993 = $992&65535;
     $994 = (($lc) + 36|0);
     HEAP16[$994>>1] = $993;
     $995 = (_get4()|0);
     $996 = $995&65535;
     $997 = (($lc) + 38|0);
     HEAP16[$997>>1] = $996;
     $998 = (_get4()|0);
     $999 = $998&65535;
     $1000 = (($lc) + 40|0);
     HEAP16[$1000>>1] = $999;
     $1001 = (_get4()|0);
     $1002 = $1001&65535;
     $1003 = (($lc) + 42|0);
     HEAP16[$1003>>1] = $1002;
     $1004 = (_get4()|0);
     $1005 = $1004&65535;
     $1006 = (($lc) + 44|0);
     HEAP16[$1006>>1] = $1005;
     $1007 = (_get4()|0);
     $1008 = $1007&65535;
     $1009 = (($lc) + 46|0);
     HEAP16[$1009>>1] = $1008;
     $1010 = (_get4()|0);
     $1011 = $1010&65535;
     $1012 = (($lc) + 48|0);
     HEAP16[$1012>>1] = $1011;
     $1013 = (_get4()|0);
     $1014 = $1013&65535;
     $1015 = (($lc) + 50|0);
     HEAP16[$1015>>1] = $1014;
     $1016 = (_get4()|0);
     $1017 = $1016&65535;
     $1018 = (($lc) + 52|0);
     HEAP16[$1018>>1] = $1017;
     $1019 = (_get4()|0);
     $1020 = $1019&65535;
     $1021 = (($lc) + 54|0);
     HEAP16[$1021>>1] = $1020;
     $qr3$1124 = 0;
     while(1) {
      $413 = ($qr3$1124|0)!=(0);
      $qc4$1123 = 0;
      while(1) {
       $414 = HEAP16[$ref2>>1]|0;
       $415 = $414&65535;
       $416 = (($cx) + 4|0);
       HEAP32[$416>>2] = $415;
       $417 = HEAP16[$ref2>>1]|0;
       $418 = $417&65535;
       $419 = ((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0);
       $420 = HEAP16[$419>>1]|0;
       $421 = $420&65535;
       $422 = Math_imul($421, $418)|0;
       $423 = (($422>>>0) / 10000)&-1;
       $424 = (($cf) + 4|0);
       HEAP32[$424>>2] = $423;
       $425 = (($ref2) + 2|0);
       $426 = HEAP16[$425>>1]|0;
       $427 = $426&65535;
       $428 = (($cx) + 8|0);
       HEAP32[$428>>2] = $427;
       $429 = HEAP16[$425>>1]|0;
       $430 = $429&65535;
       $431 = (((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0) + 2|0);
       $432 = HEAP16[$431>>1]|0;
       $433 = $432&65535;
       $434 = Math_imul($433, $430)|0;
       $435 = (($434>>>0) / 10000)&-1;
       $436 = (($cf) + 8|0);
       HEAP32[$436>>2] = $435;
       $437 = (($ref2) + 4|0);
       $438 = HEAP16[$437>>1]|0;
       $439 = $438&65535;
       $440 = (($cx) + 12|0);
       HEAP32[$440>>2] = $439;
       $441 = HEAP16[$437>>1]|0;
       $442 = $441&65535;
       $443 = (((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0) + 4|0);
       $444 = HEAP16[$443>>1]|0;
       $445 = $444&65535;
       $446 = Math_imul($445, $442)|0;
       $447 = (($446>>>0) / 10000)&-1;
       $448 = (($cf) + 12|0);
       HEAP32[$448>>2] = $447;
       $449 = (($ref2) + 6|0);
       $450 = HEAP16[$449>>1]|0;
       $451 = $450&65535;
       $452 = (($cx) + 16|0);
       HEAP32[$452>>2] = $451;
       $453 = HEAP16[$449>>1]|0;
       $454 = $453&65535;
       $455 = (((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0) + 6|0);
       $456 = HEAP16[$455>>1]|0;
       $457 = $456&65535;
       $458 = Math_imul($457, $454)|0;
       $459 = (($458>>>0) / 10000)&-1;
       $460 = (($cf) + 16|0);
       HEAP32[$460>>2] = $459;
       $461 = (($ref2) + 8|0);
       $462 = HEAP16[$461>>1]|0;
       $463 = $462&65535;
       $464 = (($cx) + 20|0);
       HEAP32[$464>>2] = $463;
       $465 = HEAP16[$461>>1]|0;
       $466 = $465&65535;
       $467 = (((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0) + 8|0);
       $468 = HEAP16[$467>>1]|0;
       $469 = $468&65535;
       $470 = Math_imul($469, $466)|0;
       $471 = (($470>>>0) / 10000)&-1;
       $472 = (($cf) + 20|0);
       HEAP32[$472>>2] = $471;
       $473 = (($ref2) + 10|0);
       $474 = HEAP16[$473>>1]|0;
       $475 = $474&65535;
       $476 = (($cx) + 24|0);
       HEAP32[$476>>2] = $475;
       $477 = HEAP16[$473>>1]|0;
       $478 = $477&65535;
       $479 = (((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0) + 10|0);
       $480 = HEAP16[$479>>1]|0;
       $481 = $480&65535;
       $482 = Math_imul($481, $478)|0;
       $483 = (($482>>>0) / 10000)&-1;
       $484 = (($cf) + 24|0);
       HEAP32[$484>>2] = $483;
       $485 = (($ref2) + 12|0);
       $486 = HEAP16[$485>>1]|0;
       $487 = $486&65535;
       $488 = (($cx) + 28|0);
       HEAP32[$488>>2] = $487;
       $489 = HEAP16[$485>>1]|0;
       $490 = $489&65535;
       $491 = (((($lc) + (($qr3$1124*28)|0)|0) + (($qc4$1123*14)|0)|0) + 12|0);
       $492 = HEAP16[$491>>1]|0;
       $493 = $492&65535;
       $494 = Math_imul($493, $490)|0;
       $495 = (($494>>>0) / 10000)&-1;
       $496 = (($cf) + 28|0);
       HEAP32[$496>>2] = $495;
       HEAP32[$cf>>2] = 0;
       HEAP32[$cx>>2] = 0;
       HEAP32[$17>>2] = 65535;
       HEAP32[$18>>2] = 65535;
       _cubic_spline($cx,$cf,9);
       $497 = HEAP32[((133984 + 24|0))>>2]|0;
       $498 = $413 ? $497 : 0;
       $499 = ($qc4$1123|0)!=(0);
       $500 = HEAP32[((133984 + 16|0))>>2]|0;
       $501 = $499 ? $500 : 0;
       $502 = HEAP32[132328>>2]|0;
       $row$4 = $498;
       while(1) {
        if ($413) {
         $503 = HEAP16[133064>>1]|0;
         $504 = $503&65535;
         $506 = $504;
        } else {
         $506 = $497;
        }
        $505 = ($row$4>>>0)<($506>>>0);
        if ($505) {
         $col$3 = $501;
        } else {
         break;
        }
        while(1) {
         if ($499) {
          $507 = HEAP16[132336>>1]|0;
          $508 = $507&65535;
          $510 = $508;
         } else {
          $510 = $500;
         }
         $509 = ($col$3>>>0)<($510>>>0);
         if (!($509)) {
          break;
         }
         $511 = HEAP16[132336>>1]|0;
         $512 = $511&65535;
         $513 = Math_imul($512, $row$4)|0;
         $514 = (($513) + ($col$3))|0;
         $515 = (($502) + ($514<<1)|0);
         $516 = HEAP16[$515>>1]|0;
         $517 = $516&65535;
         $518 = (936 + ($517<<1)|0);
         $519 = HEAP16[$518>>1]|0;
         HEAP16[$515>>1] = $519;
         $520 = (($col$3) + 1)|0;
         $col$3 = $520;
        }
        $521 = (($row$4) + 1)|0;
        $row$4 = $521;
       }
       $522 = (($qc4$1123) + 1)|0;
       $exitcond164 = ($522|0)==(2);
       if ($exitcond164) {
        break;
       } else {
        $qc4$1123 = $522;
       }
      }
      $523 = (($qr3$1124) + 1)|0;
      $exitcond165 = ($523|0)==(2);
      if ($exitcond165) {
       break;
      } else {
       $qr3$1124 = $523;
      }
     }
     $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = 1;$qmult_applied$1 = 1;
     break L12;
    }
    $qr$0104 = 0;
    while(1) {
     $766 = (_get4()|0);
     $767 = $766&65535;
     $768 = (($lc) + ($qr$0104<<6)|0);
     HEAP16[$768>>1] = $767;
     $769 = (_get4()|0);
     $770 = $769&65535;
     $771 = ((($lc) + ($qr$0104<<6)|0) + 2|0);
     HEAP16[$771>>1] = $770;
     $772 = (_get4()|0);
     $773 = $772&65535;
     $774 = ((($lc) + ($qr$0104<<6)|0) + 4|0);
     HEAP16[$774>>1] = $773;
     $775 = (_get4()|0);
     $776 = $775&65535;
     $777 = ((($lc) + ($qr$0104<<6)|0) + 6|0);
     HEAP16[$777>>1] = $776;
     $778 = (_get4()|0);
     $779 = $778&65535;
     $780 = ((($lc) + ($qr$0104<<6)|0) + 8|0);
     HEAP16[$780>>1] = $779;
     $781 = (_get4()|0);
     $782 = $781&65535;
     $783 = ((($lc) + ($qr$0104<<6)|0) + 10|0);
     HEAP16[$783>>1] = $782;
     $784 = (_get4()|0);
     $785 = $784&65535;
     $786 = ((($lc) + ($qr$0104<<6)|0) + 12|0);
     HEAP16[$786>>1] = $785;
     $787 = (_get4()|0);
     $788 = $787&65535;
     $789 = ((($lc) + ($qr$0104<<6)|0) + 14|0);
     HEAP16[$789>>1] = $788;
     $790 = (_get4()|0);
     $791 = $790&65535;
     $792 = ((($lc) + ($qr$0104<<6)|0) + 16|0);
     HEAP16[$792>>1] = $791;
     $793 = (_get4()|0);
     $794 = $793&65535;
     $795 = ((($lc) + ($qr$0104<<6)|0) + 18|0);
     HEAP16[$795>>1] = $794;
     $796 = (_get4()|0);
     $797 = $796&65535;
     $798 = ((($lc) + ($qr$0104<<6)|0) + 20|0);
     HEAP16[$798>>1] = $797;
     $799 = (_get4()|0);
     $800 = $799&65535;
     $801 = ((($lc) + ($qr$0104<<6)|0) + 22|0);
     HEAP16[$801>>1] = $800;
     $802 = (_get4()|0);
     $803 = $802&65535;
     $804 = ((($lc) + ($qr$0104<<6)|0) + 24|0);
     HEAP16[$804>>1] = $803;
     $805 = (_get4()|0);
     $806 = $805&65535;
     $807 = ((($lc) + ($qr$0104<<6)|0) + 26|0);
     HEAP16[$807>>1] = $806;
     $808 = (_get4()|0);
     $809 = $808&65535;
     $810 = ((($lc) + ($qr$0104<<6)|0) + 28|0);
     HEAP16[$810>>1] = $809;
     $811 = (_get4()|0);
     $812 = $811&65535;
     $813 = ((($lc) + ($qr$0104<<6)|0) + 30|0);
     HEAP16[$813>>1] = $812;
     $814 = (_get4()|0);
     $815 = $814&65535;
     $816 = ((($lc) + ($qr$0104<<6)|0) + 32|0);
     HEAP16[$816>>1] = $815;
     $817 = (_get4()|0);
     $818 = $817&65535;
     $819 = ((($lc) + ($qr$0104<<6)|0) + 34|0);
     HEAP16[$819>>1] = $818;
     $820 = (_get4()|0);
     $821 = $820&65535;
     $822 = ((($lc) + ($qr$0104<<6)|0) + 36|0);
     HEAP16[$822>>1] = $821;
     $823 = (_get4()|0);
     $824 = $823&65535;
     $825 = ((($lc) + ($qr$0104<<6)|0) + 38|0);
     HEAP16[$825>>1] = $824;
     $826 = (_get4()|0);
     $827 = $826&65535;
     $828 = ((($lc) + ($qr$0104<<6)|0) + 40|0);
     HEAP16[$828>>1] = $827;
     $829 = (_get4()|0);
     $830 = $829&65535;
     $831 = ((($lc) + ($qr$0104<<6)|0) + 42|0);
     HEAP16[$831>>1] = $830;
     $832 = (_get4()|0);
     $833 = $832&65535;
     $834 = ((($lc) + ($qr$0104<<6)|0) + 44|0);
     HEAP16[$834>>1] = $833;
     $835 = (_get4()|0);
     $836 = $835&65535;
     $837 = ((($lc) + ($qr$0104<<6)|0) + 46|0);
     HEAP16[$837>>1] = $836;
     $838 = (_get4()|0);
     $839 = $838&65535;
     $840 = ((($lc) + ($qr$0104<<6)|0) + 48|0);
     HEAP16[$840>>1] = $839;
     $841 = (_get4()|0);
     $842 = $841&65535;
     $843 = ((($lc) + ($qr$0104<<6)|0) + 50|0);
     HEAP16[$843>>1] = $842;
     $844 = (_get4()|0);
     $845 = $844&65535;
     $846 = ((($lc) + ($qr$0104<<6)|0) + 52|0);
     HEAP16[$846>>1] = $845;
     $847 = (_get4()|0);
     $848 = $847&65535;
     $849 = ((($lc) + ($qr$0104<<6)|0) + 54|0);
     HEAP16[$849>>1] = $848;
     $850 = (_get4()|0);
     $851 = $850&65535;
     $852 = ((($lc) + ($qr$0104<<6)|0) + 56|0);
     HEAP16[$852>>1] = $851;
     $853 = (_get4()|0);
     $854 = $853&65535;
     $855 = ((($lc) + ($qr$0104<<6)|0) + 58|0);
     HEAP16[$855>>1] = $854;
     $856 = (_get4()|0);
     $857 = $856&65535;
     $858 = ((($lc) + ($qr$0104<<6)|0) + 60|0);
     HEAP16[$858>>1] = $857;
     $859 = (_get4()|0);
     $860 = $859&65535;
     $861 = ((($lc) + ($qr$0104<<6)|0) + 62|0);
     HEAP16[$861>>1] = $860;
     $862 = (($qr$0104) + 1)|0;
     $exitcond152 = ($862|0)==(2);
     if ($exitcond152) {
      $i$9109 = 0;
      break;
     } else {
      $qr$0104 = $862;
     }
    }
    while(1) {
     $863 = ((($lc) + ($i$9109<<1)|0) + 32|0);
     $864 = HEAP16[$863>>1]|0;
     $865 = $864&65535;
     $866 = (($lc) + ($i$9109<<1)|0);
     $867 = HEAP16[$866>>1]|0;
     $868 = $867&65535;
     $869 = (($865) + ($868))|0;
     $870 = ((($lc) + ($i$9109<<1)|0) + 64|0);
     $871 = HEAP16[$870>>1]|0;
     $872 = $871&65535;
     $873 = (($872) + ($869))|0;
     $874 = ((($lc) + ($i$9109<<1)|0) + 96|0);
     $875 = HEAP16[$874>>1]|0;
     $876 = $875&65535;
     $877 = (($876) + ($873))|0;
     $878 = (($877) + 2)|0;
     $879 = $878 >>> 2;
     $880 = $879&65535;
     $881 = (($ref) + ($i$9109<<1)|0);
     HEAP16[$881>>1] = $880;
     $882 = (($i$9109) + 1)|0;
     $exitcond155 = ($882|0)==(16);
     if ($exitcond155) {
      break;
     } else {
      $i$9109 = $882;
     }
    }
    $325 = HEAP16[$22>>1]|0;
    $326 = $325&65535;
    $327 = ($326*65535)|0;
    $qr$2112 = 0;
    while(1) {
     $328 = ($qr$2112|0)!=(0);
     $i$10110 = 0;
     while(1) {
      $329 = ((($lc) + ($qr$2112<<6)|0) + ($i$10110<<1)|0);
      $330 = HEAP16[$329>>1]|0;
      $331 = $330&65535;
      $332 = (($i$10110) + 1)|0;
      $333 = (($cx) + ($332<<2)|0);
      HEAP32[$333>>2] = $331;
      $334 = (($ref) + ($i$10110<<1)|0);
      $335 = HEAP16[$334>>1]|0;
      $336 = $335&65535;
      $337 = (($cf) + ($332<<2)|0);
      HEAP32[$337>>2] = $336;
      $exitcond156 = ($332|0)==(16);
      if ($exitcond156) {
       break;
      } else {
       $i$10110 = $332;
      }
     }
     HEAP32[$cf>>2] = 0;
     HEAP32[$cx>>2] = 0;
     $338 = ((($lc) + ($qr$2112<<6)|0) + 30|0);
     $339 = HEAP16[$338>>1]|0;
     $340 = $339&65535;
     $341 = (($327>>>0) / ($340>>>0))&-1;
     HEAP32[$23>>2] = $341;
     HEAP32[$24>>2] = $341;
     HEAP32[$25>>2] = 65535;
     HEAP32[$26>>2] = 65535;
     _cubic_spline($cx,$cf,19);
     $342 = HEAP32[((133984 + 24|0))>>2]|0;
     $343 = $328 ? $342 : 0;
     $344 = HEAP32[((133984 + 16|0))>>2]|0;
     $345 = HEAP32[132328>>2]|0;
     $row$2 = $343;
     while(1) {
      if ($328) {
       $346 = HEAP16[133064>>1]|0;
       $347 = $346&65535;
       $349 = $347;
      } else {
       $349 = $342;
      }
      $348 = ($row$2>>>0)<($349>>>0);
      if ($348) {
       $col$1 = 0;
      } else {
       break;
      }
      while(1) {
       $350 = ($col$1>>>0)<($344>>>0);
       if (!($350)) {
        break;
       }
       $351 = HEAP16[132336>>1]|0;
       $352 = $351&65535;
       $353 = Math_imul($352, $row$2)|0;
       $354 = (($353) + ($col$1))|0;
       $355 = (($345) + ($354<<1)|0);
       $356 = HEAP16[$355>>1]|0;
       $357 = $356&65535;
       $358 = (936 + ($357<<1)|0);
       $359 = HEAP16[$358>>1]|0;
       HEAP16[$355>>1] = $359;
       $360 = (($col$1) + 1)|0;
       $col$1 = $360;
      }
      $361 = (($row$2) + 1)|0;
      $row$2 = $361;
     }
     $i$10110$1 = 0;
     while(1) {
      $883 = (((($lc) + ($qr$2112<<6)|0) + ($i$10110$1<<1)|0) + 32|0);
      $884 = HEAP16[$883>>1]|0;
      $885 = $884&65535;
      $886 = (($i$10110$1) + 1)|0;
      $887 = (($cx) + ($886<<2)|0);
      HEAP32[$887>>2] = $885;
      $888 = (($ref) + ($i$10110$1<<1)|0);
      $889 = HEAP16[$888>>1]|0;
      $890 = $889&65535;
      $891 = (($cf) + ($886<<2)|0);
      HEAP32[$891>>2] = $890;
      $exitcond156$1 = ($886|0)==(16);
      if ($exitcond156$1) {
       break;
      } else {
       $i$10110$1 = $886;
      }
     }
     HEAP32[$cf>>2] = 0;
     HEAP32[$cx>>2] = 0;
     $892 = ((($lc) + ($qr$2112<<6)|0) + 62|0);
     $893 = HEAP16[$892>>1]|0;
     $894 = $893&65535;
     $895 = (($327>>>0) / ($894>>>0))&-1;
     HEAP32[$23>>2] = $895;
     HEAP32[$24>>2] = $895;
     HEAP32[$25>>2] = 65535;
     HEAP32[$26>>2] = 65535;
     _cubic_spline($cx,$cf,19);
     $896 = HEAP32[((133984 + 24|0))>>2]|0;
     $897 = $328 ? $896 : 0;
     $898 = HEAP32[((133984 + 16|0))>>2]|0;
     $899 = HEAP32[132328>>2]|0;
     $row$2$1 = $897;
     while(1) {
      if ($328) {
       $900 = HEAP16[133064>>1]|0;
       $901 = $900&65535;
       $903 = $901;
      } else {
       $903 = $896;
      }
      $902 = ($row$2$1>>>0)<($903>>>0);
      if ($902) {
       $col$1$1 = $898;
      } else {
       break;
      }
      while(1) {
       $905 = HEAP16[132336>>1]|0;
       $906 = $905&65535;
       $907 = ($col$1$1>>>0)<($906>>>0);
       if (!($907)) {
        break;
       }
       $909 = HEAP16[132336>>1]|0;
       $910 = $909&65535;
       $911 = Math_imul($910, $row$2$1)|0;
       $912 = (($911) + ($col$1$1))|0;
       $913 = (($899) + ($912<<1)|0);
       $914 = HEAP16[$913>>1]|0;
       $915 = $914&65535;
       $916 = (936 + ($915<<1)|0);
       $917 = HEAP16[$916>>1]|0;
       HEAP16[$913>>1] = $917;
       $918 = (($col$1$1) + 1)|0;
       $col$1$1 = $918;
      }
      $908 = (($row$2$1) + 1)|0;
      $row$2$1 = $908;
     }
     $904 = (($qr$2112) + 1)|0;
     $exitcond158 = ($904|0)==(2);
     if ($exitcond158) {
      break;
     } else {
      $qr$2112 = $904;
     }
    }
    $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = 1;$qmult_applied$1 = $qmult_applied$0127;
   }
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $74 = HEAP16[133064>>1]|0;
   $75 = ($74<<16>>16)==(0);
   if ($75) {
    $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
   } else {
    $76 = $32 & 1;
    $77 = HEAP32[((133984 + 16|0))>>2]|0;
    $78 = (0 - ($76))|0;
    $79 = $77 & $78;
    $80 = HEAP32[132328>>2]|0;
    $row$099 = 0;
    while(1) {
     $128 = HEAP16[132336>>1]|0;
     $129 = $128&65535;
     $130 = ($79>>>0)<($129>>>0);
     if ($130) {
      $132 = $129;$col$095 = $79;
      while(1) {
       $131 = Math_imul($132, $row$099)|0;
       $133 = (($131) + ($col$095))|0;
       $134 = (($80) + ($133<<1)|0);
       $135 = HEAP16[$134>>1]|0;
       $136 = $135&65535;
       $137 = (936 + ($136<<1)|0);
       $138 = HEAP16[$137>>1]|0;
       HEAP16[$134>>1] = $138;
       $139 = (($col$095) + 1)|0;
       $140 = HEAP16[132336>>1]|0;
       $141 = $140&65535;
       $142 = ($139>>>0)<($141>>>0);
       if ($142) {
        $132 = $141;$col$095 = $139;
       } else {
        break;
       }
      }
     }
     $143 = (($row$099) + 1)|0;
     $144 = HEAP16[133064>>1]|0;
     $145 = $144&65535;
     $146 = ($143>>>0)<($145>>>0);
     if ($146) {
      $row$099 = $143;
     } else {
      $mindiff$1 = $mindiff$0125;$off_412$1 = $off_412$0126;$qlin_applied$1 = $qlin_applied$0128;$qmult_applied$1 = $qmult_applied$0127;
      break;
     }
    }
   }
  }
  $524 = HEAP32[864>>2]|0;
  (_fseek(($524|0),($36|0),0)|0);
  $525 = ($31|0)==(0);
  if ($525) {
   $off_412$1$lcssa = $off_412$1;
   break;
  } else {
   $$in = $31;$mindiff$0125 = $mindiff$1;$off_412$0126 = $off_412$1;$qlin_applied$0128 = $qlin_applied$1;$qmult_applied$0127 = $qmult_applied$1;
  }
 }
 $526 = ($off_412$1$lcssa|0)==(0);
 if ($526) {
  STACKTOP = sp;return;
 }
 $533 = HEAP32[864>>2]|0;
 (_fseek(($533|0),($off_412$1$lcssa|0),0)|0);
 $534 = (_get4()|0);
 $535 = $534 & 32767;
 HEAP32[$head>>2] = $535;
 $536 = (_get4()|0);
 $537 = $536 & 32767;
 $538 = (($head) + 4|0);
 HEAP32[$538>>2] = $537;
 $539 = (_get4()|0);
 $540 = $539 & 32767;
 $541 = (($head) + 8|0);
 HEAP32[$541>>2] = $540;
 $542 = (_get4()|0);
 $543 = $542 & 32767;
 $544 = (($head) + 12|0);
 HEAP32[$544>>2] = $543;
 $545 = (_get4()|0);
 $546 = $545 & 32767;
 $547 = (($head) + 16|0);
 HEAP32[$547>>2] = $546;
 $548 = (_get4()|0);
 $549 = $548 & 32767;
 $550 = (($head) + 20|0);
 HEAP32[$550>>2] = $549;
 $551 = (_get4()|0);
 $552 = $551 & 32767;
 $553 = (($head) + 24|0);
 HEAP32[$553>>2] = $552;
 $554 = (_get4()|0);
 $555 = $554 & 32767;
 $556 = (($head) + 28|0);
 HEAP32[$556>>2] = $555;
 $557 = (_get4()|0);
 $558 = $557 & 32767;
 $559 = (($head) + 32|0);
 HEAP32[$559>>2] = $558;
 $560 = (($head) + 4|0);
 $561 = HEAP32[$560>>2]|0;
 $562 = (($head) + 12|0);
 $563 = HEAP32[$562>>2]|0;
 $564 = Math_imul($563, $561)|0;
 $565 = (($head) + 8|0);
 $566 = HEAP32[$565>>2]|0;
 $567 = (($head) + 16|0);
 $568 = HEAP32[$567>>2]|0;
 $569 = Math_imul($568, $566)|0;
 $570 = (($569) + ($564))|0;
 $571 = (_calloc($570,6)|0);
 HEAP32[$yval>>2] = $571;
 _merror($571,134040);
 $572 = HEAP32[$yval>>2]|0;
 $573 = HEAP32[$560>>2]|0;
 $574 = HEAP32[$562>>2]|0;
 $575 = Math_imul($574, $573)|0;
 $576 = (($572) + ($575<<2)|0);
 $577 = (($yval) + 4|0);
 HEAP32[$577>>2] = $576;
 $578 = HEAP32[$565>>2]|0;
 $579 = HEAP32[$567>>2]|0;
 $580 = Math_imul($579, $578)|0;
 $$sum = (($580) + ($575))|0;
 $581 = (($572) + ($$sum<<2)|0);
 HEAP32[$xval>>2] = $581;
 $582 = HEAP32[$560>>2]|0;
 $583 = HEAP32[$562>>2]|0;
 $584 = Math_imul($583, $582)|0;
 $585 = (($581) + ($584<<1)|0);
 $586 = (($xval) + 4|0);
 HEAP32[$586>>2] = $585;
 (_get2()|0);
 $587 = (($head) + 4|0);
 $588 = HEAP32[$587>>2]|0;
 $589 = (($head) + 12|0);
 $590 = HEAP32[$589>>2]|0;
 $591 = Math_imul($590, $588)|0;
 $592 = ($591|0)>(0);
 if ($592) {
  $593 = HEAP32[$yval>>2]|0;
  $594 = HEAP32[$587>>2]|0;
  $595 = HEAP32[$589>>2]|0;
  $596 = Math_imul($595, $594)|0;
  $j$169 = 0;
  while(1) {
   $597 = (+_getreal(11));
   $598 = $597;
   $599 = (($593) + ($j$169<<2)|0);
   HEAPF32[$599>>2] = $598;
   $600 = (($j$169) + 1)|0;
   $601 = ($600|0)<($596|0);
   if ($601) {
    $j$169 = $600;
   } else {
    break;
   }
  }
 }
 $527 = (($head) + 8|0);
 $528 = HEAP32[$527>>2]|0;
 $529 = (($head) + 16|0);
 $530 = HEAP32[$529>>2]|0;
 $531 = Math_imul($530, $528)|0;
 $532 = ($531|0)>(0);
 if ($532) {
  $756 = (($yval) + 4|0);
  $757 = HEAP32[$756>>2]|0;
  $758 = HEAP32[$527>>2]|0;
  $759 = HEAP32[$529>>2]|0;
  $760 = Math_imul($759, $758)|0;
  $j$169$1 = 0;
  while(1) {
   $761 = (+_getreal(11));
   $762 = $761;
   $763 = (($757) + ($j$169$1<<2)|0);
   HEAPF32[$763>>2] = $762;
   $764 = (($j$169$1) + 1)|0;
   $765 = ($764|0)<($760|0);
   if ($765) {
    $j$169$1 = $764;
   } else {
    break;
   }
  }
 }
 $608 = (($head) + 4|0);
 $609 = HEAP32[$608>>2]|0;
 $610 = (($head) + 12|0);
 $611 = HEAP32[$610>>2]|0;
 $612 = Math_imul($611, $609)|0;
 $613 = ($612|0)>(0);
 if ($613) {
  $614 = HEAP32[$xval>>2]|0;
  $615 = HEAP32[$608>>2]|0;
  $616 = HEAP32[$610>>2]|0;
  $617 = Math_imul($616, $615)|0;
  $j$265 = 0;
  while(1) {
   $625 = (_get2()|0);
   $626 = (($614) + ($j$265<<1)|0);
   HEAP16[$626>>1] = $625;
   $627 = (($j$265) + 1)|0;
   $628 = ($627|0)<($617|0);
   if ($628) {
    $j$265 = $627;
   } else {
    break;
   }
  }
 }
 $602 = (($head) + 8|0);
 $603 = HEAP32[$602>>2]|0;
 $604 = (($head) + 16|0);
 $605 = HEAP32[$604>>2]|0;
 $606 = Math_imul($605, $603)|0;
 $607 = ($606|0)>(0);
 if ($607) {
  $745 = (($xval) + 4|0);
  $746 = HEAP32[$745>>2]|0;
  $747 = HEAP32[$602>>2]|0;
  $748 = HEAP32[$604>>2]|0;
  $749 = Math_imul($748, $747)|0;
  $j$265$1 = 0;
  while(1) {
   $750 = (_get2()|0);
   $751 = (($746) + ($j$265$1<<1)|0);
   HEAP16[$751>>1] = $750;
   $752 = (($j$265$1) + 1)|0;
   $753 = ($752|0)<($749|0);
   if ($753) {
    $j$265$1 = $752;
   } else {
    break;
   }
  }
 }
 $754 = HEAP16[133064>>1]|0;
 $755 = ($754<<16>>16)==(0);
 if (!($755)) {
  $618 = HEAP32[$562>>2]|0;
  $619 = (+($618|0));
  $620 = HEAP32[132328>>2]|0;
  $621 = HEAP32[$560>>2]|0;
  $622 = ($621|0)>(0);
  $623 = HEAP32[$yval>>2]|0;
  $624 = HEAP32[$xval>>2]|0;
  $row$562 = 0;
  while(1) {
   $629 = HEAP16[132336>>1]|0;
   $630 = ($629<<16>>16)==(0);
   if (!($630)) {
    $631 = $629&65535;
    $632 = (+($row$562>>>0));
    $636 = $631;$col$459 = 0;
    while(1) {
     $633 = (+($col$459>>>0));
     $634 = $633 * $619;
     $635 = (+($636|0));
     $637 = $634 / $635;
     $638 = (~~(($637)));
     $639 = (+($638|0));
     $640 = Math_imul($636, $row$562)|0;
     $641 = (($640) + ($col$459))|0;
     $642 = (($620) + ($641<<1)|0);
     $643 = HEAP16[$642>>1]|0;
     $644 = $643&65535;
     $645 = (+($644|0));
     $646 = $645 * 0.5;
     $647 = $646;
     if ($622) {
      $j$352 = 0;
      while(1) {
       $648 = Math_imul($621, $638)|0;
       $649 = (($648) + ($j$352))|0;
       $650 = (($624) + ($649<<1)|0);
       $651 = HEAP16[$650>>1]|0;
       $652 = $651&65535;
       $653 = (+($652|0));
       $654 = $647 < $653;
       if ($654) {
        $$lcssa = $649;$j$3$lcssa = $j$352;
        break;
       }
       $655 = (($j$352) + 1)|0;
       $656 = ($655|0)<($621|0);
       if ($656) {
        $j$352 = $655;
       } else {
        $$lcssa = $649;$j$3$lcssa = $655;
        break;
       }
      }
      $657 = ($j$3$lcssa|0)==(0);
      $658 = ($j$3$lcssa|0)==($621|0);
      $or$cond15 = $657 | $658;
      if ($or$cond15) {
       $675 = 0.0;$k$1176 = $$lcssa;
      } else {
       $659 = (($624) + ($$lcssa<<1)|0);
       $660 = HEAP16[$659>>1]|0;
       $661 = $660&65535;
       $662 = (+($661|0));
       $663 = $662 - $647;
       $664 = (($$lcssa) + -1)|0;
       $665 = (($624) + ($664<<1)|0);
       $666 = HEAP16[$665>>1]|0;
       $667 = $666&65535;
       $668 = (($661) - ($667))|0;
       $669 = (+($668|0));
       $670 = $663 / $669;
       $675 = $670;$k$1176 = $$lcssa;
      }
     } else {
      $675 = 0.0;$k$1176 = 0;
     }
     $671 = (($k$1176) + -1)|0;
     $672 = (($623) + ($671<<2)|0);
     $673 = +HEAPF32[$672>>2];
     $674 = $675 * $673;
     $676 = (($623) + ($k$1176<<2)|0);
     $677 = +HEAPF32[$676>>2];
     $678 = 1.0 - $675;
     $679 = $678 * $677;
     $680 = $674 + $679;
     HEAPF32[$mult>>2] = $680;
     $681 = (($638) + 1)|0;
     if ($622) {
      $j$352$1 = 0;
      while(1) {
       $687 = Math_imul($621, $681)|0;
       $688 = (($687) + ($j$352$1))|0;
       $689 = (($624) + ($688<<1)|0);
       $690 = HEAP16[$689>>1]|0;
       $691 = $690&65535;
       $692 = (+($691|0));
       $693 = $647 < $692;
       if ($693) {
        $$lcssa190 = $688;$j$3$lcssa$1 = $j$352$1;
        break;
       }
       $694 = (($j$352$1) + 1)|0;
       $695 = ($694|0)<($621|0);
       if ($695) {
        $j$352$1 = $694;
       } else {
        $$lcssa190 = $688;$j$3$lcssa$1 = $694;
        break;
       }
      }
      $696 = ($j$3$lcssa$1|0)==(0);
      $697 = ($j$3$lcssa$1|0)==($621|0);
      $or$cond15$1 = $696 | $697;
      if ($or$cond15$1) {
       $714 = 0.0;$k$1$1178 = $$lcssa190;
      } else {
       $698 = (($624) + ($$lcssa190<<1)|0);
       $699 = HEAP16[$698>>1]|0;
       $700 = $699&65535;
       $701 = (+($700|0));
       $702 = $701 - $647;
       $703 = (($$lcssa190) + -1)|0;
       $704 = (($624) + ($703<<1)|0);
       $705 = HEAP16[$704>>1]|0;
       $706 = $705&65535;
       $707 = (($700) - ($706))|0;
       $708 = (+($707|0));
       $709 = $702 / $708;
       $714 = $709;$k$1$1178 = $$lcssa190;
      }
     } else {
      $714 = 0.0;$k$1$1178 = 0;
     }
     $710 = (($k$1$1178) + -1)|0;
     $711 = (($623) + ($710<<2)|0);
     $712 = +HEAPF32[$711>>2];
     $713 = $714 * $712;
     $715 = (($623) + ($k$1$1178<<2)|0);
     $716 = +HEAPF32[$715>>2];
     $717 = 1.0 - $714;
     $718 = $717 * $716;
     $719 = $713 + $718;
     $720 = (($mult) + 4|0);
     HEAPF32[$720>>2] = $719;
     $721 = $637 - $639;
     $722 = +HEAPF32[$mult>>2];
     $723 = 1.0 - $721;
     $724 = $723 * $722;
     $725 = $721 * $719;
     $726 = $724 + $725;
     $727 = $632 * $726;
     $728 = $647 + $727;
     $729 = $728 * 2.0;
     $730 = (~~(($729)));
     $731 = ($730|0)<(65535);
     $732 = $731 ? $730 : 65535;
     $733 = ($732|0)<(0);
     $734 = $732&65535;
     $735 = $733 ? 0 : $734;
     $736 = HEAP16[132336>>1]|0;
     $737 = $736&65535;
     $738 = Math_imul($737, $row$562)|0;
     $739 = (($738) + ($col$459))|0;
     $740 = (($620) + ($739<<1)|0);
     HEAP16[$740>>1] = $735;
     $741 = (($col$459) + 1)|0;
     $742 = HEAP16[132336>>1]|0;
     $743 = $742&65535;
     $744 = ($741>>>0)<($743>>>0);
     if ($744) {
      $636 = $743;$col$459 = $741;
     } else {
      break;
     }
    }
   }
   $682 = (($row$562) + 1)|0;
   $683 = HEAP16[133064>>1]|0;
   $684 = $683&65535;
   $685 = ($682>>>0)<($684>>>0);
   if ($685) {
    $row$562 = $682;
   } else {
    break;
   }
  }
 }
 $686 = HEAP32[$yval>>2]|0;
 _free($686);
 STACKTOP = sp;return;
}
function _phase_one_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[864>>2]|0;
 $1 = HEAP32[((133984 + 4|0))>>2]|0;
 (_fseek(($0|0),($1|0),0)|0);
 $2 = (_get2()|0);
 $3 = (_get2()|0);
 $4 = HEAP32[133984>>2]|0;
 $5 = ($4|0)==(1);
 $6 = HEAP32[864>>2]|0;
 $7 = HEAP32[133280>>2]|0;
 (_fseek(($6|0),($7|0),0)|0);
 $8 = HEAP32[132328>>2]|0;
 $9 = HEAP16[132336>>1]|0;
 $10 = $9&65535;
 $11 = HEAP16[133064>>1]|0;
 $12 = $11&65535;
 $13 = Math_imul($12, $10)|0;
 _read_shorts($8,$13);
 $14 = HEAP32[133984>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  return;
 }
 $16 = HEAP16[132336>>1]|0;
 $17 = $16&65535;
 $18 = HEAP16[133064>>1]|0;
 $19 = $18&65535;
 $20 = Math_imul($19, $17)|0;
 $21 = ($20|0)==(0);
 if ($21) {
  return;
 }
 $22 = HEAP32[132328>>2]|0;
 $23 = $5 ? 21845 : 4948;
 $24 = $23 ^ -1;
 $i$01 = 0;
 while(1) {
  $25 = (($22) + ($i$01<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 ^ $2;
  $28 = $27&65535;
  $29 = $i$01 | 1;
  $30 = (($22) + ($29<<1)|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 ^ $3;
  $33 = $32&65535;
  $34 = $28 & $23;
  $35 = $33 & $24;
  $36 = $35 | $34;
  $37 = $36&65535;
  HEAP16[$25>>1] = $37;
  $38 = $33 & $23;
  $39 = $28 & $24;
  $40 = $38 | $39;
  $41 = $40&65535;
  $42 = (($22) + ($29<<1)|0);
  HEAP16[$42>>1] = $41;
  $43 = (($i$01) + 2)|0;
  $44 = HEAP16[132336>>1]|0;
  $45 = $44&65535;
  $46 = HEAP16[133064>>1]|0;
  $47 = $46&65535;
  $48 = Math_imul($47, $45)|0;
  $49 = ($43|0)<($48|0);
  if ($49) {
   $i$01 = $43;
  } else {
   break;
  }
 }
 return;
}
function _ph1_bithuff($nbits,$huff) {
 $nbits = $nbits|0;
 $huff = $huff|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($nbits|0) == 0)) {
  $$0 = 0;
  return ($$0|0);
 } else if ((($nbits|0) == -1)) {
  HEAP32[134072>>2] = 0;
  $0 = 134064;
  $1 = $0;
  HEAP32[$1>>2] = 0;
  $2 = (($0) + 4)|0;
  $3 = $2;
  HEAP32[$3>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  $4 = HEAP32[134072>>2]|0;
  $5 = ($4|0)<($nbits|0);
  if ($5) {
   $6 = 134064;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (_get4()|0);
   $13 = 134064;
   $14 = $13;
   HEAP32[$14>>2] = $12;
   $15 = (($13) + 4)|0;
   $16 = $15;
   HEAP32[$16>>2] = $8;
   $17 = HEAP32[134072>>2]|0;
   $18 = (($17) + 32)|0;
   HEAP32[134072>>2] = $18;
  }
  $19 = 134064;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + 4)|0;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[134072>>2]|0;
  $26 = (64 - ($25))|0;
  $27 = (_bitshift64Shl(($21|0),($24|0),($26|0))|0);
  $28 = tempRet0;
  $29 = (64 - ($nbits))|0;
  $30 = (_bitshift64Lshr(($27|0),($28|0),($29|0))|0);
  $31 = tempRet0;
  $32 = ($huff|0)==(0|0);
  if ($32) {
   $41 = (($25) - ($nbits))|0;
   HEAP32[134072>>2] = $41;
   $$0 = $30;
   return ($$0|0);
  } else {
   $33 = (($huff) + ($30<<1)|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = $34&65535;
   $36 = $35 >>> 8;
   $37 = (($25) - ($36))|0;
   HEAP32[134072>>2] = $37;
   $38 = HEAP16[$33>>1]|0;
   $39 = $38&65535;
   $40 = $39 & 255;
   $$0 = $40;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _phase_one_load_raw_c() {
 var $$lcssa = 0, $$lcssa36 = 0, $$neg = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$012 = 0, $col$113 = 0, $exitcond27 = 0, $i$019 = 0, $j$010$lcssa$1$ph = 0, $j$010$lcssa$ph = 0;
 var $j$09 = 0, $j$09$1 = 0, $len = 0, $pred = 0, $row$020 = 0, $row$115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp + 8|0;
 $pred = sp;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = ($1*3)|0;
 $3 = HEAP16[133064>>1]|0;
 $4 = $3&65535;
 $5 = $4 << 2;
 $6 = (($5) + ($2))|0;
 $7 = (_calloc($6,2)|0);
 _merror($7,134120);
 $8 = HEAP16[132336>>1]|0;
 $9 = $8&65535;
 $10 = (($7) + ($9<<1)|0);
 $11 = HEAP32[864>>2]|0;
 $12 = HEAP32[134144>>2]|0;
 (_fseek(($11|0),($12|0),0)|0);
 $13 = HEAP16[133064>>1]|0;
 $14 = $13&65535;
 $15 = ($13<<16>>16)==(0);
 if ($15) {
  $$lcssa = $14;
 } else {
  $row$020 = 0;
  while(1) {
   $16 = (_get4()|0);
   $17 = (($10) + ($row$020<<2)|0);
   HEAP32[$17>>2] = $16;
   $18 = (($row$020) + 1)|0;
   $19 = HEAP16[133064>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)<($20|0);
   if ($21) {
    $row$020 = $18;
   } else {
    $$lcssa = $20;
    break;
   }
  }
 }
 $22 = HEAP32[864>>2]|0;
 $23 = HEAP32[((133984 + 20|0))>>2]|0;
 (_fseek(($22|0),($23|0),0)|0);
 $24 = HEAP32[((133984 + 20|0))>>2]|0;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = (($10) + ($$lcssa<<2)|0);
  $27 = HEAP16[133064>>1]|0;
  $28 = $27&65535;
  $29 = $28 << 1;
  _read_shorts($26,$29);
 }
 $30 = HEAP16[133064>>1]|0;
 $31 = $30&65535;
 $$sum = (($31) + ($$lcssa))|0;
 $32 = HEAP32[864>>2]|0;
 $33 = HEAP32[((133984 + 28|0))>>2]|0;
 (_fseek(($32|0),($33|0),0)|0);
 $34 = HEAP32[((133984 + 28|0))>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  $i$019 = 0;
 } else {
  $36 = (($10) + ($$sum<<2)|0);
  $37 = HEAP16[132336>>1]|0;
  $38 = $37&65535;
  $39 = $38 << 1;
  _read_shorts($36,$39);
  $i$019 = 0;
 }
 while(1) {
  $44 = Math_imul($i$019, $i$019)|0;
  $45 = (+($44|0));
  $46 = $45 / 3.9689999999999999;
  $47 = $46 + 0.5;
  $48 = (~~(($47))&65535);
  $49 = (936 + ($i$019<<1)|0);
  HEAP16[$49>>1] = $48;
  $50 = (($i$019) + 1)|0;
  $exitcond27 = ($50|0)==(256);
  if ($exitcond27) {
   break;
  } else {
   $i$019 = $50;
  }
 }
 $40 = HEAP16[133064>>1]|0;
 $41 = ($40<<16>>16)==(0);
 if ($41) {
  _free($7);
  $144 = HEAP32[((133984 + 12|0))>>2]|0;
  $145 = (65532 - ($144))|0;
  HEAP32[132368>>2] = $145;
  STACKTOP = sp;return;
 }
 $42 = (($pred) + 4|0);
 $43 = (($len) + 4|0);
 $row$115 = 0;
 while(1) {
  $51 = HEAP32[864>>2]|0;
  $52 = HEAP32[133280>>2]|0;
  $53 = (($10) + ($row$115<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($52))|0;
  (_fseek(($51|0),($55|0),0)|0);
  (_ph1_bithuff(-1,0)|0);
  HEAP32[$42>>2] = 0;
  HEAP32[$pred>>2] = 0;
  $56 = HEAP16[132336>>1]|0;
  $57 = ($56<<16>>16)==(0);
  if (!($57)) {
   $58 = $56&65535;
   $69 = $58;$col$012 = 0;
   while(1) {
    $68 = $69 & 65528;
    $70 = ($col$012|0)<($68|0);
    if ($70) {
     $71 = $col$012 & 7;
     $72 = ($71|0)==(0);
     if ($72) {
      $73 = (_ph1_bithuff(1,0)|0);
      $74 = ($73|0)==(0);
      if ($74) {
       $75 = (_ph1_bithuff(1,0)|0);
       $76 = ($75|0)==(0);
       if ($76) {
        $146 = (_ph1_bithuff(1,0)|0);
        $147 = ($146|0)==(0);
        if ($147) {
         $148 = (_ph1_bithuff(1,0)|0);
         $149 = ($148|0)==(0);
         if ($149) {
          $150 = (_ph1_bithuff(1,0)|0);
          $151 = ($150|0)==(0);
          if ($151) {
           $j$09 = 10;
          } else {
           $j$010$lcssa$ph = 8;
           label = 19;
          }
         } else {
          $j$010$lcssa$ph = 6;
          label = 19;
         }
        } else {
         $j$010$lcssa$ph = 4;
         label = 19;
        }
       } else {
        $j$010$lcssa$ph = 2;
        label = 19;
       }
       if ((label|0) == 19) {
        label = 0;
        $j$09 = $j$010$lcssa$ph;
       }
       $77 = (($j$09) + -2)|0;
       $78 = (_ph1_bithuff(1,0)|0);
       $79 = (($77) + ($78))|0;
       $80 = (134080 + ($79<<2)|0);
       $81 = HEAP32[$80>>2]|0;
       HEAP32[$len>>2] = $81;
      }
      $152 = (_ph1_bithuff(1,0)|0);
      $153 = ($152|0)==(0);
      if ($153) {
       $154 = (_ph1_bithuff(1,0)|0);
       $155 = ($154|0)==(0);
       if ($155) {
        $156 = (_ph1_bithuff(1,0)|0);
        $157 = ($156|0)==(0);
        if ($157) {
         $158 = (_ph1_bithuff(1,0)|0);
         $159 = ($158|0)==(0);
         if ($159) {
          $160 = (_ph1_bithuff(1,0)|0);
          $161 = ($160|0)==(0);
          if ($161) {
           $j$09$1 = 10;
          } else {
           $j$010$lcssa$1$ph = 8;
           label = 43;
          }
         } else {
          $j$010$lcssa$1$ph = 6;
          label = 43;
         }
        } else {
         $j$010$lcssa$1$ph = 4;
         label = 43;
        }
       } else {
        $j$010$lcssa$1$ph = 2;
        label = 43;
       }
       if ((label|0) == 43) {
        label = 0;
        $j$09$1 = $j$010$lcssa$1$ph;
       }
       $162 = (($j$09$1) + -2)|0;
       $163 = (_ph1_bithuff(1,0)|0);
       $164 = (($162) + ($163))|0;
       $165 = (134080 + ($164<<2)|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = (($len) + 4|0);
       HEAP32[$167>>2] = $166;
      }
     }
    } else {
     HEAP32[$43>>2] = 14;
     HEAP32[$len>>2] = 14;
    }
    $82 = $col$012 & 1;
    $83 = (($len) + ($82<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==(14);
    if ($85) {
     $86 = (_ph1_bithuff(16,0)|0);
     $87 = (($pred) + ($82<<2)|0);
     HEAP32[$87>>2] = $86;
     $88 = $86&65535;
     $89 = (($7) + ($col$012<<1)|0);
     HEAP16[$89>>1] = $88;
    } else {
     $90 = (_ph1_bithuff($84,0)|0);
     $91 = (($84) + -1)|0;
     $$neg = -1 << $91;
     $92 = (($pred) + ($82<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (($$neg) + 1)|0;
     $95 = (($94) + ($90))|0;
     $96 = (($95) + ($93))|0;
     HEAP32[$92>>2] = $96;
     $97 = $96&65535;
     $98 = (($7) + ($col$012<<1)|0);
     HEAP16[$98>>1] = $97;
    }
    $99 = (($pred) + ($82<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100>>>0)>(65535);
    if ($101) {
     _derror();
    }
    $102 = HEAP32[133984>>2]|0;
    $103 = ($102|0)==(5);
    if ($103) {
     $104 = (($7) + ($col$012<<1)|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = ($105&65535)<(256);
     if ($106) {
      $107 = $105&65535;
      $108 = (936 + ($107<<1)|0);
      $109 = HEAP16[$108>>1]|0;
      HEAP16[$104>>1] = $109;
     }
    }
    $110 = (($col$012) + 1)|0;
    $111 = HEAP16[132336>>1]|0;
    $112 = $111&65535;
    $113 = ($110|0)<($112|0);
    if ($113) {
     $69 = $112;$col$012 = $110;
    } else {
     $$lcssa36 = $111;
     break;
    }
   }
   $59 = ($$lcssa36<<16>>16)==(0);
   if (!($59)) {
    $60 = $$lcssa36&65535;
    $61 = HEAP32[((133984 + 12|0))>>2]|0;
    $62 = HEAP32[((133984 + 16|0))>>2]|0;
    $$sum1 = (($row$115) + ($$lcssa))|0;
    $63 = (($10) + ($$sum1<<2)|0);
    $64 = HEAP32[((133984 + 24|0))>>2]|0;
    $65 = ($row$115|0)>=($64|0);
    $66 = $65&1;
    $67 = HEAP32[132328>>2]|0;
    $133 = $60;$col$113 = 0;
    while(1) {
     $114 = (($7) + ($col$113<<1)|0);
     $115 = HEAP16[$114>>1]|0;
     $116 = $115&65535;
     $117 = $116 << 2;
     $118 = (($117) - ($61))|0;
     $119 = ($col$113|0)>=($62|0);
     $120 = $119&1;
     $121 = (($63) + ($120<<1)|0);
     $122 = HEAP16[$121>>1]|0;
     $123 = $122 << 16 >> 16;
     $124 = (($118) + ($123))|0;
     $$sum2 = (($col$113) + ($$sum))|0;
     $125 = (($10) + ($$sum2<<2)|0);
     $126 = (($125) + ($66<<1)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = $127 << 16 >> 16;
     $129 = (($124) + ($128))|0;
     $130 = ($129|0)>(0);
     if ($130) {
      $131 = $129&65535;
      $132 = Math_imul($133, $row$115)|0;
      $134 = (($132) + ($col$113))|0;
      $135 = (($67) + ($134<<1)|0);
      HEAP16[$135>>1] = $131;
     }
     $136 = (($col$113) + 1)|0;
     $137 = HEAP16[132336>>1]|0;
     $138 = $137&65535;
     $139 = ($136|0)<($138|0);
     if ($139) {
      $133 = $138;$col$113 = $136;
     } else {
      break;
     }
    }
   }
  }
  $140 = (($row$115) + 1)|0;
  $141 = HEAP16[133064>>1]|0;
  $142 = $141&65535;
  $143 = ($140|0)<($142|0);
  if ($143) {
   $row$115 = $140;
  } else {
   break;
  }
 }
 _free($7);
 $144 = HEAP32[((133984 + 12|0))>>2]|0;
 $145 = (65532 - ($144))|0;
 HEAP32[132368>>2] = $145;
 STACKTOP = sp;return;
}
function _hasselblad_load_raw() {
 var $$mask = 0, $$neg = 0, $$neg$1 = 0, $$neg5 = 0, $$neg5$1 = 0, $$neg6 = 0, $$op = 0, $$pr = 0, $$pr$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $back = 0, $c$417 = 0, $col$021 = 0, $cond = 0, $diff = 0, $exitcond29 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $jh = 0, $len = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond33 = 0;
 var $pred$1 = 0, $pred$2$lcssa = 0, $pred$218 = 0, $row$023 = 0, $s$016 = 0, $s$119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $jh = sp + 80|0;
 $back = sp + 56|0;
 $len = sp + 48|0;
 $diff = sp;
 $0 = (_ljpeg_start($jh,0)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 HEAP16[928>>1] = 18761;
 (_ph1_bithuff(-1,0)|0);
 $2 = HEAP16[132336>>1]|0;
 $3 = $2&65535;
 $4 = (_calloc($3,12)|0);
 $5 = (($back) + 16|0);
 HEAP32[$5>>2] = $4;
 _merror($4,134152);
 $6 = HEAP16[132336>>1]|0;
 $7 = $6&65535;
 $8 = HEAP32[$5>>2]|0;
 HEAP32[$back>>2] = $8;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($7<<2)|0);
 $11 = (($back) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$5>>2]|0;
 $13 = $7 << 1;
 $14 = (($12) + ($13<<2)|0);
 $15 = (($back) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[133216>>2]|0;
 $17 = ($16>>>0)>(1);
 $18 = $17&1;
 $19 = HEAP16[((134176 + 12|0))>>1]|0;
 $20 = $19&65535;
 $21 = $20 >>> $18;
 $22 = $21&65535;
 HEAP16[((134176 + 12|0))>>1] = $22;
 $23 = HEAP32[8>>2]|0;
 $24 = HEAP32[133216>>2]|0;
 $25 = ($23>>>0)<($24>>>0);
 $26 = $25 ? $23 : $24;
 $27 = ($26|0)==(0);
 $$op = (($26) + -1)|0;
 $28 = $27 ? 0 : $$op;
 $29 = HEAP16[133064>>1]|0;
 $30 = ($29<<16>>16)==(0);
 if (!($30)) {
  $31 = (($back) + 8|0);
  $32 = (($jh) + 20|0);
  $33 = (($jh) + 52|0);
  $row$023 = 0;
  while(1) {
   $40 = HEAP32[$back>>2]|0;
   $41 = (($back) + 12|0);
   HEAP32[$41>>2] = $40;
   $42 = (($back) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$back>>2] = $43;
   $44 = (($back) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($back) + 4|0);
   HEAP32[$46>>2] = $45;
   $47 = (($back) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($back) + 8|0);
   HEAP32[$49>>2] = $48;
   $50 = HEAP16[132336>>1]|0;
   $51 = ($50<<16>>16)==(0);
   if (!($51)) {
    $34 = HEAP32[$31>>2]|0;
    $35 = ($row$023|0)>(1);
    $36 = HEAP32[$back>>2]|0;
    $37 = $row$023 & 1;
    $38 = (0 - ($37))|0;
    $39 = $38 & 3;
    $col$021 = 0;$indvars$iv = 2;
    while(1) {
     $56 = HEAP32[133216>>2]|0;
     $$mask = $56 & 2147483647;
     $57 = ($$mask|0)==(0);
     if (!($57)) {
      $s$016 = 0;
      while(1) {
       $63 = HEAP32[$33>>2]|0;
       $64 = HEAP16[$63>>1]|0;
       $65 = $64&65535;
       $66 = (($63) + 2|0);
       $67 = (_ph1_bithuff($65,$66)|0);
       HEAP32[$len>>2] = $67;
       $68 = HEAP32[$33>>2]|0;
       $69 = HEAP16[$68>>1]|0;
       $70 = $69&65535;
       $71 = (($68) + 2|0);
       $72 = (_ph1_bithuff($70,$71)|0);
       $73 = (($len) + 4|0);
       HEAP32[$73>>2] = $72;
       $74 = HEAP32[$len>>2]|0;
       $75 = (_ph1_bithuff($74,0)|0);
       $76 = (($diff) + ($s$016<<2)|0);
       HEAP32[$76>>2] = $75;
       $77 = HEAP32[$len>>2]|0;
       $78 = (($77) + -1)|0;
       $79 = 1 << $78;
       $80 = $79 & $75;
       $81 = ($80|0)==(0);
       if ($81) {
        $$neg = -1 << $77;
        $$neg5 = (($75) + 1)|0;
        $82 = (($$neg5) + ($$neg))|0;
        HEAP32[$76>>2] = $82;
        $83 = $82;
       } else {
        $$pr = HEAP32[$76>>2]|0;
        $83 = $$pr;
       }
       $84 = ($83|0)==(65535);
       if ($84) {
        HEAP32[$76>>2] = -32768;
       }
       $85 = (($len) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (_ph1_bithuff($86,0)|0);
       $88 = $s$016 | 1;
       $89 = (($diff) + ($88<<2)|0);
       HEAP32[$89>>2] = $87;
       $90 = HEAP32[$85>>2]|0;
       $91 = (($90) + -1)|0;
       $92 = 1 << $91;
       $93 = $92 & $87;
       $94 = ($93|0)==(0);
       if ($94) {
        $$neg$1 = -1 << $90;
        $$neg5$1 = (($87) + 1)|0;
        $170 = (($$neg5$1) + ($$neg$1))|0;
        HEAP32[$89>>2] = $170;
        $171 = $170;
       } else {
        $$pr$1 = HEAP32[$89>>2]|0;
        $171 = $$pr$1;
       }
       $172 = ($171|0)==(65535);
       if ($172) {
        HEAP32[$89>>2] = -32768;
       }
       $173 = (($s$016) + 2)|0;
       $174 = HEAP32[133216>>2]|0;
       $175 = $174 << 1;
       $176 = ($173>>>0)<($175>>>0);
       if ($176) {
        $s$016 = $173;
       } else {
        break;
       }
      }
     }
     $58 = ($col$021|0)!=(0);
     $or$cond = $35 & $58;
     $59 = HEAP32[132328>>2]|0;
     $60 = ($59|0)!=(0|0);
     $61 = HEAP32[132112>>2]|0;
     $62 = ($61|0)==(0|0);
     $s$119 = $col$021;
     while(1) {
      $95 = HEAP32[133096>>2]|0;
      $96 = (($95) + 32768)|0;
      if ($58) {
       $97 = (($s$119) + -2)|0;
       $98 = (($34) + ($97<<2)|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = HEAP32[$32>>2]|0;
       $cond = ($100|0)==(11);
       $or$cond33 = $or$cond & $cond;
       if ($or$cond33) {
        $101 = (($36) + ($s$119<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = (($102|0) / 2)&-1;
        $104 = (($s$119) + -2)|0;
        $105 = (($36) + ($104<<2)|0);
        $106 = HEAP32[$105>>2]|0;
        $$neg6 = (($106|0) / -2)&-1;
        $107 = (($103) + ($99))|0;
        $108 = (($107) + ($$neg6))|0;
        $pred$1 = $108;
       } else {
        $pred$1 = $99;
       }
      } else {
       $pred$1 = $96;
      }
      $109 = (($s$119) + ($col$021))|0;
      $110 = $109 & 1;
      $111 = $110 ^ $39;
      $112 = HEAP32[133216>>2]|0;
      $113 = ($112|0)==(0);
      if ($113) {
       $pred$2$lcssa = $pred$1;
      } else {
       $114 = $s$119 & 1;
       $115 = (0 - ($114))|0;
       $116 = HEAP32[133216>>2]|0;
       $118 = $112;$c$417 = 0;$pred$218 = $pred$1;
       while(1) {
        $117 = $118 & $115;
        $119 = (($117) + ($c$417))|0;
        $120 = (($diff) + ($119<<2)|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (($121) + ($pred$218))|0;
        $123 = $122 >> $18;
        $124 = $123 & 65535;
        $125 = ($c$417|0)==($28|0);
        $or$cond2 = $125 & $60;
        if ($or$cond2) {
         $126 = $123&65535;
         $127 = HEAP16[132336>>1]|0;
         $128 = $127&65535;
         $129 = Math_imul($128, $row$023)|0;
         $130 = (($129) + ($s$119))|0;
         $131 = (($59) + ($130<<1)|0);
         HEAP16[$131>>1] = $126;
        }
        if (!($62)) {
         $132 = HEAP16[600>>1]|0;
         $133 = $132&65535;
         $134 = (($row$023) - ($133))|0;
         $135 = $c$417 & 1;
         $136 = (($134) + ($135))|0;
         $137 = HEAP16[592>>1]|0;
         $138 = $137&65535;
         $139 = (($col$021) - ($138))|0;
         $140 = $c$417 >>> 1;
         $141 = $140 & 1;
         $142 = (($139) - ($141))|0;
         $143 = HEAP16[132088>>1]|0;
         $144 = $143&65535;
         $145 = Math_imul($136, $144)|0;
         $146 = (($145) + ($142))|0;
         $147 = ((($61) + ($146<<3)|0) + ($111<<1)|0);
         $148 = HEAP16[132080>>1]|0;
         $149 = $148&65535;
         $150 = ($136>>>0)<($149>>>0);
         $151 = ($142>>>0)<($144>>>0);
         $or$cond3 = $150 & $151;
         if ($or$cond3) {
          $152 = ($c$417|0)<(4);
          if ($152) {
           $158 = $124;
          } else {
           $153 = HEAP16[$147>>1]|0;
           $154 = $153&65535;
           $155 = (($154) + ($124))|0;
           $156 = $155 >>> 1;
           $158 = $156;
          }
          $157 = $158&65535;
          HEAP16[$147>>1] = $157;
         }
        }
        $159 = (($c$417) + 1)|0;
        $160 = ($159>>>0)<($116>>>0);
        if ($160) {
         $118 = $116;$c$417 = $159;$pred$218 = $122;
        } else {
         $pred$2$lcssa = $122;
         break;
        }
       }
      }
      $161 = (($34) + ($s$119<<2)|0);
      HEAP32[$161>>2] = $pred$2$lcssa;
      $162 = (($s$119) + 1)|0;
      $exitcond29 = ($162|0)==($indvars$iv|0);
      if ($exitcond29) {
       break;
      } else {
       $s$119 = $162;
      }
     }
     $52 = (($col$021) + 2)|0;
     $53 = HEAP16[132336>>1]|0;
     $54 = $53&65535;
     $55 = ($52|0)<($54|0);
     $indvars$iv$next = (($indvars$iv) + 2)|0;
     if ($55) {
      $col$021 = $52;$indvars$iv = $indvars$iv$next;
     } else {
      break;
     }
    }
   }
   $163 = (($row$023) + 1)|0;
   $164 = HEAP16[133064>>1]|0;
   $165 = $164&65535;
   $166 = ($163|0)<($165|0);
   if ($166) {
    $row$023 = $163;
   } else {
    break;
   }
  }
 }
 $167 = HEAP32[$5>>2]|0;
 _free($167);
 _ljpeg_end($jh);
 $168 = HEAP32[132112>>2]|0;
 $169 = ($168|0)==(0|0);
 if ($169) {
  STACKTOP = sp;return;
 }
 HEAP32[142384>>2] = 1;
 STACKTOP = sp;return;
}
function _leaf_hdr_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $c$012 = 0, $col$04 = 0, $or$cond = 0, $pixel$1$lcssa = 0, $pixel$1$ph = 0, $pixel$114 = 0, $pixel$2$lcssa = 0, $pixel$28 = 0, $pixel$3 = 0, $pixel$4 = 0, $r$06 = 0, $tile$011 = 0, $tile$1$lcssa = 0, $tile$15 = 0, $tile$2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[584>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP16[132336>>1]|0;
  $3 = $2&65535;
  $4 = (_calloc($3,2)|0);
  _merror($4,142392);
  $pixel$1$ph = $4;
 } else {
  $pixel$1$ph = 0;
 }
 $5 = HEAP32[133216>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $pixel$1$lcssa = $pixel$1$ph;
 } else {
  $c$012 = 0;$pixel$114 = $pixel$1$ph;$tile$011 = 0;
  while(1) {
   $7 = HEAP16[133064>>1]|0;
   $8 = ($7<<16>>16)==(0);
   if ($8) {
    $pixel$2$lcssa = $pixel$114;$tile$1$lcssa = $tile$011;
   } else {
    $pixel$28 = $pixel$114;$r$06 = 0;$tile$15 = $tile$011;
    while(1) {
     $9 = HEAP32[133224>>2]|0;
     $10 = (($r$06>>>0) % ($9>>>0))&-1;
     $11 = ($10|0)==(0);
     if ($11) {
      $12 = HEAP32[864>>2]|0;
      $13 = HEAP32[133280>>2]|0;
      $14 = (($tile$15) + 1)|0;
      $15 = $tile$15 << 2;
      $16 = (($13) + ($15))|0;
      (_fseek(($12|0),($16|0),0)|0);
      $17 = HEAP32[864>>2]|0;
      $18 = (_get4()|0);
      (_fseek(($17|0),($18|0),0)|0);
      $tile$2 = $14;
     } else {
      $tile$2 = $tile$15;
     }
     $19 = HEAP32[584>>2]|0;
     $20 = ($19|0)==(0);
     $21 = HEAP32[8>>2]|0;
     $22 = ($c$012|0)==($21|0);
     $or$cond = $20 | $22;
     if ($or$cond) {
      if ($20) {
       $pixel$3 = $pixel$28;
      } else {
       $23 = HEAP32[132328>>2]|0;
       $24 = HEAP16[132336>>1]|0;
       $25 = $24&65535;
       $26 = Math_imul($25, $r$06)|0;
       $27 = (($23) + ($26<<1)|0);
       $pixel$3 = $27;
      }
      $28 = HEAP16[132336>>1]|0;
      $29 = $28&65535;
      _read_shorts($pixel$3,$29);
      $30 = HEAP32[584>>2]|0;
      $31 = ($30|0)==(0);
      if ($31) {
       $32 = HEAP16[600>>1]|0;
       $33 = $32&65535;
       $34 = (($r$06) - ($33))|0;
       $35 = HEAP16[132080>>1]|0;
       $36 = $35&65535;
       $37 = ($34>>>0)<($36>>>0);
       if ($37) {
        $38 = HEAP16[132088>>1]|0;
        $39 = ($38<<16>>16)==(0);
        if ($39) {
         $pixel$4 = $pixel$3;
        } else {
         $40 = $38&65535;
         $41 = HEAP32[132112>>2]|0;
         $48 = $40;$col$04 = 0;
         while(1) {
          $42 = HEAP16[592>>1]|0;
          $43 = $42&65535;
          $44 = (($43) + ($col$04))|0;
          $45 = (($pixel$3) + ($44<<1)|0);
          $46 = HEAP16[$45>>1]|0;
          $47 = Math_imul($48, $34)|0;
          $49 = (($47) + ($col$04))|0;
          $50 = ((($41) + ($49<<3)|0) + ($c$012<<1)|0);
          HEAP16[$50>>1] = $46;
          $51 = (($col$04) + 1)|0;
          $52 = HEAP16[132088>>1]|0;
          $53 = $52&65535;
          $54 = ($51>>>0)<($53>>>0);
          if ($54) {
           $48 = $53;$col$04 = $51;
          } else {
           $pixel$4 = $pixel$3;
           break;
          }
         }
        }
       } else {
        $pixel$4 = $pixel$3;
       }
      } else {
       $pixel$4 = $pixel$3;
      }
     } else {
      $pixel$4 = $pixel$28;
     }
     $55 = (($r$06) + 1)|0;
     $56 = HEAP16[133064>>1]|0;
     $57 = $56&65535;
     $58 = ($55>>>0)<($57>>>0);
     if ($58) {
      $pixel$28 = $pixel$4;$r$06 = $55;$tile$15 = $tile$2;
     } else {
      $pixel$2$lcssa = $pixel$4;$tile$1$lcssa = $tile$2;
      break;
     }
    }
   }
   $59 = (($c$012) + 1)|0;
   $60 = HEAP32[133216>>2]|0;
   $61 = ($59>>>0)<($60>>>0);
   if ($61) {
    $c$012 = $59;$pixel$114 = $pixel$2$lcssa;$tile$011 = $tile$1$lcssa;
   } else {
    $pixel$1$lcssa = $pixel$2$lcssa;
    break;
   }
  }
 }
 $62 = HEAP32[584>>2]|0;
 $63 = ($62|0)==(0);
 if (!($63)) {
  return;
 }
 HEAP32[132368>>2] = 65535;
 HEAP32[132264>>2] = 1;
 _free($pixel$1$lcssa);
 return;
}
function _unpacked_load_raw() {
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits$0 = 0, $col$01 = 0, $row$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[132368>>2]|0;
 $bits$0 = 0;
 while(1) {
  $1 = (($bits$0) + 1)|0;
  $2 = 1 << $1;
  $3 = ($2>>>0)<($0>>>0);
  if ($3) {
   $bits$0 = $1;
  } else {
   $$lcssa = $1;
   break;
  }
 }
 $4 = HEAP32[132328>>2]|0;
 $5 = HEAP16[132336>>1]|0;
 $6 = $5&65535;
 $7 = HEAP16[133064>>1]|0;
 $8 = $7&65535;
 $9 = Math_imul($8, $6)|0;
 _read_shorts($4,$9);
 $10 = HEAP16[133064>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  return;
 } else {
  $row$02 = 0;
 }
 while(1) {
  $12 = HEAP16[132336>>1]|0;
  $13 = ($12<<16>>16)==(0);
  if (!($13)) {
   $14 = $12&65535;
   $17 = $14;$col$01 = 0;
   while(1) {
    $15 = HEAP32[133096>>2]|0;
    $16 = Math_imul($17, $row$02)|0;
    $18 = (($16) + ($col$01))|0;
    $19 = HEAP32[132328>>2]|0;
    $20 = (($19) + ($18<<1)|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $23 = $22 >>> $15;
    $24 = $23&65535;
    HEAP16[$20>>1] = $24;
    $25 = $23 & 65535;
    $26 = $25 >>> $$lcssa;
    $27 = ($26|0)==(0);
    if (!($27)) {
     $28 = HEAP16[600>>1]|0;
     $29 = $28&65535;
     $30 = (($row$02) - ($29))|0;
     $31 = HEAP16[132080>>1]|0;
     $32 = $31&65535;
     $33 = ($30>>>0)<($32>>>0);
     if ($33) {
      $34 = HEAP16[592>>1]|0;
      $35 = $34&65535;
      $36 = (($col$01) - ($35))|0;
      $37 = HEAP16[132088>>1]|0;
      $38 = $37&65535;
      $39 = ($36>>>0)<($38>>>0);
      if ($39) {
       _derror();
      }
     }
    }
    $40 = (($col$01) + 1)|0;
    $41 = HEAP16[132336>>1]|0;
    $42 = $41&65535;
    $43 = ($40|0)<($42|0);
    if ($43) {
     $17 = $42;$col$01 = $40;
    } else {
     break;
    }
   }
  }
  $44 = (($row$02) + 1)|0;
  $45 = HEAP16[133064>>1]|0;
  $46 = $45&65535;
  $47 = ($44|0)<($46|0);
  if ($47) {
   $row$02 = $44;
  } else {
   break;
  }
 }
 return;
}
function _sinar_4shot_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $col$03 = 0, $exitcond = 0, $or$cond = 0, $phitmp = 0, $phitmp1 = 0, $row$04 = 0, $shot$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[132328>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[8>>2]|0;
  $3 = ($2>>>0)<(4);
  $4 = $3 ? $2 : 4;
  $5 = ($4|0)==(0);
  if ($5) {
   $9 = 0;
  } else {
   $phitmp = $4 << 2;
   $phitmp1 = (($phitmp) + -4)|0;
   $9 = $phitmp1;
  }
  $6 = HEAP32[864>>2]|0;
  $7 = HEAP32[133280>>2]|0;
  $8 = (($7) + ($9))|0;
  (_fseek(($6|0),($8|0),0)|0);
  $10 = HEAP32[864>>2]|0;
  $11 = (_get4()|0);
  (_fseek(($10|0),($11|0),0)|0);
  _unpacked_load_raw();
  return;
 }
 $12 = HEAP16[132336>>1]|0;
 $13 = $12&65535;
 $14 = (_calloc($13,2)|0);
 _merror($14,142416);
 $shot$06 = 0;
 while(1) {
  $15 = HEAP32[864>>2]|0;
  $16 = HEAP32[133280>>2]|0;
  $17 = $shot$06 << 2;
  $18 = (($16) + ($17))|0;
  (_fseek(($15|0),($18|0),0)|0);
  $19 = HEAP32[864>>2]|0;
  $20 = (_get4()|0);
  (_fseek(($19|0),($20|0),0)|0);
  $21 = HEAP16[133064>>1]|0;
  $22 = ($21<<16>>16)==(0);
  if (!($22)) {
   $23 = $shot$06 >>> 1;
   $24 = $23 & 1;
   $25 = $shot$06 & 1;
   $row$04 = 0;
   while(1) {
    $26 = HEAP16[132336>>1]|0;
    $27 = $26&65535;
    _read_shorts($14,$27);
    $28 = HEAP16[600>>1]|0;
    $29 = $28&65535;
    $30 = (($row$04) - ($29))|0;
    $31 = (($30) - ($24))|0;
    $32 = HEAP16[132080>>1]|0;
    $33 = $32&65535;
    $34 = ($31>>>0)>=($33>>>0);
    $35 = HEAP16[132336>>1]|0;
    $36 = ($35<<16>>16)==(0);
    $or$cond = $34 | $36;
    if (!($or$cond)) {
     $37 = $row$04 & 1;
     $38 = (0 - ($37))|0;
     $39 = $38 & 3;
     $40 = $39 ^ 1;
     $41 = HEAP32[132112>>2]|0;
     $col$03 = 0;
     while(1) {
      $42 = HEAP16[592>>1]|0;
      $43 = $42&65535;
      $44 = (($col$03) - ($43))|0;
      $45 = (($44) - ($25))|0;
      $46 = HEAP16[132088>>1]|0;
      $47 = $46&65535;
      $48 = ($45>>>0)<($47>>>0);
      if ($48) {
       $49 = (($14) + ($col$03<<1)|0);
       $50 = HEAP16[$49>>1]|0;
       $51 = $col$03 & 1;
       $52 = $40 ^ $51;
       $53 = Math_imul($47, $31)|0;
       $54 = (($53) + ($45))|0;
       $55 = ((($41) + ($54<<3)|0) + ($52<<1)|0);
       HEAP16[$55>>1] = $50;
      }
      $56 = (($col$03) + 1)|0;
      $57 = HEAP16[132336>>1]|0;
      $58 = $57&65535;
      $59 = ($56>>>0)<($58>>>0);
      if ($59) {
       $col$03 = $56;
      } else {
       break;
      }
     }
    }
    $60 = (($row$04) + 1)|0;
    $61 = HEAP16[133064>>1]|0;
    $62 = $61&65535;
    $63 = ($60>>>0)<($62>>>0);
    if ($63) {
     $row$04 = $60;
    } else {
     break;
    }
   }
  }
  $64 = (($shot$06) + 1)|0;
  $exitcond = ($64|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $shot$06 = $64;
  }
 }
 _free($14);
 HEAP32[142384>>2] = 1;
 return;
}
function _imacon_full_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $col$02 = 0, $or$cond = 0, $row$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[132112>>2]|0;
 $1 = ($0|0)==(0|0);
 $2 = HEAP16[132080>>1]|0;
 $3 = ($2<<16>>16)==(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  return;
 } else {
  $row$03 = 0;
 }
 while(1) {
  $4 = HEAP16[132088>>1]|0;
  $5 = ($4<<16>>16)==(0);
  if (!($5)) {
   $6 = $4&65535;
   $8 = $6;$col$02 = 0;
   while(1) {
    $7 = Math_imul($8, $row$03)|0;
    $9 = (($7) + ($col$02))|0;
    $10 = HEAP32[132112>>2]|0;
    $11 = (($10) + ($9<<3)|0);
    _read_shorts($11,3);
    $12 = (($col$02) + 1)|0;
    $13 = HEAP16[132088>>1]|0;
    $14 = $13&65535;
    $15 = ($12|0)<($14|0);
    if ($15) {
     $8 = $14;$col$02 = $12;
    } else {
     break;
    }
   }
  }
  $16 = (($row$03) + 1)|0;
  $17 = HEAP16[132080>>1]|0;
  $18 = $17&65535;
  $19 = ($16|0)<($18|0);
  if ($19) {
   $row$03 = $16;
  } else {
   break;
  }
 }
 return;
}
function _packed_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $118$phi = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bwide$0 = 0, $col$09 = 0, $i$04 = 0, $irow$017 = 0, $or$cond = 0, $or$cond3 = 0, $row$0 = 0, $vbits$018 = 0, $vbits$1 = 0, $vbits$2$lcssa = 0, $vbits$210 = 0, $vbits$3$lcssa = 0, $vbits$36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = HEAP32[133264>>2]|0;
 $3 = Math_imul($1, $2)|0;
 $4 = $3 >>> 3;
 $5 = HEAP32[133096>>2]|0;
 $6 = $5 >>> 7;
 $7 = $4 & $6;
 $8 = (($7) + ($4))|0;
 $9 = $8 << 3;
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $bwide$0 = $8;
 } else {
  $12 = $8 << 4;
  $13 = (($12|0) / 15)&-1;
  $bwide$0 = $13;
 }
 $14 = HEAP32[133096>>2]|0;
 $15 = $14 & 24;
 $16 = (($15) + 8)|0;
 $17 = HEAP16[133064>>1]|0;
 $18 = $17&65535;
 $19 = (($18) + 1)|0;
 $20 = $19 >>> 1;
 $21 = ($17<<16>>16)==(0);
 if ($21) {
  return;
 }
 $22 = (($3) - ($9))|0;
 $23 = (0 - ($bwide$0))|0;
 $24 = Math_imul($20, $23)|0;
 $25 = $24 & -2048;
 $112 = 0;$113 = 0;$irow$017 = 0;$vbits$018 = 0;
 while(1) {
  $26 = HEAP32[133096>>2]|0;
  $27 = $26 & 2;
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    $row$0 = $irow$017;$vbits$1 = $vbits$018;
   } else {
    $29 = (($irow$017|0) % ($20|0))&-1;
    $30 = $29 << 1;
    $31 = (($irow$017|0) / ($20|0))&-1;
    $32 = (($30) + ($31))|0;
    $33 = ($32|0)!=(1);
    $34 = $26 & 4;
    $35 = ($34|0)==(0);
    $or$cond = $35 | $33;
    if ($or$cond) {
     $row$0 = $32;$vbits$1 = $vbits$018;
    } else {
     $36 = HEAP32[133056>>2]|0;
     $37 = ($36|0)==(0);
     $38 = HEAP32[864>>2]|0;
     if ($37) {
      (_fseek(($38|0),0,2)|0);
      $41 = HEAP32[864>>2]|0;
      $42 = (_ftell(($41|0))|0);
      $43 = $42 >> 3;
      $44 = $43 << 2;
      (_fseek(($41|0),($44|0),0)|0);
      $row$0 = $32;$vbits$1 = 0;
      break;
     } else {
      $39 = HEAP32[133280>>2]|0;
      $40 = (($39) - ($25))|0;
      (_fseek(($38|0),($40|0),0)|0);
      $row$0 = $32;$vbits$1 = 0;
      break;
     }
    }
   }
  } while(0);
  $45 = HEAP16[132336>>1]|0;
  $46 = ($45<<16>>16)==(0);
  if ($46) {
   $114 = $112;$115 = $113;$vbits$2$lcssa = $vbits$1;
  } else {
   $116 = $112;$117 = $113;$col$09 = 0;$vbits$210 = $vbits$1;
   while(1) {
    $47 = HEAP32[133264>>2]|0;
    $48 = (($vbits$210) - ($47))|0;
    $49 = ($48|0)<(0);
    if ($49) {
     $50 = $116;$51 = $117;$vbits$36 = $48;
     while(1) {
      $52 = (_bitshift64Shl(($50|0),($51|0),($16|0))|0);
      $53 = tempRet0;
      $118 = $53;$58 = $52;$i$04 = 0;
      while(1) {
       $54 = HEAP32[864>>2]|0;
       $55 = (_getc_unlocked(($54|0))|0);
       $56 = $55 << $i$04;
       $57 = $56 | $58;
       $59 = (($i$04) + 8)|0;
       $60 = ($59|0)<($16|0);
       if ($60) {
        $118$phi = $118;$58 = $57;$i$04 = $59;$118 = $118$phi;
       } else {
        $119 = $57;$120 = $118;
        break;
       }
      }
      $61 = (($vbits$36) + ($16))|0;
      $62 = ($61|0)<(0);
      if ($62) {
       $50 = $119;$51 = $120;$vbits$36 = $61;
      } else {
       $66 = $119;$67 = $120;$vbits$3$lcssa = $61;
       break;
      }
     }
    } else {
     $66 = $116;$67 = $117;$vbits$3$lcssa = $48;
    }
    $63 = HEAP32[133264>>2]|0;
    $64 = (64 - ($63))|0;
    $65 = (($64) - ($vbits$3$lcssa))|0;
    $68 = (_bitshift64Shl(($66|0),($67|0),($65|0))|0);
    $69 = tempRet0;
    $70 = (_bitshift64Lshr(($68|0),($69|0),($64|0))|0);
    $71 = tempRet0;
    $72 = $70&65535;
    $73 = HEAP16[132336>>1]|0;
    $74 = $73&65535;
    $75 = Math_imul($74, $row$0)|0;
    $76 = HEAP32[133096>>2]|0;
    $77 = $76 >>> 6;
    $78 = $77 & 1;
    $79 = $78 ^ $col$09;
    $80 = (($79) + ($75))|0;
    $81 = HEAP32[132328>>2]|0;
    $82 = (($81) + ($80<<1)|0);
    HEAP16[$82>>1] = $72;
    $83 = HEAP32[133096>>2]|0;
    $84 = $83 & 1;
    $85 = ($84|0)!=(0);
    $86 = (($col$09|0) % 10)&-1;
    $87 = ($86|0)==(9);
    $or$cond3 = $85 & $87;
    if ($or$cond3) {
     $88 = HEAP32[864>>2]|0;
     $89 = (_getc_unlocked(($88|0))|0);
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP16[132080>>1]|0;
      $92 = $91&65535;
      $93 = HEAP16[600>>1]|0;
      $94 = $93&65535;
      $95 = (($94) + ($92))|0;
      $96 = ($row$0|0)<($95|0);
      if ($96) {
       $97 = HEAP16[132088>>1]|0;
       $98 = $97&65535;
       $99 = HEAP16[592>>1]|0;
       $100 = $99&65535;
       $101 = (($100) + ($98))|0;
       $102 = ($col$09|0)<($101|0);
       if ($102) {
        _derror();
       }
      }
     }
    }
    $103 = (($col$09) + 1)|0;
    $104 = HEAP16[132336>>1]|0;
    $105 = $104&65535;
    $106 = ($103|0)<($105|0);
    if ($106) {
     $116 = $66;$117 = $67;$col$09 = $103;$vbits$210 = $vbits$3$lcssa;
    } else {
     $114 = $66;$115 = $67;$vbits$2$lcssa = $vbits$3$lcssa;
     break;
    }
   }
  }
  $107 = (($22) + ($vbits$2$lcssa))|0;
  $108 = (($irow$017) + 1)|0;
  $109 = HEAP16[133064>>1]|0;
  $110 = $109&65535;
  $111 = ($108|0)<($110|0);
  if ($111) {
   $112 = $114;$113 = $115;$irow$017 = $108;$vbits$018 = $107;
  } else {
   break;
  }
 }
 return;
}
function _nokia_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$04 = 0, $c$23 = 0, $col$08 = 0, $div = 0, $dp$07 = 0, $row$010 = 0;
 var $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $sum = sp;
 ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $0 = HEAP16[928>>1]|0;
 $1 = ($0<<16>>16)==(18761);
 $2 = $1 ? 3 : 0;
 $3 = HEAP16[132336>>1]|0;
 $4 = $3&65535;
 $5 = ($4*5)|0;
 $6 = (($5) + 1)|0;
 $7 = $6 >>> 2;
 $8 = $7 << 1;
 $9 = (_malloc($8)|0);
 _merror($9,142440);
 $10 = HEAP16[133064>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if (!($11)) {
  $12 = (($9) + ($7)|0);
  $13 = ($7|0)==(0);
  $row$010 = 0;
  while(1) {
   $14 = HEAP32[864>>2]|0;
   $15 = (_fread(($12|0),1,($7|0),($14|0))|0);
   $16 = ($15>>>0)<($7>>>0);
   if ($16) {
    _derror();
   }
   if (!($13)) {
    $c$04 = 0;
    while(1) {
     $19 = $c$04 ^ $2;
     $20 = (($19) + ($7))|0;
     $21 = (($9) + ($20)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = (($9) + ($c$04)|0);
     HEAP8[$23>>0] = $22;
     $24 = (($c$04) + 1)|0;
     $25 = ($24|0)<($7|0);
     if ($25) {
      $c$04 = $24;
     } else {
      break;
     }
    }
   }
   $17 = HEAP16[132336>>1]|0;
   $18 = ($17<<16>>16)==(0);
   if (!($18)) {
    $col$08 = 0;$dp$07 = $9;
    while(1) {
     $26 = (($dp$07) + 4|0);
     $27 = HEAP8[$dp$07>>0]|0;
     $28 = $27&255;
     $29 = $28 << 2;
     $30 = HEAP8[$26>>0]|0;
     $31 = $30&255;
     $32 = $31 & 3;
     $33 = $32 | $29;
     $34 = $33&65535;
     $35 = HEAP16[132336>>1]|0;
     $36 = $35&65535;
     $37 = Math_imul($36, $row$010)|0;
     $38 = (($col$08) + ($37))|0;
     $39 = HEAP32[132328>>2]|0;
     $40 = (($39) + ($38<<1)|0);
     HEAP16[$40>>1] = $34;
     $41 = (($dp$07) + 1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = $42&255;
     $44 = $43 << 2;
     $45 = HEAP8[$26>>0]|0;
     $46 = $45&255;
     $47 = $46 >>> 2;
     $48 = $47 & 3;
     $49 = $48 | $44;
     $50 = $49&65535;
     $51 = HEAP16[132336>>1]|0;
     $52 = $51&65535;
     $53 = Math_imul($52, $row$010)|0;
     $54 = $col$08 | 1;
     $55 = (($54) + ($53))|0;
     $56 = HEAP32[132328>>2]|0;
     $57 = (($56) + ($55<<1)|0);
     HEAP16[$57>>1] = $50;
     $58 = (($dp$07) + 2|0);
     $59 = HEAP8[$58>>0]|0;
     $60 = $59&255;
     $61 = $60 << 2;
     $62 = HEAP8[$26>>0]|0;
     $63 = $62&255;
     $64 = $63 >>> 4;
     $65 = $64 & 3;
     $66 = $65 | $61;
     $67 = $66&65535;
     $68 = HEAP16[132336>>1]|0;
     $69 = $68&65535;
     $70 = Math_imul($69, $row$010)|0;
     $71 = $col$08 | 2;
     $72 = (($71) + ($70))|0;
     $73 = HEAP32[132328>>2]|0;
     $74 = (($73) + ($72<<1)|0);
     HEAP16[$74>>1] = $67;
     $75 = (($dp$07) + 3|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = $77 << 2;
     $79 = HEAP8[$26>>0]|0;
     $80 = $79&255;
     $81 = $80 >>> 6;
     $82 = $81 | $78;
     $83 = $82&65535;
     $84 = HEAP16[132336>>1]|0;
     $85 = $84&65535;
     $86 = Math_imul($85, $row$010)|0;
     $87 = $col$08 | 3;
     $88 = (($87) + ($86))|0;
     $89 = HEAP32[132328>>2]|0;
     $90 = (($89) + ($88<<1)|0);
     HEAP16[$90>>1] = $83;
     $91 = (($dp$07) + 5|0);
     $92 = (($col$08) + 4)|0;
     $93 = HEAP16[132336>>1]|0;
     $94 = $93&65535;
     $95 = ($92|0)<($94|0);
     if ($95) {
      $col$08 = $92;$dp$07 = $91;
     } else {
      break;
     }
    }
   }
   $96 = (($row$010) + 1)|0;
   $97 = HEAP16[133064>>1]|0;
   $98 = $97&65535;
   $99 = ($96|0)<($98|0);
   if ($99) {
    $row$010 = $96;
   } else {
    break;
   }
  }
 }
 _free($9);
 HEAP32[132368>>2] = 1023;
 $100 = (_strcmp(133624,142464)|0);
 $101 = ($100|0)==(0);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = HEAP16[133064>>1]|0;
 $div = ($102&65535) >>> 1;
 $103 = $div&65535;
 $104 = HEAP16[132088>>1]|0;
 $105 = ($104&65535)>(1);
 if ($105) {
  $106 = HEAP16[132336>>1]|0;
  $107 = $106&65535;
  $108 = Math_imul($107, $103)|0;
  $109 = HEAP32[132328>>2]|0;
  $110 = (($103) + 1)|0;
  $111 = Math_imul($107, $110)|0;
  $112 = $106&65535;
  $113 = Math_imul($112, $110)|0;
  $114 = Math_imul($112, $103)|0;
  $115 = HEAP16[132088>>1]|0;
  $116 = $115&65535;
  $117 = (($116) + -1)|0;
  $c$23 = 0;
  while(1) {
   $118 = (($108) + ($c$23))|0;
   $119 = (($109) + ($118<<1)|0);
   $120 = HEAP16[$119>>1]|0;
   $121 = $120&65535;
   $122 = (($c$23) + 1)|0;
   $123 = (($111) + ($122))|0;
   $124 = (($109) + ($123<<1)|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = $125&65535;
   $127 = (($121) - ($126))|0;
   $128 = Math_imul($127, $127)|0;
   $129 = (+($128|0));
   $130 = $c$23 & 1;
   $131 = (($sum) + ($130<<3)|0);
   $132 = +HEAPF64[$131>>3];
   $133 = $132 + $129;
   HEAPF64[$131>>3] = $133;
   $134 = (($113) + ($c$23))|0;
   $135 = (($109) + ($134<<1)|0);
   $136 = HEAP16[$135>>1]|0;
   $137 = $136&65535;
   $138 = (($114) + ($122))|0;
   $139 = (($109) + ($138<<1)|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = $140&65535;
   $142 = (($137) - ($141))|0;
   $143 = Math_imul($142, $142)|0;
   $144 = (+($143|0));
   $145 = $130 ^ 1;
   $146 = (($sum) + ($145<<3)|0);
   $147 = +HEAPF64[$146>>3];
   $148 = $147 + $144;
   HEAPF64[$146>>3] = $148;
   $149 = ($122|0)<($117|0);
   if ($149) {
    $c$23 = $122;
   } else {
    break;
   }
  }
 }
 $150 = (($sum) + 8|0);
 $151 = +HEAPF64[$150>>3];
 $152 = +HEAPF64[$sum>>3];
 $153 = $151 > $152;
 if (!($153)) {
  STACKTOP = sp;return;
 }
 HEAP32[584>>2] = 1263225675;
 STACKTOP = sp;return;
}
function _canon_rmf_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $col$02 = 0, $ocol$0 = 0, $ocol$0$1 = 0, $ocol$0$2 = 0, $orow$0 = 0, $orow$0$1 = 0, $orow$0$2 = 0, $row$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[133064>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  $32 = HEAP16[((936 + 2046|0))>>1]|0;
  $33 = $32&65535;
  HEAP32[132368>>2] = $33;
  return;
 } else {
  $row$03 = 0;
 }
 while(1) {
  $2 = HEAP16[132336>>1]|0;
  $3 = ($2&65535)>(2);
  if ($3) {
   $4 = (($row$03) + -2)|0;
   $5 = ($row$03|0)<(2);
   $col$02 = 0;
   while(1) {
    $6 = (_get4()|0);
    $7 = HEAP32[132328>>2]|0;
    $8 = (($col$02) + -4)|0;
    $9 = ($col$02|0)<(4);
    if ($9) {
     $10 = HEAP16[132336>>1]|0;
     $11 = $10&65535;
     $12 = (($11) + ($8))|0;
     if ($5) {
      $13 = HEAP16[133064>>1]|0;
      $14 = $13&65535;
      $15 = (($14) + ($4))|0;
      $ocol$0 = $12;$orow$0 = $15;
     } else {
      $ocol$0 = $12;$orow$0 = $4;
     }
    } else {
     $ocol$0 = $8;$orow$0 = $row$03;
    }
    $16 = $6 >>> 2;
    $17 = $16 & 1023;
    $18 = (936 + ($17<<1)|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = HEAP16[132336>>1]|0;
    $21 = $20&65535;
    $22 = Math_imul($21, $orow$0)|0;
    $23 = (($22) + ($ocol$0))|0;
    $24 = (($7) + ($23<<1)|0);
    HEAP16[$24>>1] = $19;
    $25 = (($col$02) + 1)|0;
    $26 = (($col$02) + -3)|0;
    $27 = ($25|0)<(4);
    if ($27) {
     $34 = HEAP16[132336>>1]|0;
     $35 = $34&65535;
     $36 = (($35) + ($26))|0;
     if ($5) {
      $37 = HEAP16[133064>>1]|0;
      $38 = $37&65535;
      $39 = (($38) + ($4))|0;
      $ocol$0$1 = $36;$orow$0$1 = $39;
     } else {
      $ocol$0$1 = $36;$orow$0$1 = $4;
     }
    } else {
     $ocol$0$1 = $26;$orow$0$1 = $row$03;
    }
    $40 = $6 >>> 12;
    $41 = $40 & 1023;
    $42 = (936 + ($41<<1)|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = HEAP16[132336>>1]|0;
    $45 = $44&65535;
    $46 = Math_imul($45, $orow$0$1)|0;
    $47 = (($46) + ($ocol$0$1))|0;
    $48 = (($7) + ($47<<1)|0);
    HEAP16[$48>>1] = $43;
    $49 = (($col$02) + 2)|0;
    $50 = (($col$02) + -2)|0;
    $51 = ($49|0)<(4);
    if ($51) {
     $52 = HEAP16[132336>>1]|0;
     $53 = $52&65535;
     $54 = (($53) + ($50))|0;
     if ($5) {
      $55 = HEAP16[133064>>1]|0;
      $56 = $55&65535;
      $57 = (($56) + ($4))|0;
      $ocol$0$2 = $54;$orow$0$2 = $57;
     } else {
      $ocol$0$2 = $54;$orow$0$2 = $4;
     }
    } else {
     $ocol$0$2 = $50;$orow$0$2 = $row$03;
    }
    $58 = $6 >>> 22;
    $59 = (936 + ($58<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = HEAP16[132336>>1]|0;
    $62 = $61&65535;
    $63 = Math_imul($62, $orow$0$2)|0;
    $64 = (($63) + ($ocol$0$2))|0;
    $65 = (($7) + ($64<<1)|0);
    HEAP16[$65>>1] = $60;
    $66 = (($col$02) + 3)|0;
    $67 = HEAP16[132336>>1]|0;
    $68 = $67&65535;
    $69 = (($68) + -2)|0;
    $70 = ($66|0)<($69|0);
    if ($70) {
     $col$02 = $66;
    } else {
     break;
    }
   }
  }
  $28 = (($row$03) + 1)|0;
  $29 = HEAP16[133064>>1]|0;
  $30 = $29&65535;
  $31 = ($28|0)<($30|0);
  if ($31) {
   $row$03 = $28;
  } else {
   break;
  }
 }
 $32 = HEAP16[((936 + 2046|0))>>1]|0;
 $33 = $32&65535;
 HEAP32[132368>>2] = $33;
 return;
}
function _pana_bits($nbits) {
 $nbits = $nbits|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nbits|0)==(0);
 if ($0) {
  HEAP32[158864>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP32[158864>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[133096>>2]|0;
  $4 = (142480 + ($3)|0);
  $5 = (16384 - ($3))|0;
  $6 = HEAP32[864>>2]|0;
  (_fread(($4|0),1,($5|0),($6|0))|0);
  $7 = HEAP32[133096>>2]|0;
  $8 = HEAP32[864>>2]|0;
  (_fread((142480|0),1,($7|0),($8|0))|0);
 }
 $9 = HEAP32[158864>>2]|0;
 $10 = (($9) - ($nbits))|0;
 $11 = $10 & 131071;
 HEAP32[158864>>2] = $11;
 $12 = $11 >>> 3;
 $13 = $12 ^ 16368;
 $14 = (142480 + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($13) + 1)|0;
 $18 = (142480 + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $22 = $21 | $16;
 $23 = $10 & 7;
 $24 = $22 >>> $23;
 $25 = -1 << $nbits;
 $26 = $25 ^ -1;
 $27 = $24 & $26;
 $$0 = $27;
 return ($$0|0);
}
function _panasonic_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$04 = 0;
 var $nonz = 0, $or$cond = 0, $or$cond3 = 0, $pred = 0, $row$06 = 0, $sh$08 = 0, $sh$1$lcssa = 0, $sh$15 = 0, $sh$2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pred = sp + 8|0;
 $nonz = sp;
 (_pana_bits(0)|0);
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($nonz) + 4|0);
 $3 = (($pred) + 4|0);
 $row$06 = 0;$sh$08 = 0;
 while(1) {
  $4 = HEAP16[132336>>1]|0;
  $5 = ($4<<16>>16)==(0);
  if ($5) {
   $sh$1$lcssa = $sh$08;
  } else {
   $col$04 = 0;$sh$15 = $sh$08;
   while(1) {
    $6 = (($col$04|0) % 14)&-1;
    $7 = ($6|0)==(0);
    if ($7) {
     HEAP32[$2>>2] = 0;
     HEAP32[$nonz>>2] = 0;
     HEAP32[$3>>2] = 0;
     HEAP32[$pred>>2] = 0;
     $sh$2 = $sh$15;
    } else {
     $8 = (($6|0) % 3)&-1;
     $9 = ($8|0)==(2);
     if ($9) {
      $10 = (_pana_bits(2)|0);
      $11 = (3 - ($10))|0;
      $12 = 4 >>> $11;
      $sh$2 = $12;
     } else {
      $sh$2 = $sh$15;
     }
    }
    $13 = $6 & 1;
    $14 = (($nonz) + ($13<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    $17 = (_pana_bits(8)|0);
    if ($16) {
     HEAP32[$14>>2] = $17;
     $30 = ($17|0)!=(0);
     $31 = ($6|0)>(11);
     $or$cond3 = $31 | $30;
     if ($or$cond3) {
      $32 = $17 << 4;
      $33 = (_pana_bits(4)|0);
      $34 = $33 | $32;
      $35 = (($pred) + ($13<<2)|0);
      HEAP32[$35>>2] = $34;
     }
    } else {
     $18 = ($17|0)==(0);
     if (!($18)) {
      $19 = 128 << $sh$2;
      $20 = (($pred) + ($13<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) - ($19))|0;
      $23 = ($22|0)<(0);
      $24 = ($sh$2|0)==(4);
      $or$cond = $24 | $23;
      if ($or$cond) {
       $25 = -1 << $sh$2;
       $26 = $25 ^ -1;
       $27 = $22 & $26;
       $storemerge = $27;
      } else {
       $storemerge = $22;
      }
      $28 = $17 << $sh$2;
      $29 = (($storemerge) + ($28))|0;
      HEAP32[$20>>2] = $29;
     }
    }
    $36 = $col$04 & 1;
    $37 = (($pred) + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38&65535;
    $40 = HEAP16[132336>>1]|0;
    $41 = $40&65535;
    $42 = Math_imul($41, $row$06)|0;
    $43 = (($42) + ($col$04))|0;
    $44 = HEAP32[132328>>2]|0;
    $45 = (($44) + ($43<<1)|0);
    HEAP16[$45>>1] = $39;
    $46 = $38 & 65535;
    $47 = ($46>>>0)>(4098);
    if ($47) {
     $48 = HEAP16[132088>>1]|0;
     $49 = $48&65535;
     $50 = ($col$04|0)<($49|0);
     if ($50) {
      _derror();
     }
    }
    $51 = (($col$04) + 1)|0;
    $52 = HEAP16[132336>>1]|0;
    $53 = $52&65535;
    $54 = ($51|0)<($53|0);
    if ($54) {
     $col$04 = $51;$sh$15 = $sh$2;
    } else {
     $sh$1$lcssa = $sh$2;
     break;
    }
   }
  }
  $55 = (($row$06) + 1)|0;
  $56 = HEAP16[132080>>1]|0;
  $57 = $56&65535;
  $58 = ($55|0)<($57|0);
  if ($58) {
   $row$06 = $55;$sh$08 = $sh$1$lcssa;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _olympus_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $acarry = 0, $c$011 = 0, $col$04 = 0, $exitcond = 0, $high$0 = 0, $huff = 0, $i$014 = 0, $i$014$phi = 0, $n$015 = 0, $n$1$lcssa = 0, $n$112 = 0, $nbits$0 = 0, $nbits$0$lcssa = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $pred$0 = 0, $row$06 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0;
 $huff = sp + 24|0;
 $acarry = sp;
 HEAP16[$huff>>1] = 3084;
 $3 = 11;$i$014 = 12;$n$015 = 0;
 while(1) {
  $1 = 2048 >>> $3;
  $5 = ($1|0)>(0);
  if ($5) {
   $6 = $i$014 << 8;
   $7 = $6 | $3;
   $8 = $7&65535;
   $9 = (($1) + -1)|0;
   $c$011 = 0;$n$112 = $n$015;
   while(1) {
    $10 = (($n$112) + 1)|0;
    $11 = (($huff) + ($10<<1)|0);
    HEAP16[$11>>1] = $8;
    $12 = (($c$011) + 1)|0;
    $exitcond = ($c$011|0)==($9|0);
    if ($exitcond) {
     break;
    } else {
     $c$011 = $12;$n$112 = $10;
    }
   }
   $0 = (($n$015) + ($1))|0;
   $n$1$lcssa = $0;
  } else {
   $n$1$lcssa = $n$015;
  }
  $2 = (($3) + -1)|0;
  $4 = ($3|0)==(0);
  if ($4) {
   break;
  } else {
   $i$014$phi = $3;$3 = $2;$n$015 = $n$1$lcssa;$i$014 = $i$014$phi;
  }
 }
 $13 = HEAP32[864>>2]|0;
 (_fseek(($13|0),7,1)|0);
 (_getbithuff(-1,0)|0);
 $14 = HEAP16[132080>>1]|0;
 $15 = ($14<<16>>16)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $row$06 = 0;
 while(1) {
  ;HEAP32[$acarry+0>>2]=0|0;HEAP32[$acarry+4>>2]=0|0;HEAP32[$acarry+8>>2]=0|0;HEAP32[$acarry+12>>2]=0|0;HEAP32[$acarry+16>>2]=0|0;HEAP32[$acarry+20>>2]=0|0;
  $16 = HEAP16[132336>>1]|0;
  $17 = ($16<<16>>16)==(0);
  if (!($17)) {
   $18 = ($row$06|0)<(2);
   $19 = (($row$06) + -2)|0;
   $20 = (($row$06) + -2)|0;
   $col$04 = 0;
   while(1) {
    $21 = $col$04 & 1;
    $22 = (($acarry) + (($21*12)|0)|0);
    $23 = ((($acarry) + (($21*12)|0)|0) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)<(3);
    $26 = $25&1;
    $27 = $26 << 1;
    $28 = (($27) + 2)|0;
    $29 = HEAP32[$22>>2]|0;
    $30 = $29 & 65535;
    $nbits$0 = $28;
    while(1) {
     $31 = (($nbits$0) + ($27))|0;
     $32 = $30 >>> $31;
     $33 = ($32|0)==(0);
     $34 = (($nbits$0) + 1)|0;
     if ($33) {
      $nbits$0$lcssa = $nbits$0;
      break;
     } else {
      $nbits$0 = $34;
     }
    }
    $35 = (_getbithuff(3,0)|0);
    $36 = $35 & 3;
    $37 = $35 << 29;
    $38 = $37 >> 31;
    $39 = (_getbithuff(12,$huff)|0);
    $40 = ($39|0)==(12);
    if ($40) {
     $41 = (16 - ($nbits$0$lcssa))|0;
     $42 = (_getbithuff($41,0)|0);
     $43 = $42 >>> 1;
     $high$0 = $43;
    } else {
     $high$0 = $39;
    }
    $44 = $high$0 << $nbits$0$lcssa;
    $45 = (_getbithuff($nbits$0$lcssa,0)|0);
    $46 = $44 | $45;
    HEAP32[$22>>2] = $46;
    $47 = $46 ^ $38;
    $48 = ((($acarry) + (($21*12)|0)|0) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($47) + ($49))|0;
    $51 = ($50*3)|0;
    $52 = (($51) + ($49))|0;
    $53 = $52 >> 5;
    HEAP32[$48>>2] = $53;
    $54 = HEAP32[$22>>2]|0;
    $55 = ($54|0)>(16);
    if ($55) {
     $58 = 0;
    } else {
     $56 = HEAP32[$23>>2]|0;
     $57 = (($56) + 1)|0;
     $58 = $57;
    }
    HEAP32[$23>>2] = $58;
    $59 = HEAP16[132088>>1]|0;
    $60 = $59&65535;
    $61 = ($col$04|0)<($60|0);
    if ($61) {
     $62 = ($col$04|0)<(2);
     $or$cond = $18 & $62;
     do {
      if ($or$cond) {
       $pred$0 = 0;
      } else {
       $63 = HEAP16[132336>>1]|0;
       $64 = $63&65535;
       if ($18) {
        $65 = Math_imul($64, $row$06)|0;
        $66 = (($col$04) + -2)|0;
        $67 = (($66) + ($65))|0;
        $68 = HEAP32[132328>>2]|0;
        $69 = (($68) + ($67<<1)|0);
        $70 = HEAP16[$69>>1]|0;
        $71 = $70&65535;
        $pred$0 = $71;
        break;
       }
       if ($62) {
        $72 = Math_imul($64, $19)|0;
        $73 = (($72) + ($col$04))|0;
        $74 = HEAP32[132328>>2]|0;
        $75 = (($74) + ($73<<1)|0);
        $76 = HEAP16[$75>>1]|0;
        $77 = $76&65535;
        $pred$0 = $77;
        break;
       }
       $78 = Math_imul($64, $row$06)|0;
       $79 = (($col$04) + -2)|0;
       $80 = (($78) + ($79))|0;
       $81 = HEAP32[132328>>2]|0;
       $82 = (($81) + ($80<<1)|0);
       $83 = HEAP16[$82>>1]|0;
       $84 = $83&65535;
       $85 = Math_imul($64, $20)|0;
       $86 = (($85) + ($col$04))|0;
       $87 = (($81) + ($86<<1)|0);
       $88 = HEAP16[$87>>1]|0;
       $89 = $88&65535;
       $90 = (($85) + ($79))|0;
       $91 = (($81) + ($90<<1)|0);
       $92 = HEAP16[$91>>1]|0;
       $93 = $92&65535;
       $94 = ($83&65535)<($92&65535);
       $95 = ($88&65535)>($92&65535);
       $or$cond2 = $94 & $95;
       if (!($or$cond2)) {
        $96 = ($88&65535)<($92&65535);
        $97 = ($83&65535)>($92&65535);
        $or$cond3 = $96 & $97;
        if (!($or$cond3)) {
         $112 = (($84) - ($93))|0;
         $113 = $112 >> 31;
         $114 = $113 ^ $112;
         $115 = (($114) - ($113))|0;
         $116 = (($89) - ($93))|0;
         $117 = $116 >> 31;
         $118 = $117 ^ $116;
         $119 = (($118) - ($117))|0;
         $120 = ($115|0)>($119|0);
         $121 = $120 ? $84 : $89;
         $pred$0 = $121;
         break;
        }
       }
       $98 = (($84) - ($93))|0;
       $99 = $98 >> 31;
       $100 = $99 ^ $98;
       $101 = (($100) - ($99))|0;
       $102 = ($101|0)>(32);
       if (!($102)) {
        $103 = (($89) - ($93))|0;
        $104 = $103 >> 31;
        $105 = $104 ^ $103;
        $106 = (($105) - ($104))|0;
        $107 = ($106|0)>(32);
        if (!($107)) {
         $110 = (($89) + ($84))|0;
         $111 = $110 >>> 1;
         $pred$0 = $111;
         break;
        }
       }
       $108 = (($89) + ($84))|0;
       $109 = (($108) - ($93))|0;
       $pred$0 = $109;
      }
     } while(0);
     $122 = $50 << 2;
     $123 = $122 | $36;
     $124 = (($pred$0) + ($123))|0;
     $125 = $124&65535;
     $126 = HEAP16[132336>>1]|0;
     $127 = $126&65535;
     $128 = Math_imul($127, $row$06)|0;
     $129 = (($128) + ($col$04))|0;
     $130 = HEAP32[132328>>2]|0;
     $131 = (($130) + ($129<<1)|0);
     HEAP16[$131>>1] = $125;
     $132 = $124 & 61440;
     $133 = ($132|0)==(0);
     if (!($133)) {
      _derror();
     }
    }
    $134 = (($col$04) + 1)|0;
    $135 = HEAP16[132336>>1]|0;
    $136 = $135&65535;
    $137 = ($134|0)<($136|0);
    if ($137) {
     $col$04 = $134;
    } else {
     break;
    }
   }
  }
  $138 = (($row$06) + 1)|0;
  $139 = HEAP16[132080>>1]|0;
  $140 = $139&65535;
  $141 = ($138|0)<($140|0);
  if ($141) {
   $row$06 = $138;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _minolta_rd175_load_raw() {
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $box$0 = 0, $col$04 = 0, $col$16 = 0, $exitcond = 0, $exitcond8 = 0, $irow$07 = 0, $or$cond = 0, $pixel = 0, $row$0 = 0, $row$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $pixel = sp;
 $0 = (($pixel) + 1|0);
 $1 = (($pixel) + 765|0);
 $irow$07 = 0;
 while(1) {
  $2 = HEAP32[864>>2]|0;
  $3 = (_fread(($pixel|0),1,768,($2|0))|0);
  $4 = ($3>>>0)<(768);
  if ($4) {
   _derror();
  }
  $5 = (($irow$07>>>0) / 82)&-1;
  $6 = (($irow$07>>>0) % 82)&-1;
  $7 = ($6*12)|0;
  $8 = ($irow$07>>>0)<(984);
  if ($8) {
   $9 = $5 | 1;
   $13 = $9;
  } else {
   $10 = $5 << 1;
   $11 = (($10) + -24)|0;
   $13 = $11;
  }
  $12 = (($13) + ($7))|0;
  switch ($irow$07|0) {
  case 1476:  {
   $box$0 = $5;$row$0 = 984;
   label = 11;
   break;
  }
  case 1480:  {
   $box$0 = $5;$row$0 = 985;
   label = 11;
   break;
  }
  case 1479: case 1477:  {
   break;
  }
  case 1478:  {
   $box$0 = 1;$row$0 = 985;
   label = 11;
   break;
  }
  default: {
   $box$0 = $5;$row$0 = $12;
   label = 11;
  }
  }
  L14: do {
   if ((label|0) == 11) {
    label = 0;
    $14 = ($box$0>>>0)>(11);
    $15 = $box$0 & 1;
    $16 = ($15|0)==(0);
    $or$cond = $14 | $16;
    if ($or$cond) {
     $66 = $row$0 & 1;
     $67 = HEAP32[132328>>2]|0;
     $col$16 = $66;
     while(1) {
      $68 = $col$16 >>> 1;
      $69 = (($pixel) + ($68)|0);
      $70 = HEAP8[$69>>0]|0;
      $71 = $70&255;
      $72 = $71 << 1;
      $73 = $72&65535;
      $74 = HEAP16[132336>>1]|0;
      $75 = $74&65535;
      $76 = Math_imul($75, $row$0)|0;
      $77 = (($76) + ($col$16))|0;
      $78 = (($67) + ($77<<1)|0);
      HEAP16[$78>>1] = $73;
      $79 = (($col$16) + 2)|0;
      $80 = ($79>>>0)<(1534);
      if ($80) {
       $col$16 = $79;
      } else {
       break L14;
      }
     }
    }
    $17 = HEAP32[132328>>2]|0;
    $col$04 = 0;$row$12 = $row$0;
    while(1) {
     $18 = ($col$04|0)==(1);
     if ($18) {
      $19 = $row$12 ^ 1;
      $col$04 = 2;$row$12 = $19;
      continue;
     }
     $20 = (($col$04) + 1)|0;
     $21 = $20 & 2;
     $22 = ($21|0)==(0);
     $23 = $col$04 >>> 1;
     if ($22) {
      $33 = (($pixel) + ($23)|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = $34&255;
      $36 = $35 << 1;
      $38 = $36;
     } else {
      $24 = (($23) + -1)|0;
      $25 = (($pixel) + ($24)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = $26&255;
      $28 = (($23) + 1)|0;
      $29 = (($pixel) + ($28)|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30&255;
      $32 = (($31) + ($27))|0;
      $38 = $32;
     }
     $37 = $38&65535;
     $39 = HEAP16[132336>>1]|0;
     $40 = $39&65535;
     $41 = Math_imul($40, $row$12)|0;
     $42 = (($41) + ($col$04))|0;
     $43 = (($17) + ($42<<1)|0);
     HEAP16[$43>>1] = $37;
     $44 = (($col$04) + 1)|0;
     $45 = $row$12 ^ 1;
     $exitcond = ($44|0)==(1533);
     if ($exitcond) {
      $$lcssa = $45;
      break;
     } else {
      $col$04 = $44;$row$12 = $45;
     }
    }
    $46 = HEAP8[$0>>0]|0;
    $47 = $46&255;
    $48 = $47 << 1;
    $49 = $48&65535;
    $50 = HEAP16[132336>>1]|0;
    $51 = $50&65535;
    $52 = Math_imul($51, $$lcssa)|0;
    $53 = (($52) + 1)|0;
    $54 = HEAP32[132328>>2]|0;
    $55 = (($54) + ($53<<1)|0);
    HEAP16[$55>>1] = $49;
    $56 = HEAP8[$1>>0]|0;
    $57 = $56&255;
    $58 = $57 << 1;
    $59 = $58&65535;
    $60 = HEAP16[132336>>1]|0;
    $61 = $60&65535;
    $62 = Math_imul($61, $$lcssa)|0;
    $63 = (($62) + 1533)|0;
    $64 = HEAP32[132328>>2]|0;
    $65 = (($64) + ($63<<1)|0);
    HEAP16[$65>>1] = $59;
   }
  } while(0);
  $81 = (($irow$07) + 1)|0;
  $exitcond8 = ($81|0)==(1481);
  if ($exitcond8) {
   break;
  } else {
   $irow$07 = $81;
  }
 }
 HEAP32[132368>>2] = 510;
 STACKTOP = sp;return;
}
function _quicktake_100_load_raw() {
 var $$ = 0, $$neg = 0, $$neg4 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$0$lcssa = 0, $col$029 = 0, $col$120 = 0, $col$213 = 0, $col$39 = 0, $exitcond = 0, $or$cond = 0, $pixel = 0, $rb$028 = 0;
 var $row$034 = 0, $row$125 = 0, $row$125$in = 0, $row$217 = 0, $row$310 = 0, $sharp$0 = 0, $val$036 = 0, $val$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 311696|0;
 $pixel = sp;
 (_getbithuff(-1,0)|0);
 _memset(($pixel|0),-128,311696)|0;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  $rb$028 = 0;
 } else {
  $row$034 = 2;$val$036 = 0;
  while(1) {
   $2 = $row$034 & 1;
   $3 = $2 | 2;
   $4 = HEAP16[132088>>1]|0;
   $5 = $4&65535;
   $6 = (($5) + 2)|0;
   $7 = ($3>>>0)<($6>>>0);
   if ($7) {
    $8 = (($row$034) + -1)|0;
    $9 = $2 ^ 1;
    $10 = (($row$034) + 1)|0;
    $11 = ((($pixel) + (($10*644)|0)|0) + ($9)|0);
    $12 = ($row$034|0)==(2);
    $col$029 = $3;
    while(1) {
     $13 = (($col$029) + -1)|0;
     $14 = ((($pixel) + (($8*644)|0)|0) + ($13)|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = $15&255;
     $17 = (($col$029) + 1)|0;
     $18 = ((($pixel) + (($8*644)|0)|0) + ($17)|0);
     $19 = HEAP8[$18>>0]|0;
     $20 = $19&255;
     $21 = $20 << 1;
     $22 = (($21) + ($16))|0;
     $23 = (($col$029) + -2)|0;
     $24 = ((($pixel) + (($row$034*644)|0)|0) + ($23)|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = (($22) + ($26))|0;
     $28 = $27 >>> 2;
     $29 = (_getbithuff(4,0)|0);
     $30 = (158872 + ($29<<1)|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31 << 16 >> 16;
     $33 = (($28) + ($32))|0;
     $34 = ($33|0)<(255);
     $35 = $34 ? $33 : 255;
     $36 = ($35|0)<(0);
     $$ = $36 ? 0 : $35;
     $37 = $$&255;
     $38 = ((($pixel) + (($row$034*644)|0)|0) + ($col$029)|0);
     HEAP8[$38>>0] = $37;
     $39 = ($col$029|0)<(4);
     if ($39) {
      HEAP8[$11>>0] = $37;
      HEAP8[$24>>0] = $37;
     }
     if ($12) {
      $40 = (($col$029) + 3)|0;
      $41 = ((($pixel) + (($8*644)|0)|0) + ($40)|0);
      HEAP8[$41>>0] = $37;
      HEAP8[$18>>0] = $37;
     }
     $42 = (($col$029) + 2)|0;
     $43 = HEAP16[132088>>1]|0;
     $44 = $43&65535;
     $45 = ($col$029|0)<($44|0);
     if ($45) {
      $col$029 = $42;
     } else {
      $col$0$lcssa = $42;$val$1$lcssa = $$;
      break;
     }
    }
   } else {
    $col$0$lcssa = $3;$val$1$lcssa = $val$036;
   }
   $46 = $val$1$lcssa&255;
   $47 = ((($pixel) + (($row$034*644)|0)|0) + ($col$0$lcssa)|0);
   HEAP8[$47>>0] = $46;
   $48 = (($row$034) + 1)|0;
   $49 = HEAP16[132080>>1]|0;
   $50 = $49&65535;
   $51 = (($50) + 1)|0;
   $52 = ($row$034|0)<($51|0);
   if ($52) {
    $row$034 = $48;$val$036 = $val$1$lcssa;
   } else {
    $rb$028 = 0;
    break;
   }
  }
 }
 while(1) {
  $53 = HEAP16[132080>>1]|0;
  $54 = $53&65535;
  $55 = ($rb$028|0)<($54|0);
  if ($55) {
   $row$125$in = $rb$028;
   while(1) {
    $row$125 = (($row$125$in) + 2)|0;
    $67 = $row$125 & 1;
    $68 = $67 ^ 3;
    $69 = HEAP16[132088>>1]|0;
    $70 = $69&65535;
    $71 = (($70) + 2)|0;
    $72 = ($68>>>0)<($71>>>0);
    if ($72) {
     $73 = ($row$125|0)<(4);
     $74 = (($row$125$in) + 4)|0;
     $col$120 = $68;
     while(1) {
      $75 = ($col$120|0)<(4);
      $or$cond = $73 | $75;
      if ($or$cond) {
       $sharp$0 = 2;
      } else {
       $76 = ((($pixel) + (($row$125$in*644)|0)|0) + ($col$120)|0);
       $77 = HEAP8[$76>>0]|0;
       $78 = $77&255;
       $79 = (($col$120) + -2)|0;
       $80 = ((($pixel) + (($row$125*644)|0)|0) + ($79)|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = $81&255;
       $83 = (($78) - ($82))|0;
       $84 = $83 >> 31;
       $85 = $84 ^ $83;
       $$neg = $83 >>> 31;
       $86 = ((($pixel) + (($row$125$in*644)|0)|0) + ($79)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = $87&255;
       $89 = (($78) - ($88))|0;
       $90 = $89 >> 31;
       $91 = $90 ^ $89;
       $$neg4 = $89 >>> 31;
       $92 = (($82) - ($88))|0;
       $93 = $92 >> 31;
       $94 = $93 ^ $92;
       $95 = (($94) - ($93))|0;
       $96 = (($85) + ($$neg))|0;
       $97 = (($96) + ($$neg4))|0;
       $98 = (($97) + ($91))|0;
       $99 = (($98) + ($95))|0;
       $100 = ($99|0)<(4);
       if ($100) {
        $sharp$0 = 0;
       } else {
        $101 = ($99|0)<(8);
        if ($101) {
         $sharp$0 = 1;
        } else {
         $102 = ($99|0)<(16);
         if ($102) {
          $sharp$0 = 2;
         } else {
          $103 = ($99|0)<(32);
          if ($103) {
           $sharp$0 = 3;
          } else {
           $104 = ($99|0)<(48);
           $105 = $104 ? 4 : 5;
           $sharp$0 = $105;
          }
         }
        }
       }
      }
      $106 = ((($pixel) + (($row$125$in*644)|0)|0) + ($col$120)|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107&255;
      $109 = (($col$120) + -2)|0;
      $110 = ((($pixel) + (($row$125*644)|0)|0) + ($109)|0);
      $111 = HEAP8[$110>>0]|0;
      $112 = $111&255;
      $113 = (($112) + ($108))|0;
      $114 = $113 >>> 1;
      $115 = (_getbithuff(2,0)|0);
      $116 = ((158904 + ($sharp$0<<3)|0) + ($115<<1)|0);
      $117 = HEAP16[$116>>1]|0;
      $118 = $117 << 16 >> 16;
      $119 = (($114) + ($118))|0;
      $120 = ($119|0)<(255);
      $121 = $120 ? $119 : 255;
      $122 = ($121|0)<(0);
      $123 = $121&255;
      $124 = $122 ? 0 : $123;
      $125 = ((($pixel) + (($row$125*644)|0)|0) + ($col$120)|0);
      HEAP8[$125>>0] = $124;
      if ($73) {
       $126 = (($col$120) + 2)|0;
       $127 = ((($pixel) + (($row$125$in*644)|0)|0) + ($126)|0);
       HEAP8[$127>>0] = $124;
      }
      if ($75) {
       $128 = ((($pixel) + (($74*644)|0)|0) + ($109)|0);
       HEAP8[$128>>0] = $124;
      }
      $129 = (($col$120) + 2)|0;
      $130 = HEAP16[132088>>1]|0;
      $131 = $130&65535;
      $132 = ($col$120|0)<($131|0);
      if ($132) {
       $col$120 = $129;
      } else {
       break;
      }
     }
    }
    $64 = HEAP16[132080>>1]|0;
    $65 = $64&65535;
    $66 = ($row$125|0)<($65|0);
    if ($66) {
     $row$125$in = $row$125;
    } else {
     break;
    }
   }
  }
  $133 = (($rb$028) + 1)|0;
  $exitcond = ($133|0)==(2);
  if ($exitcond) {
   break;
  } else {
   $rb$028 = $133;
  }
 }
 $56 = HEAP16[132080>>1]|0;
 $57 = ($56<<16>>16)==(0);
 if ($57) {
  HEAP32[132368>>2] = 1023;
  STACKTOP = sp;return;
 }
 $58 = HEAP16[132088>>1]|0;
 $59 = $58&65535;
 $60 = (($59) + 2)|0;
 $61 = HEAP16[132080>>1]|0;
 $62 = $61&65535;
 $63 = $58&65535;
 $row$217 = 2;
 while(1) {
  $136 = $row$217 & 1;
  $137 = $136 ^ 3;
  $138 = ($137>>>0)<($60>>>0);
  if ($138) {
   $col$213 = $137;
   while(1) {
    $139 = (($col$213) + -1)|0;
    $140 = ((($pixel) + (($row$217*644)|0)|0) + ($139)|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = ((($pixel) + (($row$217*644)|0)|0) + ($col$213)|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = $145 << 2;
    $147 = (($146) + ($142))|0;
    $148 = (($col$213) + 1)|0;
    $149 = ((($pixel) + (($row$217*644)|0)|0) + ($148)|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = (($147) + ($151))|0;
    $153 = $152 >>> 1;
    $154 = (($153) + -256)|0;
    $155 = ($154|0)<(255);
    $156 = $155 ? $154 : 255;
    $157 = ($156|0)<(0);
    $158 = $156&255;
    $159 = $157 ? 0 : $158;
    HEAP8[$143>>0] = $159;
    $160 = (($col$213) + 2)|0;
    $161 = ($col$213|0)<($63|0);
    if ($161) {
     $col$213 = $160;
    } else {
     break;
    }
   }
  }
  $162 = (($row$217) + 1)|0;
  $163 = (($62) + 1)|0;
  $164 = ($row$217|0)<($163|0);
  if ($164) {
   $row$217 = $162;
  } else {
   break;
  }
 }
 $$pr = HEAP16[132080>>1]|0;
 $134 = ($$pr<<16>>16)==(0);
 if ($134) {
  HEAP32[132368>>2] = 1023;
  STACKTOP = sp;return;
 }
 $135 = HEAP32[132328>>2]|0;
 $row$310 = 0;
 while(1) {
  $165 = HEAP16[132088>>1]|0;
  $166 = ($165<<16>>16)==(0);
  if (!($166)) {
   $167 = (($row$310) + 2)|0;
   $col$39 = 0;
   while(1) {
    $168 = (($col$39) + 2)|0;
    $169 = ((($pixel) + (($167*644)|0)|0) + ($168)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = (158952 + ($171<<1)|0);
    $173 = HEAP16[$172>>1]|0;
    $174 = HEAP16[132336>>1]|0;
    $175 = $174&65535;
    $176 = Math_imul($175, $row$310)|0;
    $177 = (($176) + ($col$39))|0;
    $178 = (($135) + ($177<<1)|0);
    HEAP16[$178>>1] = $173;
    $179 = (($col$39) + 1)|0;
    $180 = HEAP16[132088>>1]|0;
    $181 = $180&65535;
    $182 = ($179|0)<($181|0);
    if ($182) {
     $col$39 = $179;
    } else {
     break;
    }
   }
  }
  $183 = (($row$310) + 1)|0;
  $184 = HEAP16[132080>>1]|0;
  $185 = $184&65535;
  $186 = ($183|0)<($185|0);
  if ($186) {
   $row$310 = $183;
  } else {
   break;
  }
 }
 HEAP32[132368>>2] = 1023;
 STACKTOP = sp;return;
}
function _kodak_radc_load_raw() {
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0;
 var $c$076 = 0, $c$169 = 0, $c$268 = 0, $c$460 = 0, $col$0$be = 0, $col$052 = 0, $col$1 = 0, $col$2$lcssa = 0, $col$249 = 0, $div = 0, $div4 = 0, $div5 = 0, $div6 = 0, $div6$1 = 0, $exitcond81 = 0, $exitcond87 = 0, $exitcond88 = 0, $exitcond89 = 0, $exitcond90 = 0, $huff = 0;
 var $i$080 = 0, $i$174 = 0, $i$267 = 0, $i$334 = 0, $i$432 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $last = 0, $mul = 0, $or$cond = 0, $r$059 = 0, $rep$050 = 0, $row$066 = 0, $s$075 = 0, $s$1$lcssa = 0, $s$170 = 0, $sext = 0, $sext112 = 0, $sext113 = 0, $sext7 = 0;
 var $sext8 = 0, $sext9 = 0, $sext9$1 = 0, $sext9$1$1 = 0, $sext9$193 = 0, $smax = 0, $tree$051 = 0, $x$040 = 0, $x$040$1 = 0, $x$040$1$1 = 0, $x$137 = 0, $x$137$1 = 0, $x$137$1$1 = 0, $x$137$192 = 0, $x$244 = 0, $x$244$1 = 0, $x$244$1$1 = 0, $x$244$1$1108 = 0, $x$244$1$1111 = 0, $x$244$1102 = 0;
 var $x$244$198 = 0, $x$244$198105 = 0, $x$347 = 0, $x$347$1 = 0, $x$347$1$1 = 0, $x$456 = 0, $x$456$1 = 0, $x$561 = 0, $y$564 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16688|0;
 $huff = sp + 6960|0;
 $last = sp + 6954|0;
 $mul = sp + 6948|0;
 $buf = sp;
 ;HEAP16[$last+0>>1]=HEAP16[159728+0>>1]|0;HEAP16[$last+2>>1]=HEAP16[159728+2>>1]|0;HEAP16[$last+4>>1]=HEAP16[159728+4>>1]|0;
 $i$080 = 2;
 while(1) {
  $0 = (($i$080) + -2)|0;
  $1 = (159736 + ($0<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = (159736 + ($i$080<<1)|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = ($2&65535)>($4&65535);
  if (!($5)) {
   $6 = $2&65535;
   $7 = $4&65535;
   $8 = HEAP16[$1>>1]|0;
   $9 = $8&65535;
   $10 = $i$080 | 1;
   $11 = (159736 + ($10<<1)|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12&65535;
   $14 = (($i$080) + -1)|0;
   $15 = (159736 + ($14<<1)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = (($13) - ($17))|0;
   $19 = (+($18|0));
   $20 = (+($17|0));
   $21 = HEAP16[$3>>1]|0;
   $22 = $21&65535;
   $26 = $7;$c$076 = $6;
   while(1) {
    $23 = (($c$076) - ($9))|0;
    $24 = (+($23|0));
    $25 = (($26) - ($9))|0;
    $27 = (+($25|0));
    $28 = $24 / $27;
    $29 = $28 * $19;
    $30 = $20 + $29;
    $31 = $30;
    $32 = $31 + 0.5;
    $33 = (~~(($32))&65535);
    $34 = (936 + ($c$076<<1)|0);
    HEAP16[$34>>1] = $33;
    $35 = (($c$076) + 1)|0;
    $36 = ($c$076|0)<($22|0);
    if ($36) {
     $26 = $22;$c$076 = $35;
    } else {
     break;
    }
   }
  }
  $37 = (($i$080) + 2)|0;
  $38 = ($37|0)<(12);
  if ($38) {
   $i$080 = $37;
  } else {
   $i$174 = 0;$s$075 = 0;
   break;
  }
 }
 while(1) {
  $39 = (159464 + ($i$174)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = 256 >>> $41;
  $43 = ($42|0)>(0);
  if ($43) {
   $44 = $i$174 | 1;
   $45 = (159464 + ($44)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = HEAP8[$39>>0]|0;
   $49 = $48 << 24 >> 24;
   $50 = 256 >>> $49;
   $51 = ($50|0)>(1);
   $smax = $51 ? $50 : 1;
   $53 = $41;$c$169 = 0;$s$170 = $s$075;
   while(1) {
    $52 = $53 << 8;
    $54 = $47 | $52;
    $55 = $54&65535;
    $56 = (($s$170) + 1)|0;
    $57 = (($huff) + ($s$170<<1)|0);
    HEAP16[$57>>1] = $55;
    $58 = (($c$169) + 1)|0;
    $59 = ($58|0)<($50|0);
    if ($59) {
     $53 = $49;$c$169 = $58;$s$170 = $56;
    } else {
     break;
    }
   }
   $60 = (($s$075) + ($smax))|0;
   $s$1$lcssa = $60;
  } else {
   $s$1$lcssa = $s$075;
  }
  $61 = (($i$174) + 2)|0;
  $62 = ($61>>>0)<(260);
  if ($62) {
   $i$174 = $61;$s$075 = $s$1$lcssa;
  } else {
   break;
  }
 }
 $63 = HEAP32[159760>>2]|0;
 $64 = ($63|0)==(243);
 $65 = $64 ? 2 : 3;
 $66 = (8 - ($65))|0;
 $67 = $66 << 8;
 $68 = (($65) + -1)|0;
 $69 = 1 << $68;
 $70 = $69 | $67;
 $c$268 = 0;
 while(1) {
  $71 = $c$268 >> $65;
  $72 = $71 << $65;
  $73 = $70 | $72;
  $74 = $73&65535;
  $75 = ((($huff) + ($c$268<<1)|0) + 9216|0);
  HEAP16[$75>>1] = $74;
  $76 = (($c$268) + 1)|0;
  $exitcond90 = ($76|0)==(256);
  if ($exitcond90) {
   break;
  } else {
   $c$268 = $76;
  }
 }
 (_getbithuff(-1,0)|0);
 $i$267 = 0;
 while(1) {
  $82 = (($buf) + ($i$267<<1)|0);
  HEAP16[$82>>1] = 2048;
  $83 = (($i$267) + 1)|0;
  $exitcond89 = ($83|0)==(3474);
  if ($exitcond89) {
   break;
  } else {
   $i$267 = $83;
  }
 }
 $77 = HEAP16[132080>>1]|0;
 $78 = ($77<<16>>16)==(0);
 if (!($78)) {
  $79 = (($huff) + 9216|0);
  $80 = (($huff) + 4608|0);
  $81 = (($huff) + 5120|0);
  $indvars$iv = 4;$row$066 = 0;
  while(1) {
   $95 = (_getbithuff(6,0)|0);
   $96 = $95&65535;
   HEAP16[$mul>>1] = $96;
   $97 = (_getbithuff(6,0)|0);
   $98 = $97&65535;
   $99 = (($mul) + 2|0);
   HEAP16[$99>>1] = $98;
   $100 = (_getbithuff(6,0)|0);
   $101 = $100&65535;
   $102 = (($mul) + 4|0);
   HEAP16[$102>>1] = $101;
   $103 = (($row$066) + -1)|0;
   $c$460 = 0;
   while(1) {
    $105 = (($last) + ($c$460<<1)|0);
    $106 = HEAP16[$105>>1]|0;
    $107 = $106 << 16 >> 16;
    $108 = (16777216 / ($107|0))&-1;
    $109 = (($108) + 2047)|0;
    $110 = $109 >> 12;
    $111 = (($mul) + ($c$460<<1)|0);
    $112 = HEAP16[$111>>1]|0;
    $113 = $112 << 16 >> 16;
    $114 = Math_imul($110, $113)|0;
    $115 = ($114|0)>(65564);
    $116 = $115 ? 10 : 12;
    $117 = (($116) + -1)|0;
    $118 = -1 << $117;
    $119 = $118 ^ -1;
    $120 = (12 - ($116))|0;
    $121 = $114 << $120;
    $i$334 = 0;
    while(1) {
     $122 = ((($buf) + (($c$460*2316)|0)|0) + ($i$334<<1)|0);
     $123 = HEAP16[$122>>1]|0;
     $124 = $123 << 16 >> 16;
     $125 = Math_imul($124, $121)|0;
     $126 = (($125) + ($119))|0;
     $127 = $126 >> $116;
     $128 = $127&65535;
     HEAP16[$122>>1] = $128;
     $129 = (($i$334) + 1)|0;
     $exitcond81 = ($129|0)==(1158);
     if ($exitcond81) {
      break;
     } else {
      $i$334 = $129;
     }
    }
    $130 = HEAP16[$111>>1]|0;
    HEAP16[$105>>1] = $130;
    $131 = ($c$460|0)!=(0);
    $132 = $131&1;
    $133 = $132 ^ 1;
    $134 = HEAP16[$111>>1]|0;
    $135 = $134 << 16 >> 16;
    $136 = $135 << 7;
    $137 = $136&65535;
    $138 = ((($buf) + (($c$460*2316)|0)|0) + 1544|0);
    $139 = (($103) + ($c$460))|0;
    $140 = (2 - ($c$460))|0;
    $141 = ((($buf) + (($c$460*2316)|0)|0) + ($133<<1)|0);
    $142 = $133 << 1;
    $143 = (772 - ($142))|0;
    $r$059 = 0;
    while(1) {
     $144 = HEAP16[132088>>1]|0;
     $div = ($144&65535) >>> 1;
     $145 = $div&65535;
     $146 = (((($buf) + (($c$460*2316)|0)|0) + ($145<<1)|0) + 1544|0);
     HEAP16[$146>>1] = $137;
     $147 = HEAP16[132088>>1]|0;
     $div4 = ($147&65535) >>> 1;
     $148 = $div4&65535;
     $149 = (((($buf) + (($c$460*2316)|0)|0) + ($148<<1)|0) + 772|0);
     HEAP16[$149>>1] = $137;
     $150 = HEAP16[132088>>1]|0;
     $div5 = ($150&65535) >>> 1;
     $151 = ($div5<<16>>16)==(0);
     if ($151) {
      $206 = $150;
     } else {
      $152 = $div5&65535;
      $col$052 = $152;$tree$051 = 1;
      while(1) {
       $154 = (($huff) + ($tree$051<<9)|0);
       $155 = (_getbithuff(8,$154)|0);
       $sext = $155 << 24;
       $156 = $sext >> 24;
       $157 = ($156|0)==(0);
       do {
        if ($157) {
         $col$1 = $col$052;
         while(1) {
          $191 = ($col$1|0)>(2);
          if ($191) {
           $192 = (_getbithuff(8,$80)|0);
           $sext8 = $192 << 24;
           $193 = $sext8 >> 24;
           $194 = (($193) + 1)|0;
           $196 = $194;
          } else {
           $196 = 1;
          }
          $col$249 = $col$1;$rep$050 = 0;
          while(1) {
           $195 = ($rep$050|0)<($196|0);
           $197 = ($col$249|0)>(0);
           $or$cond = $197 & $195;
           if (!($or$cond)) {
            $col$2$lcssa = $col$249;
            break;
           }
           $198 = (($col$249) + -2)|0;
           $x$244 = (($col$249) + -1)|0;
           if ($131) {
            $446 = ((($buf) + (($c$460*2316)|0)|0) + ($x$244<<1)|0);
            $447 = HEAP16[$446>>1]|0;
            $448 = $447 << 16 >> 16;
            $449 = (((($buf) + (($c$460*2316)|0)|0) + ($col$249<<1)|0) + 772|0);
            $450 = HEAP16[$449>>1]|0;
            $451 = $450 << 16 >> 16;
            $452 = (($451) + ($448))|0;
            $453 = (($452|0) / 2)&-1;
            $454 = $453&65535;
            $455 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244<<1)|0) + 772|0);
            HEAP16[$455>>1] = $454;
            $x$244$1102 = (($col$249) + -2)|0;
            $456 = ((($buf) + (($c$460*2316)|0)|0) + ($x$244$1102<<1)|0);
            $457 = HEAP16[$456>>1]|0;
            $458 = $457 << 16 >> 16;
            $sext112 = $453 << 16;
            $459 = $sext112 >> 16;
            $460 = (($459) + ($458))|0;
            $461 = (($460|0) / 2)&-1;
            $462 = $461&65535;
            $463 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$1102<<1)|0) + 772|0);
            HEAP16[$463>>1] = $462;
            $x$244$198105 = (($col$249) + -1)|0;
            $464 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$198105<<1)|0) + 772|0);
            $465 = HEAP16[$464>>1]|0;
            $466 = $465 << 16 >> 16;
            $467 = (((($buf) + (($c$460*2316)|0)|0) + ($col$249<<1)|0) + 1544|0);
            $468 = HEAP16[$467>>1]|0;
            $469 = $468 << 16 >> 16;
            $470 = (($469) + ($466))|0;
            $471 = (($470|0) / 2)&-1;
            $472 = $471&65535;
            $473 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$198105<<1)|0) + 1544|0);
            HEAP16[$473>>1] = $472;
            $x$244$1$1108 = (($col$249) + -2)|0;
            $474 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$1$1108<<1)|0) + 772|0);
            $475 = HEAP16[$474>>1]|0;
            $476 = $475 << 16 >> 16;
            $sext113 = $471 << 16;
            $477 = $sext113 >> 16;
            $478 = (($477) + ($476))|0;
            $479 = (($478|0) / 2)&-1;
            $481 = $479;$x$244$1$1111 = $x$244$1$1108;
           } else {
            $388 = ((($buf) + (($c$460*2316)|0)|0) + ($col$249<<1)|0);
            $389 = HEAP16[$388>>1]|0;
            $390 = $389 << 16 >> 16;
            $391 = ((($buf) + (($c$460*2316)|0)|0) + ($x$244<<1)|0);
            $392 = HEAP16[$391>>1]|0;
            $393 = $392 << 16 >> 16;
            $394 = $393 << 1;
            $395 = (($394) + ($390))|0;
            $396 = (((($buf) + (($c$460*2316)|0)|0) + ($col$249<<1)|0) + 772|0);
            $397 = HEAP16[$396>>1]|0;
            $398 = $397 << 16 >> 16;
            $399 = (($395) + ($398))|0;
            $400 = (($399|0) / 4)&-1;
            $401 = $400&65535;
            $402 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244<<1)|0) + 772|0);
            HEAP16[$402>>1] = $401;
            $x$244$1 = (($col$249) + -2)|0;
            $403 = ((($buf) + (($c$460*2316)|0)|0) + ($x$244<<1)|0);
            $404 = HEAP16[$403>>1]|0;
            $405 = $404 << 16 >> 16;
            $406 = ((($buf) + (($c$460*2316)|0)|0) + ($x$244$1<<1)|0);
            $407 = HEAP16[$406>>1]|0;
            $408 = $407 << 16 >> 16;
            $409 = $408 << 1;
            $410 = (($409) + ($405))|0;
            $411 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244<<1)|0) + 772|0);
            $412 = HEAP16[$411>>1]|0;
            $413 = $412 << 16 >> 16;
            $414 = (($410) + ($413))|0;
            $415 = (($414|0) / 4)&-1;
            $416 = $415&65535;
            $417 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$1<<1)|0) + 772|0);
            HEAP16[$417>>1] = $416;
            $x$244$198 = (($col$249) + -1)|0;
            $418 = (((($buf) + (($c$460*2316)|0)|0) + ($col$249<<1)|0) + 772|0);
            $419 = HEAP16[$418>>1]|0;
            $420 = $419 << 16 >> 16;
            $421 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$198<<1)|0) + 772|0);
            $422 = HEAP16[$421>>1]|0;
            $423 = $422 << 16 >> 16;
            $424 = $423 << 1;
            $425 = (($424) + ($420))|0;
            $426 = (((($buf) + (($c$460*2316)|0)|0) + ($col$249<<1)|0) + 1544|0);
            $427 = HEAP16[$426>>1]|0;
            $428 = $427 << 16 >> 16;
            $429 = (($425) + ($428))|0;
            $430 = (($429|0) / 4)&-1;
            $431 = $430&65535;
            $432 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$198<<1)|0) + 1544|0);
            HEAP16[$432>>1] = $431;
            $x$244$1$1 = (($col$249) + -2)|0;
            $433 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$198<<1)|0) + 772|0);
            $434 = HEAP16[$433>>1]|0;
            $435 = $434 << 16 >> 16;
            $436 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$1$1<<1)|0) + 772|0);
            $437 = HEAP16[$436>>1]|0;
            $438 = $437 << 16 >> 16;
            $439 = $438 << 1;
            $440 = (($439) + ($435))|0;
            $441 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$198<<1)|0) + 1544|0);
            $442 = HEAP16[$441>>1]|0;
            $443 = $442 << 16 >> 16;
            $444 = (($440) + ($443))|0;
            $445 = (($444|0) / 4)&-1;
            $481 = $445;$x$244$1$1111 = $x$244$1$1;
           }
           $480 = $481&65535;
           $482 = (((($buf) + (($c$460*2316)|0)|0) + ($x$244$1$1111<<1)|0) + 1544|0);
           HEAP16[$482>>1] = $480;
           $483 = $rep$050 & 1;
           $484 = ($483|0)==(0);
           if (!($484)) {
            $485 = (_getbithuff(8,$81)|0);
            $sext7 = $485 << 24;
            $486 = $sext7 >> 20;
            $x$347 = (($col$249) + -1)|0;
            $487 = (((($buf) + (($c$460*2316)|0)|0) + ($x$347<<1)|0) + 772|0);
            $488 = HEAP16[$487>>1]|0;
            $489 = $488&65535;
            $490 = (($489) + ($486))|0;
            $491 = $490&65535;
            HEAP16[$487>>1] = $491;
            $x$347$1 = (($col$249) + -2)|0;
            $492 = (((($buf) + (($c$460*2316)|0)|0) + ($x$347$1<<1)|0) + 772|0);
            $493 = HEAP16[$492>>1]|0;
            $494 = $493&65535;
            $495 = (($494) + ($486))|0;
            $496 = $495&65535;
            HEAP16[$492>>1] = $496;
            $497 = (((($buf) + (($c$460*2316)|0)|0) + ($x$347<<1)|0) + 1544|0);
            $498 = HEAP16[$497>>1]|0;
            $499 = $498&65535;
            $500 = (($499) + ($486))|0;
            $501 = $500&65535;
            HEAP16[$497>>1] = $501;
            $x$347$1$1 = (($col$249) + -2)|0;
            $502 = (((($buf) + (($c$460*2316)|0)|0) + ($x$347$1$1<<1)|0) + 1544|0);
            $503 = HEAP16[$502>>1]|0;
            $504 = $503&65535;
            $505 = (($504) + ($486))|0;
            $506 = $505&65535;
            HEAP16[$502>>1] = $506;
           }
           $199 = (($rep$050) + 1)|0;
           $200 = ($199|0)<(8);
           if ($200) {
            $col$249 = $198;$rep$050 = $199;
           } else {
            $col$2$lcssa = $198;
            break;
           }
          }
          $201 = ($196|0)==(9);
          if ($201) {
           $col$1 = $col$2$lcssa;
          } else {
           $col$0$be = $col$2$lcssa;
           break;
          }
         }
        } else {
         $158 = (($col$052) + -2)|0;
         $159 = ($156|0)==(8);
         if ($159) {
          $366 = HEAP16[$111>>1]|0;
          $367 = $366 << 16 >> 16;
          $x$040 = (($col$052) + -1)|0;
          $368 = (_getbithuff(8,$79)|0);
          $369 = $368 & 255;
          $370 = Math_imul($367, $369)|0;
          $371 = $370&65535;
          $372 = (((($buf) + (($c$460*2316)|0)|0) + ($x$040<<1)|0) + 772|0);
          HEAP16[$372>>1] = $371;
          $x$040$1 = (($col$052) + -2)|0;
          $373 = (_getbithuff(8,$79)|0);
          $374 = $373 & 255;
          $375 = Math_imul($367, $374)|0;
          $376 = $375&65535;
          $377 = (((($buf) + (($c$460*2316)|0)|0) + ($x$040$1<<1)|0) + 772|0);
          HEAP16[$377>>1] = $376;
          $378 = (_getbithuff(8,$79)|0);
          $379 = $378 & 255;
          $380 = Math_imul($367, $379)|0;
          $381 = $380&65535;
          $382 = (((($buf) + (($c$460*2316)|0)|0) + ($x$040<<1)|0) + 1544|0);
          HEAP16[$382>>1] = $381;
          $x$040$1$1 = (($col$052) + -2)|0;
          $383 = (_getbithuff(8,$79)|0);
          $384 = $383 & 255;
          $385 = Math_imul($367, $384)|0;
          $386 = $385&65535;
          $387 = (((($buf) + (($c$460*2316)|0)|0) + ($x$040$1$1<<1)|0) + 1544|0);
          HEAP16[$387>>1] = $386;
          $col$0$be = $158;
          break;
         }
         $160 = (($156) + 10)|0;
         $161 = (($huff) + ($160<<9)|0);
         $x$137 = (($col$052) + -1)|0;
         $162 = (_getbithuff(8,$161)|0);
         $sext9 = $162 << 24;
         $163 = $sext9 >> 20;
         if ($131) {
          $164 = ((($buf) + (($c$460*2316)|0)|0) + ($x$137<<1)|0);
          $165 = HEAP16[$164>>1]|0;
          $166 = $165 << 16 >> 16;
          $167 = (((($buf) + (($c$460*2316)|0)|0) + ($col$052<<1)|0) + 772|0);
          $168 = HEAP16[$167>>1]|0;
          $169 = $168 << 16 >> 16;
          $170 = (($169) + ($166))|0;
          $171 = (($170|0) / 2)&-1;
          $186 = $171;
         } else {
          $172 = ((($buf) + (($c$460*2316)|0)|0) + ($col$052<<1)|0);
          $173 = HEAP16[$172>>1]|0;
          $174 = $173 << 16 >> 16;
          $175 = ((($buf) + (($c$460*2316)|0)|0) + ($x$137<<1)|0);
          $176 = HEAP16[$175>>1]|0;
          $177 = $176 << 16 >> 16;
          $178 = $177 << 1;
          $179 = (($178) + ($174))|0;
          $180 = (((($buf) + (($c$460*2316)|0)|0) + ($col$052<<1)|0) + 772|0);
          $181 = HEAP16[$180>>1]|0;
          $182 = $181 << 16 >> 16;
          $183 = (($179) + ($182))|0;
          $184 = (($183|0) / 4)&-1;
          $186 = $184;
         }
         $185 = (($186) + ($163))|0;
         $187 = $185&65535;
         $188 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137<<1)|0) + 772|0);
         HEAP16[$188>>1] = $187;
         $x$137$1 = (($col$052) + -2)|0;
         $189 = (_getbithuff(8,$161)|0);
         $sext9$1 = $189 << 24;
         $190 = $sext9$1 >> 20;
         if ($131) {
          $300 = ((($buf) + (($c$460*2316)|0)|0) + ($x$137$1<<1)|0);
          $301 = HEAP16[$300>>1]|0;
          $302 = $301 << 16 >> 16;
          $303 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137<<1)|0) + 772|0);
          $304 = HEAP16[$303>>1]|0;
          $305 = $304 << 16 >> 16;
          $306 = (($305) + ($302))|0;
          $307 = (($306|0) / 2)&-1;
          $309 = $307;
         } else {
          $287 = ((($buf) + (($c$460*2316)|0)|0) + ($x$137<<1)|0);
          $288 = HEAP16[$287>>1]|0;
          $289 = $288 << 16 >> 16;
          $290 = ((($buf) + (($c$460*2316)|0)|0) + ($x$137$1<<1)|0);
          $291 = HEAP16[$290>>1]|0;
          $292 = $291 << 16 >> 16;
          $293 = $292 << 1;
          $294 = (($293) + ($289))|0;
          $295 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137<<1)|0) + 772|0);
          $296 = HEAP16[$295>>1]|0;
          $297 = $296 << 16 >> 16;
          $298 = (($294) + ($297))|0;
          $299 = (($298|0) / 4)&-1;
          $309 = $299;
         }
         $308 = (($309) + ($190))|0;
         $310 = $308&65535;
         $311 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$1<<1)|0) + 772|0);
         HEAP16[$311>>1] = $310;
         $x$137$192 = (($col$052) + -1)|0;
         $312 = (_getbithuff(8,$161)|0);
         $sext9$193 = $312 << 24;
         $313 = $sext9$193 >> 20;
         if ($131) {
          $327 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$192<<1)|0) + 772|0);
          $328 = HEAP16[$327>>1]|0;
          $329 = $328 << 16 >> 16;
          $330 = (((($buf) + (($c$460*2316)|0)|0) + ($col$052<<1)|0) + 1544|0);
          $331 = HEAP16[$330>>1]|0;
          $332 = $331 << 16 >> 16;
          $333 = (($332) + ($329))|0;
          $334 = (($333|0) / 2)&-1;
          $336 = $334;
         } else {
          $314 = (((($buf) + (($c$460*2316)|0)|0) + ($col$052<<1)|0) + 772|0);
          $315 = HEAP16[$314>>1]|0;
          $316 = $315 << 16 >> 16;
          $317 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$192<<1)|0) + 772|0);
          $318 = HEAP16[$317>>1]|0;
          $319 = $318 << 16 >> 16;
          $320 = $319 << 1;
          $321 = (($320) + ($316))|0;
          $322 = (((($buf) + (($c$460*2316)|0)|0) + ($col$052<<1)|0) + 1544|0);
          $323 = HEAP16[$322>>1]|0;
          $324 = $323 << 16 >> 16;
          $325 = (($321) + ($324))|0;
          $326 = (($325|0) / 4)&-1;
          $336 = $326;
         }
         $335 = (($336) + ($313))|0;
         $337 = $335&65535;
         $338 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$192<<1)|0) + 1544|0);
         HEAP16[$338>>1] = $337;
         $x$137$1$1 = (($col$052) + -2)|0;
         $339 = (_getbithuff(8,$161)|0);
         $sext9$1$1 = $339 << 24;
         $340 = $sext9$1$1 >> 20;
         if ($131) {
          $354 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$1$1<<1)|0) + 772|0);
          $355 = HEAP16[$354>>1]|0;
          $356 = $355 << 16 >> 16;
          $357 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$192<<1)|0) + 1544|0);
          $358 = HEAP16[$357>>1]|0;
          $359 = $358 << 16 >> 16;
          $360 = (($359) + ($356))|0;
          $361 = (($360|0) / 2)&-1;
          $363 = $361;
         } else {
          $341 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$192<<1)|0) + 772|0);
          $342 = HEAP16[$341>>1]|0;
          $343 = $342 << 16 >> 16;
          $344 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$1$1<<1)|0) + 772|0);
          $345 = HEAP16[$344>>1]|0;
          $346 = $345 << 16 >> 16;
          $347 = $346 << 1;
          $348 = (($347) + ($343))|0;
          $349 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$192<<1)|0) + 1544|0);
          $350 = HEAP16[$349>>1]|0;
          $351 = $350 << 16 >> 16;
          $352 = (($348) + ($351))|0;
          $353 = (($352|0) / 4)&-1;
          $363 = $353;
         }
         $362 = (($363) + ($340))|0;
         $364 = $362&65535;
         $365 = (((($buf) + (($c$460*2316)|0)|0) + ($x$137$1$1<<1)|0) + 1544|0);
         HEAP16[$365>>1] = $364;
         $col$0$be = $158;
        }
       } while(0);
       $153 = ($col$0$be|0)>(0);
       if ($153) {
        $col$052 = $col$0$be;$tree$051 = $156;
       } else {
        break;
       }
      }
      $$pr = HEAP16[132088>>1]|0;
      $206 = $$pr;
     }
     $203 = HEAP32[132328>>2]|0;
     $204 = $r$059 << 1;
     $205 = (($204) + ($row$066))|0;
     $207 = ($206&65535)>(1);
     if ($207) {
      $208 = HEAP16[$111>>1]|0;
      $209 = $208 << 16 >> 16;
      $x$456 = 0;
      while(1) {
       $210 = (((($buf) + (($c$460*2316)|0)|0) + ($x$456<<1)|0) + 772|0);
       $211 = HEAP16[$210>>1]|0;
       $212 = $211 << 16 >> 16;
       $213 = $212 << 4;
       $214 = (($213|0) / ($209|0))&-1;
       $215 = ($214|0)<(0);
       $216 = $214&65535;
       $217 = $215 ? 0 : $216;
       $218 = HEAP16[132336>>1]|0;
       $219 = $218&65535;
       if ($131) {
        $220 = Math_imul($219, $139)|0;
        $221 = $x$456 << 1;
        $222 = (($140) + ($221))|0;
        $223 = (($222) + ($220))|0;
        $224 = (($203) + ($223<<1)|0);
        HEAP16[$224>>1] = $217;
       } else {
        $225 = Math_imul($219, $205)|0;
        $226 = $x$456 << 1;
        $227 = (($226) + ($225))|0;
        $228 = (($203) + ($227<<1)|0);
        HEAP16[$228>>1] = $217;
       }
       $229 = (($x$456) + 1)|0;
       $230 = HEAP16[132088>>1]|0;
       $div6 = ($230&65535) >>> 1;
       $231 = $div6&65535;
       $232 = ($229|0)<($231|0);
       if ($232) {
        $x$456 = $229;
       } else {
        $$lcssa = $230;
        break;
       }
      }
      $202 = ($$lcssa&65535)>(1);
      if ($202) {
       $507 = HEAP16[$111>>1]|0;
       $508 = $507 << 16 >> 16;
       $509 = (($139) + 2)|0;
       $510 = $205 | 1;
       $x$456$1 = 0;
       while(1) {
        $511 = (((($buf) + (($c$460*2316)|0)|0) + ($x$456$1<<1)|0) + 1544|0);
        $512 = HEAP16[$511>>1]|0;
        $513 = $512 << 16 >> 16;
        $514 = $513 << 4;
        $515 = (($514|0) / ($508|0))&-1;
        $516 = ($515|0)<(0);
        $517 = $515&65535;
        $518 = $516 ? 0 : $517;
        $519 = HEAP16[132336>>1]|0;
        $520 = $519&65535;
        if ($131) {
         $526 = Math_imul($520, $509)|0;
         $527 = $x$456$1 << 1;
         $528 = (($140) + ($527))|0;
         $529 = (($528) + ($526))|0;
         $530 = (($203) + ($529<<1)|0);
         HEAP16[$530>>1] = $518;
        } else {
         $521 = Math_imul($520, $510)|0;
         $522 = $x$456$1 << 1;
         $523 = $522 | 1;
         $524 = (($523) + ($521))|0;
         $525 = (($203) + ($524<<1)|0);
         HEAP16[$525>>1] = $518;
        }
        $531 = (($x$456$1) + 1)|0;
        $532 = HEAP16[132088>>1]|0;
        $div6$1 = ($532&65535) >>> 1;
        $533 = $div6$1&65535;
        $534 = ($531|0)<($533|0);
        if ($534) {
         $x$456$1 = $531;
        } else {
         break;
        }
       }
      }
     }
     _memcpy(($141|0),($138|0),($143|0))|0;
     $535 = (($r$059) + 1)|0;
     $536 = ($r$059|0)<($133|0);
     if ($536) {
      $r$059 = $535;
     } else {
      break;
     }
    }
    $233 = (($c$460) + 1)|0;
    $exitcond87 = ($233|0)==(3);
    if ($exitcond87) {
     break;
    } else {
     $c$460 = $233;
    }
   }
   $104 = HEAP32[132328>>2]|0;
   $y$564 = $row$066;
   while(1) {
    $234 = HEAP16[132088>>1]|0;
    $235 = ($234<<16>>16)==(0);
    if (!($235)) {
     $236 = $234&65535;
     $245 = $236;$x$561 = 0;
     while(1) {
      $237 = (($x$561) + ($y$564))|0;
      $238 = $237 & 1;
      $239 = ($238|0)==(0);
      if (!($239)) {
       $240 = ($x$561|0)!=(0);
       $241 = (($x$561) + -1)|0;
       $242 = (($x$561) + 1)|0;
       $243 = $240 ? $241 : $242;
       $244 = ($242|0)<($245|0);
       $246 = $244 ? $242 : $241;
       $247 = HEAP16[132336>>1]|0;
       $248 = $247&65535;
       $249 = Math_imul($248, $y$564)|0;
       $250 = (($249) + ($x$561))|0;
       $251 = (($104) + ($250<<1)|0);
       $252 = HEAP16[$251>>1]|0;
       $253 = $252&65535;
       $254 = $253 << 1;
       $255 = (($254) + -4096)|0;
       $256 = (($249) + ($243))|0;
       $257 = (($104) + ($256<<1)|0);
       $258 = HEAP16[$257>>1]|0;
       $259 = $258&65535;
       $260 = (($249) + ($246))|0;
       $261 = (($104) + ($260<<1)|0);
       $262 = HEAP16[$261>>1]|0;
       $263 = $262&65535;
       $264 = (($263) + ($259))|0;
       $265 = $264 >>> 1;
       $266 = (($255) + ($265))|0;
       $267 = ($266|0)<(0);
       $268 = $266&65535;
       $269 = $267 ? 0 : $268;
       HEAP16[$251>>1] = $269;
      }
      $270 = (($x$561) + 1)|0;
      $271 = HEAP16[132088>>1]|0;
      $272 = $271&65535;
      $273 = ($270|0)<($272|0);
      if ($273) {
       $245 = $272;$x$561 = $270;
      } else {
       break;
      }
     }
    }
    $274 = (($y$564) + 1)|0;
    $exitcond88 = ($274|0)==($indvars$iv|0);
    if ($exitcond88) {
     break;
    } else {
     $y$564 = $274;
    }
   }
   $84 = (($row$066) + 4)|0;
   $85 = HEAP16[132080>>1]|0;
   $86 = $85&65535;
   $87 = ($84|0)<($86|0);
   $indvars$iv$next = (($indvars$iv) + 4)|0;
   if ($87) {
    $indvars$iv = $indvars$iv$next;$row$066 = $84;
   } else {
    break;
   }
  }
 }
 $88 = HEAP16[132080>>1]|0;
 $89 = $88&65535;
 $90 = HEAP16[132088>>1]|0;
 $91 = $90&65535;
 $92 = Math_imul($91, $89)|0;
 $93 = ($92|0)==(0);
 if ($93) {
  HEAP32[132368>>2] = 16383;
  STACKTOP = sp;return;
 }
 $94 = HEAP32[132328>>2]|0;
 $i$432 = 0;
 while(1) {
  $275 = (($94) + ($i$432<<1)|0);
  $276 = HEAP16[$275>>1]|0;
  $277 = $276&65535;
  $278 = (936 + ($277<<1)|0);
  $279 = HEAP16[$278>>1]|0;
  HEAP16[$275>>1] = $279;
  $280 = (($i$432) + 1)|0;
  $281 = HEAP16[132080>>1]|0;
  $282 = $281&65535;
  $283 = HEAP16[132088>>1]|0;
  $284 = $283&65535;
  $285 = Math_imul($284, $282)|0;
  $286 = ($280|0)<($285|0);
  if ($286) {
   $i$432 = $280;
  } else {
   break;
  }
 }
 HEAP32[132368>>2] = 16383;
 STACKTOP = sp;return;
}
function _kodak_jpeg_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _lossy_dng_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _kodak_dc120_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$01 = 0, $pixel = 0, $row$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0;
 $pixel = sp;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  HEAP32[132368>>2] = 255;
  STACKTOP = sp;return;
 } else {
  $row$02 = 0;
 }
 while(1) {
  $2 = HEAP32[864>>2]|0;
  $3 = (_fread(($pixel|0),1,848,($2|0))|0);
  $4 = ($3>>>0)<(848);
  if ($4) {
   _derror();
  }
  $5 = $row$02 & 3;
  $6 = (159768 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = Math_imul($7, $row$02)|0;
  $9 = (159784 + ($5<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + ($10))|0;
  $12 = HEAP16[132088>>1]|0;
  $13 = ($12<<16>>16)==(0);
  if (!($13)) {
   $14 = HEAP32[132328>>2]|0;
   $col$01 = 0;
   while(1) {
    $15 = (($11) + ($col$01))|0;
    $16 = (($15|0) % 848)&-1;
    $17 = (($pixel) + ($16)|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = HEAP16[132336>>1]|0;
    $21 = $20&65535;
    $22 = Math_imul($21, $row$02)|0;
    $23 = (($22) + ($col$01))|0;
    $24 = (($14) + ($23<<1)|0);
    HEAP16[$24>>1] = $19;
    $25 = (($col$01) + 1)|0;
    $26 = HEAP16[132088>>1]|0;
    $27 = $26&65535;
    $28 = ($25|0)<($27|0);
    if ($28) {
     $col$01 = $25;
    } else {
     break;
    }
   }
  }
  $29 = (($row$02) + 1)|0;
  $30 = HEAP16[132080>>1]|0;
  $31 = $30&65535;
  $32 = ($29|0)<($31|0);
  if ($32) {
   $row$02 = $29;
  } else {
   break;
  }
 }
 HEAP32[132368>>2] = 255;
 STACKTOP = sp;return;
}
function _eight_bit_load_raw() {
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$01 = 0, $row$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,1)|0);
 _merror($2,159800);
 $3 = HEAP16[133064>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  _free($2);
  $33 = HEAP16[((936 + 510|0))>>1]|0;
  $34 = $33&65535;
  HEAP32[132368>>2] = $34;
  return;
 } else {
  $row$02 = 0;
 }
 while(1) {
  $5 = HEAP16[132336>>1]|0;
  $6 = $5&65535;
  $7 = HEAP32[864>>2]|0;
  $8 = (_fread(($2|0),1,($6|0),($7|0))|0);
  $9 = HEAP16[132336>>1]|0;
  $10 = $9&65535;
  $11 = ($8>>>0)<($10>>>0);
  if ($11) {
   _derror();
   $$pr = HEAP16[132336>>1]|0;
   $12 = $$pr;
  } else {
   $12 = $9;
  }
  $13 = ($12<<16>>16)==(0);
  if (!($13)) {
   $14 = $12&65535;
   $15 = HEAP32[132328>>2]|0;
   $22 = $14;$col$01 = 0;
   while(1) {
    $16 = (($2) + ($col$01)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (936 + ($18<<1)|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = Math_imul($22, $row$02)|0;
    $23 = (($21) + ($col$01))|0;
    $24 = (($15) + ($23<<1)|0);
    HEAP16[$24>>1] = $20;
    $25 = (($col$01) + 1)|0;
    $26 = HEAP16[132336>>1]|0;
    $27 = $26&65535;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $22 = $27;$col$01 = $25;
    } else {
     break;
    }
   }
  }
  $29 = (($row$02) + 1)|0;
  $30 = HEAP16[133064>>1]|0;
  $31 = $30&65535;
  $32 = ($29>>>0)<($31>>>0);
  if ($32) {
   $row$02 = $29;
  } else {
   break;
  }
 }
 _free($2);
 $33 = HEAP16[((936 + 510|0))>>1]|0;
 $34 = $33&65535;
 HEAP32[132368>>2] = $34;
 return;
}
function _kodak_c330_load_raw() {
 var $$ = 0, $$$ = 0, $$$$1 = 0, $$$$2 = 0, $$$1 = 0, $$$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $col$04 = 0, $or$cond = 0, $rgb = 0, $row$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rgb = sp;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,2)|0);
 _merror($2,159824);
 $3 = HEAP16[132080>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  _free($2);
  $84 = HEAP16[((936 + 510|0))>>1]|0;
  $85 = $84&65535;
  HEAP32[132368>>2] = $85;
  STACKTOP = sp;return;
 }
 $5 = (($rgb) + 4|0);
 $6 = (($rgb) + 8|0);
 $row$05 = 0;
 while(1) {
  $7 = HEAP16[132336>>1]|0;
  $8 = $7&65535;
  $9 = HEAP32[864>>2]|0;
  $10 = (_fread(($2|0),($8|0),2,($9|0))|0);
  $11 = ($10>>>0)<(2);
  if ($11) {
   _derror();
  }
  $12 = HEAP32[133096>>2]|0;
  $13 = ($12|0)!=(0);
  $14 = $row$05 & 31;
  $15 = ($14|0)==(31);
  $or$cond = $15 & $13;
  if ($or$cond) {
   $16 = HEAP32[864>>2]|0;
   $17 = HEAP16[132336>>1]|0;
   $18 = $17&65535;
   $19 = $18 << 5;
   (_fseek(($16|0),($19|0),1)|0);
  }
  $20 = HEAP16[132088>>1]|0;
  $21 = ($20<<16>>16)==(0);
  if (!($21)) {
   $22 = HEAP32[132112>>2]|0;
   $col$04 = 0;
   while(1) {
    $23 = $col$04 << 1;
    $24 = (($2) + ($23)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = $23 & -4;
    $28 = $27 | 1;
    $29 = (($2) + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = (($31) + -128)|0;
    $33 = $23 | 3;
    $34 = (($2) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = (($36) + -128)|0;
    $38 = (($31) + -126)|0;
    $39 = (($38) + ($37))|0;
    $40 = $39 >> 2;
    $41 = (($26) - ($40))|0;
    HEAP32[$5>>2] = $41;
    $42 = (($41) + ($32))|0;
    HEAP32[$6>>2] = $42;
    $43 = HEAP32[$5>>2]|0;
    $44 = (($37) + ($43))|0;
    HEAP32[$rgb>>2] = $44;
    $45 = ($44|0)<(255);
    $$ = $45 ? $44 : 255;
    $46 = ($$|0)<(0);
    $$$ = $46 ? 0 : $$;
    $47 = (936 + ($$$<<1)|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = HEAP16[132088>>1]|0;
    $50 = $49&65535;
    $51 = Math_imul($50, $row$05)|0;
    $52 = (($51) + ($col$04))|0;
    $53 = (($22) + ($52<<3)|0);
    HEAP16[$53>>1] = $48;
    $54 = (($rgb) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)<(255);
    $$$1 = $56 ? $55 : 255;
    $57 = ($$$1|0)<(0);
    $$$$1 = $57 ? 0 : $$$1;
    $58 = (936 + ($$$$1<<1)|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = HEAP16[132088>>1]|0;
    $61 = $60&65535;
    $62 = Math_imul($61, $row$05)|0;
    $63 = (($62) + ($col$04))|0;
    $64 = ((($22) + ($63<<3)|0) + 2|0);
    HEAP16[$64>>1] = $59;
    $65 = (($rgb) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)<(255);
    $$$2 = $67 ? $66 : 255;
    $68 = ($$$2|0)<(0);
    $$$$2 = $68 ? 0 : $$$2;
    $69 = (936 + ($$$$2<<1)|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = HEAP16[132088>>1]|0;
    $72 = $71&65535;
    $73 = Math_imul($72, $row$05)|0;
    $74 = (($73) + ($col$04))|0;
    $75 = ((($22) + ($74<<3)|0) + 4|0);
    HEAP16[$75>>1] = $70;
    $76 = (($col$04) + 1)|0;
    $77 = HEAP16[132088>>1]|0;
    $78 = $77&65535;
    $79 = ($76|0)<($78|0);
    if ($79) {
     $col$04 = $76;
    } else {
     break;
    }
   }
  }
  $80 = (($row$05) + 1)|0;
  $81 = HEAP16[132080>>1]|0;
  $82 = $81&65535;
  $83 = ($80|0)<($82|0);
  if ($83) {
   $row$05 = $80;
  } else {
   break;
  }
 }
 _free($2);
 $84 = HEAP16[((936 + 510|0))>>1]|0;
 $85 = $84&65535;
 HEAP32[132368>>2] = $85;
 STACKTOP = sp;return;
}
function _kodak_c603_load_raw() {
 var $$ = 0, $$$ = 0, $$$$1 = 0, $$$$2 = 0, $$$1 = 0, $$$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $col$03 = 0, $rgb = 0, $row$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $rgb = sp;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = (_calloc($1,3)|0);
 _merror($2,159848);
 $3 = HEAP16[132080>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  _free($2);
  $83 = HEAP16[((936 + 510|0))>>1]|0;
  $84 = $83&65535;
  HEAP32[132368>>2] = $84;
  STACKTOP = sp;return;
 }
 $5 = (($rgb) + 4|0);
 $6 = (($rgb) + 8|0);
 $row$04 = 0;
 while(1) {
  $7 = $row$04 & 1;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = HEAP16[132336>>1]|0;
   $10 = $9&65535;
   $11 = HEAP32[864>>2]|0;
   $12 = (_fread(($2|0),($10|0),3,($11|0))|0);
   $13 = ($12>>>0)<(3);
   if ($13) {
    _derror();
   }
  }
  $14 = HEAP16[132088>>1]|0;
  $15 = ($14<<16>>16)==(0);
  if (!($15)) {
   $16 = $14&65535;
   $17 = (0 - ($7))|0;
   $18 = HEAP32[132112>>2]|0;
   $20 = $16;$col$03 = 0;
   while(1) {
    $19 = $20 << 1;
    $21 = $19 & $17;
    $22 = (($21) + ($col$03))|0;
    $23 = (($2) + ($22)|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $col$03 & -2;
    $27 = (($20) + ($26))|0;
    $28 = (($2) + ($27)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = (($30) + -128)|0;
    $32 = (($27) + 1)|0;
    $33 = (($2) + ($32)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = (($35) + -128)|0;
    $37 = (($30) + -126)|0;
    $38 = (($37) + ($36))|0;
    $39 = $38 >> 2;
    $40 = (($25) - ($39))|0;
    HEAP32[$5>>2] = $40;
    $41 = (($40) + ($31))|0;
    HEAP32[$6>>2] = $41;
    $42 = HEAP32[$5>>2]|0;
    $43 = (($36) + ($42))|0;
    HEAP32[$rgb>>2] = $43;
    $44 = ($43|0)<(255);
    $$ = $44 ? $43 : 255;
    $45 = ($$|0)<(0);
    $$$ = $45 ? 0 : $$;
    $46 = (936 + ($$$<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = HEAP16[132088>>1]|0;
    $49 = $48&65535;
    $50 = Math_imul($49, $row$04)|0;
    $51 = (($50) + ($col$03))|0;
    $52 = (($18) + ($51<<3)|0);
    HEAP16[$52>>1] = $47;
    $53 = (($rgb) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($54|0)<(255);
    $$$1 = $55 ? $54 : 255;
    $56 = ($$$1|0)<(0);
    $$$$1 = $56 ? 0 : $$$1;
    $57 = (936 + ($$$$1<<1)|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = HEAP16[132088>>1]|0;
    $60 = $59&65535;
    $61 = Math_imul($60, $row$04)|0;
    $62 = (($61) + ($col$03))|0;
    $63 = ((($18) + ($62<<3)|0) + 2|0);
    HEAP16[$63>>1] = $58;
    $64 = (($rgb) + 8|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)<(255);
    $$$2 = $66 ? $65 : 255;
    $67 = ($$$2|0)<(0);
    $$$$2 = $67 ? 0 : $$$2;
    $68 = (936 + ($$$$2<<1)|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = HEAP16[132088>>1]|0;
    $71 = $70&65535;
    $72 = Math_imul($71, $row$04)|0;
    $73 = (($72) + ($col$03))|0;
    $74 = ((($18) + ($73<<3)|0) + 4|0);
    HEAP16[$74>>1] = $69;
    $75 = (($col$03) + 1)|0;
    $76 = HEAP16[132088>>1]|0;
    $77 = $76&65535;
    $78 = ($75|0)<($77|0);
    if ($78) {
     $20 = $77;$col$03 = $75;
    } else {
     break;
    }
   }
  }
  $79 = (($row$04) + 1)|0;
  $80 = HEAP16[132080>>1]|0;
  $81 = $80&65535;
  $82 = ($79|0)<($81|0);
  if ($82) {
   $row$04 = $79;
  } else {
   break;
  }
 }
 _free($2);
 $83 = HEAP16[((936 + 510|0))>>1]|0;
 $84 = $83&65535;
 HEAP32[132368>>2] = $84;
 STACKTOP = sp;return;
}
function _kodak_262_load_raw() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $c$112 = 0, $col$05 = 0, $huff = 0, $or$cond = 0;
 var $pi$09 = 0, $pi$2$lcssa = 0, $pi$2$ph = 0, $pi$26 = 0, $pi1$1 = 0, $pi1$1$ = 0, $pi1$2 = 0, $pi2$1 = 0, $row$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $huff = sp;
 $0 = (_make_decoder(159872)|0);
 HEAP32[$huff>>2] = $0;
 $1 = (_make_decoder(((159872 + 26|0)))|0);
 $2 = (($huff) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP16[133064>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + 63)|0;
 $6 = $5 >>> 5;
 $7 = HEAP16[132336>>1]|0;
 $8 = $7&65535;
 $9 = $8 << 5;
 $10 = $6 << 2;
 $11 = (($10) + ($9))|0;
 $12 = (_malloc($11)|0);
 _merror($12,159928);
 $13 = HEAP16[132336>>1]|0;
 $14 = $13&65535;
 $15 = $14 << 5;
 $16 = (($12) + ($15)|0);
 HEAP16[928>>1] = 19789;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $c$112 = 0;
  while(1) {
   $20 = (_get4()|0);
   $21 = (($16) + ($c$112<<2)|0);
   HEAP32[$21>>2] = $20;
   $22 = (($c$112) + 1)|0;
   $23 = ($22|0)<($6|0);
   if ($23) {
    $c$112 = $22;
   } else {
    break;
   }
  }
 }
 $18 = HEAP16[133064>>1]|0;
 $19 = ($18<<16>>16)==(0);
 if ($19) {
  _free($12);
  $92 = HEAP32[$huff>>2]|0;
  _free($92);
  $93 = (($huff) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  _free($94);
  STACKTOP = sp;return;
 } else {
  $pi$09 = 0;$row$07 = 0;
 }
 while(1) {
  $24 = $row$07 & 31;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = HEAP32[864>>2]|0;
   $27 = $row$07 >> 5;
   $28 = (($16) + ($27<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   (_fseek(($26|0),($29|0),0)|0);
   (_getbithuff(-1,0)|0);
   $pi$2$ph = 0;
  } else {
   $pi$2$ph = $pi$09;
  }
  $30 = HEAP16[132336>>1]|0;
  $31 = ($30<<16>>16)==(0);
  if ($31) {
   $pi$2$lcssa = $pi$2$ph;
  } else {
   $32 = $30&65535;
   $43 = $32;$col$05 = 0;$pi$26 = $pi$2$ph;
   while(1) {
    $33 = (($col$05) + ($row$07))|0;
    $34 = $33 & 1;
    $35 = ($34|0)==(0);
    if ($35) {
     $41 = (($pi$26) + -1)|0;
     $42 = (($41) - ($43))|0;
     $44 = HEAP16[132336>>1]|0;
     $45 = $44&65535;
     $46 = (($pi$26) + 1)|0;
     $47 = (($46) - ($45))|0;
     $49 = $42;$51 = $47;
    } else {
     $36 = (($pi$26) + -2)|0;
     $37 = HEAP16[132336>>1]|0;
     $38 = $37&65535;
     $39 = $38 << 1;
     $40 = (($pi$26) - ($39))|0;
     $49 = $36;$51 = $40;
    }
    $48 = ($col$05|0)>($34|0);
    $$ = $48 ? $49 : -1;
    $50 = ($$|0)<(0);
    $pi1$1 = $50 ? $51 : $$;
    $52 = ($pi1$1|0)<(0);
    $53 = ($col$05|0)>(1);
    $or$cond = $53 & $52;
    $54 = (($pi$26) + -2)|0;
    $pi1$2 = $or$cond ? $54 : $pi1$1;
    $55 = ($pi1$2|0)<(0);
    if ($55) {
     $69 = 0;
    } else {
     $56 = ($51|0)<(0);
     $pi1$1$ = $56 ? $pi1$1 : $51;
     $pi2$1 = $or$cond ? $54 : $pi1$1$;
     $57 = (($12) + ($pi1$2)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = (($12) + ($pi2$1)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = (($62) + ($59))|0;
     $64 = $63 >>> 1;
     $69 = $64;
    }
    $65 = (($huff) + ($34<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (_ljpeg_diff($66)|0);
    $68 = (($67) + ($69))|0;
    $70 = $68&255;
    $71 = (($12) + ($pi$26)|0);
    HEAP8[$71>>0] = $70;
    $72 = ($68>>>0)>(255);
    if ($72) {
     _derror();
    }
    $73 = (($pi$26) + 1)|0;
    $74 = HEAP8[$71>>0]|0;
    $75 = $74&255;
    $76 = (936 + ($75<<1)|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = HEAP16[132336>>1]|0;
    $79 = $78&65535;
    $80 = Math_imul($79, $row$07)|0;
    $81 = (($80) + ($col$05))|0;
    $82 = HEAP32[132328>>2]|0;
    $83 = (($82) + ($81<<1)|0);
    HEAP16[$83>>1] = $77;
    $84 = (($col$05) + 1)|0;
    $85 = HEAP16[132336>>1]|0;
    $86 = $85&65535;
    $87 = ($84|0)<($86|0);
    if ($87) {
     $43 = $86;$col$05 = $84;$pi$26 = $73;
    } else {
     $pi$2$lcssa = $73;
     break;
    }
   }
  }
  $88 = (($row$07) + 1)|0;
  $89 = HEAP16[133064>>1]|0;
  $90 = $89&65535;
  $91 = ($88|0)<($90|0);
  if ($91) {
   $pi$09 = $pi$2$lcssa;$row$07 = $88;
  } else {
   break;
  }
 }
 _free($12);
 $92 = HEAP32[$huff>>2]|0;
 _free($92);
 $93 = (($huff) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 _free($94);
 STACKTOP = sp;return;
}
function _kodak_65000_decode($out,$bsize) {
 $out = $out|0;
 $bsize = $bsize|0;
 var $$0 = 0, $$neg = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bits$1$ph = 0, $bits$19 = 0, $bits$2 = 0, $blen = 0, $diff$0 = 0, $exitcond14 = 0, $i$012 = 0, $i$15 = 0, $i$210 = 0, $raw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0;
 $blen = sp + 16|0;
 $raw = sp;
 $0 = HEAP32[864>>2]|0;
 $1 = (_ftell(($0|0))|0);
 $2 = (($bsize) + 3)|0;
 $3 = $2 & -4;
 $4 = ($3|0)>(0);
 L1: do {
  if ($4) {
   $i$012 = 0;
   while(1) {
    $7 = HEAP32[864>>2]|0;
    $8 = (_getc_unlocked(($7|0))|0);
    $9 = $8 & 15;
    $10 = $9&255;
    $11 = (($blen) + ($i$012)|0);
    HEAP8[$11>>0] = $10;
    $12 = ($9>>>0)>(12);
    if ($12) {
     break;
    }
    $13 = $8 >>> 4;
    $14 = $13 & 15;
    $15 = $14&255;
    $16 = $i$012 | 1;
    $17 = (($blen) + ($16)|0);
    HEAP8[$17>>0] = $15;
    $18 = ($14>>>0)>(12);
    $5 = (($i$012) + 2)|0;
    if ($18) {
     break;
    }
    $6 = ($5|0)<($3|0);
    if ($6) {
     $i$012 = $5;
    } else {
     break L1;
    }
   }
   $19 = HEAP32[864>>2]|0;
   (_fseek(($19|0),($1|0),0)|0);
   $20 = ($3|0)>(0);
   if (!($20)) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $21 = (($raw) + 4|0);
   $22 = (($raw) + 8|0);
   $23 = (($raw) + 2|0);
   $24 = (($raw) + 6|0);
   $25 = (($raw) + 10|0);
   $i$15 = 0;
   while(1) {
    _read_shorts($raw,6);
    $26 = HEAP16[$raw>>1]|0;
    $27 = $26&65535;
    $28 = $27 >>> 12;
    $29 = $28 << 8;
    $30 = HEAP16[$21>>1]|0;
    $31 = $30&65535;
    $32 = $31 >>> 12;
    $33 = $32 << 4;
    $34 = $33 | $29;
    $35 = HEAP16[$22>>1]|0;
    $36 = $35&65535;
    $37 = $36 >>> 12;
    $38 = $34 | $37;
    $39 = $38&65535;
    $40 = (($out) + ($i$15<<1)|0);
    HEAP16[$40>>1] = $39;
    $41 = HEAP16[$23>>1]|0;
    $42 = $41&65535;
    $43 = $42 >>> 12;
    $44 = $43 << 8;
    $45 = HEAP16[$24>>1]|0;
    $46 = $45&65535;
    $47 = $46 >>> 12;
    $48 = $47 << 4;
    $49 = $48 | $44;
    $50 = HEAP16[$25>>1]|0;
    $51 = $50&65535;
    $52 = $51 >>> 12;
    $53 = $49 | $52;
    $54 = $53&65535;
    $55 = $i$15 | 1;
    $56 = (($out) + ($55<<1)|0);
    HEAP16[$56>>1] = $54;
    $57 = $i$15 | 2;
    $58 = HEAP16[$raw>>1]|0;
    $59 = $58&65535;
    $60 = $59 & 4095;
    $61 = $60&65535;
    $62 = (($out) + ($57<<1)|0);
    HEAP16[$62>>1] = $61;
    $63 = (($raw) + 2|0);
    $64 = HEAP16[$63>>1]|0;
    $65 = $64&65535;
    $66 = $65 & 4095;
    $67 = $66&65535;
    $68 = $i$15 | 3;
    $69 = (($out) + ($68<<1)|0);
    HEAP16[$69>>1] = $67;
    $70 = (($raw) + 4|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $73 = $72 & 4095;
    $74 = $73&65535;
    $75 = (($57) + 2)|0;
    $76 = (($out) + ($75<<1)|0);
    HEAP16[$76>>1] = $74;
    $77 = (($raw) + 6|0);
    $78 = HEAP16[$77>>1]|0;
    $79 = $78&65535;
    $80 = $79 & 4095;
    $81 = $80&65535;
    $82 = (($57) + 3)|0;
    $83 = (($out) + ($82<<1)|0);
    HEAP16[$83>>1] = $81;
    $84 = (($raw) + 8|0);
    $85 = HEAP16[$84>>1]|0;
    $86 = $85&65535;
    $87 = $86 & 4095;
    $88 = $87&65535;
    $89 = $i$15 | 6;
    $90 = (($out) + ($89<<1)|0);
    HEAP16[$90>>1] = $88;
    $91 = (($raw) + 10|0);
    $92 = HEAP16[$91>>1]|0;
    $93 = $92&65535;
    $94 = $93 & 4095;
    $95 = $94&65535;
    $96 = $i$15 | 7;
    $97 = (($out) + ($96<<1)|0);
    HEAP16[$97>>1] = $95;
    $98 = (($i$15) + 8)|0;
    $99 = ($98|0)<($3|0);
    if ($99) {
     $i$15 = $98;
    } else {
     $$0 = 1;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $100 = $2 & 4;
 $101 = ($100|0)==(0);
 if ($101) {
  $176 = 0;$177 = 0;$bits$1$ph = 0;
 } else {
  $102 = HEAP32[864>>2]|0;
  $103 = (_getc_unlocked(($102|0))|0);
  $104 = $103 << 8;
  $105 = ($104|0)<(0);
  $106 = $105 << 31 >> 31;
  $107 = HEAP32[864>>2]|0;
  $108 = (_getc_unlocked(($107|0))|0);
  $109 = ($108|0)<(0);
  $110 = $109 << 31 >> 31;
  $111 = (_i64Add(($108|0),($110|0),($104|0),($106|0))|0);
  $112 = tempRet0;
  $176 = $111;$177 = $112;$bits$1$ph = 16;
 }
 $113 = ($3|0)>(0);
 if (!($113)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $114 = (($bsize) + 3)|0;
 $115 = $114 & -4;
 $116 = (($115) + -1)|0;
 $128 = $176;$129 = $177;$bits$19 = $bits$1$ph;$i$210 = 0;
 while(1) {
  $117 = (($blen) + ($i$210)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = ($bits$19|0)<($119|0);
  if ($120) {
   $121 = HEAP32[864>>2]|0;
   $122 = (_getc_unlocked(($121|0))|0);
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = (($bits$19) + 8)|0;
   $126 = (_bitshift64Shl(($122|0),($124|0),($125|0))|0);
   $127 = tempRet0;
   $130 = (_i64Add(($126|0),($127|0),($128|0),($129|0))|0);
   $131 = tempRet0;
   $132 = HEAP32[864>>2]|0;
   $133 = (_getc_unlocked(($132|0))|0);
   $134 = ($133|0)<(0);
   $135 = $134 << 31 >> 31;
   $136 = (_bitshift64Shl(($133|0),($135|0),($bits$19|0))|0);
   $137 = tempRet0;
   $138 = (_i64Add(($136|0),($137|0),($130|0),($131|0))|0);
   $139 = tempRet0;
   $140 = HEAP32[864>>2]|0;
   $141 = (_getc_unlocked(($140|0))|0);
   $142 = ($141|0)<(0);
   $143 = $142 << 31 >> 31;
   $144 = (($bits$19) + 24)|0;
   $145 = (_bitshift64Shl(($141|0),($143|0),($144|0))|0);
   $146 = tempRet0;
   $147 = (_i64Add(($145|0),($146|0),($138|0),($139|0))|0);
   $148 = tempRet0;
   $149 = HEAP32[864>>2]|0;
   $150 = (_getc_unlocked(($149|0))|0);
   $151 = ($150|0)<(0);
   $152 = $151 << 31 >> 31;
   $153 = (($bits$19) + 16)|0;
   $154 = (_bitshift64Shl(($150|0),($152|0),($153|0))|0);
   $155 = tempRet0;
   $156 = (_i64Add(($154|0),($155|0),($147|0),($148|0))|0);
   $157 = tempRet0;
   $158 = (($bits$19) + 32)|0;
   $162 = $156;$164 = $157;$bits$2 = $158;
  } else {
   $162 = $128;$164 = $129;$bits$2 = $bits$19;
  }
  $159 = (16 - ($119))|0;
  $160 = 65535 >>> $159;
  $161 = $162 & $160;
  $163 = $118&255;
  $165 = (_bitshift64Ashr(($162|0),($164|0),($163|0))|0);
  $166 = tempRet0;
  $167 = (($bits$2) - ($119))|0;
  $168 = (($119) + -1)|0;
  $169 = 1 << $168;
  $170 = $161 & $169;
  $171 = ($170|0)==(0);
  if ($171) {
   $$neg = -1 << $119;
   $$neg1 = (($$neg) + 1)|0;
   $172 = (($$neg1) + ($161))|0;
   $diff$0 = $172;
  } else {
   $diff$0 = $161;
  }
  $173 = $diff$0&65535;
  $174 = (($out) + ($i$210<<1)|0);
  HEAP16[$174>>1] = $173;
  $175 = (($i$210) + 1)|0;
  $exitcond14 = ($i$210|0)==($116|0);
  if ($exitcond14) {
   $$0 = 0;
   break;
  } else {
   $128 = $165;$129 = $166;$bits$19 = $167;$i$210 = $175;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _kodak_65000_load_raw() {
 var $$ = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $col$02 = 0, $exitcond = 0, $i$01 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $pred = 0, $row$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $buf = sp + 8|0;
 $pred = sp;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($pred) + 4|0);
 $row$06 = 0;
 while(1) {
  $3 = HEAP16[132088>>1]|0;
  $4 = ($3<<16>>16)==(0);
  if (!($4)) {
   $col$02 = 0;$indvars$iv = -1;
   while(1) {
    HEAP32[$2>>2] = 0;
    HEAP32[$pred>>2] = 0;
    $5 = HEAP16[132088>>1]|0;
    $6 = $5&65535;
    $7 = (($6) - ($col$02))|0;
    $8 = ($7|0)>(256);
    $$ = $8 ? 256 : $7;
    $9 = (_kodak_65000_decode($buf,$$)|0);
    $10 = ($$|0)>(0);
    if ($10) {
     $11 = ($9|0)==(0);
     $12 = $5&65535;
     $13 = (($indvars$iv) - ($12))|0;
     $14 = ($13|0)>(-257);
     $$op = (-2 - ($13))|0;
     $15 = $14 ? $$op : 255;
     $i$01 = 0;
     while(1) {
      $16 = (($buf) + ($i$01<<1)|0);
      $17 = HEAP16[$16>>1]|0;
      $18 = $17 << 16 >> 16;
      if ($11) {
       $19 = $i$01 & 1;
       $20 = (($pred) + ($19<<2)|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($21) + ($18))|0;
       HEAP32[$20>>2] = $22;
       $24 = $22;
      } else {
       $24 = $18;
      }
      $23 = (936 + ($24<<1)|0);
      $25 = HEAP16[$23>>1]|0;
      $26 = HEAP16[132336>>1]|0;
      $27 = $26&65535;
      $28 = Math_imul($27, $row$06)|0;
      $29 = (($i$01) + ($col$02))|0;
      $30 = (($29) + ($28))|0;
      $31 = HEAP32[132328>>2]|0;
      $32 = (($31) + ($30<<1)|0);
      HEAP16[$32>>1] = $25;
      $33 = ($25&65535)>(4095);
      if ($33) {
       _derror();
      }
      $34 = (($i$01) + 1)|0;
      $exitcond = ($i$01|0)==($15|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $34;
      }
     }
    }
    $35 = (($col$02) + 256)|0;
    $36 = HEAP16[132088>>1]|0;
    $37 = $36&65535;
    $38 = ($35|0)<($37|0);
    $indvars$iv$next = (($indvars$iv) + 256)|0;
    if ($38) {
     $col$02 = $35;$indvars$iv = $indvars$iv$next;
    } else {
     break;
    }
   }
  }
  $39 = (($row$06) + 1)|0;
  $40 = HEAP16[132080>>1]|0;
  $41 = $40&65535;
  $42 = ($39|0)<($41|0);
  if ($42) {
   $row$06 = $39;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _kodak_ycbcr_load_raw() {
 var $$ = 0, $$$1 = 0, $$$1$1 = 0, $$$1$1$1 = 0, $$$1$126 = 0, $$$1$2 = 0, $$$1$2$1 = 0, $$1 = 0, $$1$1 = 0, $$1$1$1 = 0, $$1$125 = 0, $$1$2 = 0, $$1$2$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp$013 = 0, $bp$19 = 0, $buf = 0, $cb$011 = 0, $col$014 = 0, $cr$012 = 0, $exitcond24 = 0, $i$010 = 0;
 var $j$08 = 0, $or$cond = 0, $rgb = 0, $row$018 = 0, $scevgep = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0;
 $buf = sp + 32|0;
 $y = sp + 16|0;
 $rgb = sp;
 $0 = HEAP32[132112>>2]|0;
 $1 = ($0|0)==(0|0);
 $2 = HEAP16[132080>>1]|0;
 $3 = ($2<<16>>16)==(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $4 = (($y) + 12|0);
 $5 = (($y) + 4|0);
 $6 = (($rgb) + 4|0);
 $7 = (($rgb) + 8|0);
 $row$018 = 0;
 while(1) {
  $8 = HEAP16[132088>>1]|0;
  $9 = ($8<<16>>16)==(0);
  if (!($9)) {
   $10 = $8&65535;
   $12 = $10;$col$014 = 0;
   while(1) {
    $11 = (($12) - ($col$014))|0;
    $13 = ($11|0)>(128);
    $$ = $13 ? 128 : $11;
    $14 = ($$*3)|0;
    (_kodak_65000_decode($buf,$14)|0);
    HEAP32[$4>>2] = 0;
    HEAP32[$5>>2] = 0;
    $15 = ($$|0)>(0);
    if ($15) {
     $bp$013 = $buf;$cb$011 = 0;$cr$012 = 0;$i$010 = 0;
     while(1) {
      $16 = (($bp$013) + 8|0);
      $17 = HEAP16[$16>>1]|0;
      $18 = $17 << 16 >> 16;
      $19 = (($18) + ($cb$011))|0;
      $20 = (($bp$013) + 10|0);
      $21 = HEAP16[$20>>1]|0;
      $22 = $21 << 16 >> 16;
      $23 = (($22) + ($cr$012))|0;
      $24 = (($19) + 2)|0;
      $25 = (($24) + ($23))|0;
      $26 = $25 >> 2;
      $27 = (0 - ($26))|0;
      HEAP32[$6>>2] = $27;
      $28 = (($19) - ($26))|0;
      HEAP32[$7>>2] = $28;
      $29 = HEAP32[$6>>2]|0;
      $30 = (($23) + ($29))|0;
      HEAP32[$rgb>>2] = $30;
      $31 = (($i$010) + ($col$014))|0;
      $bp$19 = $bp$013;$j$08 = 0;
      while(1) {
       $32 = (($j$08) + ($row$018))|0;
       $33 = ((($y) + ($j$08<<3)|0) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($bp$19) + 2|0);
       $36 = HEAP16[$bp$19>>1]|0;
       $37 = $36 << 16 >> 16;
       $38 = (($37) + ($34))|0;
       $39 = (($y) + ($j$08<<3)|0);
       HEAP32[$39>>2] = $38;
       $40 = ($38>>>0)>(1023);
       if ($40) {
        _derror();
       }
       $41 = HEAP16[132088>>1]|0;
       $42 = $41&65535;
       $43 = Math_imul($42, $32)|0;
       $44 = (($31) + ($43))|0;
       $45 = HEAP32[132112>>2]|0;
       $46 = HEAP32[$39>>2]|0;
       $47 = HEAP32[$rgb>>2]|0;
       $48 = (($47) + ($46))|0;
       $49 = ($48|0)<(4095);
       $$1 = $49 ? $48 : 4095;
       $50 = ($$1|0)<(0);
       $$$1 = $50 ? 0 : $$1;
       $51 = (936 + ($$$1<<1)|0);
       $52 = HEAP16[$51>>1]|0;
       $53 = (($45) + ($44<<3)|0);
       HEAP16[$53>>1] = $52;
       $54 = (($rgb) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (($55) + ($46))|0;
       $57 = ($56|0)<(4095);
       $$1$1 = $57 ? $56 : 4095;
       $58 = ($$1$1|0)<(0);
       $$$1$1 = $58 ? 0 : $$1$1;
       $59 = (936 + ($$$1$1<<1)|0);
       $60 = HEAP16[$59>>1]|0;
       $61 = ((($45) + ($44<<3)|0) + 2|0);
       HEAP16[$61>>1] = $60;
       $62 = (($rgb) + 8|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (($63) + ($46))|0;
       $65 = ($64|0)<(4095);
       $$1$2 = $65 ? $64 : 4095;
       $66 = ($$1$2|0)<(0);
       $$$1$2 = $66 ? 0 : $$1$2;
       $67 = (936 + ($$$1$2<<1)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = ((($45) + ($44<<3)|0) + 4|0);
       HEAP16[$69>>1] = $68;
       $70 = (($y) + ($j$08<<3)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = HEAP16[$35>>1]|0;
       $73 = $72 << 16 >> 16;
       $74 = (($73) + ($71))|0;
       $75 = ((($y) + ($j$08<<3)|0) + 4|0);
       HEAP32[$75>>2] = $74;
       $76 = ($74>>>0)>(1023);
       if ($76) {
        _derror();
       }
       $88 = HEAP16[132088>>1]|0;
       $89 = $88&65535;
       $90 = Math_imul($89, $32)|0;
       $91 = $31 | 1;
       $92 = (($91) + ($90))|0;
       $93 = HEAP32[132112>>2]|0;
       $94 = HEAP32[$75>>2]|0;
       $95 = HEAP32[$rgb>>2]|0;
       $96 = (($95) + ($94))|0;
       $97 = ($96|0)<(4095);
       $$1$125 = $97 ? $96 : 4095;
       $98 = ($$1$125|0)<(0);
       $$$1$126 = $98 ? 0 : $$1$125;
       $99 = (936 + ($$$1$126<<1)|0);
       $100 = HEAP16[$99>>1]|0;
       $101 = (($93) + ($92<<3)|0);
       HEAP16[$101>>1] = $100;
       $102 = (($rgb) + 4|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = (($103) + ($94))|0;
       $105 = ($104|0)<(4095);
       $$1$1$1 = $105 ? $104 : 4095;
       $106 = ($$1$1$1|0)<(0);
       $$$1$1$1 = $106 ? 0 : $$1$1$1;
       $107 = (936 + ($$$1$1$1<<1)|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = ((($93) + ($92<<3)|0) + 2|0);
       HEAP16[$109>>1] = $108;
       $110 = (($rgb) + 8|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = (($111) + ($94))|0;
       $113 = ($112|0)<(4095);
       $$1$2$1 = $113 ? $112 : 4095;
       $114 = ($$1$2$1|0)<(0);
       $$$1$2$1 = $114 ? 0 : $$1$2$1;
       $115 = (936 + ($$$1$2$1<<1)|0);
       $116 = HEAP16[$115>>1]|0;
       $117 = ((($93) + ($92<<3)|0) + 4|0);
       HEAP16[$117>>1] = $116;
       $scevgep = (($bp$19) + 4|0);
       $118 = (($j$08) + 1)|0;
       $exitcond24 = ($118|0)==(2);
       if ($exitcond24) {
        break;
       } else {
        $bp$19 = $scevgep;$j$08 = $118;
       }
      }
      $77 = (($i$010) + 2)|0;
      $78 = (($bp$013) + 12|0);
      $79 = ($77|0)<($$|0);
      if ($79) {
       $bp$013 = $78;$cb$011 = $19;$cr$012 = $23;$i$010 = $77;
      } else {
       break;
      }
     }
    }
    $80 = (($col$014) + 128)|0;
    $81 = HEAP16[132088>>1]|0;
    $82 = $81&65535;
    $83 = ($82|0)>($80|0);
    if ($83) {
     $12 = $82;$col$014 = $80;
    } else {
     break;
    }
   }
  }
  $84 = (($row$018) + 2)|0;
  $85 = HEAP16[132080>>1]|0;
  $86 = $85&65535;
  $87 = ($84|0)<($86|0);
  if ($87) {
   $row$018 = $84;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _kodak_rgb_load_raw() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bp$04 = 0, $buf = 0, $col$07 = 0, $exitcond17 = 0, $i$05 = 0, $indvars$iv = 0, $indvars$iv$next = 0;
 var $ip$012 = 0, $ip$1$lcssa = 0, $ip$18 = 0, $ip$2$lcssa = 0, $ip$26 = 0, $rgb = 0, $row$011 = 0, $scevgep = 0, $scevgep15$sum = 0, $scevgep16 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1552|0;
 $buf = sp + 16|0;
 $rgb = sp;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[132112>>2]|0;
 $ip$012 = $2;$row$011 = 0;
 while(1) {
  $3 = HEAP16[132088>>1]|0;
  $4 = ($3<<16>>16)==(0);
  if ($4) {
   $ip$1$lcssa = $ip$012;
  } else {
   $5 = $3&65535;
   $7 = $5;$col$07 = 0;$indvars$iv = -1;$ip$18 = $ip$012;
   while(1) {
    $6 = (($7) - ($col$07))|0;
    $8 = ($6|0)>(256);
    $$ = $8 ? 256 : $6;
    $9 = ($$*3)|0;
    (_kodak_65000_decode($buf,$9)|0);
    ;HEAP32[$rgb+0>>2]=0|0;HEAP32[$rgb+4>>2]=0|0;HEAP32[$rgb+8>>2]=0|0;
    $10 = ($$|0)>(0);
    if ($10) {
     $11 = (($indvars$iv) - ($7))|0;
     $12 = ($11|0)>(-257);
     $smax = $12 ? $11 : -257;
     $13 = Math_imul($smax, -4)|0;
     $14 = (-2 - ($smax))|0;
     $bp$04 = $buf;$i$05 = 0;$ip$26 = $ip$18;
     while(1) {
      $15 = (($bp$04) + 2|0);
      $16 = HEAP16[$bp$04>>1]|0;
      $17 = $16 << 16 >> 16;
      $18 = HEAP32[$rgb>>2]|0;
      $19 = (($18) + ($17))|0;
      HEAP32[$rgb>>2] = $19;
      $20 = $19&65535;
      HEAP16[$ip$26>>1] = $20;
      $21 = $19 & 61440;
      $22 = ($21|0)==(0);
      if (!($22)) {
       _derror();
      }
      $23 = (($bp$04) + 4|0);
      $24 = HEAP16[$15>>1]|0;
      $25 = $24 << 16 >> 16;
      $26 = (($rgb) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + ($25))|0;
      HEAP32[$26>>2] = $28;
      $29 = $28&65535;
      $30 = (($ip$26) + 2|0);
      HEAP16[$30>>1] = $29;
      $31 = $28 & 61440;
      $32 = ($31|0)==(0);
      if (!($32)) {
       _derror();
      }
      $41 = HEAP16[$23>>1]|0;
      $42 = $41 << 16 >> 16;
      $43 = (($rgb) + 8|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + ($42))|0;
      HEAP32[$43>>2] = $45;
      $46 = $45&65535;
      $47 = (($ip$26) + 4|0);
      HEAP16[$47>>1] = $46;
      $48 = $45 & 61440;
      $49 = ($48|0)==(0);
      if (!($49)) {
       _derror();
      }
      $scevgep = (($bp$04) + 6|0);
      $50 = (($i$05) + 1)|0;
      $51 = (($ip$26) + 8|0);
      $exitcond17 = ($i$05|0)==($14|0);
      if ($exitcond17) {
       break;
      } else {
       $bp$04 = $scevgep;$i$05 = $50;$ip$26 = $51;
      }
     }
     $scevgep15$sum = (($13) + -4)|0;
     $scevgep16 = (($ip$18) + ($scevgep15$sum<<1)|0);
     $ip$2$lcssa = $scevgep16;
    } else {
     $ip$2$lcssa = $ip$18;
    }
    $33 = (($col$07) + 256)|0;
    $34 = HEAP16[132088>>1]|0;
    $35 = $34&65535;
    $36 = ($35|0)>($33|0);
    $indvars$iv$next = (($indvars$iv) + 256)|0;
    if ($36) {
     $7 = $35;$col$07 = $33;$indvars$iv = $indvars$iv$next;$ip$18 = $ip$2$lcssa;
    } else {
     $ip$1$lcssa = $ip$2$lcssa;
     break;
    }
   }
  }
  $37 = (($row$011) + 1)|0;
  $38 = HEAP16[132080>>1]|0;
  $39 = $38&65535;
  $40 = ($37|0)<($39|0);
  if ($40) {
   $ip$012 = $ip$1$lcssa;$row$011 = $37;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _kodak_thumb_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col$01 = 0, $row$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[133840>>2]|0;
 $1 = $0 >>> 5;
 HEAP32[132272>>2] = $1;
 $2 = HEAP16[132080>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $21 = HEAP32[133840>>2]|0;
  $22 = $21 & 31;
  $23 = 1 << $22;
  $24 = (($23) + -1)|0;
  HEAP32[132368>>2] = $24;
  return;
 } else {
  $row$02 = 0;
 }
 while(1) {
  $4 = HEAP16[132088>>1]|0;
  $5 = ($4<<16>>16)==(0);
  if (!($5)) {
   $6 = $4&65535;
   $8 = $6;$col$01 = 0;
   while(1) {
    $7 = Math_imul($8, $row$02)|0;
    $9 = (($7) + ($col$01))|0;
    $10 = HEAP32[132112>>2]|0;
    $11 = (($10) + ($9<<3)|0);
    $12 = HEAP32[132272>>2]|0;
    _read_shorts($11,$12);
    $13 = (($col$01) + 1)|0;
    $14 = HEAP16[132088>>1]|0;
    $15 = $14&65535;
    $16 = ($13|0)<($15|0);
    if ($16) {
     $8 = $15;$col$01 = $13;
    } else {
     break;
    }
   }
  }
  $17 = (($row$02) + 1)|0;
  $18 = HEAP16[132080>>1]|0;
  $19 = $18&65535;
  $20 = ($17|0)<($19|0);
  if ($20) {
   $row$02 = $17;
  } else {
   break;
  }
 }
 $21 = HEAP32[133840>>2]|0;
 $22 = $21 & 31;
 $23 = 1 << $22;
 $24 = (($23) + -1)|0;
 HEAP32[132368>>2] = $24;
 return;
}
function _sony_decrypt($data,$len,$start,$key) {
 $data = $data|0;
 $len = $len|0;
 $start = $start|0;
 $key = $key|0;
 var $$017 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($start|0)==(0);
 if (!($0)) {
  $2 = Math_imul($key, 48828125)|0;
  $3 = (($2) + 1)|0;
  HEAP32[159952>>2] = $3;
  $4 = Math_imul($3, 48828125)|0;
  $5 = (($4) + 1)|0;
  HEAP32[((159952 + 4|0))>>2] = $5;
  $6 = Math_imul($5, 48828125)|0;
  $7 = (($6) + 1)|0;
  HEAP32[((159952 + 8|0))>>2] = $7;
  $8 = Math_imul($7, 48828125)|0;
  $9 = (($8) + 1)|0;
  HEAP32[((159952 + 12|0))>>2] = $9;
  $10 = $9 << 1;
  $11 = HEAP32[159952>>2]|0;
  $12 = HEAP32[((159952 + 8|0))>>2]|0;
  $13 = $12 ^ $11;
  $14 = $13 >>> 31;
  $15 = $14 | $10;
  HEAP32[((159952 + 12|0))>>2] = $15;
  HEAP32[160464>>2] = 4;
  $17 = 4;
  while(1) {
   $16 = (($17) + -4)|0;
   $18 = (159952 + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + -2)|0;
   $21 = (159952 + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 ^ $19;
   $24 = $23 << 1;
   $25 = (($17) + -3)|0;
   $26 = (159952 + ($25<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($17) + -1)|0;
   $29 = (159952 + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $30 ^ $27;
   $32 = $31 >>> 31;
   $33 = $32 | $24;
   $34 = (159952 + ($17<<2)|0);
   HEAP32[$34>>2] = $33;
   $35 = (($17) + 1)|0;
   $exitcond18 = ($35|0)==(127);
   if ($exitcond18) {
    break;
   } else {
    $17 = $35;
   }
  }
  HEAP32[160464>>2] = 0;
  $37 = 0;
  while(1) {
   $36 = (159952 + ($37<<2)|0);
   $38 = HEAP32[$36>>2]|0;
   $39 = (_htonl(($38|0))|0);
   HEAP32[$36>>2] = $39;
   $40 = (($37) + 1)|0;
   $exitcond = ($40|0)==(127);
   if ($exitcond) {
    break;
   } else {
    $37 = $40;
   }
  }
  HEAP32[160464>>2] = 127;
 }
 $1 = ($len|0)==(0);
 if ($1) {
  return;
 } else {
  $$017 = $data;$$in = $len;
 }
 while(1) {
  $41 = (($$in) + -1)|0;
  $42 = HEAP32[160464>>2]|0;
  $43 = (($42) + 1)|0;
  HEAP32[160464>>2] = $43;
  $44 = ($42|0)==(0);
  if ($44) {
   label = 10;
   break;
  }
  $45 = $43 & 127;
  $46 = (159952 + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($42) + 65)|0;
  $49 = $48 & 127;
  $50 = (159952 + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $51 ^ $47;
  $53 = $42 & 127;
  $54 = (159952 + ($53<<2)|0);
  HEAP32[$54>>2] = $52;
  $55 = (($$017) + 4|0);
  $56 = HEAP32[$$017>>2]|0;
  $57 = $56 ^ $52;
  HEAP32[$$017>>2] = $57;
  $58 = ($41|0)==(0);
  if ($58) {
   label = 10;
   break;
  } else {
   $$017 = $55;$$in = $41;
  }
 }
 if ((label|0) == 10) {
  return;
 }
}
function _sony_load_raw() {
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $col$01 = 0, $div = 0, $head = 0, $row$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $head = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),200896,0)|0);
 $1 = HEAP32[864>>2]|0;
 $2 = (_getc_unlocked(($1|0))|0);
 $3 = $2 << 2;
 $4 = (($3) + -1)|0;
 (_fseek(($1|0),($4|0),1)|0);
 HEAP16[928>>1] = 19789;
 $5 = (_get4()|0);
 $6 = HEAP32[864>>2]|0;
 (_fseek(($6|0),164600,0)|0);
 $7 = HEAP32[864>>2]|0;
 (_fread(($head|0),1,40,($7|0))|0);
 _sony_decrypt($head,10,1,$5);
 $8 = $5 << 8;
 $9 = (($head) + 25|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 | $8;
 $13 = $12 << 8;
 $14 = (($head) + 24|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 | $13;
 $18 = $17 << 8;
 $19 = (($head) + 23|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 | $18;
 $23 = $22 << 8;
 $24 = (($head) + 22|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 | $23;
 $28 = HEAP32[864>>2]|0;
 $29 = HEAP32[133280>>2]|0;
 (_fseek(($28|0),($29|0),0)|0);
 $30 = HEAP16[133064>>1]|0;
 $31 = ($30<<16>>16)==(0);
 if ($31) {
  HEAP32[132368>>2] = 16368;
  STACKTOP = sp;return;
 } else {
  $row$02 = 0;
 }
 while(1) {
  $32 = HEAP32[132328>>2]|0;
  $33 = HEAP16[132336>>1]|0;
  $34 = $33&65535;
  $35 = Math_imul($34, $row$02)|0;
  $36 = (($32) + ($35<<1)|0);
  $37 = HEAP32[864>>2]|0;
  $38 = (_fread(($36|0),2,($34|0),($37|0))|0);
  $39 = HEAP16[132336>>1]|0;
  $40 = $39&65535;
  $41 = ($38>>>0)<($40>>>0);
  if ($41) {
   _derror();
  }
  $42 = HEAP16[132336>>1]|0;
  $div = ($42&65535) >>> 1;
  $43 = $div&65535;
  $44 = ($row$02|0)==(0);
  $45 = $44&1;
  _sony_decrypt($36,$43,$45,$27);
  $46 = HEAP16[132336>>1]|0;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $col$01 = 0;
   while(1) {
    $$sum = (($col$01) + ($35))|0;
    $48 = (($32) + ($$sum<<1)|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = (_ntohs(($49|0))|0);
    HEAP16[$48>>1] = $50;
    $51 = ($50&65535)>(16383);
    if ($51) {
     _derror();
    }
    $52 = (($col$01) + 1)|0;
    $53 = HEAP16[132336>>1]|0;
    $54 = $53&65535;
    $55 = ($52>>>0)<($54>>>0);
    if ($55) {
     $col$01 = $52;
    } else {
     break;
    }
   }
  }
  $56 = (($row$02) + 1)|0;
  $57 = HEAP16[133064>>1]|0;
  $58 = $57&65535;
  $59 = ($56>>>0)<($58>>>0);
  if ($59) {
   $row$02 = $56;
  } else {
   break;
  }
 }
 HEAP32[132368>>2] = 16368;
 STACKTOP = sp;return;
}
function _sony_arw_load_raw() {
 var $$in = 0, $$lcssa = 0, $$row$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $exitcond = 0, $huff = 0, $i$08 = 0, $n$09 = 0, $n$1$lcssa = 0, $n$16 = 0, $row$02 = 0, $smax = 0, $sum$04 = 0, $sum$13 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65552|0;
 $huff = sp;
 HEAP16[$huff>>1] = 15;
 $i$08 = 0;$n$09 = 0;
 while(1) {
  $0 = (160472 + ($i$08<<1)|0);
  $1 = HEAP16[$0>>1]|0;
  $2 = $1&65535;
  $3 = $2 >>> 8;
  $4 = 32768 >>> $3;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = HEAP16[$0>>1]|0;
   $7 = $6&65535;
   $8 = $7 >>> 8;
   $9 = 32768 >>> $8;
   $10 = ($9|0)>(1);
   $smax = $10 ? $9 : 1;
   $13 = $1;$c$05 = 0;$n$16 = $n$09;
   while(1) {
    $11 = (($n$16) + 1)|0;
    $12 = (($huff) + ($11<<1)|0);
    HEAP16[$12>>1] = $13;
    $14 = (($c$05) + 1)|0;
    $15 = ($14|0)<($9|0);
    if ($15) {
     $13 = $6;$c$05 = $14;$n$16 = $11;
    } else {
     break;
    }
   }
   $16 = (($n$09) + ($smax))|0;
   $n$1$lcssa = $16;
  } else {
   $n$1$lcssa = $n$09;
  }
  $17 = (($i$08) + 1)|0;
  $exitcond = ($17|0)==(18);
  if ($exitcond) {
   break;
  } else {
   $i$08 = $17;$n$09 = $n$1$lcssa;
  }
 }
 (_getbithuff(-1,0)|0);
 $18 = HEAP16[132336>>1]|0;
 $19 = ($18<<16>>16)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $18&65535;
 $$in = $20;$sum$04 = 0;
 while(1) {
  $21 = (($$in) + -1)|0;
  $23 = HEAP16[133064>>1]|0;
  $24 = $23&65535;
  $26 = $24;$row$02 = 0;$sum$13 = $sum$04;
  while(1) {
   $25 = ($row$02|0)==($26|0);
   $$row$0 = $25 ? 1 : $row$02;
   $27 = (_ljpeg_diff($huff)|0);
   $28 = (($27) + ($sum$13))|0;
   $29 = ($28>>>0)>(4095);
   if ($29) {
    _derror();
   }
   $30 = HEAP16[132080>>1]|0;
   $31 = $30&65535;
   $32 = ($$row$0|0)<($31|0);
   if ($32) {
    $33 = $28&65535;
    $34 = HEAP16[132336>>1]|0;
    $35 = $34&65535;
    $36 = Math_imul($35, $$row$0)|0;
    $37 = (($36) + ($21))|0;
    $38 = HEAP32[132328>>2]|0;
    $39 = (($38) + ($37<<1)|0);
    HEAP16[$39>>1] = $33;
   }
   $40 = (($$row$0) + 2)|0;
   $41 = HEAP16[133064>>1]|0;
   $42 = $41&65535;
   $43 = (($$row$0) + 1)|0;
   $44 = ($43|0)<($42|0);
   if ($44) {
    $26 = $42;$row$02 = $40;$sum$13 = $28;
   } else {
    $$lcssa = $28;
    break;
   }
  }
  $22 = ($21|0)==(0);
  if ($22) {
   break;
  } else {
   $$in = $21;$sum$04 = $$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function _sony_arw2_load_raw() {
 var $$ = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $bit$02 = 0, $bit$1 = 0, $col$06 = 0, $col$14 = 0;
 var $dp$07 = 0, $exitcond = 0, $exitcond13 = 0, $i$03 = 0, $i$15 = 0, $pix = 0, $row$08 = 0, $sh$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $pix = sp;
 $0 = HEAP16[132336>>1]|0;
 $1 = $0&65535;
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 _merror($3,160512);
 $4 = HEAP16[132080>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  _free($3);
  STACKTOP = sp;return;
 } else {
  $row$08 = 0;
 }
 while(1) {
  $6 = HEAP16[132336>>1]|0;
  $7 = $6&65535;
  $8 = HEAP32[864>>2]|0;
  (_fread(($3|0),1,($7|0),($8|0))|0);
  $9 = HEAP16[132336>>1]|0;
  $10 = ($9&65535)>(30);
  if ($10) {
   $col$06 = 0;$dp$07 = $3;
   while(1) {
    $15 = (_sget4($dp$07)|0);
    $12 = $15 & 2047;
    $16 = $15 >>> 11;
    $14 = $16 & 2047;
    $17 = $15 >>> 22;
    $18 = $17 & 15;
    $19 = $15 >>> 26;
    $20 = $19 & 15;
    $21 = (($12) - ($14))|0;
    $22 = ($21|0)<(128);
    if ($22) {
     $sh$0$lcssa = 0;
    } else {
     $23 = ($21|0)<(256);
     if ($23) {
      $sh$0$lcssa = 1;
     } else {
      $72 = ($21|0)<(512);
      if ($72) {
       $sh$0$lcssa = 2;
      } else {
       $73 = ($21|0)<(1024);
       $$14 = $73 ? 3 : 4;
       $sh$0$lcssa = $$14;
      }
     }
    }
    $11 = $12&65535;
    $13 = $14&65535;
    $bit$02 = 30;$i$03 = 0;
    while(1) {
     $25 = ($i$03|0)==($18|0);
     do {
      if ($25) {
       $26 = (($pix) + ($i$03<<1)|0);
       HEAP16[$26>>1] = $11;
       $bit$1 = $bit$02;
      } else {
       $27 = ($i$03|0)==($20|0);
       if ($27) {
        $28 = (($pix) + ($i$03<<1)|0);
        HEAP16[$28>>1] = $13;
        $bit$1 = $bit$02;
        break;
       } else {
        $29 = $bit$02 >> 3;
        $30 = (($dp$07) + ($29)|0);
        $31 = (_sget2($30)|0);
        $32 = $31&65535;
        $33 = $bit$02 & 7;
        $34 = $32 >>> $33;
        $35 = $34 & 127;
        $36 = $35 << $sh$0$lcssa;
        $37 = (($36) + ($14))|0;
        $38 = $37&65535;
        $39 = (($pix) + ($i$03<<1)|0);
        $40 = $37 & 63488;
        $41 = ($40>>>0)>(2047);
        $$ = $41 ? 2047 : $38;
        HEAP16[$39>>1] = $$;
        $42 = (($bit$02) + 7)|0;
        $bit$1 = $42;
        break;
       }
      }
     } while(0);
     $43 = (($i$03) + 1)|0;
     $exitcond = ($43|0)==(16);
     if ($exitcond) {
      break;
     } else {
      $bit$02 = $bit$1;$i$03 = $43;
     }
    }
    $24 = HEAP32[132328>>2]|0;
    $col$14 = $col$06;$i$15 = 0;
    while(1) {
     $44 = (($pix) + ($i$15<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = $46 << 1;
     $48 = (936 + ($47<<1)|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = ($49&65535) >>> 2;
     $51 = HEAP16[132336>>1]|0;
     $52 = $51&65535;
     $53 = Math_imul($52, $row$08)|0;
     $54 = (($53) + ($col$14))|0;
     $55 = (($24) + ($54<<1)|0);
     HEAP16[$55>>1] = $50;
     $56 = (($i$15) + 1)|0;
     $57 = (($col$14) + 2)|0;
     $exitcond13 = ($56|0)==(16);
     if ($exitcond13) {
      break;
     } else {
      $col$14 = $57;$i$15 = $56;
     }
    }
    $58 = (($col$06) + 32)|0;
    $59 = $58 & 1;
    $60 = ($59|0)!=(0);
    $61 = $60 ? 1 : 31;
    $62 = (($58) - ($61))|0;
    $63 = (($dp$07) + 16|0);
    $64 = HEAP16[132336>>1]|0;
    $65 = $64&65535;
    $66 = (($65) + -30)|0;
    $67 = ($62|0)<($66|0);
    if ($67) {
     $col$06 = $62;$dp$07 = $63;
    } else {
     break;
    }
   }
  }
  $68 = (($row$08) + 1)|0;
  $69 = HEAP16[132080>>1]|0;
  $70 = $69&65535;
  $71 = ($68|0)<($70|0);
  if ($71) {
   $row$08 = $68;
  } else {
   break;
  }
 }
 _free($3);
 STACKTOP = sp;return;
}
function _samsung_load_raw() {
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$3$op = 0, $c$312 = 0, $col$013 = 0, $col$15 = 0, $len = 0;
 var $op = 0, $row$016 = 0, $row$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $op = sp + 16|0;
 $len = sp;
 HEAP16[928>>1] = 18761;
 $0 = HEAP16[133064>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  $row$016 = 0;
 }
 while(1) {
  $4 = HEAP32[864>>2]|0;
  $5 = HEAP32[134144>>2]|0;
  $6 = $row$016 << 2;
  $7 = (($5) + ($6))|0;
  (_fseek(($4|0),($7|0),0)|0);
  $8 = HEAP32[864>>2]|0;
  $9 = HEAP32[133280>>2]|0;
  $10 = (_get4()|0);
  $11 = (($10) + ($9))|0;
  (_fseek(($8|0),($11|0),0)|0);
  (_ph1_bithuff(-1,0)|0);
  $12 = ($row$016|0)<(2);
  $13 = $12 ? 7 : 4;
  HEAP32[$len>>2] = $13;
  $14 = (($len) + 4|0);
  HEAP32[$14>>2] = $13;
  $15 = (($len) + 8|0);
  HEAP32[$15>>2] = $13;
  $16 = (($len) + 12|0);
  HEAP32[$16>>2] = $13;
  $17 = HEAP16[132336>>1]|0;
  $18 = ($17<<16>>16)==(0);
  if (!($18)) {
   $col$013 = 0;
   while(1) {
    $19 = (_ph1_bithuff(1,0)|0);
    $20 = (_ph1_bithuff(2,0)|0);
    HEAP32[$op>>2] = $20;
    $21 = (_ph1_bithuff(2,0)|0);
    $22 = (($op) + 4|0);
    HEAP32[$22>>2] = $21;
    $23 = (_ph1_bithuff(2,0)|0);
    $24 = (($op) + 8|0);
    HEAP32[$24>>2] = $23;
    $25 = (_ph1_bithuff(2,0)|0);
    $26 = (($op) + 12|0);
    HEAP32[$26>>2] = $25;
    $27 = HEAP32[$op>>2]|0;
    if ((($27|0) == 3)) {
     $28 = (_ph1_bithuff(4,0)|0);
     HEAP32[$len>>2] = $28;
    } else if ((($27|0) == 1)) {
     $31 = HEAP32[$len>>2]|0;
     $32 = (($31) + 1)|0;
     HEAP32[$len>>2] = $32;
    } else if ((($27|0) == 2)) {
     $29 = HEAP32[$len>>2]|0;
     $30 = (($29) + -1)|0;
     HEAP32[$len>>2] = $30;
    }
    $33 = (($op) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    if ((($34|0) == 1)) {
     $144 = (($len) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($145) + 1)|0;
     HEAP32[$144>>2] = $146;
    } else if ((($34|0) == 2)) {
     $147 = (($len) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + -1)|0;
     HEAP32[$147>>2] = $149;
    } else if ((($34|0) == 3)) {
     $150 = (_ph1_bithuff(4,0)|0);
     $151 = (($len) + 4|0);
     HEAP32[$151>>2] = $150;
    }
    $152 = (($op) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    if ((($153|0) == 1)) {
     $154 = (($len) + 8|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 1)|0;
     HEAP32[$154>>2] = $156;
    } else if ((($153|0) == 2)) {
     $157 = (($len) + 8|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) + -1)|0;
     HEAP32[$157>>2] = $159;
    } else if ((($153|0) == 3)) {
     $160 = (_ph1_bithuff(4,0)|0);
     $161 = (($len) + 8|0);
     HEAP32[$161>>2] = $160;
    }
    $162 = (($op) + 12|0);
    $163 = HEAP32[$162>>2]|0;
    if ((($163|0) == 2)) {
     $167 = (($len) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + -1)|0;
     HEAP32[$167>>2] = $169;
    } else if ((($163|0) == 3)) {
     $170 = (_ph1_bithuff(4,0)|0);
     $171 = (($len) + 12|0);
     HEAP32[$171>>2] = $170;
    } else if ((($163|0) == 1)) {
     $164 = (($len) + 12|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + 1)|0;
     HEAP32[$164>>2] = $166;
    }
    $172 = ($19|0)==(0);
    $173 = ($col$013|0)==(0);
    $c$312 = 0;
    while(1) {
     $35 = $c$312 << 1;
     $36 = $35 & 2;
     $37 = $c$312 >> 3;
     $38 = $36 | $37;
     $39 = (($len) + ($38<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (_ph1_bithuff($40,0)|0);
     $42 = (32 - ($40))|0;
     $43 = $41 << $42;
     $44 = $43 >> $42;
     if ($172) {
      if ($173) {
       $68 = 128;
      } else {
       $57 = HEAP16[132336>>1]|0;
       $58 = $57&65535;
       $59 = Math_imul($58, $row$016)|0;
       $60 = $c$312 | -2;
       $61 = (($60) + ($col$013))|0;
       $62 = (($61) + ($59))|0;
       $63 = HEAP32[132328>>2]|0;
       $64 = (($63) + ($62<<1)|0);
       $65 = HEAP16[$64>>1]|0;
       $66 = $65&65535;
       $68 = $66;
      }
     } else {
      $45 = $c$312 | -2;
      $46 = $45 ^ 1;
      $47 = (($46) + ($row$016))|0;
      $48 = HEAP16[132336>>1]|0;
      $49 = $48&65535;
      $50 = Math_imul($49, $47)|0;
      $51 = (($c$312) + ($col$013))|0;
      $52 = (($51) + ($50))|0;
      $53 = HEAP32[132328>>2]|0;
      $54 = (($53) + ($52<<1)|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = $55&65535;
      $68 = $56;
     }
     $67 = (($68) + ($44))|0;
     $69 = $67&65535;
     $70 = HEAP16[132336>>1]|0;
     $71 = $70&65535;
     $72 = Math_imul($71, $row$016)|0;
     $73 = (($c$312) + ($col$013))|0;
     $74 = (($73) + ($72))|0;
     $75 = HEAP32[132328>>2]|0;
     $76 = (($75) + ($74<<1)|0);
     HEAP16[$76>>1] = $69;
     $77 = ($c$312|0)==(14);
     $c$3$op = (($c$312) + 2)|0;
     $78 = $77 ? 1 : $c$3$op;
     $79 = ($78|0)<(16);
     if ($79) {
      $c$312 = $78;
     } else {
      break;
     }
    }
    $80 = (($col$013) + 16)|0;
    $81 = HEAP16[132336>>1]|0;
    $82 = $81&65535;
    $83 = ($80|0)<($82|0);
    if ($83) {
     $col$013 = $80;
    } else {
     break;
    }
   }
  }
  $84 = (($row$016) + 1)|0;
  $85 = HEAP16[133064>>1]|0;
  $86 = $85&65535;
  $87 = ($84|0)<($86|0);
  if ($87) {
   $row$016 = $84;
  } else {
   $$lcssa = $85;
   break;
  }
 }
 $2 = ($$lcssa&65535)>(1);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[132328>>2]|0;
 $row$16 = 0;
 while(1) {
  $88 = HEAP16[132336>>1]|0;
  $89 = ($88&65535)>(1);
  if ($89) {
   $90 = $88&65535;
   $91 = $row$16 | 1;
   $93 = $90;$col$15 = 0;
   while(1) {
    $92 = Math_imul($93, $row$16)|0;
    $94 = $col$15 | 1;
    $95 = (($92) + ($94))|0;
    $96 = (($3) + ($95<<1)|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&65535;
    $99 = Math_imul($93, $91)|0;
    $100 = (($99) + ($col$15))|0;
    $101 = (($3) + ($100<<1)|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = $102&65535;
    $104 = (($103) + ($98))|0;
    $105 = $104&65535;
    HEAP16[$96>>1] = $105;
    $106 = HEAP16[132336>>1]|0;
    $107 = $106&65535;
    $108 = Math_imul($107, $row$16)|0;
    $109 = (($108) + ($94))|0;
    $110 = (($3) + ($109<<1)|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = $111&65535;
    $113 = Math_imul($107, $91)|0;
    $114 = (($113) + ($col$15))|0;
    $115 = (($3) + ($114<<1)|0);
    $116 = HEAP16[$115>>1]|0;
    $117 = $116&65535;
    $118 = (($112) - ($117))|0;
    $119 = $118&65535;
    HEAP16[$115>>1] = $119;
    $120 = HEAP16[132336>>1]|0;
    $121 = $120&65535;
    $122 = Math_imul($121, $row$16)|0;
    $123 = (($122) + ($94))|0;
    $124 = (($3) + ($123<<1)|0);
    $125 = HEAP16[$124>>1]|0;
    $126 = $125&65535;
    $127 = Math_imul($121, $91)|0;
    $128 = (($127) + ($col$15))|0;
    $129 = (($3) + ($128<<1)|0);
    $130 = HEAP16[$129>>1]|0;
    $131 = $130&65535;
    $132 = (($126) - ($131))|0;
    $133 = $132&65535;
    HEAP16[$124>>1] = $133;
    $134 = (($col$15) + 2)|0;
    $135 = HEAP16[132336>>1]|0;
    $136 = $135&65535;
    $137 = (($136) + -1)|0;
    $138 = ($134|0)<($137|0);
    if ($138) {
     $93 = $136;$col$15 = $134;
    } else {
     break;
    }
   }
  }
  $139 = (($row$16) + 2)|0;
  $140 = HEAP16[133064>>1]|0;
  $141 = $140&65535;
  $142 = (($141) + -1)|0;
  $143 = ($139|0)<($142|0);
  if ($143) {
   $row$16 = $139;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _samsung2_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $c$06 = 0, $col$02 = 0, $exitcond = 0, $hpred = 0, $huff = 0, $i$011 = 0, $n$010 = 0, $n$1$lcssa = 0, $n$17 = 0, $row$03 = 0, $smax = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0;
 $huff = sp + 12|0;
 $vpred = sp;
 $hpred = sp + 8|0;
 $0 = $vpred;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 HEAP16[$huff>>1] = 10;
 $i$011 = 0;$n$010 = 0;
 while(1) {
  $4 = (160536 + ($i$011<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = $6 >>> 8;
  $8 = 1024 >>> $7;
  $9 = ($8|0)>(0);
  if ($9) {
   $10 = HEAP16[$4>>1]|0;
   $11 = $10&65535;
   $12 = $11 >>> 8;
   $13 = 1024 >>> $12;
   $14 = ($13|0)>(1);
   $smax = $14 ? $13 : 1;
   $17 = $5;$c$06 = 0;$n$17 = $n$010;
   while(1) {
    $15 = (($n$17) + 1)|0;
    $16 = (($huff) + ($15<<1)|0);
    HEAP16[$16>>1] = $17;
    $18 = (($c$06) + 1)|0;
    $19 = ($18|0)<($13|0);
    if ($19) {
     $17 = $10;$c$06 = $18;$n$17 = $15;
    } else {
     break;
    }
   }
   $20 = (($n$010) + ($smax))|0;
   $n$1$lcssa = $20;
  } else {
   $n$1$lcssa = $n$010;
  }
  $21 = (($i$011) + 1)|0;
  $exitcond = ($21|0)==(14);
  if ($exitcond) {
   break;
  } else {
   $i$011 = $21;$n$010 = $n$1$lcssa;
  }
 }
 (_getbithuff(-1,0)|0);
 $22 = HEAP16[133064>>1]|0;
 $23 = ($22<<16>>16)==(0);
 if ($23) {
  STACKTOP = sp;return;
 } else {
  $row$03 = 0;
 }
 while(1) {
  $24 = HEAP16[132336>>1]|0;
  $25 = ($24<<16>>16)==(0);
  if (!($25)) {
   $26 = $row$03 & 1;
   $col$02 = 0;
   while(1) {
    $27 = (_ljpeg_diff($huff)|0);
    $28 = ($col$02|0)<(2);
    if ($28) {
     $29 = ((($vpred) + ($26<<2)|0) + ($col$02<<1)|0);
     $30 = HEAP16[$29>>1]|0;
     $31 = $30&65535;
     $32 = (($31) + ($27))|0;
     $33 = $32&65535;
     HEAP16[$29>>1] = $33;
     $34 = (($hpred) + ($col$02<<1)|0);
     HEAP16[$34>>1] = $33;
    } else {
     $35 = $col$02 & 1;
     $36 = (($hpred) + ($35<<1)|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = (($38) + ($27))|0;
     $40 = $39&65535;
     HEAP16[$36>>1] = $40;
    }
    $41 = $col$02 & 1;
    $42 = (($hpred) + ($41<<1)|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = HEAP16[132336>>1]|0;
    $45 = $44&65535;
    $46 = Math_imul($45, $row$03)|0;
    $47 = (($46) + ($col$02))|0;
    $48 = HEAP32[132328>>2]|0;
    $49 = (($48) + ($47<<1)|0);
    HEAP16[$49>>1] = $43;
    $50 = HEAP16[$42>>1]|0;
    $51 = $50&65535;
    $52 = HEAP32[133264>>2]|0;
    $53 = $51 >>> $52;
    $54 = ($53|0)==(0);
    if (!($54)) {
     _derror();
    }
    $55 = (($col$02) + 1)|0;
    $56 = HEAP16[132336>>1]|0;
    $57 = $56&65535;
    $58 = ($55|0)<($57|0);
    if ($58) {
     $col$02 = $55;
    } else {
     break;
    }
   }
  }
  $59 = (($row$03) + 1)|0;
  $60 = HEAP16[133064>>1]|0;
  $61 = $60&65535;
  $62 = ($59|0)<($61|0);
  if ($62) {
   $row$03 = $59;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _samsung3_load_raw() {
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$39 = 0, $diff$0 = 0, $exitcond20 = 0, $len = 0, $lent = 0, $mag$012 = 0, $mag$1 = 0, $or$cond = 0, $pmode$011 = 0, $pmode$1 = 0;
 var $prow = 0, $row$013 = 0, $tab$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $lent = sp + 16|0;
 $len = sp + 8|0;
 $prow = sp;
 HEAP16[928>>1] = 18761;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),9,1)|0);
 $1 = HEAP32[864>>2]|0;
 $2 = (_getc_unlocked(($1|0))|0);
 (_get2()|0);
 $3 = (_get2()|0);
 $4 = $3&65535;
 $5 = HEAP16[133064>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $2 & 4;
 $8 = $2 & 2;
 $9 = ($8|0)==(0);
 $10 = $2 & 1;
 $11 = ($10|0)==(0);
 $row$013 = 0;
 while(1) {
  $12 = HEAP32[864>>2]|0;
  $13 = HEAP32[133280>>2]|0;
  $14 = (_ftell(($12|0))|0);
  $15 = (($13) - ($14))|0;
  $16 = $15 & 15;
  (_fseek(($12|0),($16|0),1)|0);
  (_ph1_bithuff(-1,0)|0);
  $17 = ($row$013|0)<(2);
  $18 = $17 ? 7 : 4;
  HEAP16[$lent>>1] = $18;
  $19 = (($lent) + 2|0);
  HEAP16[$19>>1] = $18;
  $20 = (($lent) + 4|0);
  HEAP16[$20>>1] = $18;
  $21 = (($lent) + 6|0);
  HEAP16[$21>>1] = $18;
  $22 = (($lent) + 8|0);
  HEAP16[$22>>1] = $18;
  $23 = (($lent) + 10|0);
  HEAP16[$23>>1] = $18;
  $24 = (($row$013) + -1)|0;
  $25 = HEAP16[132336>>1]|0;
  $26 = $25&65535;
  $27 = Math_imul($26, $24)|0;
  $28 = $row$013 & 1;
  $29 = $28 << 1;
  $$neg = (0 - ($29))|0;
  $30 = $$neg | 1;
  $31 = (($30) + ($27))|0;
  $32 = HEAP32[132328>>2]|0;
  $33 = (($32) + ($31<<1)|0);
  $34 = (($prow) + ($28<<2)|0);
  HEAP32[$34>>2] = $33;
  $35 = (($row$013) + -2)|0;
  $36 = HEAP16[132336>>1]|0;
  $37 = $36&65535;
  $38 = Math_imul($37, $35)|0;
  $39 = HEAP32[132328>>2]|0;
  $40 = (($39) + ($38<<1)|0);
  $41 = $28 ^ 1;
  $42 = (($prow) + ($41<<2)|0);
  HEAP32[$42>>2] = $40;
  $43 = HEAP16[132336>>1]|0;
  $44 = ($43&65535)>(15);
  if ($44) {
   $45 = ($row$013|0)<(2);
   $mag$012 = 0;$pmode$011 = 7;$tab$010 = 0;
   while(1) {
    $46 = $tab$010 & 48;
    $47 = $46 | $7;
    $48 = ($47|0)==(0);
    do {
     if ($48) {
      $49 = (_ph1_bithuff(2,0)|0);
      $50 = ($49|0)<(3);
      if ($50) {
       $51 = (($mag$012) + -50)|0;
       $52 = (160568 + ($49)|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = $53 << 24 >> 24;
       $55 = (($51) + ($54))|0;
       $mag$1 = $55;
       break;
      } else {
       $56 = (_ph1_bithuff(12,0)|0);
       $mag$1 = $56;
       break;
      }
     } else {
      $mag$1 = $mag$012;
     }
    } while(0);
    $57 = (_ph1_bithuff(1,0)|0);
    if ($9) {
     $60 = ($57|0)==(0);
     if ($60) {
      $61 = (_ph1_bithuff(3,0)|0);
      $pmode$1 = $61;
     } else {
      $pmode$1 = $pmode$011;
     }
    } else {
     $58 = $57 << 2;
     $59 = (7 - ($58))|0;
     $pmode$1 = $59;
    }
    if ($11) {
     $62 = (_ph1_bithuff(1,0)|0);
     $63 = ($62|0)==(0);
     if ($63) {
      label = 16;
     }
    } else {
     label = 16;
    }
    if ((label|0) == 16) {
     label = 0;
     $71 = (_ph1_bithuff(2,0)|0);
     $72 = $71&65535;
     HEAP16[$len>>1] = $72;
     $73 = (_ph1_bithuff(2,0)|0);
     $74 = $73&65535;
     $75 = (($len) + 2|0);
     HEAP16[$75>>1] = $74;
     $76 = (_ph1_bithuff(2,0)|0);
     $77 = $76&65535;
     $78 = (($len) + 4|0);
     HEAP16[$78>>1] = $77;
     $79 = (_ph1_bithuff(2,0)|0);
     $80 = $79&65535;
     $81 = (($len) + 6|0);
     HEAP16[$81>>1] = $80;
     $82 = (($29>>>0) % 3)&-1;
     $83 = HEAP16[$len>>1]|0;
     $84 = ($83&65535)<(3);
     if ($84) {
      $85 = $83&65535;
      $86 = (($lent) + ($82<<2)|0);
      $87 = HEAP16[$86>>1]|0;
      $88 = $87&65535;
      $89 = (($88) + -49)|0;
      $90 = (160576 + ($85)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91 << 24 >> 24;
      $93 = (($89) + ($92))|0;
      $96 = $93;
     } else {
      $94 = (_ph1_bithuff(4,0)|0);
      $96 = $94;
     }
     $95 = $96&65535;
     HEAP16[$len>>1] = $95;
     $97 = ((($lent) + ($82<<2)|0) + 2|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = (($lent) + ($82<<2)|0);
     HEAP16[$99>>1] = $98;
     $100 = HEAP16[$len>>1]|0;
     HEAP16[$97>>1] = $100;
     $101 = $29 | 1;
     $102 = (($101>>>0) % 3)&-1;
     $103 = (($len) + 2|0);
     $104 = HEAP16[$103>>1]|0;
     $105 = ($104&65535)<(3);
     if ($105) {
      $173 = $104&65535;
      $174 = (($lent) + ($102<<2)|0);
      $175 = HEAP16[$174>>1]|0;
      $176 = $175&65535;
      $177 = (($176) + -49)|0;
      $178 = (160576 + ($173)|0);
      $179 = HEAP8[$178>>0]|0;
      $180 = $179 << 24 >> 24;
      $181 = (($177) + ($180))|0;
      $183 = $181;
     } else {
      $172 = (_ph1_bithuff(4,0)|0);
      $183 = $172;
     }
     $182 = $183&65535;
     HEAP16[$103>>1] = $182;
     $184 = ((($lent) + ($102<<2)|0) + 2|0);
     $185 = HEAP16[$184>>1]|0;
     $186 = (($lent) + ($102<<2)|0);
     HEAP16[$186>>1] = $185;
     $187 = HEAP16[$103>>1]|0;
     HEAP16[$184>>1] = $187;
     $188 = (($29>>>0) % 3)&-1;
     $189 = (($len) + 4|0);
     $190 = HEAP16[$189>>1]|0;
     $191 = ($190&65535)<(3);
     if ($191) {
      $193 = $190&65535;
      $194 = (($lent) + ($188<<2)|0);
      $195 = HEAP16[$194>>1]|0;
      $196 = $195&65535;
      $197 = (($196) + -49)|0;
      $198 = (160576 + ($193)|0);
      $199 = HEAP8[$198>>0]|0;
      $200 = $199 << 24 >> 24;
      $201 = (($197) + ($200))|0;
      $203 = $201;
     } else {
      $192 = (_ph1_bithuff(4,0)|0);
      $203 = $192;
     }
     $202 = $203&65535;
     HEAP16[$189>>1] = $202;
     $204 = ((($lent) + ($188<<2)|0) + 2|0);
     $205 = HEAP16[$204>>1]|0;
     $206 = (($lent) + ($188<<2)|0);
     HEAP16[$206>>1] = $205;
     $207 = HEAP16[$189>>1]|0;
     HEAP16[$204>>1] = $207;
     $208 = $29 | 1;
     $209 = (($208>>>0) % 3)&-1;
     $210 = (($len) + 6|0);
     $211 = HEAP16[$210>>1]|0;
     $212 = ($211&65535)<(3);
     if ($212) {
      $214 = $211&65535;
      $215 = (($lent) + ($209<<2)|0);
      $216 = HEAP16[$215>>1]|0;
      $217 = $216&65535;
      $218 = (($217) + -49)|0;
      $219 = (160576 + ($214)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220 << 24 >> 24;
      $222 = (($218) + ($221))|0;
      $224 = $222;
     } else {
      $213 = (_ph1_bithuff(4,0)|0);
      $224 = $213;
     }
     $223 = $224&65535;
     HEAP16[$210>>1] = $223;
     $225 = ((($lent) + ($209<<2)|0) + 2|0);
     $226 = HEAP16[$225>>1]|0;
     $227 = (($lent) + ($209<<2)|0);
     HEAP16[$227>>1] = $226;
     $228 = HEAP16[$210>>1]|0;
     HEAP16[$225>>1] = $228;
    }
    $64 = ($pmode$1|0)==(7);
    $or$cond = $45 | $64;
    $65 = ($tab$010|0)==(0);
    $66 = (($tab$010) + -2)|0;
    $67 = $mag$1 << 1;
    $68 = $67 | 1;
    $69 = (160584 + ($pmode$1)|0);
    $70 = (160592 + ($pmode$1)|0);
    $c$39 = 0;
    while(1) {
     $106 = $c$39 << 1;
     $107 = $106 & 14;
     $108 = $c$39 >> 3;
     $109 = $108 ^ $28;
     $110 = $109 ^ $107;
     $111 = (($110) + ($tab$010))|0;
     if ($or$cond) {
      if ($65) {
       $153 = $4;
      } else {
       $112 = HEAP16[132336>>1]|0;
       $113 = $112&65535;
       $114 = Math_imul($113, $row$013)|0;
       $115 = $111 & 1;
       $116 = $115 | $66;
       $117 = (($114) + ($116))|0;
       $118 = HEAP32[132328>>2]|0;
       $119 = (($118) + ($117<<1)|0);
       $120 = HEAP16[$119>>1]|0;
       $121 = $120&65535;
       $153 = $121;
      }
     } else {
      $122 = (($111) + -52)|0;
      $123 = HEAP8[$69>>0]|0;
      $124 = $123 << 24 >> 24;
      $125 = (($124) + ($122))|0;
      $126 = $111 & 1;
      $127 = (($prow) + ($126<<2)|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) + ($125<<1)|0);
      $130 = HEAP16[$129>>1]|0;
      $131 = $130&65535;
      $132 = HEAP8[$70>>0]|0;
      $133 = $132 << 24 >> 24;
      $134 = (($133) + ($122))|0;
      $135 = (($128) + ($134<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = $136&65535;
      $138 = (($131) + 1)|0;
      $139 = (($138) + ($137))|0;
      $140 = $139 >>> 1;
      $153 = $140;
     }
     $141 = $c$39 >> 2;
     $142 = (($len) + ($141<<1)|0);
     $143 = HEAP16[$142>>1]|0;
     $144 = $143&65535;
     $145 = (_ph1_bithuff($144,0)|0);
     $146 = (($144) + -1)|0;
     $147 = $145 >> $146;
     $148 = ($147|0)==(0);
     if ($148) {
      $diff$0 = $145;
     } else {
      $149 = 1 << $144;
      $150 = (($145) - ($149))|0;
      $diff$0 = $150;
     }
     $151 = Math_imul($diff$0, $68)|0;
     $152 = (($153) + ($mag$1))|0;
     $154 = (($152) + ($151))|0;
     $155 = $154&65535;
     $156 = HEAP16[132336>>1]|0;
     $157 = $156&65535;
     $158 = Math_imul($157, $row$013)|0;
     $159 = (($158) + ($111))|0;
     $160 = HEAP32[132328>>2]|0;
     $161 = (($160) + ($159<<1)|0);
     HEAP16[$161>>1] = $155;
     $162 = (($c$39) + 1)|0;
     $exitcond20 = ($162|0)==(16);
     if ($exitcond20) {
      break;
     } else {
      $c$39 = $162;
     }
    }
    $163 = (($tab$010) + 16)|0;
    $164 = $163 | 15;
    $165 = HEAP16[132336>>1]|0;
    $166 = $165&65535;
    $167 = ($164|0)<($166|0);
    if ($167) {
     $mag$012 = $mag$1;$pmode$011 = $pmode$1;$tab$010 = $163;
    } else {
     break;
    }
   }
  }
  $168 = (($row$013) + 1)|0;
  $169 = HEAP16[133064>>1]|0;
  $170 = $169&65535;
  $171 = ($168|0)<($170|0);
  if ($171) {
   $row$013 = $168;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _smal_decode_segment($seg,$holes) {
 $seg = $seg|0;
 $holes = $holes|0;
 var $$ = 0, $$1 = 0, $$lcssa = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa44$lcssa = 0, $$lcssa45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bin$0 = 0, $bin$0$lcssa = 0, $carry$025 = 0, $carry$116 = 0, $carry$2$ph = 0, $carry$3 = 0, $carry$3$lcssa = 0, $data$029 = 0, $data$123 = 0, $data$2$in$ph = 0, $data$3$in = 0, $data$3$in$lcssa = 0, $diff$0 = 0, $diff$0$ = 0, $exitcond = 0, $exitcond35 = 0, $high$028 = 0, $high$122 = 0;
 var $high$2 = 0, $hist = 0, $i$014 = 0, $i$113 = 0, $nbits$026 = 0, $nbits$117 = 0, $nbits$2 = 0, $nbits$2$lcssa42 = 0, $nbits$2$ph = 0, $nbits$3 = 0, $nbits$3$lcssa = 0, $nbits$3$lcssa$lcssa = 0, $next$0 = 0, $or$cond = 0, $pix$0$ = 0, $pix$027 = 0, $pix$1 = 0, $pred = 0, $range$030 = 0, $range$124 = 0;
 var $s$018 = 0, $sym = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $hist = sp + 14|0;
 $sym = sp;
 $pred = sp + 12|0;
 dest=$hist+0|0; src=160600+0|0; stop=dest+39|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP16[$pred>>1] = 0;
 $0 = HEAP32[864>>2]|0;
 $1 = (($seg) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 (_fseek(($0|0),($3|0),0)|0);
 (_getbithuff(-1,0)|0);
 $4 = HEAP32[$seg>>2]|0;
 $5 = (($seg) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 if (!($7)) {
  HEAP32[132368>>2] = 255;
  STACKTOP = sp;return;
 }
 $8 = (($sym) + 8|0);
 $9 = (($sym) + 4|0);
 $10 = (($seg) + 12|0);
 $carry$025 = 0;$data$029 = 0;$high$028 = 255;$nbits$026 = 8;$pix$027 = $4;$range$030 = 0;
 while(1) {
  $carry$116 = $carry$025;$data$123 = $data$029;$high$122 = $high$028;$nbits$117 = $nbits$026;$range$124 = $range$030;$s$018 = 0;
  while(1) {
   $11 = $data$123 & 65535;
   $12 = $11 << $nbits$117;
   $13 = (_getbithuff($nbits$117,0)|0);
   $14 = $13 | $12;
   $15 = ($carry$116|0)<(0);
   if ($15) {
    $16 = (($carry$116) + 1)|0;
    $17 = (($16) + ($nbits$117))|0;
    $18 = ($17|0)<(1);
    $19 = (($nbits$117) + ($carry$116))|0;
    $$ = $18 ? $19 : 0;
    $carry$2$ph = $$;$nbits$2$ph = $17;
   } else {
    $carry$2$ph = $carry$116;$nbits$2$ph = $nbits$117;
   }
   $20 = $14 & 65535;
   $nbits$2 = $nbits$2$ph;
   while(1) {
    $21 = (($nbits$2) + -1)|0;
    $22 = ($nbits$2|0)>(0);
    if (!($22)) {
     $carry$3 = $carry$2$ph;$data$3$in = $14;
     break;
    }
    $23 = $20 >>> $21;
    $24 = $23 & 255;
    $25 = ($24|0)==(255);
    if ($25) {
     $$lcssa43 = $21;$nbits$2$lcssa42 = $nbits$2;
     label = 9;
     break;
    } else {
     $nbits$2 = $21;
    }
   }
   if ((label|0) == 9) {
    label = 0;
    $26 = ($nbits$2$lcssa42|0)>(1);
    if ($26) {
     $27 = $14 & 65535;
     $28 = (($nbits$2$lcssa42) + -2)|0;
     $29 = 1 << $28;
     $30 = (($29) + 65535)|0;
     $31 = $30 & $27;
     $32 = $31 << 1;
     $33 = $29 & $27;
     $34 = $33 << 1;
     $35 = (($34) + ($14))|0;
     $36 = -1 << $$lcssa43;
     $37 = $35 & $36;
     $38 = $37 | $32;
     $data$2$in$ph = $38;
    } else {
     $data$2$in$ph = $14;
    }
    $39 = (_getbithuff(1,0)|0);
    $40 = (($39) + ($data$2$in$ph))|0;
    $41 = (($nbits$2$lcssa42) + -9)|0;
    $carry$3 = $41;$data$3$in = $40;
   }
   $42 = $data$3$in & 65535;
   $43 = $range$124 & 65535;
   $44 = (($42) - ($43))|0;
   $45 = $44 << 2;
   $46 = (($45) + 4)|0;
   $47 = $46 & 262140;
   $48 = (($47) + -1)|0;
   $49 = $high$122 >> 4;
   $50 = (($48|0) / ($49|0))&-1;
   $bin$0 = 0;
   while(1) {
    $51 = (($bin$0) + 5)|0;
    $52 = ((($hist) + (($s$018*13)|0)|0) + ($51)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = ($54|0)>($50|0);
    $56 = (($bin$0) + 1)|0;
    if ($55) {
     $bin$0 = $56;
    } else {
     $$lcssa = $54;$bin$0$lcssa = $bin$0;
     break;
    }
   }
   $57 = Math_imul($$lcssa, $49)|0;
   $58 = $57 >> 2;
   $59 = ($bin$0$lcssa|0)==(0);
   if ($59) {
    $high$2 = $high$122;
   } else {
    $60 = (($bin$0$lcssa) + 4)|0;
    $61 = ((($hist) + (($s$018*13)|0)|0) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = Math_imul($63, $49)|0;
    $65 = $64 >> 2;
    $high$2 = $65;
   }
   $66 = (($high$2) - ($58))|0;
   $nbits$3 = 0;
   while(1) {
    $67 = $66 << $nbits$3;
    $68 = ($67|0)<(128);
    $69 = (($nbits$3) + 1)|0;
    if ($68) {
     $nbits$3 = $69;
    } else {
     $$lcssa44 = $67;$nbits$3$lcssa = $nbits$3;
     break;
    }
   }
   $70 = (($58) + ($43))|0;
   $71 = $70 << $nbits$3$lcssa;
   $72 = ((($hist) + (($s$018*13)|0)|0) + 1|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   $75 = ((($hist) + (($s$018*13)|0)|0) + 2|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = (($76) + 1)<<24>>24;
   HEAP8[$75>>0] = $77;
   $78 = ((($hist) + (($s$018*13)|0)|0) + 3|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = ($77&255)>($79&255);
   if ($80) {
    $81 = (($74) + 1)|0;
    $82 = (($hist) + (($s$018*13)|0)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = $84 & $81;
    $86 = (($85) + 4)|0;
    $87 = ((($hist) + (($s$018*13)|0)|0) + ($86)|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = (($85) + 5)|0;
    $91 = ((($hist) + (($s$018*13)|0)|0) + ($90)|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = (($89) - ($93))|0;
    $95 = $94 >>> 2;
    $96 = $95&255;
    HEAP8[$78>>0] = $96;
    HEAP8[$75>>0] = 1;
    $next$0 = $85;
   } else {
    $next$0 = $74;
   }
   $97 = HEAP8[$72>>0]|0;
   $98 = $97&255;
   $99 = (($98) + 4)|0;
   $100 = ((($hist) + (($s$018*13)|0)|0) + ($99)|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = (($98) + 5)|0;
   $104 = ((($hist) + (($s$018*13)|0)|0) + ($103)|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = (($102) - ($106))|0;
   $108 = ($107|0)>(1);
   L32: do {
    if ($108) {
     $109 = ($bin$0$lcssa|0)<($98|0);
     if ($109) {
      $110 = HEAP8[$72>>0]|0;
      $111 = $110&255;
      $112 = ($bin$0$lcssa|0)<($111|0);
      if ($112) {
       $i$014 = $bin$0$lcssa;
      } else {
       break;
      }
      while(1) {
       $113 = (($i$014) + 5)|0;
       $114 = ((($hist) + (($s$018*13)|0)|0) + ($113)|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = (($115) + -1)<<24>>24;
       HEAP8[$114>>0] = $116;
       $117 = (($i$014) + 1)|0;
       $118 = HEAP8[$72>>0]|0;
       $119 = $118&255;
       $120 = ($117|0)<($119|0);
       if ($120) {
        $i$014 = $117;
       } else {
        break L32;
       }
      }
     }
     $121 = ($next$0|0)<=($bin$0$lcssa|0);
     $122 = ($98|0)<($bin$0$lcssa|0);
     $or$cond = $121 & $122;
     if ($or$cond) {
      $123 = (($bin$0$lcssa) + -1)|0;
      $i$113 = $98;
      while(1) {
       $124 = (($i$113) + 5)|0;
       $125 = ((($hist) + (($s$018*13)|0)|0) + ($124)|0);
       $126 = HEAP8[$125>>0]|0;
       $127 = (($126) + 1)<<24>>24;
       HEAP8[$125>>0] = $127;
       $128 = (($i$113) + 1)|0;
       $exitcond = ($i$113|0)==($123|0);
       if ($exitcond) {
        break;
       } else {
        $i$113 = $128;
       }
      }
     }
    }
   } while(0);
   $129 = $next$0&255;
   HEAP8[$72>>0] = $129;
   $130 = (($sym) + ($s$018<<2)|0);
   HEAP32[$130>>2] = $bin$0$lcssa;
   $131 = (($s$018) + 1)|0;
   $exitcond35 = ($131|0)==(3);
   if ($exitcond35) {
    $$lcssa44$lcssa = $$lcssa44;$$lcssa45 = $71;$carry$3$lcssa = $carry$3;$data$3$in$lcssa = $data$3$in;$nbits$3$lcssa$lcssa = $nbits$3$lcssa;
    break;
   } else {
    $carry$116 = $carry$3;$data$123 = $data$3$in;$high$122 = $$lcssa44;$nbits$117 = $nbits$3$lcssa;$range$124 = $71;$s$018 = $131;
   }
  }
  $132 = HEAP32[$8>>2]|0;
  $133 = $132 << 5;
  $134 = HEAP32[$9>>2]|0;
  $135 = $134 << 2;
  $136 = $135 | $133;
  $137 = HEAP32[$sym>>2]|0;
  $138 = $137 & 3;
  $139 = $136 | $138;
  $140 = $137 & 4;
  $141 = ($140|0)==(0);
  if ($141) {
   $diff$0 = $139;
  } else {
   $142 = $139 & 255;
   $143 = ($142|0)==(0);
   $144 = (0 - ($142))|0;
   $$1 = $143 ? 128 : $144;
   $diff$0 = $$1;
  }
  $145 = HEAP32[864>>2]|0;
  $146 = (_ftell(($145|0))|0);
  $147 = (($146) + 12)|0;
  $148 = HEAP32[$10>>2]|0;
  $149 = ($147>>>0)<($148>>>0);
  $diff$0$ = $149 ? $diff$0 : 0;
  $150 = $pix$027 & 1;
  $151 = (($pred) + ($150)|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = (($153) + ($diff$0$))|0;
  $155 = $154&255;
  HEAP8[$151>>0] = $155;
  $156 = $154&65535;
  $157 = $156 & 255;
  $158 = HEAP32[132328>>2]|0;
  $159 = (($158) + ($pix$027<<1)|0);
  HEAP16[$159>>1] = $157;
  $160 = ($150|0)==(0);
  if ($160) {
   $161 = HEAP16[132336>>1]|0;
   $162 = $161&65535;
   $163 = (($pix$027|0) / ($162|0))&-1;
   $164 = HEAP16[133064>>1]|0;
   $165 = $164&65535;
   $166 = (($163) - ($165))|0;
   $167 = $166 & 7;
   $168 = 1 << $167;
   $169 = $168 & $holes;
   $170 = ($169|0)==(0);
   $171 = (($pix$027) + 2)|0;
   $pix$0$ = $170 ? $pix$027 : $171;
   $pix$1 = $pix$0$;
  } else {
   $pix$1 = $pix$027;
  }
  $172 = (($pix$1) + 1)|0;
  $173 = HEAP32[$5>>2]|0;
  $174 = ($172>>>0)<($173>>>0);
  if ($174) {
   $carry$025 = $carry$3$lcssa;$data$029 = $data$3$in$lcssa;$high$028 = $$lcssa44$lcssa;$nbits$026 = $nbits$3$lcssa$lcssa;$pix$027 = $172;$range$030 = $$lcssa45;
  } else {
   break;
  }
 }
 HEAP32[132368>>2] = 255;
 STACKTOP = sp;return;
}
function _smal_v6_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $seg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $seg = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),16,0)|0);
 HEAP32[$seg>>2] = 0;
 $1 = (_get2()|0);
 $2 = $1&65535;
 $3 = (($seg) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP16[132336>>1]|0;
 $5 = $4&65535;
 $6 = HEAP16[133064>>1]|0;
 $7 = $6&65535;
 $8 = Math_imul($7, $5)|0;
 $9 = (($seg) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = (($seg) + 12|0);
 HEAP32[$10>>2] = 2147483647;
 _smal_decode_segment($seg,0);
 STACKTOP = sp;return;
}
function _median4($p) {
 $p = $p|0;
 var $$min$0 = 0, $$min$0$1 = 0, $$min$0$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $max$1 = 0, $max$1$1 = 0, $max$1$2 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$p>>2]|0;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = ($0|0)>($2|0);
 $$min$0 = $4 ? $2 : $0;
 $5 = ($0|0)<($2|0);
 $max$1 = $5 ? $2 : $0;
 $6 = (($p) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3))|0;
 $9 = ($$min$0|0)>($7|0);
 $$min$0$1 = $9 ? $7 : $$min$0;
 $10 = ($max$1|0)<($7|0);
 $max$1$1 = $10 ? $7 : $max$1;
 $11 = (($p) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($8))|0;
 $14 = ($$min$0$1|0)>($12|0);
 $$min$0$2 = $14 ? $12 : $$min$0$1;
 $15 = ($max$1$1|0)<($12|0);
 $max$1$2 = $15 ? $12 : $max$1$1;
 $sum = (($max$1$2) + ($$min$0$2))|0;
 $16 = (($13) - ($sum))|0;
 $17 = $16 >> 1;
 return ($17|0);
}
function _fill_holes($holes) {
 $holes = $holes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$02 = 0;
 var $col$13 = 0, $row$06 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $val = sp;
 $0 = HEAP16[132080>>1]|0;
 $1 = $0&65535;
 $2 = (($1) + -2)|0;
 $3 = ($2|0)>(2);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($val) + 4|0);
 $5 = (($val) + 8|0);
 $6 = (($val) + 12|0);
 $7 = (($val) + 4|0);
 $8 = (($val) + 8|0);
 $9 = (($val) + 12|0);
 $row$06 = 2;
 while(1) {
  $10 = HEAP16[133064>>1]|0;
  $11 = $10&65535;
  $12 = (($row$06) - ($11))|0;
  $13 = $12 & 7;
  $14 = 1 << $13;
  $15 = $14 & $holes;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = HEAP16[132088>>1]|0;
   $18 = $17&65535;
   $19 = (($18) + -1)|0;
   $20 = ($19|0)>(1);
   if ($20) {
    $21 = (($row$06) + -1)|0;
    $22 = (($row$06) + 1)|0;
    $col$02 = 1;
    while(1) {
     $29 = HEAP16[132336>>1]|0;
     $30 = $29&65535;
     $31 = Math_imul($30, $21)|0;
     $32 = (($col$02) + -1)|0;
     $33 = (($31) + ($32))|0;
     $34 = HEAP32[132328>>2]|0;
     $35 = (($34) + ($33<<1)|0);
     $36 = HEAP16[$35>>1]|0;
     $37 = $36&65535;
     HEAP32[$val>>2] = $37;
     $38 = HEAP16[132336>>1]|0;
     $39 = $38&65535;
     $40 = Math_imul($39, $21)|0;
     $41 = (($col$02) + 1)|0;
     $42 = (($40) + ($41))|0;
     $43 = HEAP32[132328>>2]|0;
     $44 = (($43) + ($42<<1)|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     HEAP32[$7>>2] = $46;
     $47 = HEAP16[132336>>1]|0;
     $48 = $47&65535;
     $49 = Math_imul($48, $22)|0;
     $50 = (($49) + ($32))|0;
     $51 = HEAP32[132328>>2]|0;
     $52 = (($51) + ($50<<1)|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = $53&65535;
     HEAP32[$8>>2] = $54;
     $55 = HEAP16[132336>>1]|0;
     $56 = $55&65535;
     $57 = Math_imul($56, $22)|0;
     $58 = (($57) + ($41))|0;
     $59 = HEAP32[132328>>2]|0;
     $60 = (($59) + ($58<<1)|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     HEAP32[$9>>2] = $62;
     $63 = (_median4($val)|0);
     $64 = $63&65535;
     $65 = HEAP16[132336>>1]|0;
     $66 = $65&65535;
     $67 = Math_imul($66, $row$06)|0;
     $68 = (($67) + ($col$02))|0;
     $69 = HEAP32[132328>>2]|0;
     $70 = (($69) + ($68<<1)|0);
     HEAP16[$70>>1] = $64;
     $71 = (($col$02) + 4)|0;
     $72 = HEAP16[132088>>1]|0;
     $73 = $72&65535;
     $74 = (($73) + -1)|0;
     $75 = ($71|0)<($74|0);
     if ($75) {
      $col$02 = $71;
     } else {
      break;
     }
    }
   }
   $23 = HEAP16[132088>>1]|0;
   $24 = $23&65535;
   $25 = (($24) + -2)|0;
   $26 = ($25|0)>(2);
   if ($26) {
    $27 = (($row$06) + -2)|0;
    $28 = (($row$06) + 2)|0;
    $col$13 = 2;
    while(1) {
     $76 = HEAP16[133064>>1]|0;
     $77 = $76&65535;
     $78 = (($27) - ($77))|0;
     $79 = $78 & 7;
     $80 = 1 << $79;
     $81 = $80 & $holes;
     $82 = ($81|0)==(0);
     if ($82) {
      $83 = (($28) - ($77))|0;
      $84 = $83 & 7;
      $85 = 1 << $84;
      $86 = $85 & $holes;
      $87 = ($86|0)==(0);
      if ($87) {
       $107 = HEAP16[132336>>1]|0;
       $108 = $107&65535;
       $109 = Math_imul($108, $row$06)|0;
       $110 = (($col$13) + -2)|0;
       $111 = (($110) + ($109))|0;
       $112 = HEAP32[132328>>2]|0;
       $113 = (($112) + ($111<<1)|0);
       $114 = HEAP16[$113>>1]|0;
       $115 = $114&65535;
       HEAP32[$val>>2] = $115;
       $116 = HEAP16[132336>>1]|0;
       $117 = $116&65535;
       $118 = Math_imul($117, $row$06)|0;
       $119 = (($col$13) + 2)|0;
       $120 = (($119) + ($118))|0;
       $121 = HEAP32[132328>>2]|0;
       $122 = (($121) + ($120<<1)|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123&65535;
       HEAP32[$4>>2] = $124;
       $125 = HEAP16[132336>>1]|0;
       $126 = $125&65535;
       $127 = Math_imul($126, $27)|0;
       $128 = (($127) + ($col$13))|0;
       $129 = HEAP32[132328>>2]|0;
       $130 = (($129) + ($128<<1)|0);
       $131 = HEAP16[$130>>1]|0;
       $132 = $131&65535;
       HEAP32[$5>>2] = $132;
       $133 = HEAP16[132336>>1]|0;
       $134 = $133&65535;
       $135 = Math_imul($134, $28)|0;
       $136 = (($135) + ($col$13))|0;
       $137 = HEAP32[132328>>2]|0;
       $138 = (($137) + ($136<<1)|0);
       $139 = HEAP16[$138>>1]|0;
       $140 = $139&65535;
       HEAP32[$6>>2] = $140;
       $141 = (_median4($val)|0);
       $142 = $141&65535;
       $143 = HEAP16[132336>>1]|0;
       $144 = $143&65535;
       $145 = Math_imul($144, $row$06)|0;
       $146 = (($145) + ($col$13))|0;
       $147 = HEAP32[132328>>2]|0;
       $148 = (($147) + ($146<<1)|0);
       HEAP16[$148>>1] = $142;
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
     if ((label|0) == 11) {
      label = 0;
      $88 = HEAP16[132336>>1]|0;
      $89 = $88&65535;
      $90 = Math_imul($89, $row$06)|0;
      $91 = (($col$13) + -2)|0;
      $92 = (($91) + ($90))|0;
      $93 = HEAP32[132328>>2]|0;
      $94 = (($93) + ($92<<1)|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95&65535;
      $97 = (($col$13) + 2)|0;
      $98 = (($97) + ($90))|0;
      $99 = (($93) + ($98<<1)|0);
      $100 = HEAP16[$99>>1]|0;
      $101 = $100&65535;
      $102 = (($101) + ($96))|0;
      $103 = $102 >>> 1;
      $104 = $103&65535;
      $105 = (($90) + ($col$13))|0;
      $106 = (($93) + ($105<<1)|0);
      HEAP16[$106>>1] = $104;
     }
     $149 = (($col$13) + 4)|0;
     $150 = HEAP16[132088>>1]|0;
     $151 = $150&65535;
     $152 = (($151) + -2)|0;
     $153 = ($149|0)<($152|0);
     if ($153) {
      $col$13 = $149;
     } else {
      break;
     }
    }
   }
  }
  $154 = (($row$06) + 1)|0;
  $155 = HEAP16[132080>>1]|0;
  $156 = $155&65535;
  $157 = (($156) + -2)|0;
  $158 = ($154|0)<($157|0);
  if ($158) {
   $row$06 = $154;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _smal_v9_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$02 = 0, $i$11 = 0, $seg = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0;
 $seg = sp;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),67,0)|0);
 $1 = (_get4()|0);
 $2 = HEAP32[864>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = $3 & 255;
 $5 = HEAP32[864>>2]|0;
 (_fseek(($5|0),($1|0),0)|0);
 $6 = $4 << 1;
 $7 = ($4|0)==(0);
 if (!($7)) {
  $i$02 = 0;
  while(1) {
   $8 = (_get4()|0);
   $9 = HEAP32[133280>>2]|0;
   $10 = $i$02 & 1;
   $11 = (0 - ($10))|0;
   $12 = $9 & $11;
   $13 = (($12) + ($8))|0;
   $14 = (($seg) + ($i$02<<2)|0);
   HEAP32[$14>>2] = $13;
   $15 = (($i$02) + 1)|0;
   $16 = ($15>>>0)<($6>>>0);
   if ($16) {
    $i$02 = $15;
   } else {
    break;
   }
  }
 }
 $17 = HEAP32[864>>2]|0;
 (_fseek(($17|0),78,0)|0);
 $18 = HEAP32[864>>2]|0;
 $19 = (_getc_unlocked(($18|0))|0);
 $20 = HEAP32[864>>2]|0;
 (_fseek(($20|0),88,0)|0);
 $21 = HEAP16[133064>>1]|0;
 $22 = $21&65535;
 $23 = HEAP16[132336>>1]|0;
 $24 = $23&65535;
 $25 = Math_imul($24, $22)|0;
 $26 = (($seg) + ($4<<3)|0);
 HEAP32[$26>>2] = $25;
 $27 = (_get4()|0);
 $28 = HEAP32[133280>>2]|0;
 $29 = (($28) + ($27))|0;
 $30 = ((($seg) + ($4<<3)|0) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = ($4|0)==(0);
 if (!($31)) {
  $32 = $3 & 255;
  $i$11 = 0;
  while(1) {
   $33 = (($seg) + ($i$11<<3)|0);
   _smal_decode_segment($33,$19);
   $34 = (($i$11) + 1)|0;
   $exitcond = ($34|0)==($32|0);
   if ($exitcond) {
    break;
   } else {
    $i$11 = $34;
   }
  }
 }
 $35 = ($19|0)==(0);
 if ($35) {
  STACKTOP = sp;return;
 }
 _fill_holes($19);
 STACKTOP = sp;return;
}
function _redcine_load_raw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _foveon_decoder($size,$code) {
 $size = $size|0;
 $code = $code|0;
 var $$lcssa16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code$tr = 0, $exitcond = 0, $i$05 = 0, $i$16 = 0, $i$16$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($size|0)==(0);
 $1 = ($size|0)==(0);
 $2 = (($size) + -1)|0;
 $code$tr = $code;
 L1: while(1) {
  $3 = ($code$tr|0)!=(0);
  if (!($3)) {
   if (!($1)) {
    $i$05 = 0;
    while(1) {
     $4 = (_get4()|0);
     $5 = (160640 + ($i$05<<2)|0);
     HEAP32[$5>>2] = $4;
     $6 = (($i$05) + 1)|0;
     $exitcond = ($i$05|0)==($2|0);
     if ($exitcond) {
      break;
     } else {
      $i$05 = $6;
     }
    }
   }
   _memset((164736|0),0,24576)|0;
   HEAP32[189312>>2] = 164736;
  }
  $7 = HEAP32[189312>>2]|0;
  $8 = (($7) + 12|0);
  HEAP32[189312>>2] = $8;
  $9 = ($8>>>0)>(((164736 + 24576|0))>>>0);
  if ($9) {
   label = 7;
   break;
  }
  if ($3) {
   if (!($0)) {
    $i$16 = 0;
    while(1) {
     $12 = (160640 + ($i$16<<2)|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==($code$tr|0);
     if ($14) {
      $$lcssa16 = $7;$i$16$lcssa = $i$16;
      label = 11;
      break L1;
     }
     $16 = (($i$16) + 1)|0;
     $17 = ($16>>>0)<($size>>>0);
     if ($17) {
      $i$16 = $16;
     } else {
      break;
     }
    }
   }
   $18 = ($code$tr>>>0)>(3623878655);
   if ($18) {
    label = 15;
    break;
   }
  }
  $19 = (($code$tr) + 134217728)|0;
  $20 = $19 & -134217728;
  $21 = $code$tr << 1;
  $22 = $21 & 134217726;
  $23 = $20 | $22;
  $24 = HEAP32[189312>>2]|0;
  HEAP32[$7>>2] = $24;
  _foveon_decoder($size,$23);
  $25 = HEAP32[189312>>2]|0;
  $26 = (($7) + 4|0);
  HEAP32[$26>>2] = $25;
  $27 = $23 | 1;
  $code$tr = $27;
 }
 if ((label|0) == 7) {
  $10 = HEAP32[_stderr>>2]|0;
  $11 = HEAP32[680>>2]|0;
  HEAP32[$vararg_buffer>>2] = $11;
  (_fprintf(($10|0),(189320|0),($vararg_buffer|0))|0);
  _longjmp((688|0),2);
  // unreachable;
 }
 else if ((label|0) == 11) {
  $15 = (($$lcssa16) + 8|0);
  HEAP32[$15>>2] = $i$16$lcssa;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function _foveon_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $bit$022 = 0, $bit$1$lcssa = 0, $bit$117 = 0, $bit$213 = 0, $bit$3$lcssa = 0, $bit$3$lcssa$lcssa = 0, $bit$38 = 0, $bitbuf$021 = 0;
 var $bitbuf$1$lcssa = 0, $bitbuf$116 = 0, $bitbuf$212 = 0, $bitbuf$3$lcssa = 0, $bitbuf$3$lcssa$lcssa = 0, $bitbuf$37 = 0, $bitbuf$5 = 0, $c$014 = 0, $col$015 = 0, $dindex$0$lcssa = 0, $dindex$09 = 0, $exitcond32 = 0, $pred = 0, $row$026 = 0, $row$123 = 0, $sext = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $pred = sp + 8|0;
 $0 = (_get4()|0);
 $1 = HEAP32[133792>>2]|0;
 $2 = HEAP16[133752>>1]|0;
 $3 = $2&65535;
 $4 = HEAP16[133760>>1]|0;
 $5 = $4&65535;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_fprintf(($1|0),(133800|0),($vararg_buffer|0))|0);
 $6 = ($0|0)==(0);
 if (!($6)) {
  $7 = HEAP16[133752>>1]|0;
  $8 = $7&65535;
  $9 = ($8*3)|0;
  $10 = ($0>>>0)<($9>>>0);
  if ($10) {
   STACKTOP = sp;return;
  }
  $11 = (_malloc($0)|0);
  _merror($11,189352);
  $12 = HEAP16[133760>>1]|0;
  $13 = ($12<<16>>16)==(0);
  if (!($13)) {
   $row$026 = 0;
   while(1) {
    $14 = HEAP32[864>>2]|0;
    (_fread(($11|0),1,($0|0),($14|0))|0);
    $15 = HEAP16[133752>>1]|0;
    $16 = $15&65535;
    $17 = HEAP32[133792>>2]|0;
    (_fwrite(($11|0),3,($16|0),($17|0))|0);
    $18 = (($row$026) + 1)|0;
    $19 = HEAP16[133760>>1]|0;
    $20 = $19&65535;
    $21 = ($18>>>0)<($20>>>0);
    if ($21) {
     $row$026 = $18;
    } else {
     break;
    }
   }
  }
  _free($11);
  STACKTOP = sp;return;
 }
 _foveon_decoder(256,0);
 $22 = HEAP16[133760>>1]|0;
 $23 = ($22<<16>>16)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $bit$022 = 1;$bitbuf$021 = 0;$row$123 = 0;
 while(1) {
  ;HEAP16[$pred+0>>1]=0|0;HEAP16[$pred+2>>1]=0|0;HEAP16[$pred+4>>1]=0|0;
  $24 = ($bit$022|0)==(0);
  if ($24) {
   (_get4()|0);
  }
  $25 = HEAP16[133752>>1]|0;
  $26 = ($25<<16>>16)==(0);
  if ($26) {
   $bit$1$lcssa = 0;$bitbuf$1$lcssa = $bitbuf$021;
  } else {
   $bit$117 = 0;$bitbuf$116 = $bitbuf$021;$col$015 = 0;
   while(1) {
    $bit$213 = $bit$117;$bitbuf$212 = $bitbuf$116;$c$014 = 0;
    while(1) {
     $27 = HEAP32[164736>>2]|0;
     $28 = ($27|0)==(0|0);
     if ($28) {
      $bit$3$lcssa = $bit$213;$bitbuf$3$lcssa = $bitbuf$212;$dindex$0$lcssa = 164736;
     } else {
      $bit$38 = $bit$213;$bitbuf$37 = $bitbuf$212;$dindex$09 = 164736;
      while(1) {
       $29 = (($bit$38) + 31)|0;
       $30 = $29 & 31;
       $31 = ($30|0)==(31);
       if ($31) {
        $32 = $bitbuf$37 << 8;
        $33 = HEAP32[864>>2]|0;
        $34 = (_getc_unlocked(($33|0))|0);
        $35 = (($34) + ($32))|0;
        $36 = $35 << 8;
        $37 = HEAP32[864>>2]|0;
        $38 = (_getc_unlocked(($37|0))|0);
        $39 = (($38) + ($36))|0;
        $40 = $39 << 8;
        $41 = HEAP32[864>>2]|0;
        $42 = (_getc_unlocked(($41|0))|0);
        $43 = (($42) + ($40))|0;
        $44 = $43 << 8;
        $45 = HEAP32[864>>2]|0;
        $46 = (_getc_unlocked(($45|0))|0);
        $47 = (($46) + ($44))|0;
        $bitbuf$5 = $47;
       } else {
        $bitbuf$5 = $bitbuf$37;
       }
       $48 = $bitbuf$5 >>> $30;
       $49 = $48 & 1;
       $50 = (($dindex$09) + ($49<<2)|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0|0);
       if ($53) {
        $bit$3$lcssa = $30;$bitbuf$3$lcssa = $bitbuf$5;$dindex$0$lcssa = $51;
        break;
       } else {
        $bit$38 = $30;$bitbuf$37 = $bitbuf$5;$dindex$09 = $51;
       }
      }
     }
     $54 = (($dindex$0$lcssa) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($pred) + ($c$014<<1)|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $57&65535;
     $59 = (($58) + ($55))|0;
     $60 = $59&65535;
     HEAP16[$56>>1] = $60;
     $sext = $59 << 16;
     $61 = $sext >> 16;
     $62 = HEAP32[133792>>2]|0;
     (_fputc(($61|0),($62|0))|0);
     $63 = (($c$014) + 1)|0;
     $exitcond32 = ($63|0)==(3);
     if ($exitcond32) {
      $bit$3$lcssa$lcssa = $bit$3$lcssa;$bitbuf$3$lcssa$lcssa = $bitbuf$3$lcssa;
      break;
     } else {
      $bit$213 = $bit$3$lcssa;$bitbuf$212 = $bitbuf$3$lcssa;$c$014 = $63;
     }
    }
    $64 = (($col$015) + 1)|0;
    $65 = HEAP16[133752>>1]|0;
    $66 = $65&65535;
    $67 = ($64>>>0)<($66>>>0);
    if ($67) {
     $bit$117 = $bit$3$lcssa$lcssa;$bitbuf$116 = $bitbuf$3$lcssa$lcssa;$col$015 = $64;
    } else {
     $bit$1$lcssa = $bit$3$lcssa$lcssa;$bitbuf$1$lcssa = $bitbuf$3$lcssa$lcssa;
     break;
    }
   }
  }
  $68 = (($row$123) + 1)|0;
  $69 = HEAP16[133760>>1]|0;
  $70 = $69&65535;
  $71 = ($68>>>0)<($70>>>0);
  if ($71) {
   $bit$022 = $bit$1$lcssa;$bitbuf$021 = $bitbuf$1$lcssa;$row$123 = $68;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _foveon_sd_load_raw() {
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit$030 = 0, $bit$1$lcssa = 0, $bit$122 = 0, $bit$217 = 0, $bit$3$lcssa = 0, $bit$313 = 0, $bit$4 = 0, $bitbuf$027 = 0, $bitbuf$1$lcssa = 0, $bitbuf$120 = 0, $bitbuf$216 = 0, $bitbuf$3$lcssa = 0, $bitbuf$312 = 0, $bitbuf$5 = 0;
 var $bitbuf$6 = 0, $c$118 = 0, $col$021 = 0, $diff = 0, $dindex$0$lcssa = 0, $dindex$011 = 0, $exitcond36 = 0, $pred = 0, $row$028 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064|0;
 $diff = sp + 16|0;
 $pred = sp;
 _read_shorts($diff,1024);
 $0 = HEAP32[133096>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  _foveon_decoder(1024,0);
 }
 $2 = HEAP16[132080>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $bit$030 = -1;$bitbuf$027 = 0;$row$028 = 0;
 while(1) {
  ;HEAP32[$pred+0>>2]=0|0;HEAP32[$pred+4>>2]=0|0;HEAP32[$pred+8>>2]=0|0;
  $4 = HEAP32[133096>>2]|0;
  $5 = $4 | $bit$030;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = (_atoi(((133688 + 2|0)))|0);
   $8 = ($7|0)<(14);
   if ($8) {
    (_get4()|0);
   }
  }
  $9 = HEAP16[132088>>1]|0;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $bit$1$lcssa = 0;$bitbuf$1$lcssa = $bitbuf$027;
  } else {
   $bit$122 = 0;$bitbuf$120 = $bitbuf$027;$col$021 = 0;
   while(1) {
    $11 = HEAP32[133096>>2]|0;
    $12 = ($11|0)==(0);
    if ($12) {
     $bit$217 = $bit$122;$bitbuf$216 = $bitbuf$120;$c$118 = 0;
     while(1) {
      $36 = HEAP32[164736>>2]|0;
      $37 = ($36|0)==(0|0);
      if ($37) {
       $bit$3$lcssa = $bit$217;$bitbuf$3$lcssa = $bitbuf$216;$dindex$0$lcssa = 164736;
      } else {
       $bit$313 = $bit$217;$bitbuf$312 = $bitbuf$216;$dindex$011 = 164736;
       while(1) {
        $38 = (($bit$313) + 31)|0;
        $39 = $38 & 31;
        $40 = ($39|0)==(31);
        if ($40) {
         $41 = $bitbuf$312 << 8;
         $42 = HEAP32[864>>2]|0;
         $43 = (_getc_unlocked(($42|0))|0);
         $44 = (($43) + ($41))|0;
         $45 = $44 << 8;
         $46 = HEAP32[864>>2]|0;
         $47 = (_getc_unlocked(($46|0))|0);
         $48 = (($47) + ($45))|0;
         $49 = $48 << 8;
         $50 = HEAP32[864>>2]|0;
         $51 = (_getc_unlocked(($50|0))|0);
         $52 = (($51) + ($49))|0;
         $53 = $52 << 8;
         $54 = HEAP32[864>>2]|0;
         $55 = (_getc_unlocked(($54|0))|0);
         $56 = (($55) + ($53))|0;
         $bitbuf$5 = $56;
        } else {
         $bitbuf$5 = $bitbuf$312;
        }
        $57 = $bitbuf$5 >>> $39;
        $58 = $57 & 1;
        $59 = (($dindex$011) + ($58<<2)|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = HEAP32[$60>>2]|0;
        $62 = ($61|0)==(0|0);
        if ($62) {
         $bit$3$lcssa = $39;$bitbuf$3$lcssa = $bitbuf$5;$dindex$0$lcssa = $60;
         break;
        } else {
         $bit$313 = $39;$bitbuf$312 = $bitbuf$5;$dindex$011 = $60;
        }
       }
      }
      $63 = (($dindex$0$lcssa) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($diff) + ($64<<1)|0);
      $66 = HEAP16[$65>>1]|0;
      $67 = $66 << 16 >> 16;
      $68 = (($pred) + ($c$118<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (($69) + ($67))|0;
      HEAP32[$68>>2] = $70;
      $$off = (($70) + -65536)|0;
      $71 = ($$off>>>0)<(4294836224);
      if ($71) {
       _derror();
      }
      $72 = (($c$118) + 1)|0;
      $exitcond36 = ($72|0)==(3);
      if ($exitcond36) {
       $bit$4 = $bit$3$lcssa;$bitbuf$6 = $bitbuf$3$lcssa;
       break;
      } else {
       $bit$217 = $bit$3$lcssa;$bitbuf$216 = $bitbuf$3$lcssa;$c$118 = $72;
      }
     }
    } else {
     $13 = (_get4()|0);
     $14 = $13 & 1023;
     $15 = (($diff) + ($14<<1)|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = $16 << 16 >> 16;
     $18 = (($pred) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($19) + ($17))|0;
     HEAP32[$18>>2] = $20;
     $21 = $13 >>> 10;
     $22 = $21 & 1023;
     $23 = (($diff) + ($22<<1)|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 << 16 >> 16;
     $26 = (($pred) + 4|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + ($25))|0;
     HEAP32[$26>>2] = $28;
     $29 = $13 >>> 20;
     $30 = $29 & 1023;
     $31 = (($diff) + ($30<<1)|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = HEAP32[$pred>>2]|0;
     $35 = (($34) + ($33))|0;
     HEAP32[$pred>>2] = $35;
     $bit$4 = $bit$122;$bitbuf$6 = $13;
    }
    $73 = HEAP32[132112>>2]|0;
    $74 = HEAP32[$pred>>2]|0;
    $75 = $74&65535;
    $76 = HEAP16[132088>>1]|0;
    $77 = $76&65535;
    $78 = Math_imul($77, $row$028)|0;
    $79 = (($78) + ($col$021))|0;
    $80 = (($73) + ($79<<3)|0);
    HEAP16[$80>>1] = $75;
    $81 = (($pred) + 4|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82&65535;
    $84 = HEAP16[132088>>1]|0;
    $85 = $84&65535;
    $86 = Math_imul($85, $row$028)|0;
    $87 = (($86) + ($col$021))|0;
    $88 = ((($73) + ($87<<3)|0) + 2|0);
    HEAP16[$88>>1] = $83;
    $89 = (($pred) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $90&65535;
    $92 = HEAP16[132088>>1]|0;
    $93 = $92&65535;
    $94 = Math_imul($93, $row$028)|0;
    $95 = (($94) + ($col$021))|0;
    $96 = ((($73) + ($95<<3)|0) + 4|0);
    HEAP16[$96>>1] = $91;
    $97 = (($col$021) + 1)|0;
    $98 = HEAP16[132088>>1]|0;
    $99 = $98&65535;
    $100 = ($97|0)<($99|0);
    if ($100) {
     $bit$122 = $bit$4;$bitbuf$120 = $bitbuf$6;$col$021 = $97;
    } else {
     $bit$1$lcssa = $bit$4;$bitbuf$1$lcssa = $bitbuf$6;
     break;
    }
   }
  }
  $101 = (($row$028) + 1)|0;
  $102 = HEAP16[132080>>1]|0;
  $103 = $102&65535;
  $104 = ($101|0)<($103|0);
  if ($104) {
   $bit$030 = $bit$1$lcssa;$bitbuf$027 = $bitbuf$1$lcssa;$row$028 = $101;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _foveon_huff($huff) {
 $huff = $huff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond3 = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[$huff>>1] = 8;
 $i$02 = 0;
 while(1) {
  $0 = HEAP32[864>>2]|0;
  $1 = (_getc(($0|0))|0);
  $2 = HEAP32[864>>2]|0;
  $3 = (_getc(($2|0))|0);
  $4 = 256 >>> $1;
  $5 = ($4|0)>(0);
  if ($5) {
   $6 = $1 << 8;
   $7 = $6 | $i$02;
   $8 = $7&65535;
   $9 = (($4) + -1)|0;
   $j$01 = 0;
   while(1) {
    $10 = (($j$01) + 1)|0;
    $11 = (($10) + ($3))|0;
    $12 = (($huff) + ($11<<1)|0);
    HEAP16[$12>>1] = $8;
    $exitcond = ($j$01|0)==($9|0);
    if ($exitcond) {
     break;
    } else {
     $j$01 = $10;
    }
   }
  }
  $13 = (($i$02) + 1)|0;
  $exitcond3 = ($13|0)==(13);
  if ($exitcond3) {
   break;
  } else {
   $i$02 = $13;
  }
 }
 (_get2()|0);
 return;
}
function _foveon_dp_load_raw() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $c$16 = 0, $col$02 = 0, $exitcond = 0, $hpred = 0, $huff = 0, $roff = 0, $row$03 = 0, $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $roff = sp;
 $huff = sp + 32|0;
 $vpred = sp + 24|0;
 $hpred = sp + 16|0;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),8,1)|0);
 _foveon_huff($huff);
 HEAP32[$roff>>2] = 48;
 $1 = (_get4()|0);
 $2 = (-48 - ($1))|0;
 $3 = $2 & -16;
 $4 = (0 - ($3))|0;
 $5 = (($roff) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = (_get4()|0);
 $7 = (($3) - ($6))|0;
 $8 = $7 & -16;
 $9 = (0 - ($8))|0;
 $10 = (($roff) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (_get4()|0);
 $12 = (($8) - ($11))|0;
 $13 = $12 & -16;
 $14 = (0 - ($13))|0;
 $15 = (($roff) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = (($vpred) + 6|0);
 $17 = (($vpred) + 4|0);
 $18 = (($vpred) + 2|0);
 $c$16 = 0;
 while(1) {
  $19 = HEAP32[864>>2]|0;
  $20 = HEAP32[133280>>2]|0;
  $21 = (($roff) + ($c$16<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20))|0;
  (_fseek(($19|0),($23|0),0)|0);
  (_getbithuff(-1,0)|0);
  HEAP16[$16>>1] = 512;
  HEAP16[$17>>1] = 512;
  HEAP16[$18>>1] = 512;
  HEAP16[$vpred>>1] = 512;
  $24 = HEAP16[132080>>1]|0;
  $25 = ($24<<16>>16)==(0);
  if (!($25)) {
   $row$03 = 0;
   while(1) {
    $26 = HEAP16[132088>>1]|0;
    $27 = ($26<<16>>16)==(0);
    if (!($27)) {
     $28 = $row$03 & 1;
     $col$02 = 0;
     while(1) {
      $29 = (_ljpeg_diff($huff)|0);
      $30 = ($col$02>>>0)<(2);
      if ($30) {
       $31 = ((($vpred) + ($28<<2)|0) + ($col$02<<1)|0);
       $32 = HEAP16[$31>>1]|0;
       $33 = $32&65535;
       $34 = (($33) + ($29))|0;
       $35 = $34&65535;
       HEAP16[$31>>1] = $35;
       $36 = (($hpred) + ($col$02<<1)|0);
       HEAP16[$36>>1] = $35;
      } else {
       $37 = $col$02 & 1;
       $38 = (($hpred) + ($37<<1)|0);
       $39 = HEAP16[$38>>1]|0;
       $40 = $39&65535;
       $41 = (($40) + ($29))|0;
       $42 = $41&65535;
       HEAP16[$38>>1] = $42;
      }
      $43 = $col$02 & 1;
      $44 = (($hpred) + ($43<<1)|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = HEAP16[132088>>1]|0;
      $47 = $46&65535;
      $48 = Math_imul($47, $row$03)|0;
      $49 = (($48) + ($col$02))|0;
      $50 = HEAP32[132112>>2]|0;
      $51 = ((($50) + ($49<<3)|0) + ($c$16<<1)|0);
      HEAP16[$51>>1] = $45;
      $52 = (($col$02) + 1)|0;
      $53 = HEAP16[132088>>1]|0;
      $54 = $53&65535;
      $55 = ($52>>>0)<($54>>>0);
      if ($55) {
       $col$02 = $52;
      } else {
       break;
      }
     }
    }
    $56 = (($row$03) + 1)|0;
    $57 = HEAP16[132080>>1]|0;
    $58 = $57&65535;
    $59 = ($56>>>0)<($58>>>0);
    if ($59) {
     $row$03 = $56;
    } else {
     break;
    }
   }
  }
  $60 = (($c$16) + 1)|0;
  $exitcond = ($60|0)==(3);
  if ($exitcond) {
   break;
  } else {
   $c$16 = $60;
  }
 }
 STACKTOP = sp;return;
}
function _foveon_load_camf() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $col$05 = 0, $exitcond = 0, $exitcond9 = 0, $high$02 = 0, $hpred = 0, $huff = 0, $i$03 = 0, $j$07 = 0, $j$1$lcssa = 0, $j$14 = 0, $j$2 = 0, $row$08 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vpred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0;
 $vararg_buffer = sp + 8|0;
 $huff = sp + 20|0;
 $vpred = sp;
 $hpred = sp + 16|0;
 $0 = $vpred;
 $1 = $0;
 HEAP32[$1>>2] = 33554944;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 33554944;
 $4 = HEAP32[864>>2]|0;
 $5 = HEAP32[133272>>2]|0;
 (_fseek(($4|0),($5|0),0)|0);
 $6 = (_get4()|0);
 (_get4()|0);
 (_get4()|0);
 $7 = (_get4()|0);
 $8 = (_get4()|0);
 if ((($6|0) == 4)) {
  $35 = HEAP32[189368>>2]|0;
  _free($35);
  $36 = ($7*3)|0;
  $37 = Math_imul($36, $8)|0;
  $38 = $37 >>> 1;
  HEAP32[133944>>2] = $38;
  $39 = (_malloc($38)|0);
  HEAP32[189368>>2] = $39;
  _merror($39,189376);
  _foveon_huff($huff);
  (_get4()|0);
  (_getbithuff(-1,0)|0);
  $40 = ($8|0)==(0);
  if ($40) {
   STACKTOP = sp;return;
  }
  $41 = ($7|0)==(0);
  $42 = (($hpred) + 2|0);
  $j$07 = 0;$row$08 = 0;
  while(1) {
   if ($41) {
    $j$1$lcssa = $j$07;
   } else {
    $43 = $row$08 & 1;
    $col$05 = 0;$j$14 = $j$07;
    while(1) {
     $44 = (_ljpeg_diff($huff)|0);
     $45 = ($col$05>>>0)<(2);
     if ($45) {
      $46 = ((($vpred) + ($43<<2)|0) + ($col$05<<1)|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = $47&65535;
      $49 = (($48) + ($44))|0;
      $50 = $49&65535;
      HEAP16[$46>>1] = $50;
      $51 = (($hpred) + ($col$05<<1)|0);
      HEAP16[$51>>1] = $50;
     } else {
      $52 = $col$05 & 1;
      $53 = (($hpred) + ($52<<1)|0);
      $54 = HEAP16[$53>>1]|0;
      $55 = $54&65535;
      $56 = (($55) + ($44))|0;
      $57 = $56&65535;
      HEAP16[$53>>1] = $57;
     }
     $58 = $col$05 & 1;
     $59 = ($58|0)==(0);
     if ($59) {
      $j$2 = $j$14;
     } else {
      $60 = HEAP16[$hpred>>1]|0;
      $61 = ($60&65535) >>> 4;
      $62 = $61&255;
      $63 = (($j$14) + 1)|0;
      $64 = HEAP32[189368>>2]|0;
      $65 = (($64) + ($j$14)|0);
      HEAP8[$65>>0] = $62;
      $66 = HEAP16[$hpred>>1]|0;
      $67 = $66&65535;
      $68 = $67 << 4;
      $69 = HEAP16[$42>>1]|0;
      $70 = $69&65535;
      $71 = $70 >>> 8;
      $72 = $71 | $68;
      $73 = $72&255;
      $74 = (($j$14) + 2)|0;
      $75 = HEAP32[189368>>2]|0;
      $76 = (($75) + ($63)|0);
      HEAP8[$76>>0] = $73;
      $77 = HEAP16[$42>>1]|0;
      $78 = $77&255;
      $79 = (($j$14) + 3)|0;
      $80 = HEAP32[189368>>2]|0;
      $81 = (($80) + ($74)|0);
      HEAP8[$81>>0] = $78;
      $j$2 = $79;
     }
     $82 = (($col$05) + 1)|0;
     $exitcond = ($82|0)==($7|0);
     if ($exitcond) {
      $j$1$lcssa = $j$2;
      break;
     } else {
      $col$05 = $82;$j$14 = $j$2;
     }
    }
   }
   $83 = (($row$08) + 1)|0;
   $exitcond9 = ($83|0)==($8|0);
   if ($exitcond9) {
    break;
   } else {
    $j$07 = $j$1$lcssa;$row$08 = $83;
   }
  }
  STACKTOP = sp;return;
 } else if ((($6|0) == 2)) {
  $9 = HEAP32[189368>>2]|0;
  $10 = HEAP32[133944>>2]|0;
  $11 = HEAP32[864>>2]|0;
  (_fread(($9|0),1,($10|0),($11|0))|0);
  $12 = HEAP32[133944>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   STACKTOP = sp;return;
  } else {
   $high$02 = $8;$i$03 = 0;
  }
  while(1) {
   $14 = ($high$02*1597)|0;
   $15 = (($14) + 51749)|0;
   $16 = (($15>>>0) % 244944)&-1;
   $17 = (___muldi3(($16|0),0,301593171,0)|0);
   $18 = tempRet0;
   $19 = (_bitshift64Lshr(($17|0),($18|0),24)|0);
   $20 = tempRet0;
   $21 = $16 << 8;
   $22 = (($21) - ($19))|0;
   $23 = $22 >>> 1;
   $24 = (($23) + ($19))|0;
   $25 = $24 >>> 17;
   $26 = HEAP32[189368>>2]|0;
   $27 = (($26) + ($i$03)|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $25 ^ $29;
   $31 = $30&255;
   HEAP8[$27>>0] = $31;
   $32 = (($i$03) + 1)|0;
   $33 = HEAP32[133944>>2]|0;
   $34 = ($32>>>0)<($33>>>0);
   if ($34) {
    $high$02 = $16;$i$03 = $32;
   } else {
    break;
   }
  }
  STACKTOP = sp;return;
 } else {
  $84 = HEAP32[_stderr>>2]|0;
  $85 = HEAP32[680>>2]|0;
  HEAP32[$vararg_buffer>>2] = $85;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  (_fprintf(($84|0),(189400|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
}
function _foveon_camf_param($block,$param) {
 $block = $block|0;
 $param = $param|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum6$lcssa = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cp$0 = 0, $cp$0$lcssa16 = 0, $idx$012 = 0, $num$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[133944>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[189368>>2]|0;
 $3 = HEAP32[133944>>2]|0;
 $idx$012 = 0;
 L4: while(1) {
  $4 = (($2) + ($idx$012)|0);
  $5 = (_strncmp($4,189432,3)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $$0 = 0;
   label = 11;
   break;
  }
  $$sum = (($idx$012) + 3)|0;
  $7 = (($2) + ($$sum)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(80);
  L7: do {
   if ($9) {
    $$sum1 = (($idx$012) + 12)|0;
    $10 = (($2) + ($$sum1)|0);
    $11 = (_sget4($10)|0);
    $$sum2 = (($11) + ($idx$012))|0;
    $12 = (($2) + ($$sum2)|0);
    $13 = (_strcmp($block,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$sum3 = (($idx$012) + 16)|0;
     $15 = (($2) + ($$sum3)|0);
     $16 = (_sget4($15)|0);
     $$sum4 = (($16) + ($idx$012))|0;
     $17 = (($2) + ($$sum4)|0);
     $18 = (_sget4($17)|0);
     $$sum5 = (($$sum4) + 4)|0;
     $19 = (($2) + ($$sum5)|0);
     $20 = (_sget4($19)|0);
     $$sum6 = (($20) + ($idx$012))|0;
     $cp$0 = $17;$num$0 = $18;
     while(1) {
      $21 = ($num$0|0)==(0);
      if ($21) {
       break L7;
      }
      $22 = (($num$0) + -1)|0;
      $23 = (($cp$0) + 8|0);
      $24 = (_sget4($23)|0);
      $$sum8 = (($24) + ($$sum6))|0;
      $25 = (($2) + ($$sum8)|0);
      $26 = (_strcmp($param,$25)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $$sum6$lcssa = $$sum6;$cp$0$lcssa16 = $cp$0;
       label = 9;
       break L4;
      } else {
       $cp$0 = $23;$num$0 = $22;
      }
     }
    }
   }
  } while(0);
  $$sum7 = (($idx$012) + 8)|0;
  $31 = (($2) + ($$sum7)|0);
  $32 = (_sget4($31)|0);
  $33 = (($32) + ($idx$012))|0;
  $34 = ($33>>>0)<($3>>>0);
  if ($34) {
   $idx$012 = $33;
  } else {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label|0) == 9) {
  $28 = (($cp$0$lcssa16) + 12|0);
  $29 = (_sget4($28)|0);
  $$sum9 = (($29) + ($$sum6$lcssa))|0;
  $30 = (($2) + ($$sum9)|0);
  $$0 = $30;
  return ($$0|0);
 }
 else if ((label|0) == 11) {
  return ($$0|0);
 }
 return (0)|0;
}
function _foveon_camf_matrix($dim,$name) {
 $dim = $dim|0;
 $name = $name|0;
 var $$0 = 0, $$in = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $cp$016 = 0, $exitcond = 0, $i$114 = 0;
 var $idx$018 = 0, $idx$018$lcssa25 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[133944>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if (!($1)) {
   $2 = HEAP32[189368>>2]|0;
   $3 = HEAP32[133944>>2]|0;
   $idx$018 = 0;
   while(1) {
    $4 = (($2) + ($idx$018)|0);
    $5 = (_strncmp($4,189432,3)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     break L1;
    }
    $$sum = (($idx$018) + 3)|0;
    $7 = (($2) + ($$sum)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(77);
    if ($9) {
     $$sum2 = (($idx$018) + 12)|0;
     $10 = (($2) + ($$sum2)|0);
     $11 = (_sget4($10)|0);
     $$sum3 = (($11) + ($idx$018))|0;
     $12 = (($2) + ($$sum3)|0);
     $13 = (_strcmp($name,$12)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      $idx$018$lcssa25 = $idx$018;
      break;
     }
    }
    $$sum11 = (($idx$018) + 8)|0;
    $58 = (($2) + ($$sum11)|0);
    $59 = (_sget4($58)|0);
    $60 = (($59) + ($idx$018))|0;
    $61 = ($60>>>0)<($3>>>0);
    if ($61) {
     $idx$018 = $60;
    } else {
     break L1;
    }
   }
   $15 = (($dim) + 8|0);
   HEAP32[$15>>2] = 1;
   $16 = (($dim) + 4|0);
   HEAP32[$16>>2] = 1;
   HEAP32[$dim>>2] = 1;
   $$sum4 = (($idx$018$lcssa25) + 16)|0;
   $17 = (($2) + ($$sum4)|0);
   $18 = (_sget4($17)|0);
   $$sum5 = (($18) + ($idx$018$lcssa25))|0;
   $19 = (($2) + ($$sum5)|0);
   $20 = (_sget4($19)|0);
   $$sum6 = (($$sum5) + 4)|0;
   $21 = (($2) + ($$sum6)|0);
   $22 = (_sget4($21)|0);
   $23 = ($22>>>0)>(3);
   if (!($23)) {
    $$sum7 = (($$sum5) + 8)|0;
    $24 = (($2) + ($$sum7)|0);
    $25 = (_sget4($24)|0);
    $$sum8 = (($25) + ($idx$018$lcssa25))|0;
    $26 = ($22|0)==(0);
    if (!($26)) {
     $$in = $22;$cp$016 = $19;
     while(1) {
      $27 = (($$in) + -1)|0;
      $28 = (($cp$016) + 12|0);
      $29 = (_sget4($28)|0);
      $30 = (($dim) + ($27<<2)|0);
      HEAP32[$30>>2] = $29;
      $31 = ($27|0)==(0);
      if ($31) {
       break;
      } else {
       $$in = $27;$cp$016 = $28;
      }
     }
    }
    $32 = HEAP32[$dim>>2]|0;
    $33 = (+($32>>>0));
    $34 = HEAP32[$16>>2]|0;
    $35 = (+($34>>>0));
    $36 = $33 * $35;
    $37 = HEAP32[$15>>2]|0;
    $38 = (+($37>>>0));
    $39 = $36 * $38;
    $40 = HEAP32[133944>>2]|0;
    $41 = $40 >>> 2;
    $42 = (+($41>>>0));
    $43 = $39 > $42;
    if (!($43)) {
     $44 = (~~(($39))>>>0);
     $45 = $44 << 2;
     $46 = (_malloc($45)|0);
     _merror($46,189440);
     $47 = ($44|0)==(0);
     if ($47) {
      $$0 = $46;
      STACKTOP = sp;return ($$0|0);
     } else {
      $i$114 = 0;
     }
     while(1) {
      if ((($20|0) == 0) | (($20|0) == 6)) {
       $52 = $i$114 << 1;
       $$sum9 = (($52) + ($$sum8))|0;
       $53 = (($2) + ($$sum9)|0);
       $54 = (_sget4($53)|0);
       $55 = $54 & 65535;
       $56 = (($46) + ($i$114<<2)|0);
       HEAP32[$56>>2] = $55;
      } else {
       $48 = $i$114 << 2;
       $$sum10 = (($48) + ($$sum8))|0;
       $49 = (($2) + ($$sum10)|0);
       $50 = (_sget4($49)|0);
       $51 = (($46) + ($i$114<<2)|0);
       HEAP32[$51>>2] = $50;
      }
      $57 = (($i$114) + 1)|0;
      $exitcond = ($57|0)==($44|0);
      if ($exitcond) {
       $$0 = $46;
       break;
      } else {
       $i$114 = $57;
      }
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $62 = HEAP32[_stderr>>2]|0;
 $63 = HEAP32[680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $63;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $name;
 (_fprintf(($62|0),(189464|0),($vararg_buffer|0))|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _foveon_fixed($ptr,$size,$name) {
 $ptr = $ptr|0;
 $size = $size|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $dim = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dim = sp;
 $0 = ($name|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_foveon_camf_matrix($dim,$name)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 0;
  } else {
   $3 = $size << 2;
   _memcpy(($ptr|0),($1|0),($3|0))|0;
   _free($1);
   $$0 = 1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _foveon_avg($pix,$range,$cfilt) {
 $pix = $pix|0;
 $range = $range|0;
 $cfilt = +$cfilt;
 var $$0 = 0.0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $i$01 = 0, $max$0$lcssa = 0.0, $max$03 = 0.0, $max$1 = 0.0, $min$0$lcssa = 0.0;
 var $min$02 = 0.0, $min$1 = 0.0, $sum$0$lcssa = 0.0, $sum$04 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$range>>2]|0;
 $1 = (($range) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>($2|0);
 if ($3) {
  $$lcssa = $2;$max$0$lcssa = -3.4028234663852886E+38;$min$0$lcssa = 3.4028234663852886E+38;$sum$0$lcssa = 0.0;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $i$01 = $0;$max$03 = -3.4028234663852886E+38;$min$02 = 3.4028234663852886E+38;$sum$04 = 0.0;
  while(1) {
   $5 = $i$01 << 2;
   $6 = (($pix) + ($5<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7 << 16 >> 16;
   $9 = (+($7<<16>>16));
   $10 = $i$01 << 2;
   $11 = (($10) + -4)|0;
   $12 = (($pix) + ($11<<1)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13 << 16 >> 16;
   $15 = (($8) - ($14))|0;
   $16 = (+($15|0));
   $17 = $16 * $cfilt;
   $18 = $9 + $17;
   $19 = $sum$04 + $18;
   $20 = $min$02 > $18;
   $min$1 = $20 ? $18 : $min$02;
   $21 = $max$03 < $18;
   $max$1 = $21 ? $18 : $max$03;
   $22 = (($i$01) + 1)|0;
   $23 = ($i$01|0)<($4|0);
   if ($23) {
    $i$01 = $22;$max$03 = $max$1;$min$02 = $min$1;$sum$04 = $19;
   } else {
    $$lcssa = $4;$max$0$lcssa = $max$1;$min$0$lcssa = $min$1;$sum$0$lcssa = $19;
    break;
   }
  }
 }
 $24 = HEAP32[$range>>2]|0;
 $25 = (($$lcssa) - ($24))|0;
 $26 = ($25|0)==(1);
 if ($26) {
  $27 = $sum$0$lcssa * 0.5;
  $$0 = $27;
  return (+$$0);
 } else {
  $28 = $sum$0$lcssa - $min$0$lcssa;
  $29 = $28 - $max$0$lcssa;
  $30 = (($25) + -1)|0;
  $31 = (+($30|0));
  $32 = $29 / $31;
  $$0 = $32;
  return (+$$0);
 }
 return +(0.0);
}
function _foveon_make_curve($max,$mul,$filt) {
 $max = +$max;
 $mul = +$mul;
 $filt = +$filt;
 var $$ = 0, $$0 = 0.0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $filt != 0.0;
 $$0 = $0 ? $filt : 0.80000000000000004;
 $1 = $max * 12.566370614359172;
 $2 = $1 / $$0;
 $3 = (~~(($2))>>>0);
 $4 = ($3|0)==(-1);
 $5 = $4 << 31 >> 31;
 $$ = (($5) + ($3))|0;
 $6 = (($$) + 1)|0;
 $7 = (_calloc($6,2)|0);
 _merror($7,189496);
 $8 = $$&65535;
 HEAP16[$7>>1] = $8;
 $9 = ($$|0)==(0);
 if ($9) {
  return ($7|0);
 }
 $10 = $4 << 31 >> 31;
 $11 = (($3) + ($10))|0;
 $i$01 = 0;
 while(1) {
  $12 = (+($i$01>>>0));
  $13 = $$0 * $12;
  $14 = $13 / $max;
  $15 = $14 * 0.25;
  $16 = (+Math_cos((+$15)));
  $17 = $16 + 1.0;
  $18 = $17 * 0.5;
  $19 = $13 / $mul;
  $20 = (+_tanh($19));
  $21 = $18 * $20;
  $22 = $21 * $mul;
  $23 = $22 + 0.5;
  $24 = (~~(($23)));
  $25 = (($i$01) + 1)|0;
  $26 = (($7) + ($25<<1)|0);
  HEAP16[$26>>1] = $24;
  $exitcond = ($25|0)==($11|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $25;
  }
 }
 return ($7|0);
}
function _foveon_make_curves($curvep,$dq,$div,$filt) {
 $curvep = $curvep|0;
 $dq = $dq|0;
 $div = $div|0;
 $filt = +$filt;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $max$1 = 0.0, $max$1$1 = 0.0, $max$1$2 = 0.0;
 var $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $mul = sp;
 $0 = +HEAPF32[$dq>>2];
 $1 = +HEAPF32[$div>>2];
 $2 = $0 / $1;
 $3 = $2;
 HEAPF64[$mul>>3] = $3;
 $4 = (($dq) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = (($div) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $5 / $7;
 $9 = $8;
 $10 = (($mul) + 8|0);
 HEAPF64[$10>>3] = $9;
 $11 = (($dq) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($div) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 / $14;
 $16 = $15;
 $17 = (($mul) + 16|0);
 HEAPF64[$17>>3] = $16;
 $18 = +HEAPF64[$mul>>3];
 $19 = $18 > 0.0;
 $max$1 = $19 ? $18 : 0.0;
 $20 = (($mul) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $max$1 < $21;
 $max$1$1 = $22 ? $21 : $max$1;
 $23 = (($mul) + 16|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $max$1$1 < $24;
 $max$1$2 = $25 ? $24 : $max$1$1;
 $26 = $filt;
 $27 = +HEAPF64[$mul>>3];
 $28 = (_foveon_make_curve($max$1$2,$27,$26)|0);
 HEAP32[$curvep>>2] = $28;
 $29 = (($mul) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (_foveon_make_curve($max$1$2,$30,$26)|0);
 $32 = (($curvep) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($mul) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = (_foveon_make_curve($max$1$2,$34,$26)|0);
 $36 = (($curvep) + 8|0);
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _foveon_apply_curve($curve,$i) {
 $curve = $curve|0;
 $i = $i|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ispos = ($i|0)>(-1);
 $neg = (0 - ($i))|0;
 $0 = $ispos ? $i : $neg;
 $1 = HEAP16[$curve>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($0|0)<($2|0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ($i|0)<(0);
 if ($4) {
  $5 = (1 - ($i))|0;
  $6 = (($curve) + ($5<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 << 16 >> 16;
  $9 = (0 - ($8))|0;
  $$0 = $9;
  return ($$0|0);
 } else {
  $10 = (($i) + 1)|0;
  $11 = (($curve) + ($10<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $$0 = $13;
  return ($$0|0);
 }
 return (0)|0;
}
function _foveon_interpolate() {
 var $$ = 0.0, $$$1 = 0.0, $$$2 = 0.0, $$13 = 0.0, $$13$1 = 0.0, $$13$2 = 0.0, $$14 = 0, $$15 = 0, $$in = 0, $$in284 = 0, $$in285 = 0, $$lcssa = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa99 = 0, $$min$0 = 0, $$min$0$1 = 0, $$min$0$2 = 0, $$min$2 = 0, $$min$2$1 = 0;
 var $$pr = 0, $$pr427 = 0, $$pr429 = 0, $$promoted252 = 0.0, $$promoted252$1 = 0.0, $$promoted252$2 = 0.0, $$promoted260 = 0.0, $$promoted260$1 = 0.0, $$promoted260$2 = 0.0, $$promoted271 = 0.0, $$promoted271$1 = 0.0, $$promoted271$2 = 0.0, $$smred_p$1 = 0, $$sum = 0, $$sum$2 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0.0, $1010 = 0, $1011 = 0, $1012 = 0.0, $1013 = 0.0, $1014 = 0.0, $1015 = 0, $1016 = 0, $1017 = 0.0, $1018 = 0;
 var $1019 = 0.0, $102 = 0.0, $1020 = 0.0, $1021 = 0, $1022 = 0, $1023 = 0.0, $1024 = 0, $1025 = 0.0, $1026 = 0.0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0.0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0.0, $1041 = 0.0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0.0, $105 = 0.0, $1050 = 0.0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0.0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0.0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0;
 var $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0.0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0.0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0;
 var $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0;
 var $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0.0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0;
 var $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0.0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0;
 var $12 = 0, $120 = 0.0, $1200 = 0, $1201 = 0, $1202 = 0.0, $1203 = 0.0, $1204 = 0.0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0.0, $121 = 0, $1210 = 0, $1211 = 0.0, $1212 = 0.0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0;
 var $1217 = 0.0, $1218 = 0, $1219 = 0.0, $122 = 0.0, $1220 = 0.0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0;
 var $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0.0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0.0, $1250 = 0, $1251 = 0, $1252 = 0;
 var $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0.0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0;
 var $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0;
 var $129 = 0.0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0.0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0;
 var $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0.0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0;
 var $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0.0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0;
 var $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0.0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0.0, $1360 = 0;
 var $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0.0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0;
 var $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0;
 var $1398 = 0, $1399 = 0, $14 = 0, $140 = 0.0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0;
 var $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0.0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0.0, $1430 = 0, $1431 = 0, $1432 = 0;
 var $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0.0, $1450 = 0;
 var $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0.0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0;
 var $147 = 0.0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0.0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0;
 var $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0;
 var $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0.0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0;
 var $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0.0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0.0, $1540 = 0;
 var $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0;
 var $156 = 0.0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0;
 var $1578 = 0, $1579 = 0, $158 = 0.0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0.0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0;
 var $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0.0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0;
 var $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0.0, $1630 = 0;
 var $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0;
 var $165 = 0.0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0.0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0;
 var $1668 = 0, $1669 = 0, $167 = 0.0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0;
 var $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0.0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0.0, $1700 = 0, $1701 = 0, $1702 = 0;
 var $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0.0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0;
 var $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0.0, $1727 = 0, $1728 = 0.0, $1729 = 0.0, $173 = 0.0, $1730 = 0.0, $1731 = 0.0, $1732 = 0, $1733 = 0.0, $1734 = 0, $1735 = 0, $1736 = 0.0, $1737 = 0.0, $1738 = 0.0, $1739 = 0.0;
 var $174 = 0, $1740 = 0, $1741 = 0.0, $1742 = 0, $1743 = 0, $1744 = 0.0, $1745 = 0.0, $1746 = 0.0, $1747 = 0.0, $1748 = 0, $1749 = 0, $175 = 0.0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0.0, $1754 = 0, $1755 = 0.0, $1756 = 0.0, $1757 = 0.0;
 var $1758 = 0.0, $1759 = 0, $176 = 0.0, $1760 = 0.0, $1761 = 0, $1762 = 0, $1763 = 0.0, $1764 = 0.0, $1765 = 0.0, $1766 = 0.0, $1767 = 0, $1768 = 0.0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0.0, $1772 = 0.0, $1773 = 0.0, $1774 = 0.0, $1775 = 0;
 var $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0.0, $1780 = 0, $1781 = 0.0, $1782 = 0, $1783 = 0.0, $1784 = 0.0, $1785 = 0.0, $1786 = 0.0, $1787 = 0, $1788 = 0.0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0.0, $1792 = 0.0, $1793 = 0.0;
 var $1794 = 0.0, $1795 = 0, $1796 = 0.0, $1797 = 0, $1798 = 0, $1799 = 0.0, $18 = 0, $180 = 0.0, $1800 = 0.0, $1801 = 0.0, $1802 = 0.0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0.0, $1810 = 0;
 var $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0.0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0;
 var $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0.0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0;
 var $1848 = 0, $1849 = 0, $185 = 0.0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0.0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0;
 var $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0.0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0;
 var $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0.0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0.0, $1900 = 0;
 var $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0.0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0;
 var $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0.0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0;
 var $1938 = 0, $1939 = 0, $194 = 0.0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0.0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0;
 var $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0.0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0.0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0;
 var $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0.0, $1990 = 0, $1991 = 0;
 var $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0.0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0;
 var $2009 = 0, $201 = 0.0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0;
 var $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0.0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0.0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0;
 var $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0.0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0.0, $2060 = 0, $2061 = 0, $2062 = 0;
 var $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0.0, $2080 = 0;
 var $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0.0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0;
 var $21 = 0, $210 = 0.0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0.0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0;
 var $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0.0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0;
 var $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0.0, $2150 = 0, $2151 = 0, $2152 = 0;
 var $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0.0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0.0, $2170 = 0;
 var $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0;
 var $219 = 0.0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0.0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0;
 var $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0.0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0.0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0;
 var $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0.0, $2240 = 0, $2241 = 0, $2242 = 0;
 var $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0.0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0.0, $2260 = 0;
 var $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0.0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0;
 var $228 = 0.0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0;
 var $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0;
 var $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0.0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0;
 var $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0.0, $2350 = 0;
 var $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0;
 var $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0.0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0;
 var $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0.0, $2399 = 0, $24 = 0, $240 = 0.0, $2400 = 0.0, $2401 = 0.0, $2402 = 0.0, $2403 = 0, $2404 = 0.0;
 var $2405 = 0, $2406 = 0, $2407 = 0.0, $2408 = 0.0, $2409 = 0.0, $241 = 0.0, $2410 = 0, $2411 = 0.0, $2412 = 0, $2413 = 0, $2414 = 0.0, $2415 = 0.0, $2416 = 0.0, $2417 = 0, $2418 = 0.0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0.0, $2422 = 0.0;
 var $2423 = 0.0, $2424 = 0, $2425 = 0.0, $2426 = 0, $2427 = 0, $2428 = 0.0, $2429 = 0.0, $243 = 0.0, $2430 = 0.0, $2431 = 0, $2432 = 0.0, $2433 = 0, $2434 = 0, $2435 = 0.0, $2436 = 0.0, $2437 = 0.0, $2438 = 0, $2439 = 0.0, $244 = 0.0, $2440 = 0;
 var $2441 = 0, $2442 = 0.0, $2443 = 0.0, $2444 = 0.0, $2445 = 0, $2446 = 0.0, $2447 = 0, $2448 = 0, $2449 = 0.0, $245 = 0, $2450 = 0.0, $2451 = 0.0, $2452 = 0, $2453 = 0.0, $2454 = 0, $2455 = 0, $2456 = 0.0, $2457 = 0.0, $2458 = 0.0, $2459 = 0;
 var $246 = 0.0, $2460 = 0, $2461 = 0.0, $2462 = 0.0, $2463 = 0.0, $2464 = 0, $2465 = 0.0, $2466 = 0.0, $2467 = 0, $2468 = 0.0, $2469 = 0.0, $247 = 0.0, $2470 = 0.0, $2471 = 0.0, $2472 = 0.0, $2473 = 0.0, $2474 = 0, $2475 = 0.0, $2476 = 0.0, $2477 = 0.0;
 var $2478 = 0.0, $2479 = 0, $248 = 0.0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0.0, $2490 = 0, $2491 = 0.0, $2492 = 0, $2493 = 0.0, $2494 = 0, $2495 = 0;
 var $2496 = 0.0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0.0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0.0, $2508 = 0, $2509 = 0.0, $251 = 0, $2510 = 0.0, $2511 = 0.0, $2512 = 0.0;
 var $2513 = 0, $2514 = 0.0, $2515 = 0, $2516 = 0.0, $2517 = 0.0, $2518 = 0.0, $2519 = 0.0, $252 = 0.0, $2520 = 0, $2521 = 0.0, $2522 = 0, $2523 = 0.0, $2524 = 0.0, $2525 = 0.0, $2526 = 0.0, $2527 = 0, $2528 = 0, $2529 = 0.0, $253 = 0.0, $2530 = 0.0;
 var $2531 = 0.0, $2532 = 0.0, $2533 = 0, $2534 = 0.0, $2535 = 0, $2536 = 0.0, $2537 = 0.0, $2538 = 0.0, $2539 = 0.0, $254 = 0, $2540 = 0, $2541 = 0.0, $2542 = 0, $2543 = 0.0, $2544 = 0.0, $2545 = 0.0, $2546 = 0.0, $2547 = 0, $2548 = 0.0, $2549 = 0;
 var $255 = 0.0, $2550 = 0.0, $2551 = 0.0, $2552 = 0.0, $2553 = 0, $2554 = 0.0, $2555 = 0, $2556 = 0.0, $2557 = 0.0, $2558 = 0.0, $2559 = 0.0, $256 = 0.0, $2560 = 0, $2561 = 0.0, $2562 = 0, $2563 = 0.0, $2564 = 0.0, $2565 = 0.0, $2566 = 0.0, $2567 = 0;
 var $2568 = 0.0, $2569 = 0, $257 = 0, $2570 = 0.0, $2571 = 0.0, $2572 = 0, $2573 = 0.0, $2574 = 0.0, $2575 = 0.0, $2576 = 0, $2577 = 0.0, $2578 = 0, $2579 = 0.0, $258 = 0.0, $2580 = 0.0, $2581 = 0, $2582 = 0.0, $2583 = 0.0, $2584 = 0.0, $2585 = 0;
 var $2586 = 0, $2587 = 0.0, $2588 = 0, $2589 = 0.0, $259 = 0.0, $2590 = 0.0, $2591 = 0, $2592 = 0.0, $2593 = 0.0, $2594 = 0.0, $2595 = 0, $2596 = 0.0, $2597 = 0.0, $2598 = 0, $2599 = 0.0, $26 = 0, $260 = 0.0, $2600 = 0.0, $2601 = 0.0, $2602 = 0;
 var $2603 = 0.0, $2604 = 0.0, $2605 = 0.0, $2606 = 0.0, $2607 = 0.0, $2608 = 0.0, $2609 = 0.0, $261 = 0.0, $2610 = 0.0, $2611 = 0.0, $2612 = 0, $2613 = 0.0, $2614 = 0.0, $2615 = 0.0, $2616 = 0.0, $2617 = 0.0, $2618 = 0, $2619 = 0, $262 = 0.0, $2620 = 0.0;
 var $2621 = 0.0, $2622 = 0.0, $2623 = 0.0, $2624 = 0.0, $2625 = 0, $2626 = 0, $2627 = 0.0, $2628 = 0, $2629 = 0.0, $263 = 0.0, $2630 = 0.0, $2631 = 0.0, $2632 = 0.0, $2633 = 0.0, $2634 = 0, $2635 = 0, $2636 = 0.0, $2637 = 0.0, $2638 = 0.0, $2639 = 0.0;
 var $264 = 0.0, $2640 = 0.0, $2641 = 0, $2642 = 0, $2643 = 0.0, $2644 = 0.0, $2645 = 0.0, $2646 = 0.0, $2647 = 0.0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0.0, $2651 = 0, $2652 = 0.0, $2653 = 0.0, $2654 = 0.0, $2655 = 0.0, $2656 = 0.0, $2657 = 0;
 var $2658 = 0, $2659 = 0.0, $266 = 0.0, $2660 = 0.0, $2661 = 0.0, $2662 = 0.0, $2663 = 0.0, $2664 = 0, $2665 = 0, $2666 = 0.0, $2667 = 0.0, $2668 = 0.0, $2669 = 0.0, $267 = 0, $2670 = 0.0, $2671 = 0, $2672 = 0, $2673 = 0.0, $2674 = 0, $2675 = 0.0;
 var $2676 = 0.0, $2677 = 0.0, $2678 = 0.0, $2679 = 0.0, $268 = 0.0, $2680 = 0, $2681 = 0.0, $2682 = 0, $2683 = 0.0, $2684 = 0.0, $2685 = 0.0, $2686 = 0.0, $2687 = 0, $2688 = 0.0, $2689 = 0, $269 = 0.0, $2690 = 0.0, $2691 = 0.0, $2692 = 0.0, $2693 = 0.0;
 var $2694 = 0, $2695 = 0.0, $2696 = 0, $2697 = 0.0, $2698 = 0, $2699 = 0.0, $27 = 0, $270 = 0.0, $2700 = 0.0, $2701 = 0.0, $2702 = 0.0, $2703 = 0, $2704 = 0.0, $2705 = 0, $2706 = 0.0, $2707 = 0.0, $2708 = 0.0, $2709 = 0.0, $271 = 0.0, $2710 = 0;
 var $2711 = 0.0, $2712 = 0, $2713 = 0.0, $2714 = 0.0, $2715 = 0.0, $2716 = 0.0, $2717 = 0, $2718 = 0.0, $2719 = 0, $272 = 0, $2720 = 0.0, $2721 = 0, $2722 = 0.0, $2723 = 0.0, $2724 = 0.0, $2725 = 0.0, $2726 = 0, $2727 = 0.0, $2728 = 0, $2729 = 0.0;
 var $273 = 0.0, $2730 = 0.0, $2731 = 0.0, $2732 = 0.0, $2733 = 0, $2734 = 0.0, $2735 = 0, $2736 = 0.0, $2737 = 0.0, $2738 = 0.0, $2739 = 0.0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0.0, $2744 = 0.0, $2745 = 0.0, $2746 = 0.0, $2747 = 0;
 var $2748 = 0.0, $2749 = 0, $275 = 0.0, $2750 = 0.0, $2751 = 0.0, $2752 = 0.0, $2753 = 0, $2754 = 0.0, $2755 = 0, $2756 = 0.0, $2757 = 0.0, $2758 = 0.0, $2759 = 0, $276 = 0.0, $2760 = 0.0, $2761 = 0, $2762 = 0.0, $2763 = 0.0, $2764 = 0.0, $2765 = 0;
 var $2766 = 0.0, $2767 = 0, $2768 = 0.0, $2769 = 0.0, $277 = 0.0, $2770 = 0.0, $2771 = 0, $2772 = 0.0, $2773 = 0, $2774 = 0.0, $2775 = 0.0, $2776 = 0.0, $2777 = 0, $2778 = 0.0, $2779 = 0, $278 = 0.0, $2780 = 0.0, $2781 = 0.0, $2782 = 0.0, $2783 = 0;
 var $2784 = 0.0, $2785 = 0, $2786 = 0.0, $2787 = 0.0, $2788 = 0.0, $2789 = 0, $279 = 0.0, $2790 = 0.0, $2791 = 0, $2792 = 0.0, $2793 = 0.0, $2794 = 0.0, $2795 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0;
 var $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0;
 var $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0, $375 = 0.0;
 var $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0;
 var $394 = 0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0.0, $410 = 0.0;
 var $411 = 0.0, $412 = 0.0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0;
 var $466 = 0.0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0.0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0;
 var $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0.0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0.0;
 var $52 = 0, $520 = 0.0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0, $525 = 0.0, $526 = 0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0;
 var $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0.0, $564 = 0, $565 = 0.0, $566 = 0.0, $567 = 0, $568 = 0.0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0.0;
 var $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0.0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0.0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0.0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0;
 var $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0.0;
 var $664 = 0, $665 = 0.0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0.0, $681 = 0;
 var $682 = 0, $683 = 0.0, $684 = 0.0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0.0, $69 = 0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0.0, $694 = 0.0, $695 = 0, $696 = 0.0, $697 = 0.0, $698 = 0, $699 = 0.0, $7 = 0;
 var $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0.0, $703 = 0.0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0.0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0, $717 = 0;
 var $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0, $721 = 0.0, $722 = 0.0, $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0;
 var $736 = 0.0, $737 = 0.0, $738 = 0, $739 = 0, $74 = 0.0, $740 = 0.0, $741 = 0.0, $742 = 0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0, $748 = 0.0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0.0, $756 = 0, $757 = 0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0, $765 = 0.0, $766 = 0.0, $767 = 0, $768 = 0.0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0, $783 = 0, $784 = 0.0, $785 = 0.0, $786 = 0, $787 = 0.0, $788 = 0.0, $789 = 0.0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0.0, $793 = 0.0, $794 = 0, $795 = 0.0, $796 = 0.0, $797 = 0.0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0.0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0.0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0.0, $813 = 0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0.0, $820 = 0, $821 = 0.0, $822 = 0.0, $823 = 0.0, $824 = 0.0, $825 = 0.0;
 var $826 = 0.0, $827 = 0, $828 = 0.0, $829 = 0.0, $83 = 0, $830 = 0.0, $831 = 0.0, $832 = 0.0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0, $842 = 0.0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0.0, $847 = 0.0, $848 = 0, $849 = 0.0, $85 = 0.0, $850 = 0.0, $851 = 0.0, $852 = 0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0, $857 = 0.0, $858 = 0.0, $859 = 0.0, $86 = 0, $860 = 0.0, $861 = 0.0;
 var $862 = 0.0, $863 = 0, $864 = 0.0, $865 = 0.0, $866 = 0.0, $867 = 0.0, $868 = 0.0, $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0.0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0.0, $884 = 0.0, $885 = 0, $886 = 0.0, $887 = 0.0, $888 = 0.0, $889 = 0, $89 = 0.0, $890 = 0.0, $891 = 0.0, $892 = 0, $893 = 0, $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0.0;
 var $899 = 0.0, $9 = 0, $90 = 0.0, $900 = 0, $901 = 0.0, $902 = 0.0, $903 = 0.0, $904 = 0.0, $905 = 0.0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0.0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0.0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0.0, $955 = 0, $956 = 0.0, $957 = 0, $958 = 0, $959 = 0, $96 = 0.0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0.0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $active = 0, $addconv = 0, $addconv11 = 0, $addconv12 = 0, $c$25219 = 0, $cam_xyz = 0, $cfilt = 0, $chroma_dq = 0;
 var $col$0276 = 0, $col$11105 = 0, $col$12109 = 0, $col$1229 = 0, $col$13116 = 0, $col$2220 = 0, $col$3185 = 0, $col$4192 = 0, $col$5162 = 0, $col$6169 = 0, $col$7142 = 0, $col$8152 = 0, $col$9127 = 0, $color_dq = 0, $correct = 0, $curve = 0, $ddft = 0, $dev = 0, $diag = 0, $dim = 0;
 var $div = 0, $div10 = 0, $div3 = 0, $div4 = 0, $div5 = 0, $div6 = 0, $div7 = 0, $div8 = 0, $div9 = 0, $dscr = 0, $dstb = 0, $dsum$2 = 0.0, $dsum$2$1 = 0.0, $dsum$2$2 = 0.0, $dsum$2$op = 0.0, $dsum$2$op$1 = 0.0, $dsum$2$op$2 = 0.0, $exitcond313 = 0, $exitcond322 = 0, $exitcond325 = 0;
 var $exitcond331 = 0, $exitcond336 = 0, $exitcond343 = 0, $exitcond348 = 0, $exitcond351 = 0, $exitcond355 = 0, $exitcond360 = 0, $exitcond376 = 0, $exitcond382 = 0, $exitcond392 = 0, $exitcond395 = 0, $factor = 0, $floorf = 0.0, $fsum = 0, $i$0283 = 0, $i$10207 = 0, $i$1274 = 0, $i$17124 = 0, $i$3263 = 0, $i$5255 = 0;
 var $i$8212 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next324 = 0, $indvars$iv$next333 = 0, $indvars$iv$next335 = 0, $indvars$iv$next345 = 0, $indvars$iv$next347 = 0, $indvars$iv323 = 0, $indvars$iv332 = 0, $indvars$iv334 = 0, $indvars$iv344 = 0, $indvars$iv346 = 0, $ipix = 0, $j$4204 = 0, $keep = 0, $last = 0, $max$1 = 0, $max$1$1 = 0, $num$1 = 0.0;
 var $num$1$1 = 0.0, $num$1$2 = 0.0, $phitmp = 0, $pix$0221 = 0, $pix$1186 = 0, $pix$2194 = 0, $pix$3178 = 0, $pix$4163 = 0, $pix$5170 = 0, $pix$6143 = 0, $pix$7153 = 0, $pix$8136 = 0, $ppm = 0, $prev = 0, $row$0278 = 0, $row$10157 = 0, $row$12118 = 0, $row$1246 = 0, $row$13$lcssa = 0, $row$13101 = 0;
 var $row$2$lcssa = 0, $row$2242 = 0, $row$3236 = 0, $row$5231 = 0, $row$6227 = 0, $row$7223 = 0, $row$8199 = 0, $row$9172 = 0, $satlev = 0, $smax369 = 0, $smlast$0200 = 0, $smlast$1$lcssa = 0, $smlast$1189 = 0, $smlast$2173 = 0, $smlast$3$lcssa = 0, $smlast$3164 = 0, $smlast$4158 = 0, $smlast$5$lcssa = 0, $smlast$5144 = 0, $smred_p$0201 = 0;
 var $smred_p$1$lcssa = 0, $smred_p$1193 = 0, $smrow = 0, $str = 0, $sum$0205 = 0, $sum$1 = 0, $sum$1$lcssa = 0, $total = 0, $trans = 0, $trsum = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $work = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0;
 $vararg_buffer2 = sp + 32|0;
 $vararg_buffer = sp + 24|0;
 $prev = sp + 680|0;
 $curve = sp + 648|0;
 $cfilt = sp + 640|0;
 $ddft = sp + 568|0;
 $ppm = sp + 460|0;
 $cam_xyz = sp + 424|0;
 $correct = sp + 388|0;
 $last = sp + 352|0;
 $trans = sp + 316|0;
 $chroma_dq = sp + 304|0;
 $color_dq = sp + 292|0;
 $diag = sp + 256|0;
 $div = sp + 244|0;
 $fsum = sp + 232|0;
 $dscr = sp + 216|0;
 $dstb = sp + 200|0;
 $smrow = sp + 168|0;
 $total = sp + 152|0;
 $ipix = sp + 140|0;
 $work = sp + 104|0;
 $dev = sp + 92|0;
 $satlev = sp + 80|0;
 $keep = sp + 64|0;
 $active = sp + 48|0;
 $dim = sp + 36|0;
 $trsum = sp;
 $str = sp + 688|0;
 HEAPF32[$cfilt>>2] = 0.0;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((189552|0),24,1,($2|0))|0);
 }
 _foveon_load_camf();
 (_foveon_fixed($dscr,4,189584)|0);
 (_foveon_fixed($ppm,27,189608)|0);
 (_foveon_fixed($satlev,3,189624)|0);
 (_foveon_fixed($keep,4,189640)|0);
 (_foveon_fixed($active,4,189656)|0);
 (_foveon_fixed($chroma_dq,3,189672)|0);
 $3 = (_foveon_camf_param(189688,189704)|0);
 $4 = ($3|0)!=(0|0);
 $5 = $4 ? 189704 : 189712;
 (_foveon_fixed($color_dq,3,$5)|0);
 $6 = (_foveon_camf_param(189688,189728)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  (_foveon_fixed($cfilt,1,189728)|0);
 }
 dest=$ddft+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = (_foveon_camf_param(189688,189744)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  label = 7;
 } else {
  $10 = (($ddft) + 24|0);
  $11 = (_foveon_fixed($10,12,189744)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $13 = (($dstb) + 4|0);
  $14 = (($dstb) + 12|0);
  $15 = (($dstb) + 8|0);
  $16 = (($dstb) + 8|0);
  $i$0283 = 0;
  while(1) {
   $17 = ($i$0283|0)!=(0);
   $18 = $17 ? 189760 : 189784;
   (_foveon_fixed($dstb,4,$18)|0);
   $19 = HEAP32[$13>>2]|0;
   $20 = HEAP32[$14>>2]|0;
   $21 = ($19|0)>($20|0);
   if (!($21)) {
    $22 = HEAP32[$dstb>>2]|0;
    $23 = HEAP32[$16>>2]|0;
    $24 = ($22|0)>($23|0);
    $25 = HEAP32[$14>>2]|0;
    $26 = HEAP16[132088>>1]|0;
    $27 = $26&65535;
    $28 = HEAP32[132112>>2]|0;
    $29 = (($i$0283) + 1)|0;
    $30 = HEAP32[$16>>2]|0;
    $row$0278 = $19;
    while(1) {
     if (!($24)) {
      $31 = Math_imul($27, $row$0278)|0;
      $col$0276 = $22;
      while(1) {
       $32 = (($31) + ($col$0276))|0;
       $33 = (($28) + ($32<<3)|0);
       $34 = HEAP16[$33>>1]|0;
       $35 = (+($34<<16>>16));
       $36 = ((($ddft) + (($29*24)|0)|0) + 4|0);
       $37 = +HEAPF32[$36>>2];
       $38 = $37 + $35;
       HEAPF32[$36>>2] = $38;
       $39 = ((($28) + ($32<<3)|0) + 2|0);
       $40 = HEAP16[$39>>1]|0;
       $41 = (+($40<<16>>16));
       $42 = ((($ddft) + (($29*24)|0)|0) + 12|0);
       $43 = +HEAPF32[$42>>2];
       $44 = $43 + $41;
       HEAPF32[$42>>2] = $44;
       $45 = ((($28) + ($32<<3)|0) + 4|0);
       $46 = HEAP16[$45>>1]|0;
       $47 = (+($46<<16>>16));
       $48 = ((($ddft) + (($29*24)|0)|0) + 20|0);
       $49 = +HEAPF32[$48>>2];
       $50 = $49 + $47;
       HEAPF32[$48>>2] = $50;
       $51 = (($col$0276) + 1)|0;
       $52 = ($col$0276|0)<($30|0);
       if ($52) {
        $col$0276 = $51;
       } else {
        break;
       }
      }
     }
     $53 = (($row$0278) + 1)|0;
     $54 = ($row$0278|0)<($25|0);
     if ($54) {
      $row$0278 = $53;
     } else {
      break;
     }
    }
   }
   $55 = HEAP32[$14>>2]|0;
   $56 = HEAP32[$13>>2]|0;
   $57 = (($55) + 1)|0;
   $58 = (($57) - ($56))|0;
   $59 = HEAP32[$15>>2]|0;
   $60 = HEAP32[$dstb>>2]|0;
   $61 = (($59) + 1)|0;
   $62 = (($61) - ($60))|0;
   $63 = Math_imul($62, $58)|0;
   $64 = (+($63|0));
   $65 = (($i$0283) + 1)|0;
   $66 = ((($ddft) + (($65*24)|0)|0) + 4|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $67 / $64;
   HEAPF32[$66>>2] = $68;
   $69 = ((($ddft) + (($65*24)|0)|0) + 12|0);
   $70 = +HEAPF32[$69>>2];
   $71 = $70 / $64;
   HEAPF32[$69>>2] = $71;
   $72 = ((($ddft) + (($65*24)|0)|0) + 20|0);
   $73 = +HEAPF32[$72>>2];
   $74 = $73 / $64;
   HEAPF32[$72>>2] = $74;
   $75 = (($i$0283) + 1)|0;
   $exitcond395 = ($75|0)==(2);
   if ($exitcond395) {
    break;
   } else {
    $i$0283 = $75;
   }
  }
 }
 $76 = (_foveon_camf_param(189800,133112)|0);
 $77 = ($76|0)==(0|0);
 if ($77) {
  $78 = HEAP32[_stderr>>2]|0;
  $79 = HEAP32[680>>2]|0;
  HEAP32[$vararg_buffer>>2] = $79;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 133112;
  (_fprintf(($78|0),(189824|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 (_foveon_fixed($cam_xyz,9,$76)|0);
 $80 = (_foveon_camf_param(189856,133112)|0);
 (_foveon_fixed($correct,9,$80)|0);
 dest=$last+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$1274 = 0;
 while(1) {
  $2741 = (($correct) + (($i$1274*12)|0)|0);
  $2742 = (($last) + (($i$1274*12)|0)|0);
  $$promoted271 = +HEAPF32[$2742>>2];
  $2743 = +HEAPF32[$2741>>2];
  $2744 = +HEAPF32[$cam_xyz>>2];
  $2745 = $2743 * $2744;
  $2746 = $$promoted271 + $2745;
  $2747 = ((($correct) + (($i$1274*12)|0)|0) + 4|0);
  $2748 = +HEAPF32[$2747>>2];
  $2749 = (($cam_xyz) + 12|0);
  $2750 = +HEAPF32[$2749>>2];
  $2751 = $2748 * $2750;
  $2752 = $2746 + $2751;
  $2753 = ((($correct) + (($i$1274*12)|0)|0) + 8|0);
  $2754 = +HEAPF32[$2753>>2];
  $2755 = (($cam_xyz) + 24|0);
  $2756 = +HEAPF32[$2755>>2];
  $2757 = $2754 * $2756;
  $2758 = $2752 + $2757;
  HEAPF32[$2742>>2] = $2758;
  $2759 = ((($last) + (($i$1274*12)|0)|0) + 4|0);
  $$promoted271$1 = +HEAPF32[$2759>>2];
  $2760 = +HEAPF32[$2741>>2];
  $2761 = (($cam_xyz) + 4|0);
  $2762 = +HEAPF32[$2761>>2];
  $2763 = $2760 * $2762;
  $2764 = $$promoted271$1 + $2763;
  $2765 = ((($correct) + (($i$1274*12)|0)|0) + 4|0);
  $2766 = +HEAPF32[$2765>>2];
  $2767 = (($cam_xyz) + 16|0);
  $2768 = +HEAPF32[$2767>>2];
  $2769 = $2766 * $2768;
  $2770 = $2764 + $2769;
  $2771 = ((($correct) + (($i$1274*12)|0)|0) + 8|0);
  $2772 = +HEAPF32[$2771>>2];
  $2773 = (($cam_xyz) + 28|0);
  $2774 = +HEAPF32[$2773>>2];
  $2775 = $2772 * $2774;
  $2776 = $2770 + $2775;
  HEAPF32[$2759>>2] = $2776;
  $2777 = ((($last) + (($i$1274*12)|0)|0) + 8|0);
  $$promoted271$2 = +HEAPF32[$2777>>2];
  $2778 = +HEAPF32[$2741>>2];
  $2779 = (($cam_xyz) + 8|0);
  $2780 = +HEAPF32[$2779>>2];
  $2781 = $2778 * $2780;
  $2782 = $$promoted271$2 + $2781;
  $2783 = ((($correct) + (($i$1274*12)|0)|0) + 4|0);
  $2784 = +HEAPF32[$2783>>2];
  $2785 = (($cam_xyz) + 20|0);
  $2786 = +HEAPF32[$2785>>2];
  $2787 = $2784 * $2786;
  $2788 = $2782 + $2787;
  $2789 = ((($correct) + (($i$1274*12)|0)|0) + 8|0);
  $2790 = +HEAPF32[$2789>>2];
  $2791 = (($cam_xyz) + 32|0);
  $2792 = +HEAPF32[$2791>>2];
  $2793 = $2790 * $2792;
  $2794 = $2788 + $2793;
  HEAPF32[$2777>>2] = $2794;
  $2795 = (($i$1274) + 1)|0;
  $exitcond392 = ($2795|0)==(3);
  if ($exitcond392) {
   break;
  } else {
   $i$1274 = $2795;
  }
 }
 $81 = (($last) + 16|0);
 $82 = +HEAPF32[$81>>2];
 $83 = (($last) + 32|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $82 * $84;
 $86 = (($last) + 20|0);
 $87 = +HEAPF32[$86>>2];
 $88 = (($last) + 28|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $87 * $89;
 $91 = $85 - $90;
 HEAPF32[$diag>>2] = $91;
 $92 = (($last) + 20|0);
 $93 = +HEAPF32[$92>>2];
 $94 = (($last) + 24|0);
 $95 = +HEAPF32[$94>>2];
 $96 = $93 * $95;
 $97 = (($last) + 12|0);
 $98 = +HEAPF32[$97>>2];
 $99 = (($last) + 32|0);
 $100 = +HEAPF32[$99>>2];
 $101 = $98 * $100;
 $102 = $96 - $101;
 $103 = (($diag) + 12|0);
 HEAPF32[$103>>2] = $102;
 $104 = (($last) + 12|0);
 $105 = +HEAPF32[$104>>2];
 $106 = (($last) + 28|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $105 * $107;
 $109 = (($last) + 16|0);
 $110 = +HEAPF32[$109>>2];
 $111 = (($last) + 24|0);
 $112 = +HEAPF32[$111>>2];
 $113 = $110 * $112;
 $114 = $108 - $113;
 $115 = (($diag) + 24|0);
 HEAPF32[$115>>2] = $114;
 $116 = (($last) + 28|0);
 $117 = +HEAPF32[$116>>2];
 $118 = (($last) + 8|0);
 $119 = +HEAPF32[$118>>2];
 $120 = $117 * $119;
 $121 = (($last) + 32|0);
 $122 = +HEAPF32[$121>>2];
 $123 = (($last) + 4|0);
 $124 = +HEAPF32[$123>>2];
 $125 = $122 * $124;
 $126 = $120 - $125;
 $127 = (($diag) + 4|0);
 HEAPF32[$127>>2] = $126;
 $128 = (($last) + 32|0);
 $129 = +HEAPF32[$128>>2];
 $130 = +HEAPF32[$last>>2];
 $131 = $129 * $130;
 $132 = (($last) + 24|0);
 $133 = +HEAPF32[$132>>2];
 $134 = (($last) + 8|0);
 $135 = +HEAPF32[$134>>2];
 $136 = $133 * $135;
 $137 = $131 - $136;
 $138 = (($diag) + 16|0);
 HEAPF32[$138>>2] = $137;
 $139 = (($last) + 24|0);
 $140 = +HEAPF32[$139>>2];
 $141 = (($last) + 4|0);
 $142 = +HEAPF32[$141>>2];
 $143 = $140 * $142;
 $144 = (($last) + 28|0);
 $145 = +HEAPF32[$144>>2];
 $146 = +HEAPF32[$last>>2];
 $147 = $145 * $146;
 $148 = $143 - $147;
 $149 = (($diag) + 28|0);
 HEAPF32[$149>>2] = $148;
 $150 = (($last) + 4|0);
 $151 = +HEAPF32[$150>>2];
 $152 = (($last) + 20|0);
 $153 = +HEAPF32[$152>>2];
 $154 = $151 * $153;
 $155 = (($last) + 8|0);
 $156 = +HEAPF32[$155>>2];
 $157 = (($last) + 16|0);
 $158 = +HEAPF32[$157>>2];
 $159 = $156 * $158;
 $160 = $154 - $159;
 $161 = (($diag) + 8|0);
 HEAPF32[$161>>2] = $160;
 $162 = (($last) + 8|0);
 $163 = +HEAPF32[$162>>2];
 $164 = (($last) + 12|0);
 $165 = +HEAPF32[$164>>2];
 $166 = $163 * $165;
 $167 = +HEAPF32[$last>>2];
 $168 = (($last) + 20|0);
 $169 = +HEAPF32[$168>>2];
 $170 = $167 * $169;
 $171 = $166 - $170;
 $172 = (($diag) + 20|0);
 HEAPF32[$172>>2] = $171;
 $173 = +HEAPF32[$last>>2];
 $174 = (($last) + 16|0);
 $175 = +HEAPF32[$174>>2];
 $176 = $173 * $175;
 $177 = (($last) + 4|0);
 $178 = +HEAPF32[$177>>2];
 $179 = (($last) + 12|0);
 $180 = +HEAPF32[$179>>2];
 $181 = $178 * $180;
 $182 = $176 - $181;
 $183 = (($diag) + 32|0);
 HEAPF32[$183>>2] = $182;
 $184 = +HEAPF32[$diag>>2];
 $185 = $184;
 $186 = $185 * 0.31269999999999998;
 $187 = (($diag) + 4|0);
 $188 = +HEAPF32[$187>>2];
 $189 = $188;
 $190 = $189 * 0.32900000000000001;
 $191 = $186 + $190;
 $192 = (($diag) + 8|0);
 $193 = +HEAPF32[$192>>2];
 $194 = $193;
 $195 = $194 * 0.35830000000000001;
 $196 = $191 + $195;
 $197 = $196;
 HEAPF32[$div>>2] = $197;
 $198 = (($diag) + 12|0);
 $199 = +HEAPF32[$198>>2];
 $200 = $199;
 $201 = $200 * 0.31269999999999998;
 $202 = (($diag) + 16|0);
 $203 = +HEAPF32[$202>>2];
 $204 = $203;
 $205 = $204 * 0.32900000000000001;
 $206 = $201 + $205;
 $207 = (($diag) + 20|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $208;
 $210 = $209 * 0.35830000000000001;
 $211 = $206 + $210;
 $212 = $211;
 $213 = (($div) + 4|0);
 HEAPF32[$213>>2] = $212;
 $214 = (($diag) + 24|0);
 $215 = +HEAPF32[$214>>2];
 $216 = $215;
 $217 = $216 * 0.31269999999999998;
 $218 = (($diag) + 28|0);
 $219 = +HEAPF32[$218>>2];
 $220 = $219;
 $221 = $220 * 0.32900000000000001;
 $222 = $217 + $221;
 $223 = (($diag) + 32|0);
 $224 = +HEAPF32[$223>>2];
 $225 = $224;
 $226 = $225 * 0.35830000000000001;
 $227 = $222 + $226;
 $228 = $227;
 $229 = (($div) + 8|0);
 HEAPF32[$229>>2] = $228;
 HEAP32[$vararg_buffer2>>2] = 133112;
 (_sprintf($str,189880,$vararg_buffer2)|0);
 $230 = (_foveon_camf_param(189688,$str)|0);
 $231 = ($230|0)==(0|0);
 if (!($231)) {
  (_foveon_fixed($div,3,$str)|0);
 }
 $232 = +HEAPF32[$div>>2];
 $233 = $232 > 0.0;
 $num$1 = $233 ? $232 : 0.0;
 $234 = (($div) + 4|0);
 $235 = +HEAPF32[$234>>2];
 $236 = $num$1 < $235;
 $num$1$1 = $236 ? $235 : $num$1;
 $237 = (($div) + 8|0);
 $238 = +HEAPF32[$237>>2];
 $239 = $num$1$1 < $238;
 $num$1$2 = $239 ? $238 : $num$1$1;
 $240 = +HEAPF32[$div>>2];
 $241 = $240 / $num$1$2;
 HEAPF32[$div>>2] = $241;
 $242 = (($div) + 4|0);
 $243 = +HEAPF32[$242>>2];
 $244 = $243 / $num$1$2;
 HEAPF32[$242>>2] = $244;
 $245 = (($div) + 8|0);
 $246 = +HEAPF32[$245>>2];
 $247 = $246 / $num$1$2;
 HEAPF32[$245>>2] = $247;
 dest=$trans+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$3263 = 0;
 while(1) {
  $2672 = (132280 + ($i$3263<<4)|0);
  $2673 = +HEAPF32[$div>>2];
  $2674 = (($trans) + (($i$3263*12)|0)|0);
  $$promoted260 = +HEAPF32[$2674>>2];
  $2675 = +HEAPF32[$2672>>2];
  $2676 = +HEAPF32[$last>>2];
  $2677 = $2675 * $2676;
  $2678 = $2677 * $2673;
  $2679 = $$promoted260 + $2678;
  $2680 = ((132280 + ($i$3263<<4)|0) + 4|0);
  $2681 = +HEAPF32[$2680>>2];
  $2682 = (($last) + 12|0);
  $2683 = +HEAPF32[$2682>>2];
  $2684 = $2681 * $2683;
  $2685 = $2684 * $2673;
  $2686 = $2679 + $2685;
  $2687 = ((132280 + ($i$3263<<4)|0) + 8|0);
  $2688 = +HEAPF32[$2687>>2];
  $2689 = (($last) + 24|0);
  $2690 = +HEAPF32[$2689>>2];
  $2691 = $2688 * $2690;
  $2692 = $2691 * $2673;
  $2693 = $2686 + $2692;
  HEAPF32[$2674>>2] = $2693;
  $2694 = (($div) + 4|0);
  $2695 = +HEAPF32[$2694>>2];
  $2696 = ((($trans) + (($i$3263*12)|0)|0) + 4|0);
  $$promoted260$1 = +HEAPF32[$2696>>2];
  $2697 = +HEAPF32[$2672>>2];
  $2698 = (($last) + 4|0);
  $2699 = +HEAPF32[$2698>>2];
  $2700 = $2697 * $2699;
  $2701 = $2700 * $2695;
  $2702 = $$promoted260$1 + $2701;
  $2703 = ((132280 + ($i$3263<<4)|0) + 4|0);
  $2704 = +HEAPF32[$2703>>2];
  $2705 = (($last) + 16|0);
  $2706 = +HEAPF32[$2705>>2];
  $2707 = $2704 * $2706;
  $2708 = $2707 * $2695;
  $2709 = $2702 + $2708;
  $2710 = ((132280 + ($i$3263<<4)|0) + 8|0);
  $2711 = +HEAPF32[$2710>>2];
  $2712 = (($last) + 28|0);
  $2713 = +HEAPF32[$2712>>2];
  $2714 = $2711 * $2713;
  $2715 = $2714 * $2695;
  $2716 = $2709 + $2715;
  HEAPF32[$2696>>2] = $2716;
  $2717 = (($div) + 8|0);
  $2718 = +HEAPF32[$2717>>2];
  $2719 = ((($trans) + (($i$3263*12)|0)|0) + 8|0);
  $$promoted260$2 = +HEAPF32[$2719>>2];
  $2720 = +HEAPF32[$2672>>2];
  $2721 = (($last) + 8|0);
  $2722 = +HEAPF32[$2721>>2];
  $2723 = $2720 * $2722;
  $2724 = $2723 * $2718;
  $2725 = $$promoted260$2 + $2724;
  $2726 = ((132280 + ($i$3263<<4)|0) + 4|0);
  $2727 = +HEAPF32[$2726>>2];
  $2728 = (($last) + 20|0);
  $2729 = +HEAPF32[$2728>>2];
  $2730 = $2727 * $2729;
  $2731 = $2730 * $2718;
  $2732 = $2725 + $2731;
  $2733 = ((132280 + ($i$3263<<4)|0) + 8|0);
  $2734 = +HEAPF32[$2733>>2];
  $2735 = (($last) + 32|0);
  $2736 = +HEAPF32[$2735>>2];
  $2737 = $2734 * $2736;
  $2738 = $2737 * $2718;
  $2739 = $2732 + $2738;
  HEAPF32[$2719>>2] = $2739;
  $2740 = (($i$3263) + 1)|0;
  $exitcond382 = ($2740|0)==(3);
  if ($exitcond382) {
   break;
  } else {
   $i$3263 = $2740;
  }
 }
 $2568 = +HEAPF32[$trans>>2];
 $2569 = (($trans) + 4|0);
 $2570 = +HEAPF32[$2569>>2];
 $2571 = $2568 + $2570;
 $2572 = (($trans) + 8|0);
 $2573 = +HEAPF32[$2572>>2];
 $2574 = $2571 + $2573;
 $2575 = $2574;
 HEAPF64[$trsum>>3] = $2575;
 $2576 = (($trans) + 12|0);
 $2577 = +HEAPF32[$2576>>2];
 $2578 = (($trans) + 16|0);
 $2579 = +HEAPF32[$2578>>2];
 $2580 = $2577 + $2579;
 $2581 = (($trans) + 20|0);
 $2582 = +HEAPF32[$2581>>2];
 $2583 = $2580 + $2582;
 $2584 = $2583;
 $2585 = (($trsum) + 8|0);
 HEAPF64[$2585>>3] = $2584;
 $2586 = (($trans) + 24|0);
 $2587 = +HEAPF32[$2586>>2];
 $2588 = (($trans) + 28|0);
 $2589 = +HEAPF32[$2588>>2];
 $2590 = $2587 + $2589;
 $2591 = (($trans) + 32|0);
 $2592 = +HEAPF32[$2591>>2];
 $2593 = $2590 + $2592;
 $2594 = $2593;
 $2595 = (($trsum) + 16|0);
 HEAPF64[$2595>>3] = $2594;
 $2596 = +HEAPF64[$trsum>>3];
 $2597 = $2596 * 6.0;
 $2598 = (($trsum) + 8|0);
 $2599 = +HEAPF64[$2598>>3];
 $2600 = $2599 * 11.0;
 $2601 = $2597 + $2600;
 $2602 = (($trsum) + 16|0);
 $2603 = +HEAPF64[$2602>>3];
 $2604 = $2603 * 3.0;
 $2605 = $2601 + $2604;
 $264 = $2605 / 20.0;
 $2606 = +HEAPF64[$trsum>>3];
 $2607 = +HEAPF32[$trans>>2];
 $2608 = $2607;
 $2609 = $264 * $2608;
 $2610 = $2609 / $2606;
 $2611 = $2610;
 HEAPF32[$last>>2] = $2611;
 $2612 = (($trans) + 4|0);
 $2613 = +HEAPF32[$2612>>2];
 $2614 = $2613;
 $2615 = $264 * $2614;
 $2616 = $2615 / $2606;
 $2617 = $2616;
 $2618 = (($last) + 4|0);
 HEAPF32[$2618>>2] = $2617;
 $2619 = (($trans) + 8|0);
 $2620 = +HEAPF32[$2619>>2];
 $2621 = $2620;
 $2622 = $264 * $2621;
 $2623 = $2622 / $2606;
 $2624 = $2623;
 $2625 = (($last) + 8|0);
 HEAPF32[$2625>>2] = $2624;
 $2626 = (($trsum) + 8|0);
 $2627 = +HEAPF64[$2626>>3];
 $2628 = (($trans) + 12|0);
 $2629 = +HEAPF32[$2628>>2];
 $2630 = $2629;
 $2631 = $264 * $2630;
 $2632 = $2631 / $2627;
 $2633 = $2632;
 $2634 = (($last) + 12|0);
 HEAPF32[$2634>>2] = $2633;
 $2635 = (($trans) + 16|0);
 $2636 = +HEAPF32[$2635>>2];
 $2637 = $2636;
 $2638 = $264 * $2637;
 $2639 = $2638 / $2627;
 $2640 = $2639;
 $2641 = (($last) + 16|0);
 HEAPF32[$2641>>2] = $2640;
 $2642 = (($trans) + 20|0);
 $2643 = +HEAPF32[$2642>>2];
 $2644 = $2643;
 $2645 = $264 * $2644;
 $2646 = $2645 / $2627;
 $2647 = $2646;
 $2648 = (($last) + 20|0);
 HEAPF32[$2648>>2] = $2647;
 $2649 = (($trsum) + 16|0);
 $2650 = +HEAPF64[$2649>>3];
 $2651 = (($trans) + 24|0);
 $2652 = +HEAPF32[$2651>>2];
 $2653 = $2652;
 $2654 = $264 * $2653;
 $2655 = $2654 / $2650;
 $2656 = $2655;
 $2657 = (($last) + 24|0);
 HEAPF32[$2657>>2] = $2656;
 $2658 = (($trans) + 28|0);
 $2659 = +HEAPF32[$2658>>2];
 $2660 = $2659;
 $2661 = $264 * $2660;
 $2662 = $2661 / $2650;
 $2663 = $2662;
 $2664 = (($last) + 28|0);
 HEAPF32[$2664>>2] = $2663;
 $2665 = (($trans) + 32|0);
 $2666 = +HEAPF32[$2665>>2];
 $2667 = $2666;
 $2668 = $264 * $2667;
 $2669 = $2668 / $2650;
 $2670 = $2669;
 $2671 = (($last) + 32|0);
 HEAPF32[$2671>>2] = $2670;
 dest=$trans+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2549 = (($last) + 8|0);
 $i$5255 = 0;
 while(1) {
  $2506 = ($i$5255|0)==(0);
  $2507 = $2506 ? 32.0 : -1.0;
  $2508 = (($trans) + (($i$5255*12)|0)|0);
  $$promoted252 = +HEAPF32[$2508>>2];
  $2509 = +HEAPF32[$last>>2];
  $2510 = $2507 * $2509;
  $2511 = $2510 / 30.0;
  $2512 = $2511 + $$promoted252;
  $2513 = ($i$5255|0)==(1);
  $2514 = $2513 ? 32.0 : -1.0;
  $2515 = (($last) + 12|0);
  $2516 = +HEAPF32[$2515>>2];
  $2517 = $2514 * $2516;
  $2518 = $2517 / 30.0;
  $2519 = $2518 + $2512;
  $2520 = ($i$5255|0)==(2);
  $2521 = $2520 ? 32.0 : -1.0;
  $2522 = (($last) + 24|0);
  $2523 = +HEAPF32[$2522>>2];
  $2524 = $2521 * $2523;
  $2525 = $2524 / 30.0;
  $2526 = $2525 + $2519;
  HEAPF32[$2508>>2] = $2526;
  $2527 = ((($trans) + (($i$5255*12)|0)|0) + 4|0);
  $$promoted252$1 = +HEAPF32[$2527>>2];
  $2528 = (($last) + 4|0);
  $2529 = +HEAPF32[$2528>>2];
  $2530 = $2507 * $2529;
  $2531 = $2530 / 30.0;
  $2532 = $2531 + $$promoted252$1;
  $2533 = ($i$5255|0)==(1);
  $2534 = $2533 ? 32.0 : -1.0;
  $2535 = (($last) + 16|0);
  $2536 = +HEAPF32[$2535>>2];
  $2537 = $2534 * $2536;
  $2538 = $2537 / 30.0;
  $2539 = $2538 + $2532;
  $2540 = ($i$5255|0)==(2);
  $2541 = $2540 ? 32.0 : -1.0;
  $2542 = (($last) + 28|0);
  $2543 = +HEAPF32[$2542>>2];
  $2544 = $2541 * $2543;
  $2545 = $2544 / 30.0;
  $2546 = $2545 + $2539;
  HEAPF32[$2527>>2] = $2546;
  $2547 = ((($trans) + (($i$5255*12)|0)|0) + 8|0);
  $$promoted252$2 = +HEAPF32[$2547>>2];
  $2548 = +HEAPF32[$2549>>2];
  $2550 = $2507 * $2548;
  $2551 = $2550 / 30.0;
  $2552 = $2551 + $$promoted252$2;
  $2553 = ($i$5255|0)==(1);
  $2554 = $2553 ? 32.0 : -1.0;
  $2555 = (($last) + 20|0);
  $2556 = +HEAPF32[$2555>>2];
  $2557 = $2554 * $2556;
  $2558 = $2557 / 30.0;
  $2559 = $2558 + $2552;
  $2560 = ($i$5255|0)==(2);
  $2561 = $2560 ? 32.0 : -1.0;
  $2562 = (($last) + 32|0);
  $2563 = +HEAPF32[$2562>>2];
  $2564 = $2561 * $2563;
  $2565 = $2564 / 30.0;
  $2566 = $2565 + $2559;
  HEAPF32[$2547>>2] = $2566;
  $2567 = (($i$5255) + 1)|0;
  $exitcond376 = ($2567|0)==(3);
  if ($exitcond376) {
   break;
  } else {
   $i$5255 = $2567;
  }
 }
 $248 = +HEAPF32[$cfilt>>2];
 _foveon_make_curves($curve,$color_dq,$div,$248);
 $249 = +HEAPF32[$chroma_dq>>2];
 $250 = $249 / 3.0;
 HEAPF32[$chroma_dq>>2] = $250;
 $251 = (($chroma_dq) + 4|0);
 $252 = +HEAPF32[$251>>2];
 $253 = $252 / 3.0;
 HEAPF32[$251>>2] = $253;
 $254 = (($chroma_dq) + 8|0);
 $255 = +HEAPF32[$254>>2];
 $256 = $255 / 3.0;
 HEAPF32[$254>>2] = $256;
 $257 = (($curve) + 12|0);
 $258 = +HEAPF32[$cfilt>>2];
 _foveon_make_curves($257,$chroma_dq,$div,$258);
 $259 = +HEAPF32[$chroma_dq>>2];
 $260 = +HEAPF32[$div>>2];
 $261 = $259 / $260;
 $262 = $261;
 $263 = $264 + $262;
 $265 = (($chroma_dq) + 4|0);
 $266 = +HEAPF32[$265>>2];
 $267 = (($div) + 4|0);
 $268 = +HEAPF32[$267>>2];
 $269 = $266 / $268;
 $270 = $269;
 $271 = $263 + $270;
 $272 = (($chroma_dq) + 8|0);
 $273 = +HEAPF32[$272>>2];
 $274 = (($div) + 8|0);
 $275 = +HEAPF32[$274>>2];
 $276 = $273 / $275;
 $277 = $276;
 $278 = $271 + $277;
 $279 = +HEAPF32[$cfilt>>2];
 $280 = $279;
 $281 = (_foveon_make_curve($278,$278,$280)|0);
 $282 = (($curve) + 24|0);
 HEAP32[$282>>2] = $281;
 $283 = $278 * 2.0;
 $284 = +HEAPF32[$cfilt>>2];
 $285 = $284;
 $286 = (_foveon_make_curve($283,$283,$285)|0);
 $287 = (($curve) + 28|0);
 HEAP32[$287>>2] = $286;
 $288 = (_foveon_camf_matrix($dim,189896)|0);
 $289 = ($288|0)==(0|0);
 if ($289) {
  STACKTOP = sp;return;
 }
 $290 = (($dim) + 4|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = (_calloc($291,12)|0);
 $293 = HEAP16[132088>>1]|0;
 $294 = $293&65535;
 $295 = HEAP32[$290>>2]|0;
 $296 = (($295) + -2)|0;
 $297 = (($296) + ($294))|0;
 $298 = (($295) + -1)|0;
 $299 = (($297>>>0) / ($298>>>0))&-1;
 $300 = HEAP16[132080>>1]|0;
 $301 = $300&65535;
 $302 = (_calloc($301,12)|0);
 $303 = HEAP16[132080>>1]|0;
 $304 = ($303<<16>>16)==(0);
 if (!($304)) {
  $305 = HEAP16[132080>>1]|0;
  $306 = $305&65535;
  $addconv12 = (($306) + -1)|0;
  $307 = (+($addconv12|0));
  $308 = HEAP16[132088>>1]|0;
  $309 = $308&65535;
  $310 = HEAP32[132112>>2]|0;
  $311 = +HEAPF32[$cfilt>>2];
  $312 = (($dscr) + 8|0);
  $313 = HEAP16[132080>>1]|0;
  $314 = $313&65535;
  $row$1246 = 0;
  while(1) {
   $315 = (+($row$1246|0));
   $316 = $315 / $307;
   $317 = (($ddft) + 24|0);
   $318 = +HEAPF32[$317>>2];
   $319 = $318;
   $320 = (($ddft) + 48|0);
   $321 = +HEAPF32[$320>>2];
   $322 = $321 - $318;
   $323 = $322;
   $324 = $316 * $323;
   $325 = $319 + $324;
   $326 = $325;
   HEAPF32[$ddft>>2] = $326;
   $327 = (($ddft) + 28|0);
   $328 = +HEAPF32[$327>>2];
   $329 = $328;
   $330 = (($ddft) + 52|0);
   $331 = +HEAPF32[$330>>2];
   $332 = $331 - $328;
   $333 = $332;
   $334 = $316 * $333;
   $335 = $329 + $334;
   $336 = $335;
   $337 = (($ddft) + 4|0);
   HEAPF32[$337>>2] = $336;
   $338 = (($ddft) + 32|0);
   $339 = +HEAPF32[$338>>2];
   $340 = $339;
   $341 = (($ddft) + 56|0);
   $342 = +HEAPF32[$341>>2];
   $343 = $342 - $339;
   $344 = $343;
   $345 = $316 * $344;
   $346 = $340 + $345;
   $347 = $346;
   $348 = (($ddft) + 8|0);
   HEAPF32[$348>>2] = $347;
   $349 = (($ddft) + 36|0);
   $350 = +HEAPF32[$349>>2];
   $351 = $350;
   $352 = (($ddft) + 60|0);
   $353 = +HEAPF32[$352>>2];
   $354 = $353 - $350;
   $355 = $354;
   $356 = $316 * $355;
   $357 = $351 + $356;
   $358 = $357;
   $359 = (($ddft) + 12|0);
   HEAPF32[$359>>2] = $358;
   $360 = (($ddft) + 40|0);
   $361 = +HEAPF32[$360>>2];
   $362 = $361;
   $363 = (($ddft) + 64|0);
   $364 = +HEAPF32[$363>>2];
   $365 = $364 - $361;
   $366 = $365;
   $367 = $316 * $366;
   $368 = $362 + $367;
   $369 = $368;
   $370 = (($ddft) + 16|0);
   HEAPF32[$370>>2] = $369;
   $371 = (($ddft) + 44|0);
   $372 = +HEAPF32[$371>>2];
   $373 = $372;
   $374 = (($ddft) + 68|0);
   $375 = +HEAPF32[$374>>2];
   $376 = $375 - $372;
   $377 = $376;
   $378 = $316 * $377;
   $379 = $373 + $378;
   $380 = $379;
   $381 = (($ddft) + 20|0);
   HEAPF32[$381>>2] = $380;
   $382 = Math_imul($309, $row$1246)|0;
   $383 = (($310) + ($382<<3)|0);
   $384 = (+_foveon_avg($383,$dscr,$311));
   $385 = (+_foveon_avg($383,$312,$311));
   $386 = $385 * 3.0;
   $387 = $384 + $386;
   $388 = +HEAPF32[$ddft>>2];
   $389 = $387 - $388;
   $390 = $389 * 0.25;
   $391 = (($ddft) + 4|0);
   $392 = +HEAPF32[$391>>2];
   $393 = $390 - $392;
   $394 = (($302) + (($row$1246*12)|0)|0);
   HEAPF32[$394>>2] = $393;
   $395 = ((($310) + ($382<<3)|0) + 2|0);
   $396 = (+_foveon_avg($395,$dscr,$311));
   $397 = (+_foveon_avg($395,$312,$311));
   $398 = $397 * 3.0;
   $399 = $396 + $398;
   $400 = (($ddft) + 8|0);
   $401 = +HEAPF32[$400>>2];
   $402 = $399 - $401;
   $403 = $402 * 0.25;
   $404 = (($ddft) + 12|0);
   $405 = +HEAPF32[$404>>2];
   $406 = $403 - $405;
   $407 = ((($302) + (($row$1246*12)|0)|0) + 4|0);
   HEAPF32[$407>>2] = $406;
   $408 = ((($310) + ($382<<3)|0) + 4|0);
   $409 = (+_foveon_avg($408,$dscr,$311));
   $410 = (+_foveon_avg($408,$312,$311));
   $411 = $410 * 3.0;
   $412 = $409 + $411;
   $413 = (($ddft) + 16|0);
   $414 = +HEAPF32[$413>>2];
   $415 = $412 - $414;
   $416 = $415 * 0.25;
   $417 = (($ddft) + 20|0);
   $418 = +HEAPF32[$417>>2];
   $419 = $416 - $418;
   $420 = ((($302) + (($row$1246*12)|0)|0) + 8|0);
   HEAPF32[$420>>2] = $419;
   $421 = (($row$1246) + 1)|0;
   $422 = ($421|0)<($314|0);
   if ($422) {
    $row$1246 = $421;
   } else {
    break;
   }
  }
 }
 $423 = (($302) + 96|0);
 dest=$302+0|0; src=$423+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $424 = HEAP16[132080>>1]|0;
 $425 = $424&65535;
 $$sum = (($425) + -11)|0;
 $426 = (($302) + (($$sum*12)|0)|0);
 $$sum2 = (($425) + -22)|0;
 $427 = (($302) + (($$sum2*12)|0)|0);
 _memcpy(($426|0),($427|0),132)|0;
 dest=$last+0|0; src=$302+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $428 = HEAP16[132080>>1]|0;
 $429 = $428&65535;
 $430 = (($429) + -1)|0;
 $431 = ($430|0)>(1);
 if ($431) {
  $432 = (($last) + 12|0);
  $433 = (($last) + 24|0);
  $434 = HEAP16[132080>>1]|0;
  $435 = $434&65535;
  $436 = (($435) + -1)|0;
  $437 = $434&65535;
  $438 = (($437) + -1)|0;
  $439 = ($438|0)>(2);
  $row$2242 = 1;
  while(1) {
   $440 = (($last) + 12|0);
   $441 = +HEAPF32[$440>>2];
   $442 = +HEAPF32[$last>>2];
   $443 = $441 > $442;
   $444 = (($last) + 24|0);
   $445 = +HEAPF32[$444>>2];
   if ($443) {
    $446 = $441 > $445;
    if ($446) {
     $447 = $442 > $445;
     $$ = $447 ? $442 : $445;
     $448 = (($302) + (($row$2242*12)|0)|0);
     HEAPF32[$448>>2] = $$;
    }
   } else {
    $449 = $441 < $445;
    if ($449) {
     $450 = $442 < $445;
     $$13 = $450 ? $442 : $445;
     $451 = (($302) + (($row$2242*12)|0)|0);
     HEAPF32[$451>>2] = $$13;
    }
   }
   $452 = (($last) + 16|0);
   $453 = +HEAPF32[$452>>2];
   $454 = (($last) + 4|0);
   $455 = +HEAPF32[$454>>2];
   $456 = $453 > $455;
   $457 = (($last) + 28|0);
   $458 = +HEAPF32[$457>>2];
   if ($456) {
    $2487 = $453 > $458;
    if ($2487) {
     $2488 = $455 > $458;
     $$$1 = $2488 ? $455 : $458;
     $2489 = ((($302) + (($row$2242*12)|0)|0) + 4|0);
     HEAPF32[$2489>>2] = $$$1;
    }
   } else {
    $2484 = $453 < $458;
    if ($2484) {
     $2485 = $455 < $458;
     $$13$1 = $2485 ? $455 : $458;
     $2486 = ((($302) + (($row$2242*12)|0)|0) + 4|0);
     HEAPF32[$2486>>2] = $$13$1;
    }
   }
   $2490 = (($last) + 20|0);
   $2491 = +HEAPF32[$2490>>2];
   $2492 = (($last) + 8|0);
   $2493 = +HEAPF32[$2492>>2];
   $2494 = $2491 > $2493;
   $2495 = (($last) + 32|0);
   $2496 = +HEAPF32[$2495>>2];
   if ($2494) {
    $2500 = $2491 > $2496;
    if ($2500) {
     $2501 = $2493 > $2496;
     $$$2 = $2501 ? $2493 : $2496;
     $2502 = ((($302) + (($row$2242*12)|0)|0) + 8|0);
     HEAPF32[$2502>>2] = $$$2;
    }
   } else {
    $2497 = $2491 < $2496;
    if ($2497) {
     $2498 = $2493 < $2496;
     $$13$2 = $2498 ? $2493 : $2496;
     $2499 = ((($302) + (($row$2242*12)|0)|0) + 8|0);
     HEAPF32[$2499>>2] = $$13$2;
    }
   }
   _memmove(($last|0),($432|0),24)|0;
   $2503 = (($row$2242) + 1)|0;
   $2504 = (($302) + (($2503*12)|0)|0);
   ;HEAP32[$433+0>>2]=HEAP32[$2504+0>>2]|0;HEAP32[$433+4>>2]=HEAP32[$2504+4>>2]|0;HEAP32[$433+8>>2]=HEAP32[$2504+8>>2]|0;
   $2505 = ($2503|0)<($436|0);
   if ($2505) {
    $row$2242 = $2503;
   } else {
    break;
   }
  }
  $smax369 = $439 ? $438 : 2;
  $row$2$lcssa = $smax369;
 } else {
  $row$2$lcssa = 1;
 }
 $459 = +HEAPF32[$last>>2];
 $460 = (($last) + 12|0);
 $461 = +HEAPF32[$460>>2];
 $462 = $459 + $461;
 $463 = $462 * 0.5;
 $464 = (($302) + (($row$2$lcssa*12)|0)|0);
 HEAPF32[$464>>2] = $463;
 $465 = (($last) + 4|0);
 $466 = +HEAPF32[$465>>2];
 $467 = (($last) + 16|0);
 $468 = +HEAPF32[$467>>2];
 $469 = $466 + $468;
 $470 = $469 * 0.5;
 $471 = ((($302) + (($row$2$lcssa*12)|0)|0) + 4|0);
 HEAPF32[$471>>2] = $470;
 $472 = (($last) + 8|0);
 $473 = +HEAPF32[$472>>2];
 $474 = (($last) + 20|0);
 $475 = +HEAPF32[$474>>2];
 $476 = $473 + $475;
 $477 = $476 * 0.5;
 $478 = ((($302) + (($row$2$lcssa*12)|0)|0) + 8|0);
 HEAPF32[$478>>2] = $477;
 $479 = (($302) + 36|0);
 $480 = (($302) + 12|0);
 $481 = +HEAPF32[$480>>2];
 $482 = +HEAPF32[$479>>2];
 $483 = $481 + $482;
 $484 = $483 * 0.5;
 HEAPF32[$302>>2] = $484;
 $485 = (($302) + 16|0);
 $486 = +HEAPF32[$485>>2];
 $487 = (($302) + 40|0);
 $488 = +HEAPF32[$487>>2];
 $489 = $486 + $488;
 $490 = $489 * 0.5;
 $491 = (($302) + 4|0);
 HEAPF32[$491>>2] = $490;
 $492 = (($302) + 20|0);
 $493 = +HEAPF32[$492>>2];
 $494 = (($302) + 44|0);
 $495 = +HEAPF32[$494>>2];
 $496 = $493 + $495;
 $497 = $496 * 0.5;
 $498 = (($302) + 8|0);
 HEAPF32[$498>>2] = $497;
 ;HEAP32[$fsum+0>>2]=HEAP32[$302+0>>2]|0;HEAP32[$fsum+4>>2]=HEAP32[$302+4>>2]|0;HEAP32[$fsum+8>>2]=HEAP32[$302+8>>2]|0;
 $499 = HEAP16[132080>>1]|0;
 $500 = $499&65535;
 $501 = ($499&65535)>(1);
 if ($501) {
  $502 = HEAP16[132080>>1]|0;
  $503 = $502&65535;
  $row$3236 = 1;
  while(1) {
   $504 = (($row$3236) + -1)|0;
   $505 = (($302) + (($row$3236*12)|0)|0);
   $506 = +HEAPF32[$505>>2];
   $507 = (($302) + (($504*12)|0)|0);
   $508 = +HEAPF32[$507>>2];
   $509 = $506 - $508;
   $510 = $509 * 0.040810544043779373;
   $511 = $508 + $510;
   HEAPF32[$505>>2] = $511;
   $512 = +HEAPF32[$fsum>>2];
   $513 = $512 + $511;
   HEAPF32[$fsum>>2] = $513;
   $514 = ((($302) + (($row$3236*12)|0)|0) + 4|0);
   $515 = +HEAPF32[$514>>2];
   $516 = ((($302) + (($504*12)|0)|0) + 4|0);
   $517 = +HEAPF32[$516>>2];
   $518 = $515 - $517;
   $519 = $518 * 0.040810544043779373;
   $520 = $517 + $519;
   HEAPF32[$514>>2] = $520;
   $521 = (($fsum) + 4|0);
   $522 = +HEAPF32[$521>>2];
   $523 = $522 + $520;
   HEAPF32[$521>>2] = $523;
   $524 = ((($302) + (($row$3236*12)|0)|0) + 8|0);
   $525 = +HEAPF32[$524>>2];
   $526 = ((($302) + (($504*12)|0)|0) + 8|0);
   $527 = +HEAPF32[$526>>2];
   $528 = $525 - $527;
   $529 = $528 * 0.040810544043779373;
   $530 = $527 + $529;
   HEAPF32[$524>>2] = $530;
   $531 = (($fsum) + 8|0);
   $532 = +HEAPF32[$531>>2];
   $533 = $532 + $530;
   HEAPF32[$531>>2] = $533;
   $534 = (($row$3236) + 1)|0;
   $535 = ($534|0)<($503|0);
   if ($535) {
    $row$3236 = $534;
   } else {
    $$lcssa99 = $503;
    break;
   }
  }
 } else {
  $$lcssa99 = $500;
 }
 $536 = (($$lcssa99) + -1)|0;
 $537 = (($302) + (($536*12)|0)|0);
 ;HEAP32[$last+0>>2]=HEAP32[$537+0>>2]|0;HEAP32[$last+4>>2]=HEAP32[$537+4>>2]|0;HEAP32[$last+8>>2]=HEAP32[$537+8>>2]|0;
 $538 = HEAP16[132080>>1]|0;
 $539 = $538&65535;
 $540 = $538&65535;
 $541 = (+($540|0));
 $542 = +HEAPF32[$fsum>>2];
 $543 = $542 / $541;
 HEAPF32[$fsum>>2] = $543;
 $544 = (+($539|0));
 $545 = (($fsum) + 4|0);
 $546 = +HEAPF32[$545>>2];
 $547 = $546 / $544;
 HEAPF32[$545>>2] = $547;
 $548 = (+($539|0));
 $549 = (($fsum) + 8|0);
 $550 = +HEAPF32[$549>>2];
 $551 = $550 / $548;
 HEAPF32[$549>>2] = $551;
 $552 = ($538<<16>>16)==(0);
 if (!($552)) {
  $$in = $539;
  while(1) {
   $553 = (($$in) + -1)|0;
   $554 = (($302) + (($553*12)|0)|0);
   $555 = +HEAPF32[$554>>2];
   $556 = +HEAPF32[$fsum>>2];
   $557 = $555 - $556;
   $558 = +HEAPF32[$last>>2];
   $559 = $557 - $558;
   $560 = $559 * 0.040810544043779373;
   $561 = $558 + $560;
   HEAPF32[$554>>2] = $561;
   HEAPF32[$last>>2] = $561;
   $562 = ((($302) + (($553*12)|0)|0) + 4|0);
   $563 = +HEAPF32[$562>>2];
   $564 = (($fsum) + 4|0);
   $565 = +HEAPF32[$564>>2];
   $566 = $563 - $565;
   $567 = (($last) + 4|0);
   $568 = +HEAPF32[$567>>2];
   $569 = $566 - $568;
   $570 = $569 * 0.040810544043779373;
   $571 = $568 + $570;
   HEAPF32[$562>>2] = $571;
   HEAPF32[$567>>2] = $571;
   $572 = ((($302) + (($553*12)|0)|0) + 8|0);
   $573 = +HEAPF32[$572>>2];
   $574 = (($fsum) + 8|0);
   $575 = +HEAPF32[$574>>2];
   $576 = $573 - $575;
   $577 = (($last) + 8|0);
   $578 = +HEAPF32[$577>>2];
   $579 = $576 - $578;
   $580 = $579 * 0.040810544043779373;
   $581 = $578 + $580;
   HEAPF32[$572>>2] = $581;
   HEAPF32[$577>>2] = $581;
   $582 = ($553|0)==(0);
   if ($582) {
    break;
   } else {
    $$in = $553;
   }
  }
 }
 ;HEAP32[$total+0>>2]=0|0;HEAP32[$total+4>>2]=0|0;HEAP32[$total+8>>2]=0|0;HEAP32[$total+12>>2]=0|0;
 $583 = HEAP16[132080>>1]|0;
 $584 = ($583&65535)>(2);
 if ($584) {
  $585 = HEAP16[132088>>1]|0;
  $586 = ($585&65535)>(2);
  $587 = HEAP16[132080>>1]|0;
  $588 = $587&65535;
  $589 = $585&65535;
  $590 = HEAP32[132112>>2]|0;
  $591 = (($total) + 12|0);
  $592 = HEAP16[132088>>1]|0;
  $593 = $592&65535;
  $row$5231 = 2;
  while(1) {
   if ($586) {
    $594 = Math_imul($589, $row$5231)|0;
    $col$1229 = 2;
    while(1) {
     $603 = (($594) + ($col$1229))|0;
     $604 = (($590) + ($603<<3)|0);
     $605 = HEAP16[$604>>1]|0;
     $606 = $605 << 16 >> 16;
     $607 = HEAP32[$total>>2]|0;
     $608 = (($607) + ($606))|0;
     HEAP32[$total>>2] = $608;
     $609 = ((($590) + ($603<<3)|0) + 2|0);
     $610 = HEAP16[$609>>1]|0;
     $611 = $610 << 16 >> 16;
     $612 = (($total) + 4|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = (($613) + ($611))|0;
     HEAP32[$612>>2] = $614;
     $615 = ((($590) + ($603<<3)|0) + 4|0);
     $616 = HEAP16[$615>>1]|0;
     $617 = $616 << 16 >> 16;
     $618 = (($total) + 8|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = (($619) + ($617))|0;
     HEAP32[$618>>2] = $620;
     $621 = HEAP32[$591>>2]|0;
     $622 = (($621) + 1)|0;
     HEAP32[$591>>2] = $622;
     $623 = (($col$1229) + 4)|0;
     $624 = ($623|0)<($593|0);
     if ($624) {
      $col$1229 = $623;
     } else {
      break;
     }
    }
   }
   $625 = (($row$5231) + 4)|0;
   $626 = ($625|0)<($588|0);
   if ($626) {
    $row$5231 = $625;
   } else {
    break;
   }
  }
  $$pr = HEAP16[132080>>1]|0;
  $595 = $$pr;
 } else {
  $595 = $583;
 }
 $596 = ($595<<16>>16)==(0);
 if (!($596)) {
  $597 = (($total) + 12|0);
  $598 = HEAP32[$597>>2]|0;
  $599 = (+($598|0));
  $600 = $599 * 100.0;
  $601 = HEAP16[132080>>1]|0;
  $602 = $601&65535;
  $row$6227 = 0;
  while(1) {
   $638 = +HEAPF32[$fsum>>2];
   $639 = $638 * 0.5;
   $640 = $639;
   $641 = HEAP32[$total>>2]|0;
   $642 = (+($641|0));
   $643 = $642 / $600;
   $644 = $640 + $643;
   $645 = (($302) + (($row$6227*12)|0)|0);
   $646 = +HEAPF32[$645>>2];
   $647 = $646;
   $648 = $644 + $647;
   $649 = $648;
   HEAPF32[$645>>2] = $649;
   $650 = (($fsum) + 4|0);
   $651 = +HEAPF32[$650>>2];
   $652 = $651 * 0.5;
   $653 = $652;
   $654 = (($total) + 4|0);
   $655 = HEAP32[$654>>2]|0;
   $656 = (+($655|0));
   $657 = $656 / $600;
   $658 = $653 + $657;
   $659 = ((($302) + (($row$6227*12)|0)|0) + 4|0);
   $660 = +HEAPF32[$659>>2];
   $661 = $660;
   $662 = $658 + $661;
   $663 = $662;
   HEAPF32[$659>>2] = $663;
   $664 = (($fsum) + 8|0);
   $665 = +HEAPF32[$664>>2];
   $666 = $665 * 0.5;
   $667 = $666;
   $668 = (($total) + 8|0);
   $669 = HEAP32[$668>>2]|0;
   $670 = (+($669|0));
   $671 = $670 / $600;
   $672 = $667 + $671;
   $673 = ((($302) + (($row$6227*12)|0)|0) + 8|0);
   $674 = +HEAPF32[$673>>2];
   $675 = $674;
   $676 = $672 + $675;
   $677 = $676;
   HEAPF32[$673>>2] = $677;
   $678 = (($row$6227) + 1)|0;
   $679 = ($678|0)<($602|0);
   if ($679) {
    $row$6227 = $678;
   } else {
    break;
   }
  }
 }
 $627 = HEAP16[132080>>1]|0;
 $628 = ($627<<16>>16)==(0);
 if (!($628)) {
  $629 = (($dim) + 8|0);
  $630 = HEAP32[$629>>2]|0;
  $631 = (($630) + -1)|0;
  $632 = (+($631>>>0));
  $633 = HEAP32[$290>>2]|0;
  $634 = ($633|0)==(0);
  $635 = +HEAPF32[$cfilt>>2];
  $636 = (+($299|0));
  $637 = (($633) + -1)|0;
  $row$7223 = 0;
  while(1) {
   $680 = (+($row$7223|0));
   $681 = HEAP16[132080>>1]|0;
   $682 = $681&65535;
   $addconv11 = (($682) + -1)|0;
   $683 = (+($addconv11|0));
   $684 = $680 / $683;
   $685 = (($ddft) + 24|0);
   $686 = +HEAPF32[$685>>2];
   $687 = $686;
   $688 = (($ddft) + 48|0);
   $689 = +HEAPF32[$688>>2];
   $690 = $689 - $686;
   $691 = $690;
   $692 = $684 * $691;
   $693 = $687 + $692;
   $694 = $693;
   HEAPF32[$ddft>>2] = $694;
   $695 = (($ddft) + 28|0);
   $696 = +HEAPF32[$695>>2];
   $697 = $696;
   $698 = (($ddft) + 52|0);
   $699 = +HEAPF32[$698>>2];
   $700 = $699 - $696;
   $701 = $700;
   $702 = $684 * $701;
   $703 = $697 + $702;
   $704 = $703;
   $705 = (($ddft) + 4|0);
   HEAPF32[$705>>2] = $704;
   $706 = (($ddft) + 32|0);
   $707 = +HEAPF32[$706>>2];
   $708 = $707;
   $709 = (($ddft) + 56|0);
   $710 = +HEAPF32[$709>>2];
   $711 = $710 - $707;
   $712 = $711;
   $713 = $684 * $712;
   $714 = $708 + $713;
   $715 = $714;
   $716 = (($ddft) + 8|0);
   HEAPF32[$716>>2] = $715;
   $717 = (($ddft) + 36|0);
   $718 = +HEAPF32[$717>>2];
   $719 = $718;
   $720 = (($ddft) + 60|0);
   $721 = +HEAPF32[$720>>2];
   $722 = $721 - $718;
   $723 = $722;
   $724 = $684 * $723;
   $725 = $719 + $724;
   $726 = $725;
   $727 = (($ddft) + 12|0);
   HEAPF32[$727>>2] = $726;
   $728 = (($ddft) + 40|0);
   $729 = +HEAPF32[$728>>2];
   $730 = $729;
   $731 = (($ddft) + 64|0);
   $732 = +HEAPF32[$731>>2];
   $733 = $732 - $729;
   $734 = $733;
   $735 = $684 * $734;
   $736 = $730 + $735;
   $737 = $736;
   $738 = (($ddft) + 16|0);
   HEAPF32[$738>>2] = $737;
   $739 = (($ddft) + 44|0);
   $740 = +HEAPF32[$739>>2];
   $741 = $740;
   $742 = (($ddft) + 68|0);
   $743 = +HEAPF32[$742>>2];
   $744 = $743 - $740;
   $745 = $744;
   $746 = $684 * $745;
   $747 = $741 + $746;
   $748 = $747;
   $749 = (($ddft) + 20|0);
   HEAPF32[$749>>2] = $748;
   $750 = HEAP16[132088>>1]|0;
   $751 = $750&65535;
   $752 = Math_imul($751, $row$7223)|0;
   $753 = HEAP32[132112>>2]|0;
   $754 = (($753) + ($752<<3)|0);
   ;HEAP16[$prev+0>>1]=HEAP16[$754+0>>1]|0;HEAP16[$prev+2>>1]=HEAP16[$754+2>>1]|0;HEAP16[$prev+4>>1]=HEAP16[$754+4>>1]|0;
   $755 = (+($row$7223|0));
   $756 = HEAP16[132080>>1]|0;
   $757 = $756&65535;
   $addconv = (($757) + -1)|0;
   $758 = (+($addconv|0));
   $759 = $755 / $758;
   $760 = $759 * $632;
   $761 = $760;
   $762 = (~~(($761)));
   $763 = ($762|0)==($631|0);
   $764 = $763 << 31 >> 31;
   $$14 = (($764) + ($762))|0;
   $765 = (+($$14|0));
   $766 = $761 - $765;
   if (!($634)) {
    $767 = Math_imul($633, $$14)|0;
    $768 = 1.0 - $766;
    $769 = (($$14) + 1)|0;
    $770 = Math_imul($633, $769)|0;
    $i$8212 = 0;
    while(1) {
     $773 = (($767) + ($i$8212))|0;
     $774 = (($770) + ($i$8212))|0;
     $775 = (($288) + (($773*12)|0)|0);
     $776 = +HEAPF32[$775>>2];
     $777 = $768 * $776;
     $778 = (($288) + (($774*12)|0)|0);
     $779 = +HEAPF32[$778>>2];
     $780 = $766 * $779;
     $781 = $777 + $780;
     $782 = (($292) + (($i$8212*12)|0)|0);
     HEAPF32[$782>>2] = $781;
     $783 = ((($288) + (($773*12)|0)|0) + 4|0);
     $784 = +HEAPF32[$783>>2];
     $785 = $768 * $784;
     $786 = ((($288) + (($774*12)|0)|0) + 4|0);
     $787 = +HEAPF32[$786>>2];
     $788 = $766 * $787;
     $789 = $785 + $788;
     $790 = ((($292) + (($i$8212*12)|0)|0) + 4|0);
     HEAPF32[$790>>2] = $789;
     $791 = ((($288) + (($773*12)|0)|0) + 8|0);
     $792 = +HEAPF32[$791>>2];
     $793 = $768 * $792;
     $794 = ((($288) + (($774*12)|0)|0) + 8|0);
     $795 = +HEAPF32[$794>>2];
     $796 = $766 * $795;
     $797 = $793 + $796;
     $798 = ((($292) + (($i$8212*12)|0)|0) + 8|0);
     HEAPF32[$798>>2] = $797;
     $799 = (($i$8212) + 1)|0;
     $exitcond355 = ($i$8212|0)==($637|0);
     if ($exitcond355) {
      break;
     } else {
      $i$8212 = $799;
     }
    }
   }
   $771 = HEAP16[132088>>1]|0;
   $772 = ($771<<16>>16)==(0);
   if (!($772)) {
    $col$2220 = 0;$pix$0221 = $754;
    while(1) {
     $800 = (+($col$2220|0));
     $801 = HEAP16[$pix$0221>>1]|0;
     $802 = $801 << 16 >> 16;
     $803 = HEAP16[$prev>>1]|0;
     $804 = $803 << 16 >> 16;
     $805 = (($802) - ($804))|0;
     HEAP16[$prev>>1] = $801;
     $806 = HEAP16[$pix$0221>>1]|0;
     $807 = (+($806<<16>>16));
     $808 = Math_imul($805, $805)|0;
     $809 = $808 >>> 14;
     $810 = (($809) + ($805))|0;
     $811 = (+($810|0));
     $812 = $635 * $811;
     $813 = (($ddft) + 4|0);
     $814 = +HEAPF32[$813>>2];
     $815 = $812 - $814;
     $816 = $815;
     $817 = +HEAPF32[$ddft>>2];
     $818 = $817;
     $819 = HEAP16[132088>>1]|0;
     $820 = $819&65535;
     $821 = (+($820|0));
     $822 = $800 / $821;
     $823 = $822;
     $824 = $823 + -0.5;
     $825 = $818 * $824;
     $826 = $816 - $825;
     $827 = (($302) + (($row$7223*12)|0)|0);
     $828 = +HEAPF32[$827>>2];
     $829 = $828;
     $830 = $826 - $829;
     $831 = (+Math_floor((+$830)));
     $832 = $807 + $831;
     $833 = (~~(($832)));
     HEAP32[$ipix>>2] = $833;
     $834 = (($pix$0221) + 2|0);
     $835 = HEAP16[$834>>1]|0;
     $836 = $835 << 16 >> 16;
     $837 = (($prev) + 2|0);
     $838 = HEAP16[$837>>1]|0;
     $839 = $838 << 16 >> 16;
     $840 = (($836) - ($839))|0;
     HEAP16[$837>>1] = $835;
     $841 = HEAP16[$834>>1]|0;
     $842 = (+($841<<16>>16));
     $843 = Math_imul($840, $840)|0;
     $844 = $843 >>> 14;
     $845 = (($844) + ($840))|0;
     $846 = (+($845|0));
     $847 = $635 * $846;
     $848 = (($ddft) + 12|0);
     $849 = +HEAPF32[$848>>2];
     $850 = $847 - $849;
     $851 = $850;
     $852 = (($ddft) + 8|0);
     $853 = +HEAPF32[$852>>2];
     $854 = $853;
     $855 = HEAP16[132088>>1]|0;
     $856 = $855&65535;
     $857 = (+($856|0));
     $858 = $800 / $857;
     $859 = $858;
     $860 = $859 + -0.5;
     $861 = $854 * $860;
     $862 = $851 - $861;
     $863 = ((($302) + (($row$7223*12)|0)|0) + 4|0);
     $864 = +HEAPF32[$863>>2];
     $865 = $864;
     $866 = $862 - $865;
     $867 = (+Math_floor((+$866)));
     $868 = $842 + $867;
     $869 = (~~(($868)));
     $870 = (($ipix) + 4|0);
     HEAP32[$870>>2] = $869;
     $871 = (($pix$0221) + 4|0);
     $872 = HEAP16[$871>>1]|0;
     $873 = $872 << 16 >> 16;
     $874 = (($prev) + 4|0);
     $875 = HEAP16[$874>>1]|0;
     $876 = $875 << 16 >> 16;
     $877 = (($873) - ($876))|0;
     HEAP16[$874>>1] = $872;
     $878 = HEAP16[$871>>1]|0;
     $879 = (+($878<<16>>16));
     $880 = Math_imul($877, $877)|0;
     $881 = $880 >>> 14;
     $882 = (($881) + ($877))|0;
     $883 = (+($882|0));
     $884 = $635 * $883;
     $885 = (($ddft) + 20|0);
     $886 = +HEAPF32[$885>>2];
     $887 = $884 - $886;
     $888 = $887;
     $889 = (($ddft) + 16|0);
     $890 = +HEAPF32[$889>>2];
     $891 = $890;
     $892 = HEAP16[132088>>1]|0;
     $893 = $892&65535;
     $894 = (+($893|0));
     $895 = $800 / $894;
     $896 = $895;
     $897 = $896 + -0.5;
     $898 = $891 * $897;
     $899 = $888 - $898;
     $900 = ((($302) + (($row$7223*12)|0)|0) + 8|0);
     $901 = +HEAPF32[$900>>2];
     $902 = $901;
     $903 = $899 - $902;
     $904 = (+Math_floor((+$903)));
     $905 = $879 + $904;
     $906 = (~~(($905)));
     $907 = (($ipix) + 8|0);
     HEAP32[$907>>2] = $906;
     $908 = HEAP32[$ipix>>2]|0;
     $909 = Math_imul($908, $908)|0;
     $910 = $909 >>> 14;
     HEAP32[$work>>2] = $910;
     $911 = Math_imul($910, $908)|0;
     $912 = $911 >> 14;
     $913 = (($work) + 24|0);
     HEAP32[$913>>2] = $912;
     $914 = (($ipix) + 4|0);
     $915 = HEAP32[$914>>2]|0;
     $916 = (($ipix) + 8|0);
     $917 = HEAP32[$916>>2]|0;
     $918 = Math_imul($917, $915)|0;
     $919 = $918 >> 14;
     $920 = (($work) + 20|0);
     HEAP32[$920>>2] = $919;
     $921 = (($ipix) + 4|0);
     $922 = HEAP32[$921>>2]|0;
     $923 = Math_imul($922, $922)|0;
     $924 = $923 >>> 14;
     $925 = (($work) + 4|0);
     HEAP32[$925>>2] = $924;
     $926 = HEAP32[$921>>2]|0;
     $927 = Math_imul($924, $926)|0;
     $928 = $927 >> 14;
     $929 = (($work) + 28|0);
     HEAP32[$929>>2] = $928;
     $930 = (($ipix) + 8|0);
     $931 = HEAP32[$930>>2]|0;
     $932 = HEAP32[$ipix>>2]|0;
     $933 = Math_imul($932, $931)|0;
     $934 = $933 >> 14;
     $935 = (($work) + 16|0);
     HEAP32[$935>>2] = $934;
     $936 = (($ipix) + 8|0);
     $937 = HEAP32[$936>>2]|0;
     $938 = Math_imul($937, $937)|0;
     $939 = $938 >>> 14;
     $940 = (($work) + 8|0);
     HEAP32[$940>>2] = $939;
     $941 = HEAP32[$936>>2]|0;
     $942 = Math_imul($939, $941)|0;
     $943 = $942 >> 14;
     $944 = (($work) + 32|0);
     HEAP32[$944>>2] = $943;
     $945 = HEAP32[$ipix>>2]|0;
     $946 = (($ipix) + 4|0);
     $947 = HEAP32[$946>>2]|0;
     $948 = Math_imul($947, $945)|0;
     $949 = $948 >> 14;
     $950 = (($work) + 12|0);
     HEAP32[$950>>2] = $949;
     $951 = (($col$2220|0) / ($299|0))&-1;
     $952 = (($col$2220|0) % ($299|0))&-1;
     $953 = (($299) - ($952))|0;
     $954 = (+($953|0));
     $955 = (($951) + 1)|0;
     $956 = (+($952|0));
     $c$25219 = 0;
     while(1) {
      $2397 = (($ppm) + (($c$25219*36)|0)|0);
      $2398 = +HEAPF32[$2397>>2];
      $2399 = HEAP32[$work>>2]|0;
      $2400 = (+($2399|0));
      $2401 = $2398 * $2400;
      $2402 = $2401 + 0.0;
      $2403 = ((($ppm) + (($c$25219*36)|0)|0) + 4|0);
      $2404 = +HEAPF32[$2403>>2];
      $2405 = (($work) + 4|0);
      $2406 = HEAP32[$2405>>2]|0;
      $2407 = (+($2406|0));
      $2408 = $2404 * $2407;
      $2409 = $2402 + $2408;
      $2410 = ((($ppm) + (($c$25219*36)|0)|0) + 8|0);
      $2411 = +HEAPF32[$2410>>2];
      $2412 = (($work) + 8|0);
      $2413 = HEAP32[$2412>>2]|0;
      $2414 = (+($2413|0));
      $2415 = $2411 * $2414;
      $2416 = $2409 + $2415;
      $2417 = ((($ppm) + (($c$25219*36)|0)|0) + 12|0);
      $2418 = +HEAPF32[$2417>>2];
      $2419 = (($work) + 12|0);
      $2420 = HEAP32[$2419>>2]|0;
      $2421 = (+($2420|0));
      $2422 = $2418 * $2421;
      $2423 = $2416 + $2422;
      $2424 = ((($ppm) + (($c$25219*36)|0)|0) + 16|0);
      $2425 = +HEAPF32[$2424>>2];
      $2426 = (($work) + 16|0);
      $2427 = HEAP32[$2426>>2]|0;
      $2428 = (+($2427|0));
      $2429 = $2425 * $2428;
      $2430 = $2423 + $2429;
      $2431 = ((($ppm) + (($c$25219*36)|0)|0) + 20|0);
      $2432 = +HEAPF32[$2431>>2];
      $2433 = (($work) + 20|0);
      $2434 = HEAP32[$2433>>2]|0;
      $2435 = (+($2434|0));
      $2436 = $2432 * $2435;
      $2437 = $2430 + $2436;
      $2438 = ((($ppm) + (($c$25219*36)|0)|0) + 24|0);
      $2439 = +HEAPF32[$2438>>2];
      $2440 = (($work) + 24|0);
      $2441 = HEAP32[$2440>>2]|0;
      $2442 = (+($2441|0));
      $2443 = $2439 * $2442;
      $2444 = $2437 + $2443;
      $2445 = ((($ppm) + (($c$25219*36)|0)|0) + 28|0);
      $2446 = +HEAPF32[$2445>>2];
      $2447 = (($work) + 28|0);
      $2448 = HEAP32[$2447>>2]|0;
      $2449 = (+($2448|0));
      $2450 = $2446 * $2449;
      $2451 = $2444 + $2450;
      $2452 = ((($ppm) + (($c$25219*36)|0)|0) + 32|0);
      $2453 = +HEAPF32[$2452>>2];
      $2454 = (($work) + 32|0);
      $2455 = HEAP32[$2454>>2]|0;
      $2456 = (+($2455|0));
      $2457 = $2453 * $2456;
      $2458 = $2451 + $2457;
      $2459 = (($ipix) + ($c$25219<<2)|0);
      $2460 = HEAP32[$2459>>2]|0;
      $2461 = (+($2460|0));
      $floorf = (+Math_floor((+$2458)));
      $2462 = $floorf;
      $2463 = $2461 + $2462;
      $2464 = ((($292) + (($951*12)|0)|0) + ($c$25219<<2)|0);
      $2465 = +HEAPF32[$2464>>2];
      $2466 = $2465 * $954;
      $2467 = ((($292) + (($955*12)|0)|0) + ($c$25219<<2)|0);
      $2468 = +HEAPF32[$2467>>2];
      $2469 = $2468 * $956;
      $2470 = $2469 + $2466;
      $2471 = $2470;
      $2472 = $2463 * $2471;
      $2473 = $2472 / $636;
      $2474 = (($div) + ($c$25219<<2)|0);
      $2475 = +HEAPF32[$2474>>2];
      $2476 = $2475;
      $2477 = $2473 / $2476;
      $2478 = (+Math_floor((+$2477)));
      $2479 = (~~(($2478)));
      $2480 = ($2479|0)>(32000);
      $$15 = $2480 ? 32000 : $2479;
      HEAP32[$2459>>2] = $$15;
      $2481 = $$15&65535;
      $2482 = (($pix$0221) + ($c$25219<<1)|0);
      HEAP16[$2482>>1] = $2481;
      $2483 = (($c$25219) + 1)|0;
      $exitcond360 = ($2483|0)==(3);
      if ($exitcond360) {
       break;
      } else {
       $c$25219 = $2483;
      }
     }
     $957 = (($pix$0221) + 8|0);
     $958 = (($col$2220) + 1)|0;
     $959 = HEAP16[132088>>1]|0;
     $960 = $959&65535;
     $961 = ($958|0)<($960|0);
     if ($961) {
      $col$2220 = $958;$pix$0221 = $957;
     } else {
      break;
     }
    }
   }
   $962 = (($row$7223) + 1)|0;
   $963 = HEAP16[132080>>1]|0;
   $964 = $963&65535;
   $965 = ($962|0)<($964|0);
   if ($965) {
    $row$7223 = $962;
   } else {
    break;
   }
  }
 }
 _free($302);
 _free($292);
 _free($288);
 $966 = (_foveon_camf_matrix($dim,189912)|0);
 $967 = ($966|0)==(0|0);
 if (!($967)) {
  $968 = HEAP32[$dim>>2]|0;
  $969 = ($968|0)==(0);
  if (!($969)) {
   $970 = HEAP32[$keep>>2]|0;
   $971 = (($keep) + 4|0);
   $972 = HEAP32[$971>>2]|0;
   $973 = HEAP32[$dim>>2]|0;
   $974 = HEAP32[132112>>2]|0;
   $i$10207 = 0;
   while(1) {
    $975 = (($966) + ($i$10207<<2)|0);
    $976 = HEAP32[$975>>2]|0;
    $977 = $976 >>> 8;
    $978 = $977 & 4095;
    $979 = (($978) - ($970))|0;
    $980 = $976 >>> 20;
    $981 = (($980) - ($972))|0;
    $982 = (($981) + -1)|0;
    $983 = HEAP16[132080>>1]|0;
    $984 = $983&65535;
    $985 = (($984) + -3)|0;
    $986 = ($982>>>0)>($985>>>0);
    do {
     if (!($986)) {
      $987 = (($979) + -1)|0;
      $988 = HEAP16[132088>>1]|0;
      $989 = $988&65535;
      $990 = (($989) + -3)|0;
      $991 = ($987>>>0)>($990>>>0);
      if ($991) {
       break;
      }
      ;HEAP32[$fsum+0>>2]=0|0;HEAP32[$fsum+4>>2]=0|0;HEAP32[$fsum+8>>2]=0|0;
      $992 = HEAP32[$975>>2]|0;
      $993 = HEAP16[132088>>1]|0;
      $994 = $993&65535;
      $j$4204 = 0;$sum$0205 = 0;
      while(1) {
       $995 = 1 << $j$4204;
       $996 = $992 & $995;
       $997 = ($996|0)==(0);
       if ($997) {
        $sum$1 = $sum$0205;
       } else {
        $998 = $j$4204 << 1;
        $999 = (189520 + ($998<<1)|0);
        $1000 = HEAP16[$999>>1]|0;
        $1001 = $1000 << 16 >> 16;
        $1002 = (($1001) + ($981))|0;
        $1003 = Math_imul($1002, $994)|0;
        $1004 = (($1003) + ($979))|0;
        $1005 = $998 | 1;
        $1006 = (189520 + ($1005<<1)|0);
        $1007 = HEAP16[$1006>>1]|0;
        $1008 = $1007 << 16 >> 16;
        $1009 = (($1004) + ($1008))|0;
        $1010 = (($974) + ($1009<<3)|0);
        $1011 = HEAP16[$1010>>1]|0;
        $1012 = (+($1011<<16>>16));
        $1013 = +HEAPF32[$fsum>>2];
        $1014 = $1013 + $1012;
        HEAPF32[$fsum>>2] = $1014;
        $1015 = ((($974) + ($1009<<3)|0) + 2|0);
        $1016 = HEAP16[$1015>>1]|0;
        $1017 = (+($1016<<16>>16));
        $1018 = (($fsum) + 4|0);
        $1019 = +HEAPF32[$1018>>2];
        $1020 = $1019 + $1017;
        HEAPF32[$1018>>2] = $1020;
        $1021 = ((($974) + ($1009<<3)|0) + 4|0);
        $1022 = HEAP16[$1021>>1]|0;
        $1023 = (+($1022<<16>>16));
        $1024 = (($fsum) + 8|0);
        $1025 = +HEAPF32[$1024>>2];
        $1026 = $1025 + $1023;
        HEAPF32[$1024>>2] = $1026;
        $1027 = (($sum$0205) + 1)|0;
        $sum$1 = $1027;
       }
       $1028 = (($j$4204) + 1)|0;
       $exitcond351 = ($1028|0)==(8);
       if ($exitcond351) {
        $sum$1$lcssa = $sum$1;
        break;
       } else {
        $j$4204 = $1028;$sum$0205 = $sum$1;
       }
      }
      $1029 = ($sum$1$lcssa|0)==(0);
      if ($1029) {
       break;
      }
      $1030 = (+($sum$1$lcssa|0));
      $1031 = +HEAPF32[$fsum>>2];
      $1032 = $1031 / $1030;
      $1033 = (~~(($1032)));
      $1034 = HEAP16[132088>>1]|0;
      $1035 = $1034&65535;
      $1036 = Math_imul($1035, $981)|0;
      $1037 = (($1036) + ($979))|0;
      $1038 = (($974) + ($1037<<3)|0);
      HEAP16[$1038>>1] = $1033;
      $1039 = (($fsum) + 4|0);
      $1040 = +HEAPF32[$1039>>2];
      $1041 = $1040 / $1030;
      $1042 = (~~(($1041)));
      $1043 = HEAP16[132088>>1]|0;
      $1044 = $1043&65535;
      $1045 = Math_imul($1044, $981)|0;
      $1046 = (($1045) + ($979))|0;
      $1047 = ((($974) + ($1046<<3)|0) + 2|0);
      HEAP16[$1047>>1] = $1042;
      $1048 = (($fsum) + 8|0);
      $1049 = +HEAPF32[$1048>>2];
      $1050 = $1049 / $1030;
      $1051 = (~~(($1050)));
      $1052 = HEAP16[132088>>1]|0;
      $1053 = $1052&65535;
      $1054 = Math_imul($1053, $981)|0;
      $1055 = (($1054) + ($979))|0;
      $1056 = ((($974) + ($1055<<3)|0) + 4|0);
      HEAP16[$1056>>1] = $1051;
     }
    } while(0);
    $1057 = (($i$10207) + 1)|0;
    $1058 = ($1057>>>0)<($973>>>0);
    if ($1058) {
     $i$10207 = $1057;
    } else {
     break;
    }
   }
  }
  _free($966);
 }
 $1065 = HEAP16[132088>>1]|0;
 $1066 = $1065&65535;
 $1067 = ($1066*5)|0;
 $1068 = (_calloc($1067,12)|0);
 $1069 = (($smrow) + 24|0);
 HEAP32[$1069>>2] = $1068;
 _merror($1068,189928);
 $1070 = HEAP16[132088>>1]|0;
 $1071 = $1070&65535;
 $1072 = HEAP32[$1069>>2]|0;
 HEAP32[$smrow>>2] = $1072;
 $1073 = HEAP32[$1069>>2]|0;
 $1074 = (($1073) + (($1071*12)|0)|0);
 $1075 = (($smrow) + 4|0);
 HEAP32[$1075>>2] = $1074;
 $1076 = HEAP32[$1069>>2]|0;
 $1077 = $1071 << 1;
 $1078 = (($1076) + (($1077*12)|0)|0);
 $1079 = (($smrow) + 8|0);
 HEAP32[$1079>>2] = $1078;
 $1080 = HEAP32[$1069>>2]|0;
 $1081 = ($1071*3)|0;
 $1082 = (($1080) + (($1081*12)|0)|0);
 $1083 = (($smrow) + 12|0);
 HEAP32[$1083>>2] = $1082;
 $1084 = HEAP32[$1069>>2]|0;
 $1085 = $1071 << 2;
 $1086 = (($1084) + (($1085*12)|0)|0);
 $1087 = (($smrow) + 16|0);
 HEAP32[$1087>>2] = $1086;
 $1088 = HEAP16[132080>>1]|0;
 $1089 = $1088&65535;
 $1090 = (($1089) + -2)|0;
 $1091 = ($1090|0)>(2);
 if ($1091) {
  $1059 = HEAP32[132112>>2]|0;
  $1060 = (($smrow) + 8|0);
  $1061 = (($smrow) + 4|0);
  $1062 = (($smrow) + 12|0);
  $1063 = (($smrow) + 16|0);
  $1064 = (($smrow) + 16|0);
  $indvars$iv344 = 4;$indvars$iv346 = 3;$row$8199 = 2;$smlast$0200 = -1;$smred_p$0201 = 0;
  while(1) {
   $1092 = (($row$8199) + 2)|0;
   $1093 = ($smlast$0200|0)<($1092|0);
   if ($1093) {
    $1094 = HEAP16[132088>>1]|0;
    $1095 = $1094&65535;
    $1096 = $1094&65535;
    $1097 = (($1096) + -2)|0;
    $1098 = ($1097|0)>(2);
    $1099 = $1094&65535;
    $1100 = (($1099) + -3)|0;
    $smlast$1189 = $smlast$0200;
    while(1) {
     $1101 = HEAP32[$smrow>>2]|0;
     $1102 = (($smrow) + 20|0);
     HEAP32[$1102>>2] = $1101;
     $1103 = (($smrow) + 4|0);
     $1104 = HEAP32[$1103>>2]|0;
     HEAP32[$smrow>>2] = $1104;
     $1105 = (($smrow) + 8|0);
     $1106 = HEAP32[$1105>>2]|0;
     $1107 = (($smrow) + 4|0);
     HEAP32[$1107>>2] = $1106;
     $1108 = (($smrow) + 12|0);
     $1109 = HEAP32[$1108>>2]|0;
     $1110 = (($smrow) + 8|0);
     HEAP32[$1110>>2] = $1109;
     $1111 = (($smrow) + 16|0);
     $1112 = HEAP32[$1111>>2]|0;
     $1113 = (($smrow) + 12|0);
     HEAP32[$1113>>2] = $1112;
     $1114 = (($smrow) + 20|0);
     $1115 = HEAP32[$1114>>2]|0;
     $1116 = (($smrow) + 16|0);
     HEAP32[$1116>>2] = $1115;
     $1117 = (($smlast$1189) + 1)|0;
     if ($1098) {
      $1118 = Math_imul($1095, $1117)|0;
      $1119 = (($1118) + 2)|0;
      $1120 = (($1059) + ($1119<<3)|0);
      $1121 = HEAP32[$1064>>2]|0;
      $col$3185 = 2;$pix$1186 = $1120;
      while(1) {
       $1122 = HEAP16[$pix$1186>>1]|0;
       $1123 = $1122 << 16 >> 16;
       $1124 = ($1123*6)|0;
       $1125 = (($pix$1186) + -8|0);
       $1126 = HEAP16[$1125>>1]|0;
       $1127 = $1126 << 16 >> 16;
       $1128 = (($pix$1186) + 8|0);
       $1129 = HEAP16[$1128>>1]|0;
       $1130 = $1129 << 16 >> 16;
       $1131 = (($1130) + ($1127))|0;
       $1132 = $1131 << 2;
       $1133 = (($pix$1186) + -16|0);
       $1134 = HEAP16[$1133>>1]|0;
       $1135 = $1134 << 16 >> 16;
       $1136 = (($pix$1186) + 16|0);
       $1137 = HEAP16[$1136>>1]|0;
       $1138 = $1137 << 16 >> 16;
       $1139 = (($1124) + 8)|0;
       $1140 = (($1139) + ($1135))|0;
       $1141 = (($1140) + ($1132))|0;
       $1142 = (($1141) + ($1138))|0;
       $1143 = $1142 >> 4;
       $1144 = (($1121) + (($col$3185*12)|0)|0);
       HEAP32[$1144>>2] = $1143;
       $1145 = (($col$3185) + 1)|0;
       $exitcond343 = ($col$3185|0)==($1100|0);
       if ($exitcond343) {
        break;
       } else {
        $col$3185 = $1145;$pix$1186 = $1128;
       }
      }
     }
     $exitcond348 = ($smlast$1189|0)==($indvars$iv346|0);
     if ($exitcond348) {
      $smlast$1$lcssa = $indvars$iv344;
      break;
     } else {
      $smlast$1189 = $1117;
     }
    }
   } else {
    $smlast$1$lcssa = $smlast$0200;
   }
   $1146 = HEAP16[132088>>1]|0;
   $1147 = $1146&65535;
   $1148 = (($1147) + -2)|0;
   $1149 = ($1148|0)>(2);
   if ($1149) {
    $1150 = HEAP16[132088>>1]|0;
    $1151 = $1150&65535;
    $1152 = Math_imul($1151, $row$8199)|0;
    $1153 = (($1152) + 2)|0;
    $1154 = (($1059) + ($1153<<3)|0);
    $1155 = HEAP32[$1060>>2]|0;
    $1156 = HEAP32[$1061>>2]|0;
    $1157 = HEAP32[$1062>>2]|0;
    $1158 = HEAP32[$smrow>>2]|0;
    $1159 = HEAP32[$1063>>2]|0;
    $col$4192 = 2;$pix$2194 = $1154;$smred_p$1193 = $smred_p$0201;
    while(1) {
     $1160 = (($1155) + (($col$4192*12)|0)|0);
     $1161 = HEAP32[$1160>>2]|0;
     $1162 = ($1161*6)|0;
     $1163 = (($1156) + (($col$4192*12)|0)|0);
     $1164 = HEAP32[$1163>>2]|0;
     $1165 = (($1157) + (($col$4192*12)|0)|0);
     $1166 = HEAP32[$1165>>2]|0;
     $1167 = (($1166) + ($1164))|0;
     $1168 = $1167 << 2;
     $1169 = (($1158) + (($col$4192*12)|0)|0);
     $1170 = HEAP32[$1169>>2]|0;
     $1171 = (($1159) + (($col$4192*12)|0)|0);
     $1172 = HEAP32[$1171>>2]|0;
     $1173 = (($1162) + 8)|0;
     $1174 = (($1173) + ($1168))|0;
     $1175 = (($1174) + ($1170))|0;
     $1176 = (($1175) + ($1172))|0;
     $1177 = $1176 >> 4;
     $1178 = ($col$4192|0)==(2);
     $$smred_p$1 = $1178 ? $1177 : $smred_p$1193;
     $1179 = HEAP16[$pix$2194>>1]|0;
     $1180 = $1179 << 16 >> 16;
     $1181 = ($1177*7)|0;
     $1182 = (($1181) + ($$smred_p$1))|0;
     $1183 = $1182 >> 3;
     $1184 = (($1180) - ($1183))|0;
     $1185 = $1184 >> 3;
     $1186 = (($1185) + ($1180))|0;
     $1187 = ($1186|0)>(32000);
     $1188 = $1186&65535;
     $1189 = $1187 ? 32000 : $1188;
     HEAP16[$pix$2194>>1] = $1189;
     $1190 = (($pix$2194) + 8|0);
     $1191 = (($col$4192) + 1)|0;
     $1192 = HEAP16[132088>>1]|0;
     $1193 = $1192&65535;
     $1194 = (($1193) + -2)|0;
     $1195 = ($1191|0)<($1194|0);
     if ($1195) {
      $col$4192 = $1191;$pix$2194 = $1190;$smred_p$1193 = $1177;
     } else {
      $smred_p$1$lcssa = $1177;
      break;
     }
    }
   } else {
    $smred_p$1$lcssa = $smred_p$0201;
   }
   $1196 = (($row$8199) + 1)|0;
   $1197 = HEAP16[132080>>1]|0;
   $1198 = $1197&65535;
   $1199 = (($1198) + -2)|0;
   $1200 = ($1196|0)<($1199|0);
   $indvars$iv$next345 = (($indvars$iv344) + 1)|0;
   $indvars$iv$next347 = (($indvars$iv346) + 1)|0;
   if ($1200) {
    $indvars$iv344 = $indvars$iv$next345;$indvars$iv346 = $indvars$iv$next347;$row$8199 = $1196;$smlast$0200 = $smlast$1$lcssa;$smred_p$0201 = $smred_p$1$lcssa;
   } else {
    break;
   }
  }
 }
 $1201 = HEAP32[$satlev>>2]|0;
 $1202 = (+($1201|0));
 $1203 = +HEAPF32[$div>>2];
 $1204 = $1202 / $1203;
 $1205 = (~~(($1204)));
 $1206 = ($1205|0)<(65535);
 $$min$0 = $1206 ? $1205 : 65535;
 $1207 = (($satlev) + 4|0);
 $1208 = HEAP32[$1207>>2]|0;
 $1209 = (+($1208|0));
 $1210 = (($div) + 4|0);
 $1211 = +HEAPF32[$1210>>2];
 $1212 = $1209 / $1211;
 $1213 = (~~(($1212)));
 $1214 = ($$min$0|0)>($1213|0);
 $$min$0$1 = $1214 ? $1213 : $$min$0;
 $1215 = (($satlev) + 8|0);
 $1216 = HEAP32[$1215>>2]|0;
 $1217 = (+($1216|0));
 $1218 = (($div) + 8|0);
 $1219 = +HEAPF32[$1218>>2];
 $1220 = $1217 / $1219;
 $1221 = (~~(($1220)));
 $1222 = ($$min$0$1|0)>($1221|0);
 $$min$0$2 = $1222 ? $1221 : $$min$0$1;
 $1223 = ($$min$0$2*9)|0;
 $1224 = $1223 >> 4;
 $1225 = HEAP32[132112>>2]|0;
 $1226 = HEAP16[132080>>1]|0;
 $1227 = $1226&65535;
 $1228 = HEAP16[132088>>1]|0;
 $1229 = $1228&65535;
 $1230 = Math_imul($1229, $1227)|0;
 $1231 = HEAP32[132112>>2]|0;
 $1232 = (($1231) + ($1230<<3)|0);
 $1233 = ($1225>>>0)<($1232>>>0);
 if ($1233) {
  $1234 = $1224 << 1;
  $1235 = HEAP32[132112>>2]|0;
  $pix$3178 = $1225;
  while(1) {
   $1246 = HEAP16[$pix$3178>>1]|0;
   $1247 = $1246 << 16 >> 16;
   $1248 = ($1247|0)>($1224|0);
   do {
    if ($1248) {
     $1249 = (($pix$3178) + 2|0);
     $1250 = HEAP16[$1249>>1]|0;
     $1251 = $1250 << 16 >> 16;
     $1252 = ($1251|0)>($1224|0);
     if (!($1252)) {
      break;
     }
     $1253 = (($pix$3178) + 4|0);
     $1254 = HEAP16[$1253>>1]|0;
     $1255 = $1254 << 16 >> 16;
     $1256 = ($1255|0)>($1224|0);
     if (!($1256)) {
      break;
     }
     $1257 = (($pix$3178) + 2|0);
     $1258 = HEAP16[$1257>>1]|0;
     $1259 = $1258 << 16 >> 16;
     $1260 = ($1247|0)>($1259|0);
     $$min$2 = $1260 ? $1259 : $1247;
     $1261 = ($1247|0)<($1259|0);
     $max$1 = $1261 ? $1259 : $1247;
     $1262 = (($pix$3178) + 4|0);
     $1263 = HEAP16[$1262>>1]|0;
     $1264 = $1263 << 16 >> 16;
     $1265 = ($$min$2|0)>($1264|0);
     $$min$2$1 = $1265 ? $1264 : $$min$2;
     $1266 = ($max$1|0)<($1264|0);
     $max$1$1 = $1266 ? $1264 : $max$1;
     $1267 = ($$min$2$1|0)<($1234|0);
     if ($1267) {
      $1269 = (($$min$2$1) - ($1224))|0;
      $1270 = $1269 << 14;
      $1271 = (($1270|0) / ($1224|0))&-1;
      $1272 = (16384 - ($1271))|0;
      $1273 = Math_imul($1272, $1272)|0;
      $1274 = $1273 >>> 14;
      $1275 = (16384 - ($1274))|0;
      $1276 = Math_imul($1275, $1275)|0;
      $1277 = $1276 >>> 14;
      $1278 = HEAP16[$pix$3178>>1]|0;
      $1279 = $1278 << 16 >> 16;
      $1280 = (($max$1$1) - ($1279))|0;
      $1281 = Math_imul($1280, $1277)|0;
      $1282 = $1281 >>> 14;
      $1283 = (($1282) + ($1279))|0;
      $1284 = $1283&65535;
      HEAP16[$pix$3178>>1] = $1284;
      $1285 = (($pix$3178) + 2|0);
      $1286 = HEAP16[$1285>>1]|0;
      $1287 = $1286 << 16 >> 16;
      $1288 = (($max$1$1) - ($1287))|0;
      $1289 = Math_imul($1288, $1277)|0;
      $1290 = $1289 >>> 14;
      $1291 = (($1290) + ($1287))|0;
      $1292 = $1291&65535;
      HEAP16[$1285>>1] = $1292;
      $1293 = (($pix$3178) + 4|0);
      $1294 = HEAP16[$1293>>1]|0;
      $1295 = $1294 << 16 >> 16;
      $1296 = (($max$1$1) - ($1295))|0;
      $1297 = Math_imul($1296, $1277)|0;
      $1298 = $1297 >>> 14;
      $1299 = (($1298) + ($1295))|0;
      $1300 = $1299&65535;
      HEAP16[$1293>>1] = $1300;
      break;
     } else {
      $1268 = $max$1$1&65535;
      HEAP16[$1253>>1] = $1268;
      HEAP16[$1249>>1] = $1268;
      HEAP16[$pix$3178>>1] = $1268;
      break;
     }
    }
   } while(0);
   $1301 = (($pix$3178) + 8|0);
   $1302 = HEAP16[132080>>1]|0;
   $1303 = $1302&65535;
   $1304 = HEAP16[132088>>1]|0;
   $1305 = $1304&65535;
   $1306 = Math_imul($1305, $1303)|0;
   $1307 = (($1235) + ($1306<<3)|0);
   $1308 = ($1301>>>0)<($1307>>>0);
   if ($1308) {
    $pix$3178 = $1301;
   } else {
    break;
   }
  }
 }
 $1236 = HEAP16[132080>>1]|0;
 $1237 = $1236&65535;
 $1238 = (($1237) + -2)|0;
 $1239 = ($1238|0)>(2);
 if ($1239) {
  $1240 = HEAP32[$287>>2]|0;
  $1241 = (($smrow) + 4|0);
  $1242 = (($smrow) + 8|0);
  $1243 = (($smrow) + 12|0);
  $1244 = (($dev) + 4|0);
  $1245 = (($smrow) + 16|0);
  $indvars$iv332 = 4;$indvars$iv334 = 3;$row$9172 = 2;$smlast$2173 = -1;
  while(1) {
   $1309 = (($row$9172) + 2)|0;
   $1310 = ($smlast$2173|0)<($1309|0);
   if ($1310) {
    $1311 = HEAP16[132088>>1]|0;
    $1312 = $1311&65535;
    $1313 = HEAP32[132112>>2]|0;
    $1314 = $1311&65535;
    $1315 = (($1314) + -2)|0;
    $1316 = ($1315|0)>(2);
    $1317 = $1311&65535;
    $1318 = (($1317) + -3)|0;
    $smlast$3164 = $smlast$2173;
    while(1) {
     $1326 = HEAP32[$smrow>>2]|0;
     $1327 = (($smrow) + 20|0);
     HEAP32[$1327>>2] = $1326;
     $1328 = (($smrow) + 4|0);
     $1329 = HEAP32[$1328>>2]|0;
     HEAP32[$smrow>>2] = $1329;
     $1330 = (($smrow) + 8|0);
     $1331 = HEAP32[$1330>>2]|0;
     $1332 = (($smrow) + 4|0);
     HEAP32[$1332>>2] = $1331;
     $1333 = (($smrow) + 12|0);
     $1334 = HEAP32[$1333>>2]|0;
     $1335 = (($smrow) + 8|0);
     HEAP32[$1335>>2] = $1334;
     $1336 = (($smrow) + 16|0);
     $1337 = HEAP32[$1336>>2]|0;
     $1338 = (($smrow) + 12|0);
     HEAP32[$1338>>2] = $1337;
     $1339 = (($smrow) + 20|0);
     $1340 = HEAP32[$1339>>2]|0;
     $1341 = (($smrow) + 16|0);
     HEAP32[$1341>>2] = $1340;
     $1342 = (($smlast$3164) + 1)|0;
     if ($1316) {
      $1343 = Math_imul($1312, $1342)|0;
      $1344 = (($1343) + 2)|0;
      $1345 = (($1313) + ($1344<<3)|0);
      $1346 = HEAP32[$1245>>2]|0;
      $col$5162 = 2;$pix$4163 = $1345;
      while(1) {
       $1347 = (($pix$4163) + -8|0);
       $1348 = HEAP16[$1347>>1]|0;
       $1349 = $1348 << 16 >> 16;
       $1350 = HEAP16[$pix$4163>>1]|0;
       $1351 = $1350 << 16 >> 16;
       $1352 = $1351 << 1;
       $1353 = (($pix$4163) + 8|0);
       $1354 = HEAP16[$1353>>1]|0;
       $1355 = $1354 << 16 >> 16;
       $1356 = (($1349) + 2)|0;
       $1357 = (($1356) + ($1352))|0;
       $1358 = (($1357) + ($1355))|0;
       $1359 = $1358 >> 2;
       $1360 = (($1346) + (($col$5162*12)|0)|0);
       HEAP32[$1360>>2] = $1359;
       $1361 = (($pix$4163) + -6|0);
       $1362 = HEAP16[$1361>>1]|0;
       $1363 = $1362 << 16 >> 16;
       $1364 = (($pix$4163) + 2|0);
       $1365 = HEAP16[$1364>>1]|0;
       $1366 = $1365 << 16 >> 16;
       $1367 = $1366 << 1;
       $1368 = (($pix$4163) + 10|0);
       $1369 = HEAP16[$1368>>1]|0;
       $1370 = $1369 << 16 >> 16;
       $1371 = (($1363) + 2)|0;
       $1372 = (($1371) + ($1367))|0;
       $1373 = (($1372) + ($1370))|0;
       $1374 = $1373 >> 2;
       $1375 = ((($1346) + (($col$5162*12)|0)|0) + 4|0);
       HEAP32[$1375>>2] = $1374;
       $1376 = (($pix$4163) + -4|0);
       $1377 = HEAP16[$1376>>1]|0;
       $1378 = $1377 << 16 >> 16;
       $1379 = (($pix$4163) + 4|0);
       $1380 = HEAP16[$1379>>1]|0;
       $1381 = $1380 << 16 >> 16;
       $1382 = $1381 << 1;
       $1383 = (($pix$4163) + 12|0);
       $1384 = HEAP16[$1383>>1]|0;
       $1385 = $1384 << 16 >> 16;
       $1386 = (($1378) + 2)|0;
       $1387 = (($1386) + ($1382))|0;
       $1388 = (($1387) + ($1385))|0;
       $1389 = $1388 >> 2;
       $1390 = ((($1346) + (($col$5162*12)|0)|0) + 8|0);
       HEAP32[$1390>>2] = $1389;
       $1391 = (($pix$4163) + 8|0);
       $1392 = (($col$5162) + 1)|0;
       $exitcond331 = ($col$5162|0)==($1318|0);
       if ($exitcond331) {
        break;
       } else {
        $col$5162 = $1392;$pix$4163 = $1391;
       }
      }
     }
     $exitcond336 = ($smlast$3164|0)==($indvars$iv334|0);
     if ($exitcond336) {
      $smlast$3$lcssa = $indvars$iv332;
      break;
     } else {
      $smlast$3164 = $1342;
     }
    }
   } else {
    $smlast$3$lcssa = $smlast$2173;
   }
   $1393 = HEAP16[132088>>1]|0;
   $1394 = $1393&65535;
   $1395 = (($1394) + -2)|0;
   $1396 = ($1395|0)>(2);
   if ($1396) {
    $1397 = HEAP32[132112>>2]|0;
    $1398 = HEAP16[132088>>1]|0;
    $1399 = $1398&65535;
    $1400 = Math_imul($1399, $row$9172)|0;
    $1401 = (($1400) + 2)|0;
    $1402 = (($1397) + ($1401<<3)|0);
    $col$6169 = 2;$pix$5170 = $1402;
    while(1) {
     $1403 = HEAP32[$1241>>2]|0;
     $1404 = HEAP32[$1242>>2]|0;
     $1405 = HEAP32[$1243>>2]|0;
     $1406 = HEAP16[$pix$5170>>1]|0;
     $1407 = $1406 << 16 >> 16;
     $1408 = (($1403) + (($col$6169*12)|0)|0);
     $1409 = HEAP32[$1408>>2]|0;
     $1410 = (($1404) + (($col$6169*12)|0)|0);
     $1411 = HEAP32[$1410>>2]|0;
     $1412 = $1411 << 1;
     $1413 = (($1412) + ($1409))|0;
     $1414 = (($1405) + (($col$6169*12)|0)|0);
     $1415 = HEAP32[$1414>>2]|0;
     $1416 = (($1413) + ($1415))|0;
     $1417 = $1416 >> 2;
     $1418 = (($1407) - ($1417))|0;
     $1419 = (_foveon_apply_curve($1240,$1418)|0);
     $1420 = (0 - ($1419))|0;
     HEAP32[$dev>>2] = $1420;
     $1421 = (($pix$5170) + 2|0);
     $1422 = HEAP16[$1421>>1]|0;
     $1423 = $1422 << 16 >> 16;
     $1424 = ((($1403) + (($col$6169*12)|0)|0) + 4|0);
     $1425 = HEAP32[$1424>>2]|0;
     $1426 = ((($1404) + (($col$6169*12)|0)|0) + 4|0);
     $1427 = HEAP32[$1426>>2]|0;
     $1428 = $1427 << 1;
     $1429 = (($1428) + ($1425))|0;
     $1430 = ((($1405) + (($col$6169*12)|0)|0) + 4|0);
     $1431 = HEAP32[$1430>>2]|0;
     $1432 = (($1429) + ($1431))|0;
     $1433 = $1432 >> 2;
     $1434 = (($1423) - ($1433))|0;
     $1435 = (_foveon_apply_curve($1240,$1434)|0);
     $1436 = (0 - ($1435))|0;
     $1437 = (($dev) + 4|0);
     HEAP32[$1437>>2] = $1436;
     $1438 = (($pix$5170) + 4|0);
     $1439 = HEAP16[$1438>>1]|0;
     $1440 = $1439 << 16 >> 16;
     $1441 = ((($1403) + (($col$6169*12)|0)|0) + 8|0);
     $1442 = HEAP32[$1441>>2]|0;
     $1443 = ((($1404) + (($col$6169*12)|0)|0) + 8|0);
     $1444 = HEAP32[$1443>>2]|0;
     $1445 = $1444 << 1;
     $1446 = (($1445) + ($1442))|0;
     $1447 = ((($1405) + (($col$6169*12)|0)|0) + 8|0);
     $1448 = HEAP32[$1447>>2]|0;
     $1449 = (($1446) + ($1448))|0;
     $1450 = $1449 >> 2;
     $1451 = (($1440) - ($1450))|0;
     $1452 = (_foveon_apply_curve($1240,$1451)|0);
     $1453 = (0 - ($1452))|0;
     $1454 = (($dev) + 8|0);
     HEAP32[$1454>>2] = $1453;
     $1455 = HEAP32[$dev>>2]|0;
     $1456 = HEAP32[$1244>>2]|0;
     $1457 = (($1456) + ($1455))|0;
     $1458 = (($1457) - ($1452))|0;
     $1459 = $1458 >>> 3;
     $1460 = (($1455) - ($1459))|0;
     $1461 = HEAP16[$pix$5170>>1]|0;
     $1462 = $1461&65535;
     $1463 = (($1460) + ($1462))|0;
     $1464 = $1463&65535;
     HEAP16[$pix$5170>>1] = $1464;
     $1465 = (($dev) + 4|0);
     $1466 = HEAP32[$1465>>2]|0;
     $1467 = (($1466) - ($1459))|0;
     $1468 = (($pix$5170) + 2|0);
     $1469 = HEAP16[$1468>>1]|0;
     $1470 = $1469&65535;
     $1471 = (($1467) + ($1470))|0;
     $1472 = $1471&65535;
     HEAP16[$1468>>1] = $1472;
     $1473 = (($dev) + 8|0);
     $1474 = HEAP32[$1473>>2]|0;
     $1475 = (($1474) - ($1459))|0;
     $1476 = (($pix$5170) + 4|0);
     $1477 = HEAP16[$1476>>1]|0;
     $1478 = $1477&65535;
     $1479 = (($1475) + ($1478))|0;
     $1480 = $1479&65535;
     HEAP16[$1476>>1] = $1480;
     $1481 = (($pix$5170) + 8|0);
     $1482 = (($col$6169) + 1)|0;
     $1483 = HEAP16[132088>>1]|0;
     $1484 = $1483&65535;
     $1485 = (($1484) + -2)|0;
     $1486 = ($1482|0)<($1485|0);
     if ($1486) {
      $col$6169 = $1482;$pix$5170 = $1481;
     } else {
      break;
     }
    }
   }
   $1487 = (($row$9172) + 1)|0;
   $1488 = HEAP16[132080>>1]|0;
   $1489 = $1488&65535;
   $1490 = (($1489) + -2)|0;
   $1491 = ($1487|0)<($1490|0);
   $indvars$iv$next333 = (($indvars$iv332) + 1)|0;
   $indvars$iv$next335 = (($indvars$iv334) + 1)|0;
   if ($1491) {
    $indvars$iv332 = $indvars$iv$next333;$indvars$iv334 = $indvars$iv$next335;$row$9172 = $1487;$smlast$2173 = $smlast$3$lcssa;
   } else {
    break;
   }
  }
 }
 $1319 = HEAP16[132080>>1]|0;
 $1320 = $1319&65535;
 $1321 = (($1320) + -2)|0;
 $1322 = ($1321|0)>(2);
 if ($1322) {
  $1323 = (($total) + 12|0);
  $1324 = HEAP32[$282>>2]|0;
  $1325 = (($smrow) + 16|0);
  $indvars$iv = 4;$indvars$iv323 = 3;$row$10157 = 2;$smlast$4158 = -1;
  while(1) {
   $1492 = (($row$10157) + 2)|0;
   $1493 = ($smlast$4158|0)<($1492|0);
   if ($1493) {
    $1494 = HEAP16[132088>>1]|0;
    $1495 = $1494&65535;
    $1496 = HEAP32[132112>>2]|0;
    $1497 = $1494&65535;
    $1498 = (($1497) + -2)|0;
    $1499 = ($1498|0)>(2);
    $1500 = $1494&65535;
    $1501 = (($1500) + -3)|0;
    $smlast$5144 = $smlast$4158;
    while(1) {
     $1502 = HEAP32[$smrow>>2]|0;
     $1503 = (($smrow) + 20|0);
     HEAP32[$1503>>2] = $1502;
     $1504 = (($smrow) + 4|0);
     $1505 = HEAP32[$1504>>2]|0;
     HEAP32[$smrow>>2] = $1505;
     $1506 = (($smrow) + 8|0);
     $1507 = HEAP32[$1506>>2]|0;
     $1508 = (($smrow) + 4|0);
     HEAP32[$1508>>2] = $1507;
     $1509 = (($smrow) + 12|0);
     $1510 = HEAP32[$1509>>2]|0;
     $1511 = (($smrow) + 8|0);
     HEAP32[$1511>>2] = $1510;
     $1512 = (($smrow) + 16|0);
     $1513 = HEAP32[$1512>>2]|0;
     $1514 = (($smrow) + 12|0);
     HEAP32[$1514>>2] = $1513;
     $1515 = (($smrow) + 20|0);
     $1516 = HEAP32[$1515>>2]|0;
     $1517 = (($smrow) + 16|0);
     HEAP32[$1517>>2] = $1516;
     $1518 = (($smlast$5144) + 1)|0;
     if ($1499) {
      $1519 = Math_imul($1495, $1518)|0;
      $1520 = (($1519) + 2)|0;
      $1521 = (($1496) + ($1520<<3)|0);
      $1522 = HEAP32[$1325>>2]|0;
      $col$7142 = 2;$pix$6143 = $1521;
      while(1) {
       $1523 = (($pix$6143) + -16|0);
       $1524 = HEAP16[$1523>>1]|0;
       $1525 = $1524 << 16 >> 16;
       $1526 = (($pix$6143) + -8|0);
       $1527 = HEAP16[$1526>>1]|0;
       $1528 = $1527 << 16 >> 16;
       $1529 = HEAP16[$pix$6143>>1]|0;
       $1530 = $1529 << 16 >> 16;
       $1531 = (($pix$6143) + 8|0);
       $1532 = HEAP16[$1531>>1]|0;
       $1533 = $1532 << 16 >> 16;
       $1534 = (($pix$6143) + 16|0);
       $1535 = HEAP16[$1534>>1]|0;
       $1536 = $1535 << 16 >> 16;
       $1537 = (($1525) + 2)|0;
       $1538 = (($1537) + ($1528))|0;
       $1539 = (($1538) + ($1530))|0;
       $1540 = (($1539) + ($1533))|0;
       $1541 = (($1540) + ($1536))|0;
       $1542 = $1541 >> 2;
       $1543 = (($1522) + (($col$7142*12)|0)|0);
       HEAP32[$1543>>2] = $1542;
       $1544 = (($pix$6143) + -14|0);
       $1545 = HEAP16[$1544>>1]|0;
       $1546 = $1545 << 16 >> 16;
       $1547 = (($pix$6143) + -6|0);
       $1548 = HEAP16[$1547>>1]|0;
       $1549 = $1548 << 16 >> 16;
       $1550 = (($pix$6143) + 2|0);
       $1551 = HEAP16[$1550>>1]|0;
       $1552 = $1551 << 16 >> 16;
       $1553 = (($pix$6143) + 10|0);
       $1554 = HEAP16[$1553>>1]|0;
       $1555 = $1554 << 16 >> 16;
       $1556 = (($pix$6143) + 18|0);
       $1557 = HEAP16[$1556>>1]|0;
       $1558 = $1557 << 16 >> 16;
       $1559 = (($1546) + 2)|0;
       $1560 = (($1559) + ($1549))|0;
       $1561 = (($1560) + ($1552))|0;
       $1562 = (($1561) + ($1555))|0;
       $1563 = (($1562) + ($1558))|0;
       $1564 = $1563 >> 2;
       $1565 = ((($1522) + (($col$7142*12)|0)|0) + 4|0);
       HEAP32[$1565>>2] = $1564;
       $1566 = (($pix$6143) + -12|0);
       $1567 = HEAP16[$1566>>1]|0;
       $1568 = $1567 << 16 >> 16;
       $1569 = (($pix$6143) + -4|0);
       $1570 = HEAP16[$1569>>1]|0;
       $1571 = $1570 << 16 >> 16;
       $1572 = (($pix$6143) + 4|0);
       $1573 = HEAP16[$1572>>1]|0;
       $1574 = $1573 << 16 >> 16;
       $1575 = (($pix$6143) + 12|0);
       $1576 = HEAP16[$1575>>1]|0;
       $1577 = $1576 << 16 >> 16;
       $1578 = (($pix$6143) + 20|0);
       $1579 = HEAP16[$1578>>1]|0;
       $1580 = $1579 << 16 >> 16;
       $1581 = (($1568) + 2)|0;
       $1582 = (($1581) + ($1571))|0;
       $1583 = (($1582) + ($1574))|0;
       $1584 = (($1583) + ($1577))|0;
       $1585 = (($1584) + ($1580))|0;
       $1586 = $1585 >> 2;
       $1587 = ((($1522) + (($col$7142*12)|0)|0) + 8|0);
       HEAP32[$1587>>2] = $1586;
       $1588 = (($pix$6143) + 8|0);
       $1589 = (($col$7142) + 1)|0;
       $exitcond322 = ($col$7142|0)==($1501|0);
       if ($exitcond322) {
        break;
       } else {
        $col$7142 = $1589;$pix$6143 = $1588;
       }
      }
     }
     $exitcond325 = ($smlast$5144|0)==($indvars$iv323|0);
     if ($exitcond325) {
      $smlast$5$lcssa = $indvars$iv;
      break;
     } else {
      $smlast$5144 = $1518;
     }
    }
   } else {
    $smlast$5$lcssa = $smlast$4158;
   }
   $1590 = HEAP16[132088>>1]|0;
   $1591 = $1590&65535;
   $1592 = (($1591) + -2)|0;
   $1593 = ($1592|0)>(2);
   if ($1593) {
    $1594 = HEAP32[132112>>2]|0;
    $1595 = HEAP16[132088>>1]|0;
    $1596 = $1595&65535;
    $1597 = Math_imul($1596, $row$10157)|0;
    $1598 = (($1597) + 2)|0;
    $1599 = (($1594) + ($1598<<3)|0);
    $col$8152 = 2;$pix$7153 = $1599;
    while(1) {
     HEAP32[$1323>>2] = 375;
     $2307 = HEAP32[$smrow>>2]|0;
     $2308 = (($2307) + (($col$8152*12)|0)|0);
     $2309 = HEAP32[$2308>>2]|0;
     $2310 = (($smrow) + 4|0);
     $2311 = HEAP32[$2310>>2]|0;
     $2312 = (($2311) + (($col$8152*12)|0)|0);
     $2313 = HEAP32[$2312>>2]|0;
     $2314 = (($2309) + ($2313))|0;
     $2315 = (($smrow) + 8|0);
     $2316 = HEAP32[$2315>>2]|0;
     $2317 = (($2316) + (($col$8152*12)|0)|0);
     $2318 = HEAP32[$2317>>2]|0;
     $2319 = (($2314) + ($2318))|0;
     $2320 = (($smrow) + 12|0);
     $2321 = HEAP32[$2320>>2]|0;
     $2322 = (($2321) + (($col$8152*12)|0)|0);
     $2323 = HEAP32[$2322>>2]|0;
     $2324 = (($2319) + ($2323))|0;
     $2325 = (($smrow) + 16|0);
     $2326 = HEAP32[$2325>>2]|0;
     $2327 = (($2326) + (($col$8152*12)|0)|0);
     $2328 = HEAP32[$2327>>2]|0;
     $2329 = (($2324) + ($2328))|0;
     HEAP32[$total>>2] = $2329;
     $2330 = HEAP32[$1323>>2]|0;
     $2331 = (($2330) + ($2329))|0;
     HEAP32[$1323>>2] = $2331;
     $2332 = HEAP16[$pix$7153>>1]|0;
     $2333 = (($total) + 4|0);
     $2334 = HEAP32[$smrow>>2]|0;
     $2335 = ((($2334) + (($col$8152*12)|0)|0) + 4|0);
     $2336 = HEAP32[$2335>>2]|0;
     $2337 = (($smrow) + 4|0);
     $2338 = HEAP32[$2337>>2]|0;
     $2339 = ((($2338) + (($col$8152*12)|0)|0) + 4|0);
     $2340 = HEAP32[$2339>>2]|0;
     $2341 = (($2336) + ($2340))|0;
     $2342 = (($smrow) + 8|0);
     $2343 = HEAP32[$2342>>2]|0;
     $2344 = ((($2343) + (($col$8152*12)|0)|0) + 4|0);
     $2345 = HEAP32[$2344>>2]|0;
     $2346 = (($2341) + ($2345))|0;
     $2347 = (($smrow) + 12|0);
     $2348 = HEAP32[$2347>>2]|0;
     $2349 = ((($2348) + (($col$8152*12)|0)|0) + 4|0);
     $2350 = HEAP32[$2349>>2]|0;
     $2351 = (($2346) + ($2350))|0;
     $2352 = (($smrow) + 16|0);
     $2353 = HEAP32[$2352>>2]|0;
     $2354 = ((($2353) + (($col$8152*12)|0)|0) + 4|0);
     $2355 = HEAP32[$2354>>2]|0;
     $2356 = (($2351) + ($2355))|0;
     HEAP32[$2333>>2] = $2356;
     $2357 = HEAP32[$1323>>2]|0;
     $2358 = (($2357) + ($2356))|0;
     HEAP32[$1323>>2] = $2358;
     $2359 = (($pix$7153) + 2|0);
     $2360 = HEAP16[$2359>>1]|0;
     $2361 = (($total) + 8|0);
     $2362 = $2360 << 16 >> 16;
     $2363 = $2332 << 16 >> 16;
     $2364 = (($2363) + 60)|0;
     $2365 = (($2362) + ($2364))|0;
     $2366 = HEAP32[$smrow>>2]|0;
     $2367 = ((($2366) + (($col$8152*12)|0)|0) + 8|0);
     $2368 = HEAP32[$2367>>2]|0;
     $2369 = (($smrow) + 4|0);
     $2370 = HEAP32[$2369>>2]|0;
     $2371 = ((($2370) + (($col$8152*12)|0)|0) + 8|0);
     $2372 = HEAP32[$2371>>2]|0;
     $2373 = (($2368) + ($2372))|0;
     $2374 = (($smrow) + 8|0);
     $2375 = HEAP32[$2374>>2]|0;
     $2376 = ((($2375) + (($col$8152*12)|0)|0) + 8|0);
     $2377 = HEAP32[$2376>>2]|0;
     $2378 = (($2373) + ($2377))|0;
     $2379 = (($smrow) + 12|0);
     $2380 = HEAP32[$2379>>2]|0;
     $2381 = ((($2380) + (($col$8152*12)|0)|0) + 8|0);
     $2382 = HEAP32[$2381>>2]|0;
     $2383 = (($2378) + ($2382))|0;
     $2384 = (($smrow) + 16|0);
     $2385 = HEAP32[$2384>>2]|0;
     $2386 = ((($2385) + (($col$8152*12)|0)|0) + 8|0);
     $2387 = HEAP32[$2386>>2]|0;
     $2388 = (($2383) + ($2387))|0;
     HEAP32[$2361>>2] = $2388;
     $2389 = HEAP32[$1323>>2]|0;
     $2390 = (($2389) + ($2388))|0;
     HEAP32[$1323>>2] = $2390;
     $2391 = (($pix$7153) + 4|0);
     $2392 = HEAP16[$2391>>1]|0;
     $2393 = $2392 << 16 >> 16;
     $2394 = (($2393) + ($2365))|0;
     $2395 = ($2394|0)<(0);
     $$sum$2 = $2395 ? 0 : $2394;
     $1602 = HEAP32[$1323>>2]|0;
     $2396 = ($1602|0)>(375);
     if ($2396) {
      $1600 = $$sum$2 << 16;
      $1601 = (($1600|0) / ($1602|0))&-1;
      $1606 = $1601;
     } else {
      $1603 = ($$sum$2*174)|0;
      $1606 = $1603;
     }
     $1604 = HEAP32[$total>>2]|0;
     $1605 = Math_imul($1604, $1606)|0;
     $1607 = (($1605) + 32768)|0;
     $1608 = $1607 >> 16;
     $1609 = HEAP16[$pix$7153>>1]|0;
     $1610 = $1609 << 16 >> 16;
     $1611 = (($1608) - ($1610))|0;
     $1612 = (_foveon_apply_curve($1324,$1611)|0);
     $1613 = $1609&65535;
     $1614 = (($1613) + ($1612))|0;
     $1615 = $1614&65535;
     HEAP16[$pix$7153>>1] = $1615;
     $1616 = (($total) + 4|0);
     $1617 = HEAP32[$1616>>2]|0;
     $1618 = Math_imul($1617, $1606)|0;
     $1619 = (($1618) + 32768)|0;
     $1620 = $1619 >> 16;
     $1621 = (($pix$7153) + 2|0);
     $1622 = HEAP16[$1621>>1]|0;
     $1623 = $1622 << 16 >> 16;
     $1624 = (($1620) - ($1623))|0;
     $1625 = (_foveon_apply_curve($1324,$1624)|0);
     $1626 = $1622&65535;
     $1627 = (($1626) + ($1625))|0;
     $1628 = $1627&65535;
     HEAP16[$1621>>1] = $1628;
     $1629 = (($total) + 8|0);
     $1630 = HEAP32[$1629>>2]|0;
     $1631 = Math_imul($1630, $1606)|0;
     $1632 = (($1631) + 32768)|0;
     $1633 = $1632 >> 16;
     $1634 = (($pix$7153) + 4|0);
     $1635 = HEAP16[$1634>>1]|0;
     $1636 = $1635 << 16 >> 16;
     $1637 = (($1633) - ($1636))|0;
     $1638 = (_foveon_apply_curve($1324,$1637)|0);
     $1639 = $1635&65535;
     $1640 = (($1639) + ($1638))|0;
     $1641 = $1640&65535;
     HEAP16[$1634>>1] = $1641;
     $1642 = (($pix$7153) + 8|0);
     $1643 = (($col$8152) + 1)|0;
     $1644 = HEAP16[132088>>1]|0;
     $1645 = $1644&65535;
     $1646 = (($1645) + -2)|0;
     $1647 = ($1643|0)<($1646|0);
     if ($1647) {
      $col$8152 = $1643;$pix$7153 = $1642;
     } else {
      break;
     }
    }
   }
   $1648 = (($row$10157) + 1)|0;
   $1649 = HEAP16[132080>>1]|0;
   $1650 = $1649&65535;
   $1651 = (($1650) + -2)|0;
   $1652 = ($1648|0)<($1651|0);
   $indvars$iv$next = (($indvars$iv) + 1)|0;
   $indvars$iv$next324 = (($indvars$iv323) + 1)|0;
   if ($1652) {
    $indvars$iv = $indvars$iv$next;$indvars$iv323 = $indvars$iv$next324;$row$10157 = $1648;$smlast$4158 = $smlast$5$lcssa;
   } else {
    break;
   }
  }
 }
 $1653 = HEAP32[132112>>2]|0;
 $1654 = HEAP16[132080>>1]|0;
 $1655 = $1654&65535;
 $1656 = HEAP16[132088>>1]|0;
 $1657 = $1656&65535;
 $1658 = Math_imul($1657, $1655)|0;
 $1659 = HEAP32[132112>>2]|0;
 $1660 = (($1659) + ($1658<<3)|0);
 $1661 = ($1653>>>0)<($1660>>>0);
 if ($1661) {
  $pix$8136 = $1653;
  while(1) {
   $1662 = HEAP32[$curve>>2]|0;
   $1663 = HEAP16[$pix$8136>>1]|0;
   $1664 = $1663 << 16 >> 16;
   $1665 = (_foveon_apply_curve($1662,$1664)|0);
   $1666 = $1663&65535;
   $1667 = (($1666) - ($1665))|0;
   $1668 = $1667&65535;
   HEAP16[$pix$8136>>1] = $1668;
   $1669 = (($curve) + 4|0);
   $1670 = HEAP32[$1669>>2]|0;
   $1671 = (($pix$8136) + 2|0);
   $1672 = HEAP16[$1671>>1]|0;
   $1673 = $1672 << 16 >> 16;
   $1674 = (_foveon_apply_curve($1670,$1673)|0);
   $1675 = $1672&65535;
   $1676 = (($1675) - ($1674))|0;
   $1677 = $1676&65535;
   HEAP16[$1671>>1] = $1677;
   $1678 = (($curve) + 8|0);
   $1679 = HEAP32[$1678>>2]|0;
   $1680 = (($pix$8136) + 4|0);
   $1681 = HEAP16[$1680>>1]|0;
   $1682 = $1681 << 16 >> 16;
   $1683 = (_foveon_apply_curve($1679,$1682)|0);
   $1684 = $1681&65535;
   $1685 = (($1684) - ($1683))|0;
   $1686 = $1685&65535;
   HEAP16[$1680>>1] = $1686;
   $1687 = HEAP16[$pix$8136>>1]|0;
   $1688 = $1687 << 16 >> 16;
   $1689 = (($pix$8136) + 2|0);
   $1690 = HEAP16[$1689>>1]|0;
   $1691 = $1690 << 16 >> 16;
   $1692 = (($pix$8136) + 4|0);
   $1693 = HEAP16[$1692>>1]|0;
   $1694 = $1693 << 16 >> 16;
   $factor = $1691 << 1;
   $1695 = (($1694) + ($1688))|0;
   $1696 = (($1695) + ($factor))|0;
   $1697 = $1696 >> 2;
   $1698 = HEAP32[$curve>>2]|0;
   $1699 = HEAP16[$pix$8136>>1]|0;
   $1700 = $1699 << 16 >> 16;
   $1701 = (($1700) - ($1697))|0;
   $1702 = (_foveon_apply_curve($1698,$1701)|0);
   $1703 = $1699&65535;
   $1704 = (($1703) - ($1702))|0;
   $1705 = $1704&65535;
   HEAP16[$pix$8136>>1] = $1705;
   $1706 = (($curve) + 4|0);
   $1707 = HEAP32[$1706>>2]|0;
   $1708 = (($pix$8136) + 2|0);
   $1709 = HEAP16[$1708>>1]|0;
   $1710 = $1709 << 16 >> 16;
   $1711 = (($1710) - ($1697))|0;
   $1712 = (_foveon_apply_curve($1707,$1711)|0);
   $1713 = $1709&65535;
   $1714 = (($1713) - ($1712))|0;
   $1715 = $1714&65535;
   HEAP16[$1708>>1] = $1715;
   $1716 = (($curve) + 8|0);
   $1717 = HEAP32[$1716>>2]|0;
   $1718 = (($pix$8136) + 4|0);
   $1719 = HEAP16[$1718>>1]|0;
   $1720 = $1719 << 16 >> 16;
   $1721 = (($1720) - ($1697))|0;
   $1722 = (_foveon_apply_curve($1717,$1721)|0);
   $1723 = $1719&65535;
   $1724 = (($1723) - ($1722))|0;
   $1725 = $1724&65535;
   HEAP16[$1718>>1] = $1725;
   $1726 = +HEAPF32[$trans>>2];
   $1727 = HEAP16[$pix$8136>>1]|0;
   $1728 = (+($1727<<16>>16));
   $1729 = $1726 * $1728;
   $1730 = $1729;
   $1731 = $1730 + 0.0;
   $1732 = (($trans) + 4|0);
   $1733 = +HEAPF32[$1732>>2];
   $1734 = (($pix$8136) + 2|0);
   $1735 = HEAP16[$1734>>1]|0;
   $1736 = (+($1735<<16>>16));
   $1737 = $1733 * $1736;
   $1738 = $1737;
   $1739 = $1731 + $1738;
   $1740 = (($trans) + 8|0);
   $1741 = +HEAPF32[$1740>>2];
   $1742 = (($pix$8136) + 4|0);
   $1743 = HEAP16[$1742>>1]|0;
   $1744 = (+($1743<<16>>16));
   $1745 = $1741 * $1744;
   $1746 = $1745;
   $1747 = $1739 + $1746;
   $1748 = $1747 < 0.0;
   $dsum$2 = $1748 ? 0.0 : $1747;
   $1749 = $dsum$2 > 24000.0;
   $dsum$2$op = $dsum$2 + 0.5;
   $1750 = (~~(($dsum$2$op)));
   $1751 = $1749 ? 24000 : $1750;
   HEAP32[$ipix>>2] = $1751;
   $1752 = (($trans) + 12|0);
   $1753 = +HEAPF32[$1752>>2];
   $1754 = HEAP16[$pix$8136>>1]|0;
   $1755 = (+($1754<<16>>16));
   $1756 = $1753 * $1755;
   $1757 = $1756;
   $1758 = $1757 + 0.0;
   $1759 = (($trans) + 16|0);
   $1760 = +HEAPF32[$1759>>2];
   $1761 = (($pix$8136) + 2|0);
   $1762 = HEAP16[$1761>>1]|0;
   $1763 = (+($1762<<16>>16));
   $1764 = $1760 * $1763;
   $1765 = $1764;
   $1766 = $1758 + $1765;
   $1767 = (($trans) + 20|0);
   $1768 = +HEAPF32[$1767>>2];
   $1769 = (($pix$8136) + 4|0);
   $1770 = HEAP16[$1769>>1]|0;
   $1771 = (+($1770<<16>>16));
   $1772 = $1768 * $1771;
   $1773 = $1772;
   $1774 = $1766 + $1773;
   $1775 = $1774 < 0.0;
   $dsum$2$1 = $1775 ? 0.0 : $1774;
   $1776 = $dsum$2$1 > 24000.0;
   $dsum$2$op$1 = $dsum$2$1 + 0.5;
   $1777 = (~~(($dsum$2$op$1)));
   $1778 = $1776 ? 24000 : $1777;
   $1779 = (($ipix) + 4|0);
   HEAP32[$1779>>2] = $1778;
   $1780 = (($trans) + 24|0);
   $1781 = +HEAPF32[$1780>>2];
   $1782 = HEAP16[$pix$8136>>1]|0;
   $1783 = (+($1782<<16>>16));
   $1784 = $1781 * $1783;
   $1785 = $1784;
   $1786 = $1785 + 0.0;
   $1787 = (($trans) + 28|0);
   $1788 = +HEAPF32[$1787>>2];
   $1789 = (($pix$8136) + 2|0);
   $1790 = HEAP16[$1789>>1]|0;
   $1791 = (+($1790<<16>>16));
   $1792 = $1788 * $1791;
   $1793 = $1792;
   $1794 = $1786 + $1793;
   $1795 = (($trans) + 32|0);
   $1796 = +HEAPF32[$1795>>2];
   $1797 = (($pix$8136) + 4|0);
   $1798 = HEAP16[$1797>>1]|0;
   $1799 = (+($1798<<16>>16));
   $1800 = $1796 * $1799;
   $1801 = $1800;
   $1802 = $1794 + $1801;
   $1803 = $1802 < 0.0;
   $dsum$2$2 = $1803 ? 0.0 : $1802;
   $1804 = $dsum$2$2 > 24000.0;
   $dsum$2$op$2 = $dsum$2$2 + 0.5;
   $1805 = (~~(($dsum$2$op$2)));
   $1806 = $1804 ? 24000 : $1805;
   $1807 = (($ipix) + 8|0);
   HEAP32[$1807>>2] = $1806;
   $1808 = HEAP32[$ipix>>2]|0;
   $1809 = $1808&65535;
   HEAP16[$pix$8136>>1] = $1809;
   $1810 = (($ipix) + 4|0);
   $1811 = HEAP32[$1810>>2]|0;
   $1812 = $1811&65535;
   $1813 = (($pix$8136) + 2|0);
   HEAP16[$1813>>1] = $1812;
   $1814 = (($ipix) + 8|0);
   $1815 = HEAP32[$1814>>2]|0;
   $1816 = $1815&65535;
   $1817 = (($pix$8136) + 4|0);
   HEAP16[$1817>>1] = $1816;
   $1818 = (($pix$8136) + 8|0);
   $1819 = HEAP16[132080>>1]|0;
   $1820 = $1819&65535;
   $1821 = HEAP16[132088>>1]|0;
   $1822 = $1821&65535;
   $1823 = Math_imul($1822, $1820)|0;
   $1824 = HEAP32[132112>>2]|0;
   $1825 = (($1824) + ($1823<<3)|0);
   $1826 = ($1818>>>0)<($1825>>>0);
   if ($1826) {
    $pix$8136 = $1818;
   } else {
    $$lcssa96 = $1819;$$lcssa97 = $1821;
    break;
   }
  }
 } else {
  $$lcssa96 = $1654;$$lcssa97 = $1656;
 }
 $div3 = ($$lcssa96&65535) >>> 2;
 $1827 = $div3&65535;
 $div4 = ($$lcssa97&65535) >>> 2;
 $1828 = $div4&65535;
 $1829 = ($1828*6)|0;
 $1830 = (_calloc($1827,$1829)|0);
 _merror($1830,189928);
 $1831 = HEAP16[132080>>1]|0;
 $div5 = ($1831&65535) >>> 2;
 $1832 = ($div5<<16>>16)==(0);
 if ($1832) {
  $1842 = $1831;
 } else {
  $1833 = $div5&65535;
  $1834 = (($ipix) + 8|0);
  $1835 = (($ipix) + 4|0);
  $1836 = HEAP32[132112>>2]|0;
  $$in284 = $1833;
  while(1) {
   $1837 = (($$in284) + -1)|0;
   $1839 = HEAP16[132088>>1]|0;
   $1840 = ($1839&65535)>(3);
   if ($1840) {
    $1841 = $1837 << 2;
    $col$9127 = 0;
    while(1) {
     HEAP32[$1834>>2] = 0;
     HEAP32[$1835>>2] = 0;
     HEAP32[$ipix>>2] = 0;
     $1853 = HEAP16[132088>>1]|0;
     $1854 = $1853&65535;
     $1855 = $col$9127 << 2;
     $1856 = $1855 | 3;
     $i$17124 = 0;
     while(1) {
      $2177 = (($i$17124) + ($1841))|0;
      $2178 = Math_imul($1854, $2177)|0;
      $2179 = (($1855) + ($2178))|0;
      $2180 = (($1836) + ($2179<<3)|0);
      $2181 = HEAP16[$2180>>1]|0;
      $2182 = $2181 << 16 >> 16;
      $2183 = HEAP32[$ipix>>2]|0;
      $2184 = (($2183) + ($2182))|0;
      HEAP32[$ipix>>2] = $2184;
      $2185 = ((($1836) + ($2179<<3)|0) + 2|0);
      $2186 = HEAP16[$2185>>1]|0;
      $2187 = $2186 << 16 >> 16;
      $2188 = (($ipix) + 4|0);
      $2189 = HEAP32[$2188>>2]|0;
      $2190 = (($2189) + ($2187))|0;
      HEAP32[$2188>>2] = $2190;
      $2191 = ((($1836) + ($2179<<3)|0) + 4|0);
      $2192 = HEAP16[$2191>>1]|0;
      $2193 = $2192 << 16 >> 16;
      $2194 = (($ipix) + 8|0);
      $2195 = HEAP32[$2194>>2]|0;
      $2196 = (($2195) + ($2193))|0;
      HEAP32[$2194>>2] = $2196;
      $2197 = $1855 | 1;
      $2198 = (($2197) + ($2178))|0;
      $2199 = (($1836) + ($2198<<3)|0);
      $2200 = HEAP16[$2199>>1]|0;
      $2201 = $2200 << 16 >> 16;
      $2202 = HEAP32[$ipix>>2]|0;
      $2203 = (($2202) + ($2201))|0;
      HEAP32[$ipix>>2] = $2203;
      $2204 = ((($1836) + ($2198<<3)|0) + 2|0);
      $2205 = HEAP16[$2204>>1]|0;
      $2206 = $2205 << 16 >> 16;
      $2207 = (($ipix) + 4|0);
      $2208 = HEAP32[$2207>>2]|0;
      $2209 = (($2208) + ($2206))|0;
      HEAP32[$2207>>2] = $2209;
      $2210 = ((($1836) + ($2198<<3)|0) + 4|0);
      $2211 = HEAP16[$2210>>1]|0;
      $2212 = $2211 << 16 >> 16;
      $2213 = (($ipix) + 8|0);
      $2214 = HEAP32[$2213>>2]|0;
      $2215 = (($2214) + ($2212))|0;
      HEAP32[$2213>>2] = $2215;
      $2216 = $1855 | 2;
      $2217 = (($2216) + ($2178))|0;
      $2218 = (($1836) + ($2217<<3)|0);
      $2219 = HEAP16[$2218>>1]|0;
      $2220 = $2219 << 16 >> 16;
      $2221 = HEAP32[$ipix>>2]|0;
      $2222 = (($2221) + ($2220))|0;
      HEAP32[$ipix>>2] = $2222;
      $2223 = ((($1836) + ($2217<<3)|0) + 2|0);
      $2224 = HEAP16[$2223>>1]|0;
      $2225 = $2224 << 16 >> 16;
      $2226 = (($ipix) + 4|0);
      $2227 = HEAP32[$2226>>2]|0;
      $2228 = (($2227) + ($2225))|0;
      HEAP32[$2226>>2] = $2228;
      $2229 = ((($1836) + ($2217<<3)|0) + 4|0);
      $2230 = HEAP16[$2229>>1]|0;
      $2231 = $2230 << 16 >> 16;
      $2232 = (($ipix) + 8|0);
      $2233 = HEAP32[$2232>>2]|0;
      $2234 = (($2233) + ($2231))|0;
      HEAP32[$2232>>2] = $2234;
      $2235 = (($1856) + ($2178))|0;
      $2236 = (($1836) + ($2235<<3)|0);
      $2237 = HEAP16[$2236>>1]|0;
      $2238 = $2237 << 16 >> 16;
      $2239 = HEAP32[$ipix>>2]|0;
      $2240 = (($2239) + ($2238))|0;
      HEAP32[$ipix>>2] = $2240;
      $2241 = ((($1836) + ($2235<<3)|0) + 2|0);
      $2242 = HEAP16[$2241>>1]|0;
      $2243 = $2242 << 16 >> 16;
      $2244 = (($ipix) + 4|0);
      $2245 = HEAP32[$2244>>2]|0;
      $2246 = (($2245) + ($2243))|0;
      HEAP32[$2244>>2] = $2246;
      $2247 = ((($1836) + ($2235<<3)|0) + 4|0);
      $2248 = HEAP16[$2247>>1]|0;
      $2249 = $2248 << 16 >> 16;
      $2250 = (($ipix) + 8|0);
      $2251 = HEAP32[$2250>>2]|0;
      $2252 = (($2251) + ($2249))|0;
      HEAP32[$2250>>2] = $2252;
      $2253 = (($i$17124) + 1)|0;
      $exitcond313 = ($2253|0)==(4);
      if ($exitcond313) {
       break;
      } else {
       $i$17124 = $2253;
      }
     }
     $1857 = HEAP16[132080>>1]|0;
     $div8 = ($1857&65535) >>> 2;
     $1858 = $div8&65535;
     $1859 = ($$in284|0)<($1858|0);
     $1860 = HEAP16[132088>>1]|0;
     $div9 = ($1860&65535) >>> 2;
     $1861 = $div9&65535;
     $1862 = Math_imul($1861, $$in284)|0;
     $1863 = (($1862) + ($col$9127))|0;
     $1864 = Math_imul($1861, $1837)|0;
     $1865 = (($1864) + ($col$9127))|0;
     $1866 = HEAP16[132088>>1]|0;
     $div10 = ($1866&65535) >>> 2;
     $1867 = $div10&65535;
     $1868 = Math_imul($1867, $1837)|0;
     $1869 = (($1868) + ($col$9127))|0;
     if ($1859) {
      $2254 = (($1830) + (($1863*6)|0)|0);
      $2255 = HEAP16[$2254>>1]|0;
      $2256 = $2255 << 16 >> 16;
      $2257 = ($2256*1840)|0;
      $2258 = HEAP32[$ipix>>2]|0;
      $2259 = ($2258*141)|0;
      $2260 = (($2259) + 2048)|0;
      $2261 = (($2260) + ($2257))|0;
      $2262 = $2261 >>> 12;
      $2263 = $2262&65535;
      $2264 = (($1830) + (($1865*6)|0)|0);
      HEAP16[$2264>>1] = $2263;
      $2265 = ((($1830) + (($1863*6)|0)|0) + 2|0);
      $2266 = HEAP16[$2265>>1]|0;
      $2267 = $2266 << 16 >> 16;
      $2268 = ($2267*1840)|0;
      $2269 = (($ipix) + 4|0);
      $2270 = HEAP32[$2269>>2]|0;
      $2271 = ($2270*141)|0;
      $2272 = (($2271) + 2048)|0;
      $2273 = (($2272) + ($2268))|0;
      $2274 = $2273 >>> 12;
      $2275 = $2274&65535;
      $2276 = ((($1830) + (($1865*6)|0)|0) + 2|0);
      HEAP16[$2276>>1] = $2275;
      $2277 = ((($1830) + (($1863*6)|0)|0) + 4|0);
      $2278 = HEAP16[$2277>>1]|0;
      $2279 = $2278 << 16 >> 16;
      $2280 = ($2279*1840)|0;
      $2281 = (($ipix) + 8|0);
      $2282 = HEAP32[$2281>>2]|0;
      $2283 = ($2282*141)|0;
      $2284 = (($2283) + 2048)|0;
      $2285 = (($2284) + ($2280))|0;
      $2286 = $2285 >>> 12;
      $2287 = $2286&65535;
      $2288 = ((($1830) + (($1865*6)|0)|0) + 4|0);
      HEAP16[$2288>>1] = $2287;
     } else {
      $2289 = HEAP32[$ipix>>2]|0;
      $2290 = $2289 >>> 4;
      $2291 = $2290&65535;
      $2292 = (($1830) + (($1869*6)|0)|0);
      HEAP16[$2292>>1] = $2291;
      $2293 = (($ipix) + 4|0);
      $2294 = HEAP32[$2293>>2]|0;
      $2295 = $2294 >>> 4;
      $2296 = $2295&65535;
      $2297 = ((($1830) + (($1869*6)|0)|0) + 2|0);
      HEAP16[$2297>>1] = $2296;
      $2298 = (($ipix) + 8|0);
      $2299 = HEAP32[$2298>>2]|0;
      $2300 = $2299 >>> 4;
      $2301 = $2300&65535;
      $2302 = ((($1830) + (($1869*6)|0)|0) + 4|0);
      HEAP16[$2302>>1] = $2301;
     }
     $2303 = (($col$9127) + 1)|0;
     $2304 = HEAP16[132088>>1]|0;
     $div7 = ($2304&65535) >>> 2;
     $2305 = $div7&65535;
     $2306 = ($2303|0)<($2305|0);
     if ($2306) {
      $col$9127 = $2303;
     } else {
      break;
     }
    }
   }
   $1838 = ($1837|0)==(0);
   if ($1838) {
    break;
   } else {
    $$in284 = $1837;
   }
  }
  $$pr427 = HEAP16[132080>>1]|0;
  $1842 = $$pr427;
 }
 $1843 = ($1842&65535)>(3);
 if ($1843) {
  $1844 = (($ipix) + 8|0);
  $1845 = (($ipix) + 4|0);
  $1846 = (($smrow) + 8|0);
  $1847 = (($smrow) + 4|0);
  $1848 = (($smrow) + 8|0);
  $1849 = (($smrow) + 8|0);
  $1850 = (($smrow) + 8|0);
  $1851 = (($smrow) + 4|0);
  $1852 = (($smrow) + 4|0);
  $row$12118 = 0;
  while(1) {
   HEAP32[$1844>>2] = 0;
   HEAP32[$1845>>2] = 0;
   HEAP32[$ipix>>2] = 0;
   $1870 = $row$12118 & 3;
   $1871 = ($1870|0)==(0);
   do {
    if ($1871) {
     $1872 = HEAP16[132088>>1]|0;
     $1873 = $1872&65535;
     $1874 = $1873 & 65532;
     $1875 = ($1874|0)==(0);
     if ($1875) {
      break;
     }
     $1876 = (($row$12118|0) / 4)&-1;
     $1877 = HEAP16[132088>>1]|0;
     $div6 = ($1877&65535) >>> 2;
     $1878 = $div6&65535;
     $1879 = Math_imul($1878, $1876)|0;
     $1880 = HEAP32[$smrow>>2]|0;
     $$in285 = $1874;
     while(1) {
      $1881 = (($$in285) + -1)|0;
      $1882 = (($1881|0) / 4)&-1;
      $1883 = (($1879) + ($1882))|0;
      $1884 = (($1830) + (($1883*6)|0)|0);
      $1885 = HEAP16[$1884>>1]|0;
      $1886 = $1885 << 16 >> 16;
      $1887 = ($1886*1485)|0;
      $1888 = HEAP32[$ipix>>2]|0;
      $1889 = ($1888*6707)|0;
      $1890 = (($1889) + 4096)|0;
      $1891 = (($1890) + ($1887))|0;
      $1892 = $1891 >> 13;
      HEAP32[$ipix>>2] = $1892;
      $1893 = (($1880) + (($1881*12)|0)|0);
      HEAP32[$1893>>2] = $1892;
      $1894 = ((($1830) + (($1883*6)|0)|0) + 2|0);
      $1895 = HEAP16[$1894>>1]|0;
      $1896 = $1895 << 16 >> 16;
      $1897 = ($1896*1485)|0;
      $1898 = (($ipix) + 4|0);
      $1899 = HEAP32[$1898>>2]|0;
      $1900 = ($1899*6707)|0;
      $1901 = (($1900) + 4096)|0;
      $1902 = (($1901) + ($1897))|0;
      $1903 = $1902 >> 13;
      HEAP32[$1898>>2] = $1903;
      $1904 = ((($1880) + (($1881*12)|0)|0) + 4|0);
      HEAP32[$1904>>2] = $1903;
      $1905 = ((($1830) + (($1883*6)|0)|0) + 4|0);
      $1906 = HEAP16[$1905>>1]|0;
      $1907 = $1906 << 16 >> 16;
      $1908 = ($1907*1485)|0;
      $1909 = (($ipix) + 8|0);
      $1910 = HEAP32[$1909>>2]|0;
      $1911 = ($1910*6707)|0;
      $1912 = (($1911) + 4096)|0;
      $1913 = (($1912) + ($1908))|0;
      $1914 = $1913 >> 13;
      HEAP32[$1909>>2] = $1914;
      $1915 = ((($1880) + (($1881*12)|0)|0) + 8|0);
      HEAP32[$1915>>2] = $1914;
      $1916 = ($1881|0)==(0);
      if ($1916) {
       break;
      } else {
       $$in285 = $1881;
      }
     }
    }
   } while(0);
   HEAP32[$1844>>2] = 0;
   HEAP32[$1845>>2] = 0;
   HEAP32[$ipix>>2] = 0;
   $1917 = HEAP16[132088>>1]|0;
   $1918 = $1917&65535;
   $1919 = $1918 & 65532;
   $1920 = ($1919|0)==(0);
   if ($1920) {
    $$lcssa = $1918;
   } else {
    $1921 = HEAP32[$smrow>>2]|0;
    $1922 = HEAP32[$1852>>2]|0;
    $1923 = HEAP16[132088>>1]|0;
    $1924 = $1923&65535;
    $1925 = $1924 & 65532;
    $col$11105 = 0;
    while(1) {
     $1926 = (($1921) + (($col$11105*12)|0)|0);
     $1927 = HEAP32[$1926>>2]|0;
     $1928 = ($1927*1485)|0;
     $1929 = HEAP32[$ipix>>2]|0;
     $1930 = ($1929*6707)|0;
     $1931 = (($1928) + 4096)|0;
     $1932 = (($1931) + ($1930))|0;
     $1933 = $1932 >> 13;
     HEAP32[$ipix>>2] = $1933;
     $1934 = (($1922) + (($col$11105*12)|0)|0);
     HEAP32[$1934>>2] = $1933;
     $1935 = ((($1921) + (($col$11105*12)|0)|0) + 4|0);
     $1936 = HEAP32[$1935>>2]|0;
     $1937 = ($1936*1485)|0;
     $1938 = (($ipix) + 4|0);
     $1939 = HEAP32[$1938>>2]|0;
     $1940 = ($1939*6707)|0;
     $1941 = (($1937) + 4096)|0;
     $1942 = (($1941) + ($1940))|0;
     $1943 = $1942 >> 13;
     HEAP32[$1938>>2] = $1943;
     $1944 = ((($1922) + (($col$11105*12)|0)|0) + 4|0);
     HEAP32[$1944>>2] = $1943;
     $1945 = ((($1921) + (($col$11105*12)|0)|0) + 8|0);
     $1946 = HEAP32[$1945>>2]|0;
     $1947 = ($1946*1485)|0;
     $1948 = (($ipix) + 8|0);
     $1949 = HEAP32[$1948>>2]|0;
     $1950 = ($1949*6707)|0;
     $1951 = (($1947) + 4096)|0;
     $1952 = (($1951) + ($1950))|0;
     $1953 = $1952 >> 13;
     HEAP32[$1948>>2] = $1953;
     $1954 = ((($1922) + (($col$11105*12)|0)|0) + 8|0);
     HEAP32[$1954>>2] = $1953;
     $1955 = (($col$11105) + 1)|0;
     $1956 = ($1955|0)<($1925|0);
     if ($1956) {
      $col$11105 = $1955;
     } else {
      $$lcssa = $1924;
      break;
     }
    }
   }
   $1957 = ($row$12118|0)==(0);
   do {
    if ($1957) {
     $1965 = HEAP32[$1846>>2]|0;
     $1966 = HEAP32[$1847>>2]|0;
     $1967 = ($$lcssa*12)|0;
     _memcpy(($1965|0),($1966|0),($1967|0))|0;
     label = 142;
    } else {
     $1958 = HEAP16[132088>>1]|0;
     $1959 = ($1958&65535)>(3);
     if (!($1959)) {
      break;
     }
     $1960 = HEAP32[$1850>>2]|0;
     $1961 = HEAP32[$1851>>2]|0;
     $1962 = HEAP16[132088>>1]|0;
     $1963 = $1962&65535;
     $1964 = $1963 & 65532;
     $col$12109 = 0;
     while(1) {
      $1969 = (($1960) + (($col$12109*12)|0)|0);
      $1970 = HEAP32[$1969>>2]|0;
      $1971 = ($1970*6707)|0;
      $1972 = (($1961) + (($col$12109*12)|0)|0);
      $1973 = HEAP32[$1972>>2]|0;
      $1974 = ($1973*1485)|0;
      $1975 = (($1971) + 4096)|0;
      $1976 = (($1975) + ($1974))|0;
      $1977 = $1976 >> 13;
      HEAP32[$1969>>2] = $1977;
      $1978 = ((($1960) + (($col$12109*12)|0)|0) + 4|0);
      $1979 = HEAP32[$1978>>2]|0;
      $1980 = ($1979*6707)|0;
      $1981 = ((($1961) + (($col$12109*12)|0)|0) + 4|0);
      $1982 = HEAP32[$1981>>2]|0;
      $1983 = ($1982*1485)|0;
      $1984 = (($1980) + 4096)|0;
      $1985 = (($1984) + ($1983))|0;
      $1986 = $1985 >> 13;
      HEAP32[$1978>>2] = $1986;
      $1987 = ((($1960) + (($col$12109*12)|0)|0) + 8|0);
      $1988 = HEAP32[$1987>>2]|0;
      $1989 = ($1988*6707)|0;
      $1990 = ((($1961) + (($col$12109*12)|0)|0) + 8|0);
      $1991 = HEAP32[$1990>>2]|0;
      $1992 = ($1991*1485)|0;
      $1993 = (($1989) + 4096)|0;
      $1994 = (($1993) + ($1992))|0;
      $1995 = $1994 >> 13;
      HEAP32[$1987>>2] = $1995;
      $1996 = (($col$12109) + 1)|0;
      $1997 = ($1996|0)<($1964|0);
      if ($1997) {
       $col$12109 = $1996;
      } else {
       label = 142;
       break;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 142) {
     label = 0;
     $$pr429 = HEAP16[132088>>1]|0;
     $1968 = ($$pr429&65535)>(3);
     if ($1968) {
      $col$13116 = 0;
     } else {
      break;
     }
     while(1) {
      $1998 = HEAP32[$1848>>2]|0;
      $1999 = HEAP16[132088>>1]|0;
      $2000 = $1999&65535;
      $2001 = Math_imul($2000, $row$12118)|0;
      $2002 = (($2001) + ($col$13116))|0;
      $2003 = HEAP32[132112>>2]|0;
      $2004 = (($1998) + (($col$13116*12)|0)|0);
      $2005 = HEAP32[$2004>>2]|0;
      $2006 = (($2005) + 30)|0;
      $2007 = (($2003) + ($2002<<3)|0);
      $2008 = HEAP16[$2007>>1]|0;
      $2009 = $2008&65535;
      $2010 = (($2009) + 30)|0;
      $2011 = ((($1998) + (($col$13116*12)|0)|0) + 4|0);
      $2012 = HEAP32[$2011>>2]|0;
      $2013 = (($2012) + ($2006))|0;
      $2014 = ((($2003) + ($2002<<3)|0) + 2|0);
      $2015 = HEAP16[$2014>>1]|0;
      $2016 = $2015&65535;
      $2017 = (($2016) + ($2010))|0;
      $2018 = ((($1998) + (($col$13116*12)|0)|0) + 8|0);
      $2019 = HEAP32[$2018>>2]|0;
      $2020 = (($2019) + ($2013))|0;
      $2021 = ((($2003) + ($2002<<3)|0) + 4|0);
      $2022 = HEAP16[$2021>>1]|0;
      $2023 = $2022&65535;
      $2024 = (($2023) + ($2017))|0;
      $2025 = $2024 << 16;
      $2026 = (($2025|0) / ($2020|0))&-1;
      $2027 = HEAP32[$1849>>2]|0;
      $2028 = HEAP16[132088>>1]|0;
      $2029 = $2028&65535;
      $2030 = Math_imul($2029, $row$12118)|0;
      $2031 = (($2030) + ($col$13116))|0;
      $2032 = HEAP32[132112>>2]|0;
      $2033 = (($curve) + 12|0);
      $2034 = HEAP32[$2033>>2]|0;
      $2035 = (($2027) + (($col$13116*12)|0)|0);
      $2036 = HEAP32[$2035>>2]|0;
      $2037 = Math_imul($2036, $2026)|0;
      $2038 = (($2037) + 32768)|0;
      $2039 = $2038 >> 16;
      $2040 = (($2032) + ($2031<<3)|0);
      $2041 = HEAP16[$2040>>1]|0;
      $2042 = $2041 << 16 >> 16;
      $2043 = (($2039) - ($2042))|0;
      $2044 = (_foveon_apply_curve($2034,$2043)|0);
      HEAP32[$ipix>>2] = $2044;
      $2045 = (($curve) + 16|0);
      $2046 = HEAP32[$2045>>2]|0;
      $2047 = ((($2027) + (($col$13116*12)|0)|0) + 4|0);
      $2048 = HEAP32[$2047>>2]|0;
      $2049 = Math_imul($2048, $2026)|0;
      $2050 = (($2049) + 32768)|0;
      $2051 = $2050 >> 16;
      $2052 = ((($2032) + ($2031<<3)|0) + 2|0);
      $2053 = HEAP16[$2052>>1]|0;
      $2054 = $2053 << 16 >> 16;
      $2055 = (($2051) - ($2054))|0;
      $2056 = (_foveon_apply_curve($2046,$2055)|0);
      $2057 = (($ipix) + 4|0);
      HEAP32[$2057>>2] = $2056;
      $2058 = (($2056) + ($2044))|0;
      $2059 = (($curve) + 20|0);
      $2060 = HEAP32[$2059>>2]|0;
      $2061 = ((($2027) + (($col$13116*12)|0)|0) + 8|0);
      $2062 = HEAP32[$2061>>2]|0;
      $2063 = Math_imul($2062, $2026)|0;
      $2064 = (($2063) + 32768)|0;
      $2065 = $2064 >> 16;
      $2066 = ((($2032) + ($2031<<3)|0) + 4|0);
      $2067 = HEAP16[$2066>>1]|0;
      $2068 = $2067 << 16 >> 16;
      $2069 = (($2065) - ($2068))|0;
      $2070 = (_foveon_apply_curve($2060,$2069)|0);
      $2071 = (($ipix) + 8|0);
      HEAP32[$2071>>2] = $2070;
      $2072 = (($2070) + ($2058))|0;
      $2073 = $2072 >> 3;
      $2074 = HEAP32[132112>>2]|0;
      $2075 = HEAP16[132088>>1]|0;
      $2076 = $2075&65535;
      $2077 = Math_imul($2076, $row$12118)|0;
      $2078 = (($2077) + ($col$13116))|0;
      $2079 = (($2074) + ($2078<<3)|0);
      $2080 = HEAP16[$2079>>1]|0;
      $2081 = $2080 << 16 >> 16;
      $2082 = HEAP32[$ipix>>2]|0;
      $2083 = (($2082) - ($2073))|0;
      $2084 = (($2083) + ($2081))|0;
      $2085 = ($2084|0)<(0);
      $2086 = $2084&65535;
      $2087 = $2085 ? 0 : $2086;
      HEAP16[$2079>>1] = $2087;
      $2088 = HEAP16[132088>>1]|0;
      $2089 = $2088&65535;
      $2090 = Math_imul($2089, $row$12118)|0;
      $2091 = (($2090) + ($col$13116))|0;
      $2092 = ((($2074) + ($2091<<3)|0) + 2|0);
      $2093 = HEAP16[$2092>>1]|0;
      $2094 = $2093 << 16 >> 16;
      $2095 = (($ipix) + 4|0);
      $2096 = HEAP32[$2095>>2]|0;
      $2097 = (($2096) - ($2073))|0;
      $2098 = (($2097) + ($2094))|0;
      $2099 = ($2098|0)<(0);
      $2100 = $2098&65535;
      $2101 = $2099 ? 0 : $2100;
      HEAP16[$2092>>1] = $2101;
      $2102 = HEAP16[132088>>1]|0;
      $2103 = $2102&65535;
      $2104 = Math_imul($2103, $row$12118)|0;
      $2105 = (($2104) + ($col$13116))|0;
      $2106 = ((($2074) + ($2105<<3)|0) + 4|0);
      $2107 = HEAP16[$2106>>1]|0;
      $2108 = $2107 << 16 >> 16;
      $2109 = (($ipix) + 8|0);
      $2110 = HEAP32[$2109>>2]|0;
      $2111 = (($2110) - ($2073))|0;
      $2112 = (($2111) + ($2108))|0;
      $2113 = ($2112|0)<(0);
      $2114 = $2112&65535;
      $2115 = $2113 ? 0 : $2114;
      HEAP16[$2106>>1] = $2115;
      $2116 = (($col$13116) + 1)|0;
      $2117 = HEAP16[132088>>1]|0;
      $2118 = $2117&65535;
      $2119 = $2118 & 65532;
      $2120 = ($2116|0)<($2119|0);
      if ($2120) {
       $col$13116 = $2116;
      } else {
       break;
      }
     }
    }
   } while(0);
   $2121 = (($row$12118) + 1)|0;
   $2122 = HEAP16[132080>>1]|0;
   $2123 = $2122&65535;
   $2124 = $2123 & 65532;
   $2125 = ($2121|0)<($2124|0);
   if ($2125) {
    $row$12118 = $2121;
   } else {
    break;
   }
  }
 }
 _free($1830);
 $2126 = HEAP32[$1069>>2]|0;
 _free($2126);
 $2127 = HEAP32[$curve>>2]|0;
 _free($2127);
 $2128 = (($curve) + 4|0);
 $2129 = HEAP32[$2128>>2]|0;
 _free($2129);
 $2130 = (($curve) + 8|0);
 $2131 = HEAP32[$2130>>2]|0;
 _free($2131);
 $2132 = (($curve) + 12|0);
 $2133 = HEAP32[$2132>>2]|0;
 _free($2133);
 $2134 = (($curve) + 16|0);
 $2135 = HEAP32[$2134>>2]|0;
 _free($2135);
 $2136 = (($curve) + 20|0);
 $2137 = HEAP32[$2136>>2]|0;
 _free($2137);
 $2138 = (($curve) + 24|0);
 $2139 = HEAP32[$2138>>2]|0;
 _free($2139);
 $2140 = (($curve) + 28|0);
 $2141 = HEAP32[$2140>>2]|0;
 _free($2141);
 $2142 = (($keep) + 4|0);
 $2143 = HEAP32[$2142>>2]|0;
 $2144 = (($active) + 4|0);
 $2145 = HEAP32[$2144>>2]|0;
 $2146 = (($2145) - ($2143))|0;
 HEAP32[$2144>>2] = $2146;
 $2147 = (($active) + 12|0);
 $2148 = HEAP32[$2147>>2]|0;
 $2149 = (($2148) + -2)|0;
 HEAP32[$2147>>2] = $2149;
 $2150 = (($active) + 8|0);
 $2151 = HEAP32[$2150>>2]|0;
 $2152 = HEAP32[$active>>2]|0;
 $2153 = (($2151) - ($2152))|0;
 $2154 = HEAP32[$2144>>2]|0;
 $2155 = (($2149) - ($2154))|0;
 $2156 = ($2155|0)>(0);
 if ($2156) {
  $2157 = HEAP32[$active>>2]|0;
  $2158 = $2153 << 3;
  $2159 = HEAP32[$2147>>2]|0;
  $2160 = HEAP32[$2144>>2]|0;
  $2161 = (($2159) - ($2160))|0;
  $2162 = ($2161|0)>(1);
  $2167 = $2154;$row$13101 = 0;
  while(1) {
   $2163 = Math_imul($row$13101, $2153)|0;
   $2164 = HEAP32[132112>>2]|0;
   $2165 = (($2164) + ($2163<<3)|0);
   $2166 = (($2167) + ($row$13101))|0;
   $2168 = HEAP16[132088>>1]|0;
   $2169 = $2168&65535;
   $2170 = Math_imul($2169, $2166)|0;
   $2171 = (($2170) + ($2157))|0;
   $2172 = (($2164) + ($2171<<3)|0);
   _memcpy(($2165|0),($2172|0),($2158|0))|0;
   $2173 = (($row$13101) + 1)|0;
   $2174 = ($2173|0)<($2161|0);
   if ($2174) {
    $2167 = $2160;$row$13101 = $2173;
   } else {
    break;
   }
  }
  $2175 = $2161&65535;
  $phitmp = $2162 ? $2175 : 1;
  $row$13$lcssa = $phitmp;
 } else {
  $row$13$lcssa = 0;
 }
 $2176 = $2153&65535;
 HEAP16[132088>>1] = $2176;
 HEAP16[132080>>1] = $row$13$lcssa;
 STACKTOP = sp;return;
}
function _crop_masked_pixels() {
 var $$ = 0, $$10 = 0, $$1017 = 0, $$8 = 0, $$820 = 0, $$9 = 0, $$old6 = 0, $$pn = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $col$035 = 0, $col$130 = 0, $col$218 = 0, $exitcond40 = 0, $m$028 = 0, $mblack = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r$0 = 0, $row$038 = 0, $row$133 = 0, $row$222 = 0, $zero$029 = 0, $zero$1$lcssa = 0, $zero$1$lcssa$lcssa = 0;
 var $zero$121 = 0, $zero$2$lcssa = 0, $zero$219 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $mblack = sp;
 $0 = HEAP32[189952>>2]|0;
 $1 = ($0|0)==(1|0);
 $2 = ($0|0)==(2|0);
 $or$cond = $1 | $2;
 if ($or$cond) {
  _phase_one_correct();
 }
 $3 = HEAP16[189960>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $23 = HEAP16[132080>>1]|0;
  $24 = ($23<<16>>16)==(0);
  if (!($24)) {
   $row$133 = 0;
   while(1) {
    $88 = HEAP16[132088>>1]|0;
    $89 = ($88<<16>>16)==(0);
    if (!($89)) {
     $col$130 = 0;
     while(1) {
      $90 = HEAP16[600>>1]|0;
      $91 = $90&65535;
      $92 = (($91) + ($row$133))|0;
      $93 = HEAP16[132336>>1]|0;
      $94 = $93&65535;
      $95 = Math_imul($92, $94)|0;
      $96 = HEAP16[592>>1]|0;
      $97 = $96&65535;
      $98 = (($97) + ($col$130))|0;
      $99 = (($98) + ($95))|0;
      $100 = HEAP32[132328>>2]|0;
      $101 = (($100) + ($99<<1)|0);
      $102 = HEAP16[$101>>1]|0;
      $103 = (_fcol($row$133,$col$130)|0);
      $104 = HEAP16[132096>>1]|0;
      $105 = $104&65535;
      $106 = $row$133 >> $105;
      $107 = HEAP16[132104>>1]|0;
      $108 = $107&65535;
      $109 = Math_imul($106, $108)|0;
      $110 = $col$130 >> $105;
      $111 = (($109) + ($110))|0;
      $112 = HEAP32[132112>>2]|0;
      $113 = ((($112) + ($111<<3)|0) + ($103<<1)|0);
      HEAP16[$113>>1] = $102;
      $114 = (($col$130) + 1)|0;
      $115 = HEAP16[132088>>1]|0;
      $116 = $115&65535;
      $117 = ($114|0)<($116|0);
      if ($117) {
       $col$130 = $114;
      } else {
       break;
      }
     }
    }
    $118 = (($row$133) + 1)|0;
    $119 = HEAP16[132080>>1]|0;
    $120 = $119&65535;
    $121 = ($118|0)<($120|0);
    if ($121) {
     $row$133 = $118;
    } else {
     break;
    }
   }
  }
 } else {
  $5 = HEAP16[133064>>1]|0;
  $6 = $5&65535;
  $7 = HEAP16[600>>1]|0;
  $8 = $7&65535;
  $9 = $8 << 1;
  $10 = (($6) - ($9))|0;
  $11 = ($10|0)>(0);
  if ($11) {
   $12 = HEAP32[189968>>2]|0;
   $13 = ($12|0)!=(0);
   $14 = $13&1;
   $15 = $14 ^ 1;
   $16 = HEAP32[132328>>2]|0;
   $17 = HEAP32[584>>2]|0;
   $18 = HEAP32[132112>>2]|0;
   $19 = HEAP32[189968>>2]|0;
   $20 = ($19|0)!=(0);
   $21 = $20&1;
   $22 = $21 ^ 1;
   $row$038 = 0;
   while(1) {
    $25 = HEAP16[189960>>1]|0;
    $26 = $25&65535;
    $27 = $26 << $15;
    $28 = ($27|0)>(0);
    if ($28) {
     $29 = $row$038 >> 1;
     $30 = (($row$038) + 1)|0;
     $31 = $30 >> 1;
     $293 = $13;$33 = $26;$col$035 = 0;
     while(1) {
      $32 = (($33) + -1)|0;
      if ($293) {
       $34 = (($29) - ($col$035))|0;
       $35 = (($col$035) + ($31))|0;
       $$pn = $34;$c$0 = $35;
      } else {
       $36 = $col$035 >> 1;
       $37 = (($row$038) - ($36))|0;
       $38 = (($col$035) + 1)|0;
       $39 = $38 >> 1;
       $40 = (($39) + ($row$038))|0;
       $$pn = $37;$c$0 = $40;
      }
      $r$0 = (($$pn) + ($32))|0;
      $41 = HEAP16[132080>>1]|0;
      $42 = $41&65535;
      $43 = ($r$0>>>0)<($42>>>0);
      if ($43) {
       $44 = HEAP16[132088>>1]|0;
       $45 = $44&65535;
       $46 = ($c$0>>>0)<($45>>>0);
       if ($46) {
        $47 = HEAP16[600>>1]|0;
        $48 = $47&65535;
        $49 = (($48) + ($row$038))|0;
        $50 = HEAP16[132336>>1]|0;
        $51 = $50&65535;
        $52 = Math_imul($49, $51)|0;
        $53 = HEAP16[592>>1]|0;
        $54 = $53&65535;
        $55 = (($54) + ($col$035))|0;
        $56 = (($55) + ($52))|0;
        $57 = (($16) + ($56<<1)|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $r$0 << 1;
        $60 = $59 & 14;
        $61 = $c$0 & 1;
        $62 = $60 | $61;
        $63 = $62 << 1;
        $64 = $17 >>> $63;
        $65 = $64 & 3;
        $66 = HEAP16[132096>>1]|0;
        $67 = $66&65535;
        $68 = $r$0 >>> $67;
        $69 = HEAP16[132104>>1]|0;
        $70 = $69&65535;
        $71 = Math_imul($68, $70)|0;
        $72 = $c$0 >>> $67;
        $73 = (($71) + ($72))|0;
        $74 = ((($18) + ($73<<3)|0) + ($65<<1)|0);
        HEAP16[$74>>1] = $58;
       }
      }
      $75 = (($col$035) + 1)|0;
      $76 = HEAP16[189960>>1]|0;
      $77 = $76&65535;
      $78 = $77 << $22;
      $79 = ($75|0)<($78|0);
      if ($79) {
       $293 = $20;$33 = $77;$col$035 = $75;
      } else {
       break;
      }
     }
    }
    $80 = (($row$038) + 1)|0;
    $81 = HEAP16[133064>>1]|0;
    $82 = $81&65535;
    $83 = HEAP16[600>>1]|0;
    $84 = $83&65535;
    $85 = $84 << 1;
    $86 = (($82) - ($85))|0;
    $87 = ($80|0)<($86|0);
    if ($87) {
     $row$038 = $80;
    } else {
     break;
    }
   }
  }
 }
 $122 = HEAP32[((189976 + 12|0))>>2]|0;
 $123 = ($122|0)>(0);
 if (!($123)) {
  $124 = HEAP32[189952>>2]|0;
  $125 = ($124|0)==(3|0);
  $126 = ($124|0)==(4|0);
  $or$cond3 = $125 | $126;
  do {
   if ($or$cond3) {
    $127 = HEAP32[((189976 + 20|0))>>2]|0;
    $128 = (($127) + 2)|0;
    HEAP32[((189976 + 20|0))>>2] = $128;
    HEAP32[((189976 + 4|0))>>2] = $128;
    $129 = HEAP32[((189976 + 12|0))>>2]|0;
    $130 = (($129) + -2)|0;
    HEAP32[((189976 + 12|0))>>2] = $130;
    label = 29;
   } else {
    $131 = ($124|0)==(5|0);
    $132 = ($124|0)==(6|0);
    $or$cond5 = $131 | $132;
    if ($or$cond5) {
     label = 29;
    } else {
     $133 = ($124|0)==(7|0);
     if ($133) {
      $134 = (_strncmp(133688,190104,3)|0);
      $135 = ($134|0)==(0);
      if (!($135)) {
       label = 29;
       break;
      }
     } else {
      $$old6 = ($124|0)==(8|0);
      if ($$old6) {
       label = 29;
       break;
      }
     }
     $136 = HEAP32[189952>>2]|0;
     $137 = ($136|0)==(9|0);
     if ($137) {
      $138 = HEAP32[133096>>2]|0;
      $139 = $138 & 32;
      $140 = ($139|0)==(0);
      if ($140) {
       label = 30;
      } else {
       label = 29;
      }
     } else {
      $163 = $136;
     }
    }
   }
  } while(0);
  if ((label|0) == 29) {
   $141 = HEAP16[600>>1]|0;
   $142 = $141&65535;
   HEAP32[((189976 + 16|0))>>2] = $142;
   HEAP32[189976>>2] = $142;
   $143 = HEAP16[600>>1]|0;
   $144 = $143&65535;
   $145 = HEAP16[132080>>1]|0;
   $146 = $145&65535;
   $147 = (($146) + ($144))|0;
   HEAP32[((189976 + 24|0))>>2] = $147;
   HEAP32[((189976 + 8|0))>>2] = $147;
   $148 = HEAP16[592>>1]|0;
   $149 = $148&65535;
   $150 = HEAP32[((189976 + 12|0))>>2]|0;
   $151 = (($150) + ($149))|0;
   HEAP32[((189976 + 12|0))>>2] = $151;
   $152 = HEAP16[592>>1]|0;
   $153 = $152&65535;
   $154 = HEAP16[132088>>1]|0;
   $155 = $154&65535;
   $156 = (($155) + ($153))|0;
   $157 = HEAP32[((189976 + 20|0))>>2]|0;
   $158 = (($156) + ($157))|0;
   HEAP32[((189976 + 20|0))>>2] = $158;
   $159 = HEAP16[132336>>1]|0;
   $160 = $159&65535;
   $161 = HEAP32[((189976 + 28|0))>>2]|0;
   $162 = (($161) + ($160))|0;
   HEAP32[((189976 + 28|0))>>2] = $162;
   label = 30;
  }
  if ((label|0) == 30) {
   $$pr = HEAP32[189952>>2]|0;
   $163 = $$pr;
  }
  $164 = ($163|0)==(10|0);
  if ($164) {
   $165 = HEAP16[600>>1]|0;
   $166 = $165&65535;
   HEAP32[((189976 + 8|0))>>2] = $166;
   $167 = HEAP16[132088>>1]|0;
   $168 = $167&65535;
   HEAP32[((189976 + 12|0))>>2] = $168;
  }
 }
 ;HEAP32[$mblack+0>>2]=0|0;HEAP32[$mblack+4>>2]=0|0;HEAP32[$mblack+8>>2]=0|0;HEAP32[$mblack+12>>2]=0|0;HEAP32[$mblack+16>>2]=0|0;HEAP32[$mblack+20>>2]=0|0;HEAP32[$mblack+24>>2]=0|0;HEAP32[$mblack+28>>2]=0|0;
 $169 = HEAP16[133064>>1]|0;
 $170 = $169&65535;
 $171 = HEAP16[132336>>1]|0;
 $172 = $171&65535;
 $173 = $169&65535;
 $174 = HEAP32[584>>2]|0;
 $175 = HEAP16[600>>1]|0;
 $176 = $175&65535;
 $177 = HEAP16[592>>1]|0;
 $178 = $177&65535;
 $179 = HEAP32[132328>>2]|0;
 $180 = HEAP16[132336>>1]|0;
 $181 = $180&65535;
 $m$028 = 0;$zero$029 = 0;
 while(1) {
  $182 = (189976 + ($m$028<<4)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($183|0)>(0);
  $$ = $184 ? $183 : 0;
  $185 = ((189976 + ($m$028<<4)|0) + 8|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)<($170|0);
  $$820 = $187 ? $186 : $170;
  $188 = ($$|0)<($$820|0);
  if ($188) {
   $189 = ((189976 + ($m$028<<4)|0) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ($190|0)>(0);
   $$9 = $191 ? $190 : 0;
   $192 = ((189976 + ($m$028<<4)|0) + 12|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ($193|0)<($172|0);
   $$1017 = $194 ? $193 : $172;
   $195 = ($$9|0)<($$1017|0);
   $196 = HEAP32[$185>>2]|0;
   $197 = ($196|0)<($173|0);
   $$8 = $197 ? $196 : $173;
   $row$222 = $$;$zero$121 = $zero$029;
   while(1) {
    if ($195) {
     $198 = (($row$222) - ($176))|0;
     $199 = $198 << 1;
     $200 = $199 & 14;
     $201 = HEAP32[$192>>2]|0;
     $202 = ($201|0)<($181|0);
     $$10 = $202 ? $201 : $181;
     $210 = $172;$col$218 = $$9;$zero$219 = $zero$121;
     while(1) {
      $203 = (($col$218) - ($178))|0;
      $204 = $203 & 1;
      $205 = $200 | $204;
      $206 = $205 << 1;
      $207 = $174 >>> $206;
      $208 = $207 & 3;
      $209 = Math_imul($210, $row$222)|0;
      $211 = (($209) + ($col$218))|0;
      $212 = (($179) + ($211<<1)|0);
      $213 = HEAP16[$212>>1]|0;
      $214 = $213&65535;
      $215 = (($mblack) + ($208<<2)|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = (($216) + ($214))|0;
      HEAP32[$215>>2] = $217;
      $218 = $208 | 4;
      $219 = (($mblack) + ($218<<2)|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = (($220) + 1)|0;
      HEAP32[$219>>2] = $221;
      $222 = ($213<<16>>16)==(0);
      $223 = $222&1;
      $224 = (($223) + ($zero$219))|0;
      $225 = (($col$218) + 1)|0;
      $226 = ($225|0)<($$10|0);
      if ($226) {
       $210 = $181;$col$218 = $225;$zero$219 = $224;
      } else {
       $zero$2$lcssa = $224;
       break;
      }
     }
    } else {
     $zero$2$lcssa = $zero$121;
    }
    $227 = (($row$222) + 1)|0;
    $228 = ($227|0)<($$8|0);
    if ($228) {
     $row$222 = $227;$zero$121 = $zero$2$lcssa;
    } else {
     $zero$1$lcssa = $zero$2$lcssa;
     break;
    }
   }
  } else {
   $zero$1$lcssa = $zero$029;
  }
  $229 = (($m$028) + 1)|0;
  $exitcond40 = ($229|0)==(8);
  if ($exitcond40) {
   $zero$1$lcssa$lcssa = $zero$1$lcssa;
   break;
  } else {
   $m$028 = $229;$zero$029 = $zero$1$lcssa;
  }
 }
 $230 = HEAP32[189952>>2]|0;
 $231 = ($230|0)==(5|0);
 if ($231) {
  $232 = HEAP16[132088>>1]|0;
  $233 = HEAP16[132336>>1]|0;
  $234 = ($232&65535)<($233&65535);
  if ($234) {
   $235 = HEAP32[$mblack>>2]|0;
   $236 = (($mblack) + 4|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (($237) + ($235))|0;
   $239 = (($mblack) + 8|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = (($238) + ($240))|0;
   $242 = (($mblack) + 12|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = (($241) + ($243))|0;
   $245 = (($mblack) + 16|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (($mblack) + 20|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($248) + ($246))|0;
   $250 = (($mblack) + 24|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($249) + ($251))|0;
   $253 = (($mblack) + 28|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = (($252) + ($254))|0;
   $256 = (($244>>>0) / ($255>>>0))&-1;
   $257 = (($256) + -4)|0;
   HEAP32[132360>>2] = $257;
   _canon_600_correct();
   STACKTOP = sp;return;
  }
 }
 $258 = (($mblack) + 16|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($zero$1$lcssa$lcssa>>>0)<($259>>>0);
 if (!($260)) {
  STACKTOP = sp;return;
 }
 $261 = (($mblack) + 20|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ($262|0)==(0);
 if ($263) {
  STACKTOP = sp;return;
 }
 $264 = (($mblack) + 24|0);
 $265 = HEAP32[$264>>2]|0;
 $266 = ($265|0)==(0);
 if ($266) {
  STACKTOP = sp;return;
 }
 $267 = (($mblack) + 28|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = ($268|0)==(0);
 if ($269) {
  STACKTOP = sp;return;
 }
 $270 = HEAP32[$mblack>>2]|0;
 $271 = (($mblack) + 16|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = (($270>>>0) / ($272>>>0))&-1;
 $274 = $273&65535;
 HEAP16[134176>>1] = $274;
 $275 = (($mblack) + 4|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = (($mblack) + 20|0);
 $278 = HEAP32[$277>>2]|0;
 $279 = (($276>>>0) / ($278>>>0))&-1;
 $280 = $279&65535;
 HEAP16[((134176 + 2|0))>>1] = $280;
 $281 = (($mblack) + 8|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = (($mblack) + 24|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = (($282>>>0) / ($284>>>0))&-1;
 $286 = $285&65535;
 HEAP16[((134176 + 4|0))>>1] = $286;
 $287 = (($mblack) + 12|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = (($mblack) + 28|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = (($288>>>0) / ($290>>>0))&-1;
 $292 = $291&65535;
 HEAP16[((134176 + 6|0))>>1] = $292;
 HEAP16[((134176 + 12|0))>>1] = 0;
 HEAP16[((134176 + 10|0))>>1] = 0;
 HEAP16[((134176 + 8|0))>>1] = 0;
 STACKTOP = sp;return;
}
function _remove_zeroes() {
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $brmerge = 0, $c$03 = 0, $col$013 = 0, $n$06 = 0, $n$1$lcssa = 0, $n$1$lcssa$lcssa = 0, $n$12 = 0, $n$2 = 0, $or$cond = 0, $r$07 = 0, $row$016 = 0, $tot$05 = 0, $tot$1$lcssa = 0, $tot$1$lcssa$lcssa = 0;
 var $tot$11 = 0, $tot$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[584>>2]|0;
 $3 = HEAP32[132112>>2]|0;
 $row$016 = 0;
 while(1) {
  $4 = HEAP16[132088>>1]|0;
  $5 = ($4<<16>>16)==(0);
  if (!($5)) {
   $6 = $row$016 << 1;
   $7 = $6 & 14;
   $8 = (($row$016) + -2)|0;
   $9 = (($row$016) + 2)|0;
   $10 = ($8>>>0)>($9>>>0);
   $col$013 = 0;
   while(1) {
    $11 = $col$013 & 1;
    $12 = $11 | $7;
    $13 = $12 << 1;
    $14 = $2 >>> $13;
    $15 = $14 & 3;
    $16 = HEAP16[132096>>1]|0;
    $17 = $16&65535;
    $18 = $row$016 >>> $17;
    $19 = HEAP16[132104>>1]|0;
    $20 = $19&65535;
    $21 = Math_imul($18, $20)|0;
    $22 = $col$013 >>> $17;
    $23 = (($21) + ($22))|0;
    $24 = ((($3) + ($23<<3)|0) + ($15<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $$not = ($25<<16>>16)!=(0);
    $brmerge = $$not | $10;
    if (!($brmerge)) {
     $26 = (($col$013) + -2)|0;
     $27 = (($col$013) + 2)|0;
     $28 = ($26>>>0)>($27>>>0);
     $29 = HEAP16[132080>>1]|0;
     $30 = $29&65535;
     $31 = HEAP16[132088>>1]|0;
     $32 = $31&65535;
     $33 = $2 >>> $13;
     $34 = $33 & 3;
     $35 = HEAP16[132096>>1]|0;
     $36 = $35&65535;
     $37 = HEAP16[132104>>1]|0;
     $38 = $37&65535;
     $n$06 = 0;$r$07 = $8;$tot$05 = 0;
     while(1) {
      if ($28) {
       $n$1$lcssa = $n$06;$tot$1$lcssa = $tot$05;
      } else {
       $39 = ($r$07>>>0)<($30>>>0);
       $40 = $r$07 << 1;
       $41 = $40 & 14;
       $42 = $r$07 >>> $36;
       $43 = Math_imul($42, $38)|0;
       $c$03 = $26;$n$12 = $n$06;$tot$11 = $tot$05;
       while(1) {
        $44 = ($c$03>>>0)<($32>>>0);
        $or$cond = $39 & $44;
        if ($or$cond) {
         $45 = $c$03 & 1;
         $46 = $45 | $41;
         $47 = $46 << 1;
         $48 = $2 >>> $47;
         $49 = $48 & 3;
         $50 = ($49|0)==($34|0);
         if ($50) {
          $51 = $c$03 >>> $36;
          $52 = (($43) + ($51))|0;
          $53 = ((($3) + ($52<<3)|0) + ($49<<1)|0);
          $54 = HEAP16[$53>>1]|0;
          $55 = ($54<<16>>16)==(0);
          if ($55) {
           $n$2 = $n$12;$tot$2 = $tot$11;
          } else {
           $56 = $54&65535;
           $57 = (($n$12) + 1)|0;
           $58 = (($56) + ($tot$11))|0;
           $n$2 = $57;$tot$2 = $58;
          }
         } else {
          $n$2 = $n$12;$tot$2 = $tot$11;
         }
        } else {
         $n$2 = $n$12;$tot$2 = $tot$11;
        }
        $59 = (($c$03) + 1)|0;
        $60 = ($59>>>0)>($27>>>0);
        if ($60) {
         $n$1$lcssa = $n$2;$tot$1$lcssa = $tot$2;
         break;
        } else {
         $c$03 = $59;$n$12 = $n$2;$tot$11 = $tot$2;
        }
       }
      }
      $61 = (($r$07) + 1)|0;
      $62 = ($61>>>0)>($9>>>0);
      if ($62) {
       $n$1$lcssa$lcssa = $n$1$lcssa;$tot$1$lcssa$lcssa = $tot$1$lcssa;
       break;
      } else {
       $n$06 = $n$1$lcssa;$r$07 = $61;$tot$05 = $tot$1$lcssa;
      }
     }
     $63 = ($n$1$lcssa$lcssa|0)==(0);
     if (!($63)) {
      $64 = (($tot$1$lcssa$lcssa>>>0) / ($n$1$lcssa$lcssa>>>0))&-1;
      $65 = $64&65535;
      $66 = $2 >>> $13;
      $67 = $66 & 3;
      $68 = HEAP16[132096>>1]|0;
      $69 = $68&65535;
      $70 = $row$016 >>> $69;
      $71 = HEAP16[132104>>1]|0;
      $72 = $71&65535;
      $73 = Math_imul($70, $72)|0;
      $74 = $col$013 >>> $69;
      $75 = (($73) + ($74))|0;
      $76 = ((($3) + ($75<<3)|0) + ($67<<1)|0);
      HEAP16[$76>>1] = $65;
     }
    }
    $77 = (($col$013) + 1)|0;
    $78 = HEAP16[132088>>1]|0;
    $79 = $78&65535;
    $80 = ($77>>>0)<($79>>>0);
    if ($80) {
     $col$013 = $77;
    } else {
     break;
    }
   }
  }
  $81 = (($row$016) + 1)|0;
  $82 = HEAP16[132080>>1]|0;
  $83 = $82&65535;
  $84 = ($81>>>0)<($83>>>0);
  if ($84) {
   $row$016 = $81;
  } else {
   break;
  }
 }
 return;
}
function _bad_pixels($cfname) {
 $cfname = $cfname|0;
 var $$ = 0, $$lcssa59 = 0, $$lcssa61 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$010 = 0, $col = 0, $cp$032 = 0, $cp$1 = 0, $fixed$0$ph$lcssa = 0, $fixed$0$ph30 = 0, $fp$1 = 0, $fp$2 = 0, $len$039 = 0, $line = 0, $n$025 = 0, $n$1$lcssa = 0, $n$1$lcssa$lcssa = 0, $n$117 = 0, $n$2$lcssa = 0, $n$212 = 0, $n$3 = 0;
 var $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond49$not = 0, $or$cond50 = 0, $r$014 = 0, $rad$023 = 0, $row = 0, $time = 0, $tot$024 = 0, $tot$1$lcssa = 0, $tot$1$lcssa$lcssa = 0, $tot$116 = 0, $tot$2$lcssa = 0, $tot$211 = 0, $tot$3 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $line = sp + 40|0;
 $time = sp + 32|0;
 $row = sp + 28|0;
 $col = sp + 24|0;
 $0 = HEAP32[584>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ($cfname|0)==(0|0);
 do {
  if ($2) {
   $3 = (_malloc(32)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    STACKTOP = sp;return;
   } else {
    $10 = $3;$len$039 = 32;
   }
   while(1) {
    $9 = (($len$039) + -16)|0;
    $11 = (_getcwd(($10|0),($9|0))|0);
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     $$lcssa61 = $10;
     label = 8;
     break;
    }
    _free($10);
    $13 = (___errno_location()|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(34);
    $6 = $len$039 << 1;
    if (!($15)) {
     label = 43;
     break;
    }
    $7 = (_malloc($6)|0);
    $8 = ($7|0)==(0|0);
    if ($8) {
     label = 43;
     break;
    } else {
     $10 = $7;$len$039 = $6;
    }
   }
   if ((label|0) == 8) {
    $16 = (_strlen(($$lcssa61|0))|0);
    $$sum = (($16) + -1)|0;
    $17 = (($$lcssa61) + ($$sum)|0);
    $18 = HEAP8[$$lcssa61>>0]|0;
    $19 = ($18<<24>>24)==(47);
    L15: do {
     if ($19) {
      $20 = HEAP8[$17>>0]|0;
      $21 = ($20<<24>>24)==(47);
      $22 = (($$lcssa61) + ($16)|0);
      $$ = $21 ? $17 : $22;
      $cp$032 = $$;
      while(1) {
       dest=$cp$032+0|0; src=190120+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       $25 = (_fopen(($$lcssa61|0),(190112|0))|0);
       $26 = ($25|0)!=(0|0);
       $27 = ($cp$032|0)==($$lcssa61|0);
       $or$cond2 = $27 | $26;
       if ($or$cond2) {
        $fp$1 = $25;
        break L15;
       } else {
        $cp$1 = $cp$032;
       }
       while(1) {
        $28 = (($cp$1) + -1|0);
        $29 = HEAP8[$28>>0]|0;
        $30 = ($29<<24>>24)==(47);
        if ($30) {
         $$lcssa59 = $28;
         break;
        } else {
         $cp$1 = $28;
        }
       }
       $23 = HEAP8[$$lcssa61>>0]|0;
       $24 = ($23<<24>>24)==(47);
       if ($24) {
        $cp$032 = $$lcssa59;
       } else {
        $fp$1 = $25;
        break;
       }
      }
     } else {
      $fp$1 = 0;
     }
    } while(0);
    _free($$lcssa61);
    $fp$2 = $fp$1;
    break;
   }
   else if ((label|0) == 43) {
    STACKTOP = sp;return;
   }
  } else {
   $5 = (_fopen(($cfname|0),(190112|0))|0);
   $fp$2 = $5;
  }
 } while(0);
 $31 = ($fp$2|0)==(0|0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = (_fgets(($line|0),128,($fp$2|0))|0);
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  $34 = HEAP32[_stderr>>2]|0;
  $fixed$0$ph30 = 0;
  L31: while(1) {
   while(1) {
    $35 = (_strchr($line,35)|0);
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     HEAP8[$35>>0] = 0;
    }
    HEAP32[$vararg_buffer>>2] = $col;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $row;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $time;
    $37 = (_sscanf($line,190136,$vararg_buffer)|0);
    $38 = ($37|0)==(3);
    if ($38) {
     $39 = HEAP32[$col>>2]|0;
     $40 = HEAP16[132088>>1]|0;
     $41 = $40&65535;
     $42 = ($39>>>0)<($41>>>0);
     if ($42) {
      $43 = HEAP32[$row>>2]|0;
      $44 = HEAP16[132080>>1]|0;
      $45 = $44&65535;
      $46 = ($43>>>0)<($45>>>0);
      if ($46) {
       $47 = HEAP32[$time>>2]|0;
       $48 = HEAP32[190152>>2]|0;
       $49 = ($47|0)>($48|0);
       if (!($49)) {
        $52 = HEAP32[$row>>2]|0;
        $53 = HEAP32[$col>>2]|0;
        $54 = HEAP16[132080>>1]|0;
        $55 = $54&65535;
        $56 = HEAP16[132088>>1]|0;
        $57 = $56&65535;
        $58 = HEAP16[132096>>1]|0;
        $59 = $58&65535;
        $60 = HEAP16[132104>>1]|0;
        $61 = $60&65535;
        $62 = HEAP32[132112>>2]|0;
        $63 = HEAP32[$col>>2]|0;
        $n$025 = 0;$rad$023 = 1;$tot$024 = 0;
        while(1) {
         $64 = (($52) - ($rad$023))|0;
         $65 = (($52) + ($rad$023))|0;
         $66 = ($64|0)>($65|0);
         if ($66) {
          $n$1$lcssa = $n$025;$tot$1$lcssa = $tot$024;
         } else {
          $67 = (($53) - ($rad$023))|0;
          $68 = (($53) + ($rad$023))|0;
          $69 = ($67|0)>($68|0);
          $70 = (($52) + ($rad$023))|0;
          $71 = (($63) + ($rad$023))|0;
          $n$117 = $n$025;$r$014 = $64;$tot$116 = $tot$024;
          while(1) {
           if ($69) {
            $n$2$lcssa = $n$117;$tot$2$lcssa = $tot$116;
           } else {
            $72 = ($r$014|0)==($52|0);
            $73 = $r$014 >> $59;
            $74 = Math_imul($73, $61)|0;
            $76 = $53;$c$010 = $67;$n$212 = $n$117;$tot$211 = $tot$116;
            while(1) {
             $notlhs = ($r$014>>>0)>=($55>>>0);
             $notrhs = ($c$010>>>0)>=($57>>>0);
             $or$cond49$not = $notrhs | $notlhs;
             $75 = ($c$010|0)==($76|0);
             $or$cond3 = $75 & $72;
             $or$cond50 = $or$cond49$not | $or$cond3;
             do {
              if ($or$cond50) {
               $n$3 = $n$212;$tot$3 = $tot$211;
              } else {
               $77 = (_fcol($r$014,$c$010)|0);
               $78 = (_fcol($52,$76)|0);
               $79 = ($77|0)==($78|0);
               if (!($79)) {
                $n$3 = $n$212;$tot$3 = $tot$211;
                break;
               }
               $80 = $c$010 >> $59;
               $81 = (($74) + ($80))|0;
               $82 = ((($62) + ($81<<3)|0) + ($77<<1)|0);
               $83 = HEAP16[$82>>1]|0;
               $84 = $83&65535;
               $85 = (($84) + ($tot$211))|0;
               $86 = (($n$212) + 1)|0;
               $n$3 = $86;$tot$3 = $85;
              }
             } while(0);
             $87 = (($c$010) + 1)|0;
             $88 = ($c$010|0)<($71|0);
             if ($88) {
              $76 = $63;$c$010 = $87;$n$212 = $n$3;$tot$211 = $tot$3;
             } else {
              $n$2$lcssa = $n$3;$tot$2$lcssa = $tot$3;
              break;
             }
            }
           }
           $89 = (($r$014) + 1)|0;
           $90 = ($r$014|0)<($70|0);
           if ($90) {
            $n$117 = $n$2$lcssa;$r$014 = $89;$tot$116 = $tot$2$lcssa;
           } else {
            $n$1$lcssa = $n$2$lcssa;$tot$1$lcssa = $tot$2$lcssa;
            break;
           }
          }
         }
         $91 = (($rad$023) + 1)|0;
         $92 = ($91|0)<(3);
         $93 = ($n$1$lcssa|0)==(0);
         $or$cond = $92 & $93;
         if ($or$cond) {
          $n$025 = $n$1$lcssa;$rad$023 = $91;$tot$024 = $tot$1$lcssa;
         } else {
          $n$1$lcssa$lcssa = $n$1$lcssa;$tot$1$lcssa$lcssa = $tot$1$lcssa;
          break;
         }
        }
        $94 = (($tot$1$lcssa$lcssa|0) / ($n$1$lcssa$lcssa|0))&-1;
        $95 = $94&65535;
        $96 = HEAP32[$row>>2]|0;
        $97 = HEAP32[$col>>2]|0;
        $98 = (_fcol($96,$97)|0);
        $99 = HEAP16[132096>>1]|0;
        $100 = $99&65535;
        $101 = $96 >> $100;
        $102 = HEAP16[132104>>1]|0;
        $103 = $102&65535;
        $104 = Math_imul($101, $103)|0;
        $105 = $97 >> $100;
        $106 = (($104) + ($105))|0;
        $107 = HEAP32[132112>>2]|0;
        $108 = ((($107) + ($106<<3)|0) + ($98<<1)|0);
        HEAP16[$108>>1] = $95;
        $109 = HEAP32[168>>2]|0;
        $110 = ($109|0)==(0);
        if (!($110)) {
         break;
        }
       }
      }
     }
    }
    $50 = (_fgets(($line|0),128,($fp$2|0))|0);
    $51 = ($50|0)==(0|0);
    if ($51) {
     $fixed$0$ph$lcssa = $fixed$0$ph30;
     break L31;
    }
   }
   $111 = (($fixed$0$ph30) + 1)|0;
   $112 = ($fixed$0$ph30|0)==(0);
   if ($112) {
    (_fwrite((190160|0),21,1,($34|0))|0);
   }
   $113 = HEAP32[$col>>2]|0;
   $114 = HEAP32[$row>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $113;
   $vararg_ptr6 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $114;
   (_fprintf(($34|0),(190184|0),($vararg_buffer3|0))|0);
   $115 = (_fgets(($line|0),128,($fp$2|0))|0);
   $116 = ($115|0)==(0|0);
   if ($116) {
    $fixed$0$ph$lcssa = $111;
    break;
   } else {
    $fixed$0$ph30 = $111;
   }
  }
  $117 = ($fixed$0$ph$lcssa|0)==(0);
  if (!($117)) {
   $118 = HEAP32[_stderr>>2]|0;
   (_fputc(10,($118|0))|0);
  }
 }
 (_fclose(($fp$2|0))|0);
 STACKTOP = sp;return;
}
function _subtract($fname) {
 $fname = $fname|0;
 var $$comment$1 = 0, $$error$0 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa18 = 0, $$number$0 = 0, $$number$0$ = 0, $$number$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $col$011 = 0, $comment$0 = 0;
 var $comment$1 = 0, $dim = 0, $error$0$ph6 = 0, $error$0$ph6$lcssa = 0, $isdigit = 0, $isdigittmp = 0, $nd$0$ = 0, $nd$0$ph = 0, $number$0$ph = 0, $number$0$ph8 = 0, $or$cond = 0, $or$cond3 = 0, $row$012 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $dim = sp + 12|0;
 ;HEAP32[$dim+0>>2]=0|0;HEAP32[$dim+4>>2]=0|0;HEAP32[$dim+8>>2]=0|0;
 $0 = (_fopen(($fname|0),(190192|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _perror(($fname|0));
  STACKTOP = sp;return;
 }
 $2 = (_getc_unlocked(($0|0))|0);
 $3 = ($2|0)==(80);
 if ($3) {
  $4 = (_getc_unlocked(($0|0))|0);
  $5 = ($4|0)==(53);
  if ($5) {
   $error$0$ph6 = 0;$nd$0$ph = 0;$number$0$ph = 0;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $error$0$ph6 = 1;$nd$0$ph = 0;$number$0$ph = 0;
 }
 L9: while(1) {
  $6 = ($error$0$ph6|0)==(0);
  $7 = ($nd$0$ph|0)<(3);
  $or$cond = $6 & $7;
  $8 = (($dim) + ($nd$0$ph<<2)|0);
  $number$0$ph8 = $number$0$ph;
  while(1) {
   $comment$0 = 0;
   while(1) {
    if (!($or$cond)) {
     $$lcssa18 = $7;$error$0$ph6$lcssa = $error$0$ph6;
     break L9;
    }
    $9 = (_getc_unlocked(($0|0))|0);
    if ((($9|0) == 35)) {
     $comment$1 = 1;
    } else if ((($9|0) == -1)) {
     $$lcssa18 = $7;$error$0$ph6$lcssa = $error$0$ph6;
     break L9;
    } else {
     $comment$1 = $comment$0;
    }
    $10 = ($9|0)==(10);
    $$comment$1 = $10 ? 0 : $comment$1;
    $11 = ($$comment$1|0)==(0);
    if ($11) {
     $$lcssa = $9;
     break;
    } else {
     $comment$0 = $$comment$1;
    }
   }
   $isdigittmp = (($$lcssa) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $$number$0 = $isdigit ? 1 : $number$0$ph8;
   $12 = ($$number$0|0)==(0);
   if ($12) {
    $number$0$ph8 = 0;
    continue;
   }
   if (!($isdigit)) {
    $$lcssa$lcssa = $$lcssa;$$number$0$lcssa = $$number$0;
    break;
   }
   $13 = HEAP32[$8>>2]|0;
   $14 = ($13*10)|0;
   $15 = (($$lcssa) + -48)|0;
   $16 = (($15) + ($14))|0;
   HEAP32[$8>>2] = $16;
   $number$0$ph8 = $$number$0;
  }
  $17 = (_isspace($$lcssa$lcssa)|0);
  $18 = ($17|0)==(0);
  $$error$0 = $18 ? 1 : $error$0$ph6;
  $19 = $18&1;
  $20 = $19 ^ 1;
  $nd$0$ = (($20) + ($nd$0$ph))|0;
  $$number$0$ = $18 ? $$number$0$lcssa : 0;
  $error$0$ph6 = $$error$0;$nd$0$ph = $nd$0$;$number$0$ph = $$number$0$;
 }
 $21 = ($error$0$ph6$lcssa|0)!=(0);
 $or$cond3 = $21 | $$lcssa18;
 if ($or$cond3) {
  $22 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = $fname;
  (_fprintf(($22|0),(190200|0),($vararg_buffer|0))|0);
  (_fclose(($0|0))|0);
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$dim>>2]|0;
 $24 = HEAP16[132088>>1]|0;
 $25 = $24&65535;
 $26 = ($23|0)==($25|0);
 if ($26) {
  $27 = (($dim) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP16[132080>>1]|0;
  $30 = $29&65535;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = (($dim) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(65535);
   if ($34) {
    $36 = (_calloc($25,2)|0);
    _merror($36,190264);
    $37 = HEAP16[132080>>1]|0;
    $38 = ($37<<16>>16)==(0);
    if (!($38)) {
     $row$012 = 0;
     while(1) {
      $39 = HEAP16[132088>>1]|0;
      $40 = $39&65535;
      (_fread(($36|0),2,($40|0),($0|0))|0);
      $41 = HEAP16[132088>>1]|0;
      $42 = ($41<<16>>16)==(0);
      if (!($42)) {
       $43 = HEAP32[584>>2]|0;
       $44 = $row$012 << 1;
       $45 = $44 & 14;
       $46 = HEAP32[132112>>2]|0;
       $col$011 = 0;
       while(1) {
        $47 = $col$011 & 1;
        $48 = $47 | $45;
        $49 = $48 << 1;
        $50 = $43 >>> $49;
        $51 = $50 & 3;
        $52 = HEAP16[132096>>1]|0;
        $53 = $52&65535;
        $54 = $row$012 >> $53;
        $55 = HEAP16[132104>>1]|0;
        $56 = $55&65535;
        $57 = Math_imul($54, $56)|0;
        $58 = $col$011 >> $53;
        $59 = (($57) + ($58))|0;
        $60 = ((($46) + ($59<<3)|0) + ($51<<1)|0);
        $61 = HEAP16[$60>>1]|0;
        $62 = $61&65535;
        $63 = (($36) + ($col$011<<1)|0);
        $64 = HEAP16[$63>>1]|0;
        $65 = (_ntohs(($64|0))|0);
        $66 = $65&65535;
        $67 = (($62) - ($66))|0;
        $68 = ($67|0)>(0);
        $69 = $67&65535;
        $70 = $68 ? $69 : 0;
        $71 = $43 >>> $49;
        $72 = $71 & 3;
        $73 = HEAP16[132096>>1]|0;
        $74 = $73&65535;
        $75 = $row$012 >> $74;
        $76 = HEAP16[132104>>1]|0;
        $77 = $76&65535;
        $78 = Math_imul($75, $77)|0;
        $79 = $col$011 >> $74;
        $80 = (($78) + ($79))|0;
        $81 = ((($46) + ($80<<3)|0) + ($72<<1)|0);
        HEAP16[$81>>1] = $70;
        $82 = (($col$011) + 1)|0;
        $83 = HEAP16[132088>>1]|0;
        $84 = $83&65535;
        $85 = ($82|0)<($84|0);
        if ($85) {
         $col$011 = $82;
        } else {
         break;
        }
       }
      }
      $86 = (($row$012) + 1)|0;
      $87 = HEAP16[132080>>1]|0;
      $88 = $87&65535;
      $89 = ($86|0)<($88|0);
      if ($89) {
       $row$012 = $86;
      } else {
       break;
      }
     }
    }
    _free($36);
    (_fclose(($0|0))|0);
    _memset((134176|0),0,8204)|0;
    HEAP32[132360>>2] = 0;
    STACKTOP = sp;return;
   }
  }
 }
 $35 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $fname;
 (_fprintf(($35|0),(190232|0),($vararg_buffer1|0))|0);
 (_fclose(($0|0))|0);
 STACKTOP = sp;return;
}
function _gamma_curve($pwr,$ts,$mode,$imax) {
 $pwr = +$pwr;
 $ts = +$ts;
 $mode = $mode|0;
 $imax = $imax|0;
 var $$lcssa = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $9 = 0, $bnd = 0, $exitcond = 0, $exitcond4 = 0, $g$sroa$27$1 = 0.0, $g$sroa$40$0 = 0.0, $g$sroa$50$0 = 0.0, $g$sroa$58$0 = 0.0, $g$sroa$58$0$in = 0.0, $i$03 = 0;
 var $i$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bnd = sp;
 ;HEAP32[$bnd+0>>2]=0|0;HEAP32[$bnd+4>>2]=0|0;HEAP32[$bnd+8>>2]=0|0;HEAP32[$bnd+12>>2]=0|0;
 $0 = $ts >= 1.0;
 $1 = $0&1;
 $2 = (($bnd) + ($1<<3)|0);
 HEAPF64[$2>>3] = 1.0;
 $3 = $ts != 0.0;
 if ($3) {
  $4 = $ts + -1.0;
  $5 = $pwr + -1.0;
  $6 = $5 * $4;
  $7 = !($6 <= 0.0);
  if ($7) {
   $g$sroa$27$1 = 0.0;$g$sroa$40$0 = 0.0;$g$sroa$50$0 = 0.0;
  } else {
   $8 = (($bnd) + 8|0);
   $9 = $pwr != 0.0;
   $10 = -$pwr;
   $i$03 = 0;
   while(1) {
    $11 = +HEAPF64[$bnd>>3];
    $12 = +HEAPF64[$8>>3];
    $13 = $11 + $12;
    $14 = $13 * 0.5;
    if ($9) {
     $15 = $14 / $ts;
     $16 = (+Math_pow((+$15),(+$10)));
     $17 = $16 + -1.0;
     $18 = $17 / $pwr;
     $19 = 1.0 / $14;
     $20 = $18 - $19;
     $21 = $20 > -1.0;
     $22 = $21&1;
     $23 = (($bnd) + ($22<<3)|0);
     HEAPF64[$23>>3] = $14;
    } else {
     $24 = 1.0 / $14;
     $25 = 1.0 - $24;
     $26 = (+Math_exp((+$25)));
     $27 = $14 / $26;
     $28 = $27 < $ts;
     $29 = $28&1;
     $30 = (($bnd) + ($29<<3)|0);
     HEAPF64[$30>>3] = $14;
    }
    $31 = (($i$03) + 1)|0;
    $exitcond4 = ($31|0)==(48);
    if ($exitcond4) {
     $$lcssa = $14;
     break;
    } else {
     $i$03 = $31;
    }
   }
   $32 = $$lcssa / $ts;
   $33 = $pwr != 0.0;
   if ($33) {
    $34 = 1.0 / $pwr;
    $35 = $34 + -1.0;
    $36 = $$lcssa * $35;
    $g$sroa$27$1 = $$lcssa;$g$sroa$40$0 = $32;$g$sroa$50$0 = $36;
   } else {
    $g$sroa$27$1 = $$lcssa;$g$sroa$40$0 = $32;$g$sroa$50$0 = 0.0;
   }
  }
 } else {
  $g$sroa$27$1 = 0.0;$g$sroa$40$0 = 0.0;$g$sroa$50$0 = 0.0;
 }
 $37 = $pwr != 0.0;
 $38 = $g$sroa$40$0 * $g$sroa$40$0;
 $39 = $38 * $ts;
 $40 = $39 * 0.5;
 if ($37) {
  $41 = 1.0 - $g$sroa$40$0;
  $42 = $g$sroa$50$0 * $41;
  $43 = $40 - $42;
  $44 = $pwr + 1.0;
  $45 = (+Math_pow((+$g$sroa$40$0),(+$44)));
  $46 = 1.0 - $45;
  $47 = $g$sroa$50$0 + 1.0;
  $48 = $47 * $46;
  $49 = $48 / $44;
  $50 = $43 + $49;
  $$pn = $50;
 } else {
  $51 = $40 + 1.0;
  $52 = $51 - $g$sroa$27$1;
  $53 = $52 - $g$sroa$40$0;
  $54 = $g$sroa$40$0 * $g$sroa$27$1;
  $55 = (+Math_log((+$g$sroa$40$0)));
  $56 = $55 + -1.0;
  $57 = $54 * $56;
  $58 = $53 - $57;
  $$pn = $58;
 }
 $59 = ($mode|0)==(0);
 if ($59) {
  $g$sroa$58$0$in = 1.0 / $$pn;
  $g$sroa$58$0 = $g$sroa$58$0$in + -1.0;
  HEAPF64[56>>3] = $pwr;
  HEAPF64[((56 + 8|0))>>3] = $ts;
  HEAPF64[((56 + 16|0))>>3] = $g$sroa$27$1;
  HEAPF64[((56 + 24|0))>>3] = $g$sroa$40$0;
  HEAPF64[((56 + 32|0))>>3] = $g$sroa$50$0;
  HEAPF64[((56 + 40|0))>>3] = $g$sroa$58$0;
  STACKTOP = sp;return;
 }
 $60 = (+($imax|0));
 $61 = ($mode|0)==(1);
 $62 = $g$sroa$50$0 + 1.0;
 $63 = 1.0 / $pwr;
 $64 = $g$sroa$50$0 + 1.0;
 $i$12 = 0;
 while(1) {
  $65 = (936 + ($i$12<<1)|0);
  HEAP16[$65>>1] = -1;
  $66 = (+($i$12|0));
  $67 = $66 / $60;
  $68 = $67 < 1.0;
  if ($68) {
   do {
    if ($61) {
     $77 = $67 < $g$sroa$27$1;
     if ($77) {
      $78 = $67 / $ts;
      $86 = $78;
      break;
     }
     if ($37) {
      $79 = $g$sroa$50$0 + $67;
      $80 = $79 / $62;
      $81 = (+Math_pow((+$80),(+$63)));
      $86 = $81;
      break;
     } else {
      $82 = $67 + -1.0;
      $83 = $82 / $g$sroa$27$1;
      $84 = (+Math_exp((+$83)));
      $86 = $84;
      break;
     }
    } else {
     $69 = $67 < $g$sroa$40$0;
     if ($69) {
      $70 = $67 * $ts;
      $86 = $70;
      break;
     }
     if ($37) {
      $71 = (+Math_pow((+$67),(+$pwr)));
      $72 = $64 * $71;
      $73 = $72 - $g$sroa$50$0;
      $86 = $73;
      break;
     } else {
      $74 = (+Math_log((+$67)));
      $75 = $g$sroa$27$1 * $74;
      $76 = $75 + 1.0;
      $86 = $76;
      break;
     }
    }
   } while(0);
   $85 = $86 * 65536.0;
   $87 = (~~(($85))&65535);
   HEAP16[$65>>1] = $87;
  }
  $88 = (($i$12) + 1)|0;
  $exitcond = ($88|0)==(65536);
  if ($exitcond) {
   break;
  } else {
   $i$12 = $88;
  }
 }
 STACKTOP = sp;return;
}
function _pseudoinverse($in,$out,$size) {
 $in = $in|0;
 $out = $out|0;
 $size = $size|0;
 var $$lcssa = 0.0, $$lcssa38 = 0.0, $$lcssa39 = 0.0, $$promoted = 0.0, $$promoted$1 = 0.0, $$promoted$2 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0;
 var $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0;
 var $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0;
 var $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0;
 var $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0;
 var $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0;
 var $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0;
 var $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $exitcond22 = 0, $exitcond26 = 0;
 var $exitcond28 = 0, $exitcond28$1 = 0, $exitcond28$2 = 0, $exitcond30 = 0, $i$019 = 0, $i$114 = 0, $i$29 = 0, $k$016 = 0, $k$016$1 = 0, $k$016$2 = 0, $work = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $work = sp;
 $0 = ($size|0)>(0);
 $1 = (($size) + -1)|0;
 $i$019 = 0;
 while(1) {
  $2 = (($i$019) + 3)|0;
  $3 = ($2|0)==(0);
  $4 = $3&1;
  $5 = (+($4|0));
  $6 = (($work) + (($i$019*48)|0)|0);
  HEAPF64[$6>>3] = $5;
  $7 = ($2|0)==(1);
  $8 = $7&1;
  $9 = (+($8|0));
  $10 = ((($work) + (($i$019*48)|0)|0) + 8|0);
  HEAPF64[$10>>3] = $9;
  $11 = ($2|0)==(2);
  $12 = $11&1;
  $13 = (+($12|0));
  $14 = ((($work) + (($i$019*48)|0)|0) + 16|0);
  HEAPF64[$14>>3] = $13;
  $15 = ($i$019|0)==(0);
  $16 = $15&1;
  $17 = (+($16|0));
  $18 = ((($work) + (($i$019*48)|0)|0) + 24|0);
  HEAPF64[$18>>3] = $17;
  $19 = ($2|0)==(4);
  $20 = $19&1;
  $21 = (+($20|0));
  $22 = ((($work) + (($i$019*48)|0)|0) + 32|0);
  HEAPF64[$22>>3] = $21;
  $23 = ($2|0)==(5);
  $24 = $23&1;
  $25 = (+($24|0));
  $26 = ((($work) + (($i$019*48)|0)|0) + 40|0);
  HEAPF64[$26>>3] = $25;
  if ($0) {
   $27 = (($work) + (($i$019*48)|0)|0);
   $$promoted = +HEAPF64[$27>>3];
   $34 = $$promoted;$k$016 = 0;
   while(1) {
    $28 = ((($in) + (($k$016*24)|0)|0) + ($i$019<<3)|0);
    $29 = +HEAPF64[$28>>3];
    $30 = (($in) + (($k$016*24)|0)|0);
    $31 = +HEAPF64[$30>>3];
    $32 = $29 * $31;
    $33 = $34 + $32;
    $35 = (($k$016) + 1)|0;
    $exitcond28 = ($k$016|0)==($1|0);
    if ($exitcond28) {
     $$lcssa = $33;
     break;
    } else {
     $34 = $33;$k$016 = $35;
    }
   }
   HEAPF64[$27>>3] = $$lcssa;
   if ($0) {
    $155 = ((($work) + (($i$019*48)|0)|0) + 8|0);
    $$promoted$1 = +HEAPF64[$155>>3];
    $162 = $$promoted$1;$k$016$1 = 0;
    while(1) {
     $156 = ((($in) + (($k$016$1*24)|0)|0) + ($i$019<<3)|0);
     $157 = +HEAPF64[$156>>3];
     $158 = ((($in) + (($k$016$1*24)|0)|0) + 8|0);
     $159 = +HEAPF64[$158>>3];
     $160 = $157 * $159;
     $161 = $162 + $160;
     $163 = (($k$016$1) + 1)|0;
     $exitcond28$1 = ($k$016$1|0)==($1|0);
     if ($exitcond28$1) {
      $$lcssa38 = $161;
      break;
     } else {
      $162 = $161;$k$016$1 = $163;
     }
    }
    HEAPF64[$155>>3] = $$lcssa38;
    if ($0) {
     $164 = ((($work) + (($i$019*48)|0)|0) + 16|0);
     $$promoted$2 = +HEAPF64[$164>>3];
     $171 = $$promoted$2;$k$016$2 = 0;
     while(1) {
      $165 = ((($in) + (($k$016$2*24)|0)|0) + ($i$019<<3)|0);
      $166 = +HEAPF64[$165>>3];
      $167 = ((($in) + (($k$016$2*24)|0)|0) + 16|0);
      $168 = +HEAPF64[$167>>3];
      $169 = $166 * $168;
      $170 = $171 + $169;
      $172 = (($k$016$2) + 1)|0;
      $exitcond28$2 = ($k$016$2|0)==($1|0);
      if ($exitcond28$2) {
       $$lcssa39 = $170;
       break;
      } else {
       $171 = $170;$k$016$2 = $172;
      }
     }
     HEAPF64[$164>>3] = $$lcssa39;
    }
   }
  }
  $173 = (($i$019) + 1)|0;
  $exitcond30 = ($173|0)==(3);
  if ($exitcond30) {
   $i$114 = 0;
   break;
  } else {
   $i$019 = $173;
  }
 }
 while(1) {
  $39 = ((($work) + (($i$114*48)|0)|0) + ($i$114<<3)|0);
  $40 = +HEAPF64[$39>>3];
  $41 = (($work) + (($i$114*48)|0)|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $42 / $40;
  HEAPF64[$41>>3] = $43;
  $44 = ((($work) + (($i$114*48)|0)|0) + 8|0);
  $45 = +HEAPF64[$44>>3];
  $46 = $45 / $40;
  HEAPF64[$44>>3] = $46;
  $47 = ((($work) + (($i$114*48)|0)|0) + 16|0);
  $48 = +HEAPF64[$47>>3];
  $49 = $48 / $40;
  HEAPF64[$47>>3] = $49;
  $50 = ((($work) + (($i$114*48)|0)|0) + 24|0);
  $51 = +HEAPF64[$50>>3];
  $52 = $51 / $40;
  HEAPF64[$50>>3] = $52;
  $53 = ((($work) + (($i$114*48)|0)|0) + 32|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $54 / $40;
  HEAPF64[$53>>3] = $55;
  $56 = ((($work) + (($i$114*48)|0)|0) + 40|0);
  $57 = +HEAPF64[$56>>3];
  $58 = $57 / $40;
  HEAPF64[$56>>3] = $58;
  $59 = (0)==($i$114|0);
  if (!($59)) {
   $60 = (($work) + ($i$114<<3)|0);
   $61 = +HEAPF64[$60>>3];
   $62 = (($work) + (($i$114*48)|0)|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $61 * $63;
   $65 = +HEAPF64[$work>>3];
   $66 = $65 - $64;
   HEAPF64[$work>>3] = $66;
   $67 = ((($work) + (($i$114*48)|0)|0) + 8|0);
   $68 = +HEAPF64[$67>>3];
   $69 = $61 * $68;
   $70 = (($work) + 8|0);
   $71 = +HEAPF64[$70>>3];
   $72 = $71 - $69;
   HEAPF64[$70>>3] = $72;
   $73 = ((($work) + (($i$114*48)|0)|0) + 16|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $61 * $74;
   $76 = (($work) + 16|0);
   $77 = +HEAPF64[$76>>3];
   $78 = $77 - $75;
   HEAPF64[$76>>3] = $78;
   $79 = ((($work) + (($i$114*48)|0)|0) + 24|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $61 * $80;
   $82 = (($work) + 24|0);
   $83 = +HEAPF64[$82>>3];
   $84 = $83 - $81;
   HEAPF64[$82>>3] = $84;
   $85 = ((($work) + (($i$114*48)|0)|0) + 32|0);
   $86 = +HEAPF64[$85>>3];
   $87 = $61 * $86;
   $88 = (($work) + 32|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $89 - $87;
   HEAPF64[$88>>3] = $90;
   $91 = ((($work) + (($i$114*48)|0)|0) + 40|0);
   $92 = +HEAPF64[$91>>3];
   $93 = $61 * $92;
   $94 = (($work) + 40|0);
   $95 = +HEAPF64[$94>>3];
   $96 = $95 - $93;
   HEAPF64[$94>>3] = $96;
  }
  $97 = (1)==($i$114|0);
  if (!($97)) {
   $174 = ((($work) + ($i$114<<3)|0) + 48|0);
   $175 = +HEAPF64[$174>>3];
   $176 = (($work) + (($i$114*48)|0)|0);
   $177 = +HEAPF64[$176>>3];
   $178 = $175 * $177;
   $179 = (($work) + 48|0);
   $180 = +HEAPF64[$179>>3];
   $181 = $180 - $178;
   HEAPF64[$179>>3] = $181;
   $182 = ((($work) + (($i$114*48)|0)|0) + 8|0);
   $183 = +HEAPF64[$182>>3];
   $184 = $175 * $183;
   $185 = (($work) + 56|0);
   $186 = +HEAPF64[$185>>3];
   $187 = $186 - $184;
   HEAPF64[$185>>3] = $187;
   $188 = ((($work) + (($i$114*48)|0)|0) + 16|0);
   $189 = +HEAPF64[$188>>3];
   $190 = $175 * $189;
   $191 = (($work) + 64|0);
   $192 = +HEAPF64[$191>>3];
   $193 = $192 - $190;
   HEAPF64[$191>>3] = $193;
   $194 = ((($work) + (($i$114*48)|0)|0) + 24|0);
   $195 = +HEAPF64[$194>>3];
   $196 = $175 * $195;
   $197 = (($work) + 72|0);
   $198 = +HEAPF64[$197>>3];
   $199 = $198 - $196;
   HEAPF64[$197>>3] = $199;
   $200 = ((($work) + (($i$114*48)|0)|0) + 32|0);
   $201 = +HEAPF64[$200>>3];
   $202 = $175 * $201;
   $203 = (($work) + 80|0);
   $204 = +HEAPF64[$203>>3];
   $205 = $204 - $202;
   HEAPF64[$203>>3] = $205;
   $206 = ((($work) + (($i$114*48)|0)|0) + 40|0);
   $207 = +HEAPF64[$206>>3];
   $208 = $175 * $207;
   $209 = (($work) + 88|0);
   $210 = +HEAPF64[$209>>3];
   $211 = $210 - $208;
   HEAPF64[$209>>3] = $211;
  }
  $212 = (2)==($i$114|0);
  if (!($212)) {
   $213 = ((($work) + ($i$114<<3)|0) + 96|0);
   $214 = +HEAPF64[$213>>3];
   $215 = (($work) + (($i$114*48)|0)|0);
   $216 = +HEAPF64[$215>>3];
   $217 = $214 * $216;
   $218 = (($work) + 96|0);
   $219 = +HEAPF64[$218>>3];
   $220 = $219 - $217;
   HEAPF64[$218>>3] = $220;
   $221 = ((($work) + (($i$114*48)|0)|0) + 8|0);
   $222 = +HEAPF64[$221>>3];
   $223 = $214 * $222;
   $224 = (($work) + 104|0);
   $225 = +HEAPF64[$224>>3];
   $226 = $225 - $223;
   HEAPF64[$224>>3] = $226;
   $227 = ((($work) + (($i$114*48)|0)|0) + 16|0);
   $228 = +HEAPF64[$227>>3];
   $229 = $214 * $228;
   $230 = (($work) + 112|0);
   $231 = +HEAPF64[$230>>3];
   $232 = $231 - $229;
   HEAPF64[$230>>3] = $232;
   $233 = ((($work) + (($i$114*48)|0)|0) + 24|0);
   $234 = +HEAPF64[$233>>3];
   $235 = $214 * $234;
   $236 = (($work) + 120|0);
   $237 = +HEAPF64[$236>>3];
   $238 = $237 - $235;
   HEAPF64[$236>>3] = $238;
   $239 = ((($work) + (($i$114*48)|0)|0) + 32|0);
   $240 = +HEAPF64[$239>>3];
   $241 = $214 * $240;
   $242 = (($work) + 128|0);
   $243 = +HEAPF64[$242>>3];
   $244 = $243 - $241;
   HEAPF64[$242>>3] = $244;
   $245 = ((($work) + (($i$114*48)|0)|0) + 40|0);
   $246 = +HEAPF64[$245>>3];
   $247 = $214 * $246;
   $248 = (($work) + 136|0);
   $249 = +HEAPF64[$248>>3];
   $250 = $249 - $247;
   HEAPF64[$248>>3] = $250;
  }
  $251 = (($i$114) + 1)|0;
  $exitcond26 = ($251|0)==(3);
  if ($exitcond26) {
   break;
  } else {
   $i$114 = $251;
  }
 }
 $36 = ($size|0)>(0);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = (($size) + -1)|0;
 $38 = (($work) + 120|0);
 $i$29 = 0;
 while(1) {
  $98 = (($out) + (($i$29*24)|0)|0);
  HEAPF64[$98>>3] = 0.0;
  $99 = (($work) + 24|0);
  $100 = +HEAPF64[$99>>3];
  $101 = (($in) + (($i$29*24)|0)|0);
  $102 = +HEAPF64[$101>>3];
  $103 = $100 * $102;
  $104 = $103 + 0.0;
  HEAPF64[$98>>3] = $104;
  $105 = (($work) + 32|0);
  $106 = +HEAPF64[$105>>3];
  $107 = ((($in) + (($i$29*24)|0)|0) + 8|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $106 * $108;
  $110 = $104 + $109;
  HEAPF64[$98>>3] = $110;
  $111 = (($work) + 40|0);
  $112 = +HEAPF64[$111>>3];
  $113 = ((($in) + (($i$29*24)|0)|0) + 16|0);
  $114 = +HEAPF64[$113>>3];
  $115 = $112 * $114;
  $116 = $110 + $115;
  HEAPF64[$98>>3] = $116;
  $117 = ((($out) + (($i$29*24)|0)|0) + 8|0);
  HEAPF64[$117>>3] = 0.0;
  $118 = (($work) + 72|0);
  $119 = +HEAPF64[$118>>3];
  $120 = (($in) + (($i$29*24)|0)|0);
  $121 = +HEAPF64[$120>>3];
  $122 = $119 * $121;
  $123 = $122 + 0.0;
  HEAPF64[$117>>3] = $123;
  $124 = (($work) + 80|0);
  $125 = +HEAPF64[$124>>3];
  $126 = ((($in) + (($i$29*24)|0)|0) + 8|0);
  $127 = +HEAPF64[$126>>3];
  $128 = $125 * $127;
  $129 = $123 + $128;
  HEAPF64[$117>>3] = $129;
  $130 = (($work) + 88|0);
  $131 = +HEAPF64[$130>>3];
  $132 = ((($in) + (($i$29*24)|0)|0) + 16|0);
  $133 = +HEAPF64[$132>>3];
  $134 = $131 * $133;
  $135 = $129 + $134;
  HEAPF64[$117>>3] = $135;
  $136 = ((($out) + (($i$29*24)|0)|0) + 16|0);
  HEAPF64[$136>>3] = 0.0;
  $137 = +HEAPF64[$38>>3];
  $138 = (($in) + (($i$29*24)|0)|0);
  $139 = +HEAPF64[$138>>3];
  $140 = $137 * $139;
  $141 = $140 + 0.0;
  HEAPF64[$136>>3] = $141;
  $142 = (($work) + 128|0);
  $143 = +HEAPF64[$142>>3];
  $144 = ((($in) + (($i$29*24)|0)|0) + 8|0);
  $145 = +HEAPF64[$144>>3];
  $146 = $143 * $145;
  $147 = $141 + $146;
  HEAPF64[$136>>3] = $147;
  $148 = (($work) + 136|0);
  $149 = +HEAPF64[$148>>3];
  $150 = ((($in) + (($i$29*24)|0)|0) + 16|0);
  $151 = +HEAPF64[$150>>3];
  $152 = $149 * $151;
  $153 = $147 + $152;
  HEAPF64[$136>>3] = $153;
  $154 = (($i$29) + 1)|0;
  $exitcond22 = ($i$29|0)==($37|0);
  if ($exitcond22) {
   break;
  } else {
   $i$29 = $154;
  }
 }
 STACKTOP = sp;return;
}
function _cam_xyz_coeff($rgb_cam,$cam_xyz) {
 $rgb_cam = $rgb_cam|0;
 $cam_xyz = $cam_xyz|0;
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $9 = 0.0, $cam_rgb = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $i$016 = 0, $i$111 = 0, $inverse = 0, $j$35 = 0, $j$35$1 = 0, $j$35$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $cam_rgb = sp + 96|0;
 $inverse = sp;
 $0 = HEAP32[132272>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$lcssa = 0;
 } else {
  $2 = HEAP32[132272>>2]|0;
  $i$016 = 0;
  while(1) {
   $46 = (($cam_xyz) + (($i$016*24)|0)|0);
   $47 = (($cam_rgb) + (($i$016*24)|0)|0);
   $48 = +HEAPF64[$46>>3];
   $49 = $48 * 0.41245300000000001;
   $50 = $49 + 0.0;
   $51 = ((($cam_xyz) + (($i$016*24)|0)|0) + 8|0);
   $52 = +HEAPF64[$51>>3];
   $53 = $52 * 0.212671;
   $54 = $50 + $53;
   $55 = ((($cam_xyz) + (($i$016*24)|0)|0) + 16|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $56 * 0.019334;
   $58 = $54 + $57;
   HEAPF64[$47>>3] = $58;
   $59 = ((($cam_rgb) + (($i$016*24)|0)|0) + 8|0);
   $60 = +HEAPF64[$46>>3];
   $61 = $60 * 0.35758000000000001;
   $62 = $61 + 0.0;
   $63 = ((($cam_xyz) + (($i$016*24)|0)|0) + 8|0);
   $64 = +HEAPF64[$63>>3];
   $65 = $64 * 0.71516000000000002;
   $66 = $62 + $65;
   $67 = ((($cam_xyz) + (($i$016*24)|0)|0) + 16|0);
   $68 = +HEAPF64[$67>>3];
   $69 = $68 * 0.11919299999999999;
   $70 = $66 + $69;
   HEAPF64[$59>>3] = $70;
   $71 = ((($cam_rgb) + (($i$016*24)|0)|0) + 16|0);
   $72 = +HEAPF64[$46>>3];
   $73 = $72 * 0.180423;
   $74 = $73 + 0.0;
   $75 = ((($cam_xyz) + (($i$016*24)|0)|0) + 8|0);
   $76 = +HEAPF64[$75>>3];
   $77 = $76 * 0.072168999999999997;
   $78 = $74 + $77;
   $79 = ((($cam_xyz) + (($i$016*24)|0)|0) + 16|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $80 * 0.95022700000000004;
   $82 = $78 + $81;
   HEAPF64[$71>>3] = $82;
   $83 = (($i$016) + 1)|0;
   $84 = ($83>>>0)<($2>>>0);
   if ($84) {
    $i$016 = $83;
   } else {
    break;
   }
  }
  $$pr = HEAP32[132272>>2]|0;
  $3 = ($$pr|0)==(0);
  if ($3) {
   $$lcssa = 0;
  } else {
   $4 = HEAP32[132272>>2]|0;
   $i$111 = 0;
   while(1) {
    $5 = (($cam_rgb) + (($i$111*24)|0)|0);
    $6 = +HEAPF64[$5>>3];
    $7 = $6 + 0.0;
    $8 = ((($cam_rgb) + (($i$111*24)|0)|0) + 8|0);
    $9 = +HEAPF64[$8>>3];
    $10 = $7 + $9;
    $11 = ((($cam_rgb) + (($i$111*24)|0)|0) + 16|0);
    $12 = +HEAPF64[$11>>3];
    $13 = $10 + $12;
    $14 = (($cam_rgb) + (($i$111*24)|0)|0);
    $15 = +HEAPF64[$14>>3];
    $16 = $15 / $13;
    HEAPF64[$14>>3] = $16;
    $17 = ((($cam_rgb) + (($i$111*24)|0)|0) + 8|0);
    $18 = +HEAPF64[$17>>3];
    $19 = $18 / $13;
    HEAPF64[$17>>3] = $19;
    $20 = ((($cam_rgb) + (($i$111*24)|0)|0) + 16|0);
    $21 = +HEAPF64[$20>>3];
    $22 = $21 / $13;
    HEAPF64[$20>>3] = $22;
    $23 = 1.0 / $13;
    $24 = $23;
    $25 = (132048 + ($i$111<<2)|0);
    HEAPF32[$25>>2] = $24;
    $26 = (($i$111) + 1)|0;
    $27 = ($26>>>0)<($4>>>0);
    if ($27) {
     $i$111 = $26;
    } else {
     $$lcssa = $4;
     break;
    }
   }
  }
 }
 _pseudoinverse($cam_rgb,$inverse,$$lcssa);
 $28 = HEAP32[132272>>2]|0;
 $29 = ($28|0)==(0);
 $30 = (($28) + -1)|0;
 if ($29) {
  STACKTOP = sp;return;
 } else {
  $j$35 = 0;
 }
 while(1) {
  $31 = (($inverse) + (($j$35*24)|0)|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32;
  $34 = (($rgb_cam) + ($j$35<<2)|0);
  HEAPF32[$34>>2] = $33;
  $35 = (($j$35) + 1)|0;
  $exitcond = ($j$35|0)==($30|0);
  if ($exitcond) {
   break;
  } else {
   $j$35 = $35;
  }
 }
 if ($29) {
  STACKTOP = sp;return;
 } else {
  $j$35$1 = 0;
 }
 while(1) {
  $36 = ((($inverse) + (($j$35$1*24)|0)|0) + 8|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $37;
  $39 = ((($rgb_cam) + ($j$35$1<<2)|0) + 16|0);
  HEAPF32[$39>>2] = $38;
  $40 = (($j$35$1) + 1)|0;
  $exitcond$1 = ($j$35$1|0)==($30|0);
  if ($exitcond$1) {
   break;
  } else {
   $j$35$1 = $40;
  }
 }
 if ($29) {
  STACKTOP = sp;return;
 } else {
  $j$35$2 = 0;
 }
 while(1) {
  $41 = ((($inverse) + (($j$35$2*24)|0)|0) + 16|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $42;
  $44 = ((($rgb_cam) + ($j$35$2<<2)|0) + 32|0);
  HEAPF32[$44>>2] = $43;
  $45 = (($j$35$2) + 1)|0;
  $exitcond$2 = ($j$35$2|0)==($30|0);
  if ($exitcond$2) {
   break;
  } else {
   $j$35$2 = $45;
  }
 }
 STACKTOP = sp;return;
}
function _hat_transform($temp,$base,$st,$size,$sc) {
 $temp = $temp|0;
 $base = $base|0;
 $st = $st|0;
 $size = $size|0;
 $sc = $sc|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0.0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $i$0$lcssa = 0, $i$05 = 0, $i$1$lcssa = 0, $i$13 = 0, $i$22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sc|0)>(0);
 if ($0) {
  $1 = (($sc) + -1)|0;
  $i$05 = 0;
  while(1) {
   $6 = Math_imul($i$05, $st)|0;
   $7 = (($base) + ($6<<2)|0);
   $8 = +HEAPF32[$7>>2];
   $9 = $8 * 2.0;
   $10 = (($sc) - ($i$05))|0;
   $11 = Math_imul($10, $st)|0;
   $12 = (($base) + ($11<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $9 + $13;
   $15 = (($i$05) + ($sc))|0;
   $16 = Math_imul($15, $st)|0;
   $17 = (($base) + ($16<<2)|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $14 + $18;
   $20 = (($temp) + ($i$05<<2)|0);
   HEAPF32[$20>>2] = $19;
   $21 = (($i$05) + 1)|0;
   $exitcond11 = ($i$05|0)==($1|0);
   if ($exitcond11) {
    $i$0$lcssa = $sc;
    break;
   } else {
    $i$05 = $21;
   }
  }
 } else {
  $i$0$lcssa = 0;
 }
 $2 = (($i$0$lcssa) + ($sc))|0;
 $3 = ($2|0)<($size|0);
 if ($3) {
  $4 = (($size) + -1)|0;
  $5 = (($4) - ($sc))|0;
  $37 = $2;$i$13 = $i$0$lcssa;
  while(1) {
   $27 = Math_imul($i$13, $st)|0;
   $28 = (($base) + ($27<<2)|0);
   $29 = +HEAPF32[$28>>2];
   $30 = $29 * 2.0;
   $31 = (($i$13) - ($sc))|0;
   $32 = Math_imul($31, $st)|0;
   $33 = (($base) + ($32<<2)|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $30 + $34;
   $36 = Math_imul($37, $st)|0;
   $38 = (($base) + ($36<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $40 = $35 + $39;
   $41 = (($temp) + ($i$13<<2)|0);
   HEAPF32[$41>>2] = $40;
   $42 = (($i$13) + 1)|0;
   $43 = (($42) + ($sc))|0;
   $exitcond10 = ($i$13|0)==($5|0);
   if ($exitcond10) {
    break;
   } else {
    $37 = $43;$i$13 = $42;
   }
  }
  $22 = (($size) - ($sc))|0;
  $i$1$lcssa = $22;
 } else {
  $i$1$lcssa = $i$0$lcssa;
 }
 $23 = ($i$1$lcssa|0)<($size|0);
 if (!($23)) {
  return;
 }
 $24 = $size << 1;
 $$neg = (($24) + -2)|0;
 $25 = (($$neg) - ($sc))|0;
 $26 = (($size) + -1)|0;
 $i$22 = $i$1$lcssa;
 while(1) {
  $44 = Math_imul($i$22, $st)|0;
  $45 = (($base) + ($44<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $46 * 2.0;
  $48 = (($i$22) - ($sc))|0;
  $49 = Math_imul($48, $st)|0;
  $50 = (($base) + ($49<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $47 + $51;
  $53 = (($25) - ($i$22))|0;
  $54 = Math_imul($53, $st)|0;
  $55 = (($base) + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $52 + $56;
  $58 = (($temp) + ($i$22<<2)|0);
  HEAPF32[$58>>2] = $57;
  $59 = (($i$22) + 1)|0;
  $exitcond = ($i$22|0)==($26|0);
  if ($exitcond) {
   break;
  } else {
   $i$22 = $59;
  }
 }
 return;
}
function _wavelet_denoise() {
 var $$ = 0, $$mux = 0.0, $$mux9 = 0.0, $$not = 0, $$not7 = 0, $$sum = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0;
 var $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0.0;
 var $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0;
 var $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blk = 0, $brmerge = 0, $brmerge8 = 0, $c$159 = 0, $col$035 = 0, $col$147 = 0, $col$222 = 0;
 var $col$326 = 0, $diff$0 = 0.0, $exitcond65 = 0, $exitcond68 = 0, $exitcond69 = 0, $fimg$0 = 0, $hpass$055 = 0, $i$033 = 0, $i$150 = 0, $i$256 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next64 = 0, $indvars$iv63 = 0, $lev$054 = 0, $mul = 0, $or$cond = 0, $or$cond3 = 0, $row$039 = 0, $row$143 = 0;
 var $scale$0 = 0, $scale$0$lcssa = 0, $window = 0, $wlast$030 = 0, $wlast$1$lcssa = 0, $wlast$123 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $mul = sp + 24|0;
 $blk = sp + 16|0;
 $window = sp;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((190312|0),21,1,($2|0))|0);
 }
 $3 = HEAP32[132368>>2]|0;
 $scale$0 = 1;
 while(1) {
  $4 = $3 << $scale$0;
  $5 = ($4>>>0)<(65536);
  $6 = (($scale$0) + 1)|0;
  if ($5) {
   $scale$0 = $6;
  } else {
   $scale$0$lcssa = $scale$0;
   break;
  }
 }
 $7 = (($scale$0$lcssa) + -1)|0;
 $8 = $3 << $7;
 HEAP32[132368>>2] = $8;
 $9 = HEAP32[132360>>2]|0;
 $10 = $9 << $7;
 HEAP32[132360>>2] = $10;
 $11 = HEAP16[134176>>1]|0;
 $12 = $11&65535;
 $13 = $12 << $7;
 $14 = $13&65535;
 HEAP16[134176>>1] = $14;
 $15 = HEAP16[((134176 + 2|0))>>1]|0;
 $16 = $15&65535;
 $17 = $16 << $7;
 $18 = $17&65535;
 HEAP16[((134176 + 2|0))>>1] = $18;
 $19 = HEAP16[((134176 + 4|0))>>1]|0;
 $20 = $19&65535;
 $21 = $20 << $7;
 $22 = $21&65535;
 HEAP16[((134176 + 4|0))>>1] = $22;
 $23 = HEAP16[((134176 + 6|0))>>1]|0;
 $24 = $23&65535;
 $25 = $24 << $7;
 $26 = $25&65535;
 HEAP16[((134176 + 6|0))>>1] = $26;
 $27 = HEAP16[190336>>1]|0;
 $28 = $27&65535;
 $29 = HEAP16[132104>>1]|0;
 $30 = $29&65535;
 $31 = Math_imul($30, $28)|0;
 $32 = ($31>>>0)<(357892096);
 if ($32) {
  $33 = ($31*3)|0;
  $34 = (($30) + ($28))|0;
  $35 = (($34) + ($33))|0;
  $36 = $35 << 2;
  $37 = (_malloc($36)|0);
  $fimg$0 = $37;
 } else {
  $fimg$0 = 0;
 }
 _merror($fimg$0,190344);
 $38 = ($31*3)|0;
 $39 = (($fimg$0) + ($38<<2)|0);
 $40 = HEAP32[132272>>2]|0;
 $41 = ($40|0)==(3);
 $42 = HEAP32[584>>2]|0;
 $43 = ($42|0)!=(0);
 $or$cond = $41 & $43;
 $44 = $or$cond&1;
 $$ = (($44) + ($40))|0;
 $45 = ($$|0)>(0);
 if ($45) {
  $46 = ($31|0)==(0);
  $47 = ($31|0)==(0);
  $48 = ($31|0)==(0);
  $49 = $29&65535;
  $50 = $27&65535;
  $51 = Math_imul($49, $50)|0;
  $52 = $or$cond&1;
  $53 = (($40) + ($52))|0;
  $54 = (($53) + -1)|0;
  $c$159 = 0;
  while(1) {
   if ($46) {
    $hpass$055 = 0;$lev$054 = 0;
   } else {
    $55 = HEAP32[132112>>2]|0;
    $i$033 = 0;
    while(1) {
     $56 = ((($55) + ($i$033<<3)|0) + ($c$159<<1)|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = $57&65535;
     $59 = $58 << $7;
     $60 = (+($59|0));
     $61 = (+Math_sqrt((+$60)));
     $62 = $61 * 256.0;
     $63 = $62;
     $64 = (($fimg$0) + ($i$033<<2)|0);
     HEAPF32[$64>>2] = $63;
     $65 = (($i$033) + 1)|0;
     $66 = ($65|0)<($31|0);
     if ($66) {
      $i$033 = $65;
     } else {
      $hpass$055 = 0;$lev$054 = 0;
      break;
     }
    }
   }
   while(1) {
    $68 = $lev$054 & 1;
    $69 = (($68) + 1)|0;
    $70 = Math_imul($69, $31)|0;
    $71 = HEAP16[190336>>1]|0;
    $72 = ($71<<16>>16)==(0);
    if (!($72)) {
     $73 = 1 << $lev$054;
     $row$039 = 0;
     while(1) {
      $78 = HEAP16[132104>>1]|0;
      $79 = $78&65535;
      $80 = Math_imul($79, $row$039)|0;
      $$sum5 = (($80) + ($hpass$055))|0;
      $81 = (($fimg$0) + ($$sum5<<2)|0);
      _hat_transform($39,$81,1,$79,$73);
      $82 = HEAP16[132104>>1]|0;
      $83 = ($82<<16>>16)==(0);
      if (!($83)) {
       $84 = $82&65535;
       $85 = HEAP16[132104>>1]|0;
       $86 = $85&65535;
       $91 = $84;$col$035 = 0;
       while(1) {
        $$sum6 = (($col$035) + ($38))|0;
        $87 = (($fimg$0) + ($$sum6<<2)|0);
        $88 = +HEAPF32[$87>>2];
        $89 = $88 * 0.25;
        $90 = Math_imul($91, $row$039)|0;
        $92 = (($col$035) + ($70))|0;
        $93 = (($92) + ($90))|0;
        $94 = (($fimg$0) + ($93<<2)|0);
        HEAPF32[$94>>2] = $89;
        $95 = (($col$035) + 1)|0;
        $96 = ($95|0)<($86|0);
        if ($96) {
         $91 = $86;$col$035 = $95;
        } else {
         break;
        }
       }
      }
      $97 = (($row$039) + 1)|0;
      $98 = HEAP16[190336>>1]|0;
      $99 = $98&65535;
      $100 = ($97|0)<($99|0);
      if ($100) {
       $row$039 = $97;
      } else {
       break;
      }
     }
    }
    $74 = HEAP16[132104>>1]|0;
    $75 = ($74<<16>>16)==(0);
    if (!($75)) {
     $76 = $74&65535;
     $77 = 1 << $lev$054;
     $104 = $76;$col$147 = 0;
     while(1) {
      $$sum = (($col$147) + ($70))|0;
      $101 = (($fimg$0) + ($$sum<<2)|0);
      $102 = HEAP16[190336>>1]|0;
      $103 = $102&65535;
      _hat_transform($39,$101,$104,$103,$77);
      $105 = HEAP16[190336>>1]|0;
      $106 = ($105<<16>>16)==(0);
      if (!($106)) {
       $107 = HEAP16[132104>>1]|0;
       $108 = $107&65535;
       $109 = (($col$147) + ($70))|0;
       $110 = HEAP16[190336>>1]|0;
       $111 = $110&65535;
       $row$143 = 0;
       while(1) {
        $$sum4 = (($row$143) + ($38))|0;
        $112 = (($fimg$0) + ($$sum4<<2)|0);
        $113 = +HEAPF32[$112>>2];
        $114 = $113 * 0.25;
        $115 = Math_imul($108, $row$143)|0;
        $116 = (($109) + ($115))|0;
        $117 = (($fimg$0) + ($116<<2)|0);
        HEAPF32[$117>>2] = $114;
        $118 = (($row$143) + 1)|0;
        $119 = ($118|0)<($111|0);
        if ($119) {
         $row$143 = $118;
        } else {
         break;
        }
       }
      }
      $120 = (($col$147) + 1)|0;
      $121 = HEAP16[132104>>1]|0;
      $122 = $121&65535;
      $123 = ($120|0)<($122|0);
      if ($123) {
       $104 = $122;$col$147 = $120;
      } else {
       break;
      }
     }
    }
    $124 = +HEAPF32[128>>2];
    $125 = (190280 + ($lev$054<<2)|0);
    $126 = +HEAPF32[$125>>2];
    $127 = $124 * $126;
    if (!($47)) {
     $128 = -$127;
     $129 = ($hpass$055|0)==(0);
     $i$150 = 0;
     while(1) {
      $130 = (($i$150) + ($70))|0;
      $131 = (($fimg$0) + ($130<<2)|0);
      $132 = +HEAPF32[$131>>2];
      $133 = (($i$150) + ($hpass$055))|0;
      $134 = (($fimg$0) + ($133<<2)|0);
      $135 = +HEAPF32[$134>>2];
      $136 = $135 - $132;
      HEAPF32[$134>>2] = $136;
      $137 = $136 < $128;
      do {
       if ($137) {
        $138 = $127 + $136;
        HEAPF32[$134>>2] = $138;
       } else {
        $139 = $136 > $127;
        if ($139) {
         $140 = $136 - $127;
         HEAPF32[$134>>2] = $140;
         break;
        } else {
         HEAPF32[$134>>2] = 0.0;
         break;
        }
       }
      } while(0);
      if (!($129)) {
       $141 = +HEAPF32[$134>>2];
       $142 = (($fimg$0) + ($i$150<<2)|0);
       $143 = +HEAPF32[$142>>2];
       $144 = $141 + $143;
       HEAPF32[$142>>2] = $144;
      }
      $145 = (($i$150) + 1)|0;
      $146 = ($145|0)<($31|0);
      if ($146) {
       $i$150 = $145;
      } else {
       break;
      }
     }
    }
    $147 = (($lev$054) + 1)|0;
    $exitcond68 = ($147|0)==(5);
    if ($exitcond68) {
     break;
    } else {
     $hpass$055 = $70;$lev$054 = $147;
    }
   }
   if (!($48)) {
    $67 = HEAP32[132112>>2]|0;
    $i$256 = 0;
    while(1) {
     $148 = (($fimg$0) + ($i$256<<2)|0);
     $149 = +HEAPF32[$148>>2];
     $150 = (($i$256) + ($51))|0;
     $151 = (($fimg$0) + ($150<<2)|0);
     $152 = +HEAPF32[$151>>2];
     $153 = $149 + $152;
     $154 = $153 * $153;
     $155 = $154 * 1.52587890625E-5;
     $156 = $155 < 65535.0;
     $157 = $156 ? $155 : 65535.0;
     $158 = $157 < 0.0;
     $$not7 = $156 ^ 1;
     $brmerge8 = $158 | $$not7;
     $$mux9 = $158 ? 0.0 : 65535.0;
     $159 = $brmerge8 ? $$mux9 : $155;
     $160 = (~~(($159))&65535);
     $161 = ((($67) + ($i$256<<3)|0) + ($c$159<<1)|0);
     HEAP16[$161>>1] = $160;
     $162 = (($i$256) + 1)|0;
     $163 = ($162|0)<($31|0);
     if ($163) {
      $i$256 = $162;
     } else {
      break;
     }
    }
   }
   $164 = (($c$159) + 1)|0;
   $exitcond69 = ($c$159|0)==($54|0);
   if ($exitcond69) {
    break;
   } else {
    $c$159 = $164;
   }
  }
 }
 $165 = HEAP32[584>>2]|0;
 $166 = ($165|0)!=(0);
 $167 = HEAP32[132272>>2]|0;
 $168 = ($167|0)==(3);
 $or$cond3 = $166 & $168;
 if (!($or$cond3)) {
  _free($fimg$0);
  STACKTOP = sp;return;
 }
 $177 = HEAP32[584>>2]|0;
 $178 = $177 >>> 4;
 $179 = $178 & 2;
 $180 = $179 | 1;
 $181 = (132048 + ($180<<2)|0);
 $182 = +HEAPF32[$181>>2];
 $183 = $182;
 $184 = $183 * 0.125;
 $185 = $177 & 2;
 $186 = $185 | 1;
 $187 = (132048 + ($186<<2)|0);
 $188 = +HEAPF32[$187>>2];
 $189 = $188;
 $190 = $184 / $189;
 $191 = $190;
 HEAPF32[$mul>>2] = $191;
 $192 = $177 & 2;
 $193 = $192 | 1;
 $194 = (134176 + ($193<<1)|0);
 $195 = HEAP16[$194>>1]|0;
 $196 = $195&65535;
 HEAP32[$blk>>2] = $196;
 $197 = $177 >>> 8;
 $198 = $197 & 2;
 $199 = $198 | 1;
 $200 = (132048 + ($199<<2)|0);
 $201 = +HEAPF32[$200>>2];
 $202 = $201;
 $203 = $202 * 0.125;
 $204 = $177 >>> 4;
 $205 = $204 & 2;
 $206 = $205 | 1;
 $207 = (132048 + ($206<<2)|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $208;
 $210 = $203 / $209;
 $211 = $210;
 $212 = (($mul) + 4|0);
 HEAPF32[$212>>2] = $211;
 $213 = $177 >>> 4;
 $214 = $213 & 2;
 $215 = $214 | 1;
 $216 = (134176 + ($215<<1)|0);
 $217 = HEAP16[$216>>1]|0;
 $218 = $217&65535;
 $219 = (($blk) + 4|0);
 HEAP32[$219>>2] = $218;
 $220 = HEAP16[132088>>1]|0;
 $221 = $220&65535;
 HEAP32[$window>>2] = $fimg$0;
 $222 = (($fimg$0) + ($221<<1)|0);
 $223 = (($window) + 4|0);
 HEAP32[$223>>2] = $222;
 $224 = (($fimg$0) + ($221<<2)|0);
 $225 = (($window) + 8|0);
 HEAP32[$225>>2] = $224;
 $226 = ($221*3)|0;
 $227 = (($fimg$0) + ($226<<1)|0);
 $228 = (($window) + 12|0);
 HEAP32[$228>>2] = $227;
 $229 = HEAP16[132080>>1]|0;
 $230 = $229&65535;
 $231 = (($230) + -1)|0;
 $232 = ($231|0)>(1);
 if (!($232)) {
  _free($fimg$0);
  STACKTOP = sp;return;
 }
 $169 = +HEAPF32[128>>2];
 $170 = $169 * 0.001953125;
 $171 = HEAP32[584>>2]|0;
 $172 = (($window) + 8|0);
 $173 = (($window) + 4|0);
 $174 = HEAP32[132112>>2]|0;
 $175 = -$170;
 $176 = (($window) + 8|0);
 $indvars$iv = 2;$indvars$iv63 = 1;$wlast$030 = -1;
 while(1) {
  $indvars$iv$next64 = (($indvars$iv63) + 1)|0;
  $237 = ($wlast$030|0)<($indvars$iv$next64|0);
  if ($237) {
   $wlast$123 = $wlast$030;
   while(1) {
    $238 = HEAP32[$window>>2]|0;
    $239 = (($window) + 12|0);
    HEAP32[$239>>2] = $238;
    $240 = (($window) + 4|0);
    $241 = HEAP32[$240>>2]|0;
    HEAP32[$window>>2] = $241;
    $242 = (($window) + 8|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = (($window) + 4|0);
    HEAP32[$244>>2] = $243;
    $245 = (($window) + 12|0);
    $246 = HEAP32[$245>>2]|0;
    $247 = (($window) + 8|0);
    HEAP32[$247>>2] = $246;
    $248 = (($wlast$123) + 1)|0;
    $249 = $248 << 1;
    $250 = $249 & 14;
    $251 = $250 << 1;
    $252 = $251 | 2;
    $253 = $171 >>> $252;
    $254 = $253 & 1;
    $255 = HEAP16[132088>>1]|0;
    $256 = $255&65535;
    $257 = ($254>>>0)<($256>>>0);
    if ($257) {
     $258 = HEAP32[$176>>2]|0;
     $col$222 = $254;
     while(1) {
      $259 = $col$222 & 1;
      $260 = $259 | $250;
      $261 = $260 << 1;
      $262 = $171 >>> $261;
      $263 = $262 & 3;
      $264 = HEAP16[132096>>1]|0;
      $265 = $264&65535;
      $266 = $248 >> $265;
      $267 = HEAP16[132104>>1]|0;
      $268 = $267&65535;
      $269 = Math_imul($266, $268)|0;
      $270 = $col$222 >> $265;
      $271 = (($269) + ($270))|0;
      $272 = ((($174) + ($271<<3)|0) + ($263<<1)|0);
      $273 = HEAP16[$272>>1]|0;
      $274 = (($258) + ($col$222<<1)|0);
      HEAP16[$274>>1] = $273;
      $275 = (($col$222) + 2)|0;
      $276 = HEAP16[132088>>1]|0;
      $277 = $276&65535;
      $278 = ($275|0)<($277|0);
      if ($278) {
       $col$222 = $275;
      } else {
       break;
      }
     }
    }
    $exitcond65 = ($wlast$123|0)==($indvars$iv63|0);
    if ($exitcond65) {
     $wlast$1$lcssa = $indvars$iv;
     break;
    } else {
     $wlast$123 = $248;
    }
   }
  } else {
   $wlast$1$lcssa = $wlast$030;
  }
  $279 = $indvars$iv63 << 1;
  $280 = $279 & 14;
  $281 = $280 << 1;
  $282 = $171 >>> $281;
  $283 = $282 & 1;
  $284 = (($283) + 1)|0;
  $285 = HEAP16[132088>>1]|0;
  $286 = $285&65535;
  $287 = (($286) + -1)|0;
  $288 = ($284|0)<($287|0);
  if ($288) {
   $289 = HEAP32[$window>>2]|0;
   $290 = HEAP32[$172>>2]|0;
   $291 = $indvars$iv63 & 1;
   $292 = $291 ^ 1;
   $293 = (($blk) + ($292<<2)|0);
   $294 = HEAP32[$293>>2]|0;
   $295 = $294 << 2;
   $296 = (($mul) + ($291<<2)|0);
   $297 = +HEAPF32[$296>>2];
   $298 = HEAP32[$173>>2]|0;
   $299 = (($blk) + ($291<<2)|0);
   $300 = HEAP32[$299>>2]|0;
   $col$326 = $284;
   while(1) {
    $301 = (($col$326) + -1)|0;
    $302 = (($289) + ($301<<1)|0);
    $303 = HEAP16[$302>>1]|0;
    $304 = $303&65535;
    $305 = (($col$326) + 1)|0;
    $306 = (($289) + ($305<<1)|0);
    $307 = HEAP16[$306>>1]|0;
    $308 = $307&65535;
    $309 = (($308) + ($304))|0;
    $310 = (($290) + ($301<<1)|0);
    $311 = HEAP16[$310>>1]|0;
    $312 = $311&65535;
    $313 = (($309) + ($312))|0;
    $314 = (($290) + ($305<<1)|0);
    $315 = HEAP16[$314>>1]|0;
    $316 = $315&65535;
    $317 = (($313) + ($316))|0;
    $318 = (($317) - ($295))|0;
    $319 = (+($318|0));
    $320 = $297 * $319;
    $321 = $320;
    $322 = (($298) + ($col$326<<1)|0);
    $323 = HEAP16[$322>>1]|0;
    $324 = $323&65535;
    $325 = (($324) + ($300))|0;
    $326 = (+($325|0));
    $327 = $326 * 0.5;
    $328 = $321 + $327;
    $329 = $328;
    $330 = $329 < 0.0;
    if ($330) {
     $334 = 0.0;
    } else {
     $331 = $329;
     $332 = (+Math_sqrt((+$331)));
     $334 = $332;
    }
    $333 = $334;
    $335 = $col$326 & 1;
    $336 = $335 | $280;
    $337 = $336 << 1;
    $338 = $171 >>> $337;
    $339 = $338 & 3;
    $340 = HEAP16[132096>>1]|0;
    $341 = $340&65535;
    $342 = $indvars$iv63 >> $341;
    $343 = HEAP16[132104>>1]|0;
    $344 = $343&65535;
    $345 = Math_imul($342, $344)|0;
    $346 = $col$326 >> $341;
    $347 = (($345) + ($346))|0;
    $348 = ((($174) + ($347<<3)|0) + ($339<<1)|0);
    $349 = HEAP16[$348>>1]|0;
    $350 = (+($349&65535));
    $351 = (+Math_sqrt((+$350)));
    $352 = $333;
    $353 = $351 - $352;
    $354 = $353;
    $355 = $354 < $175;
    if ($355) {
     $356 = $170 + $354;
     $diff$0 = $356;
    } else {
     $357 = $354 > $170;
     if ($357) {
      $358 = $354 - $170;
      $diff$0 = $358;
     } else {
      $diff$0 = 0.0;
     }
    }
    $359 = $333 + $diff$0;
    $360 = $359 * $359;
    $361 = $360;
    $362 = $361 + 0.5;
    $363 = $362 < 65535.0;
    $364 = $363 ? $362 : 65535.0;
    $365 = $364 < 0.0;
    $$not = $363 ^ 1;
    $brmerge = $365 | $$not;
    $$mux = $365 ? 0.0 : 65535.0;
    $366 = $brmerge ? $$mux : $362;
    $367 = (~~(($366))&65535);
    $368 = $171 >>> $337;
    $369 = $368 & 3;
    $370 = HEAP16[132096>>1]|0;
    $371 = $370&65535;
    $372 = $indvars$iv63 >> $371;
    $373 = HEAP16[132104>>1]|0;
    $374 = $373&65535;
    $375 = Math_imul($372, $374)|0;
    $376 = $col$326 >> $371;
    $377 = (($375) + ($376))|0;
    $378 = ((($174) + ($377<<3)|0) + ($369<<1)|0);
    HEAP16[$378>>1] = $367;
    $379 = (($col$326) + 2)|0;
    $380 = HEAP16[132088>>1]|0;
    $381 = $380&65535;
    $382 = (($381) + -1)|0;
    $383 = ($379|0)<($382|0);
    if ($383) {
     $col$326 = $379;
    } else {
     break;
    }
   }
  }
  $233 = HEAP16[132080>>1]|0;
  $234 = $233&65535;
  $235 = (($234) + -1)|0;
  $236 = ($indvars$iv$next64|0)<($235|0);
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  if ($236) {
   $indvars$iv = $indvars$iv$next;$indvars$iv63 = $indvars$iv$next64;$wlast$030 = $wlast$1$lcssa;
  } else {
   break;
  }
 }
 _free($fimg$0);
 STACKTOP = sp;return;
}
function _scale_colors() {
 var $$ = 0, $$15 = 0, $$mask = 0, $$mask14 = 0, $$mask83 = 0, $$op = 0, $$sink = 0, $$sink$in = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $0 = 0.0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0;
 var $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0;
 var $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0;
 var $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0;
 var $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0;
 var $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0;
 var $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0.0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0;
 var $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, $c$055 = 0, $c$1 = 0, $c$938 = 0;
 var $col$061 = 0, $col$152 = 0, $col$232 = 0, $dmax$1 = 0.0, $dmax$1$1 = 0.0, $dmax$1$2 = 0.0, $dmax$1$3 = 0.0, $dmin$0$dmax$0 = 0.0, $dmin$1 = 0.0, $dmin$1$1 = 0.0, $dmin$1$2 = 0.0, $dmin$1$3 = 0.0, $dsum = 0, $exitcond = 0, $exitcond71 = 0, $exitcond77 = 0, $exitcond78 = 0, $i$041 = 0, $i$131 = 0, $or$cond = 0;
 var $or$cond10 = 0, $or$cond16 = 0, $or$cond17 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, $or$cond84 = 0, $row$067 = 0, $row$153 = 0, $row$234 = 0, $scale_mul = 0, $sum = 0, $val$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0;
 var $x$057 = 0, $y$059 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer14 = sp + 104|0;
 $vararg_buffer11 = sp + 96|0;
 $vararg_buffer8 = sp + 88|0;
 $vararg_buffer5 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $sum = sp + 128|0;
 $dsum = sp;
 $scale_mul = sp + 112|0;
 $0 = +HEAPF32[112>>2];
 $1 = $0 != 0.0;
 if ($1) {
  ;HEAP32[132048+0>>2]=HEAP32[112+0>>2]|0;HEAP32[132048+4>>2]=HEAP32[112+4>>2]|0;HEAP32[132048+8>>2]=HEAP32[112+8>>2]|0;HEAP32[132048+12>>2]=HEAP32[112+12>>2]|0;
 }
 $2 = HEAP32[176>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[184>>2]|0;
  $5 = ($4|0)!=(0);
  $6 = +HEAPF32[133480>>2];
  $7 = $6 == -1.0;
  $or$cond = $5 & $7;
  if ($or$cond) {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  dest=$dsum+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $8 = HEAP32[((240 + 4|0))>>2]|0;
  $9 = HEAP32[((240 + 12|0))>>2]|0;
  $10 = (($9) + ($8))|0;
  $11 = HEAP16[132080>>1]|0;
  $12 = $11&65535;
  $13 = ($10>>>0)<($12>>>0);
  $$15 = $13 ? $10 : $12;
  $14 = HEAP32[240>>2]|0;
  $15 = HEAP32[((240 + 8|0))>>2]|0;
  $16 = (($15) + ($14))|0;
  $17 = HEAP16[132088>>1]|0;
  $18 = $17&65535;
  $19 = ($16>>>0)<($18>>>0);
  $20 = $19 ? $16 : $18;
  $21 = ($8>>>0)<($$15>>>0);
  if ($21) {
   $22 = HEAP32[240>>2]|0;
   $23 = ($22>>>0)<($20>>>0);
   $24 = HEAP32[584>>2]|0;
   $25 = ($24|0)==(0);
   $26 = HEAP16[132088>>1]|0;
   $27 = $26&65535;
   $28 = HEAP32[132112>>2]|0;
   $29 = HEAP32[132368>>2]|0;
   $30 = (($29) + -25)|0;
   $31 = HEAP32[584>>2]|0;
   $32 = ($31|0)==(0);
   $33 = HEAP16[132096>>1]|0;
   $34 = $33&65535;
   $35 = HEAP16[132104>>1]|0;
   $36 = $35&65535;
   $37 = HEAP32[132112>>2]|0;
   $row$067 = $8;
   while(1) {
    if ($23) {
     $38 = (($row$067) + 8)|0;
     $39 = ($row$067>>>0)<(4294967288);
     $col$061 = $22;
     while(1) {
      ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
      L16: do {
       if ($39) {
        $40 = (($col$061) + 8)|0;
        $41 = ($col$061>>>0)<(4294967288);
        $y$059 = $row$067;
        while(1) {
         if ($41) {
          $42 = Math_imul($27, $y$059)|0;
          $43 = $y$059 >>> $34;
          $44 = Math_imul($43, $36)|0;
          $x$057 = $col$061;
          while(1) {
           $45 = (($42) + ($x$057))|0;
           $46 = $x$057 >>> $34;
           $47 = (($44) + ($46))|0;
           $c$055 = 0;
           while(1) {
            if ($25) {
             $50 = ((($28) + ($45<<3)|0) + ($c$055<<1)|0);
             $$sink$in = $50;$c$1 = $c$055;
            } else {
             $48 = (_fcol($y$059,$x$057)|0);
             $49 = ((($37) + ($47<<3)|0) + ($48<<1)|0);
             $$sink$in = $49;$c$1 = $48;
            }
            $$sink = HEAP16[$$sink$in>>1]|0;
            $51 = $$sink&65535;
            $52 = ($51>>>0)>($30>>>0);
            if ($52) {
             break L16;
            }
            $53 = (134176 + ($c$1<<1)|0);
            $54 = HEAP16[$53>>1]|0;
            $55 = $54&65535;
            $56 = (($51) - ($55))|0;
            $57 = ($56|0)<(0);
            $$ = $57 ? 0 : $56;
            $58 = (($sum) + ($c$1<<2)|0);
            $59 = HEAP32[$58>>2]|0;
            $60 = (($$) + ($59))|0;
            HEAP32[$58>>2] = $60;
            $61 = (($c$1) + 4)|0;
            $62 = (($sum) + ($61<<2)|0);
            $63 = HEAP32[$62>>2]|0;
            $64 = (($63) + 1)|0;
            HEAP32[$62>>2] = $64;
            $65 = (($c$1) + 1)|0;
            $66 = ($65>>>0)<(4);
            $or$cond84 = $32 & $66;
            if ($or$cond84) {
             $c$055 = $65;
            } else {
             break;
            }
           }
           $67 = (($x$057) + 1)|0;
           $68 = ($67>>>0)<($40>>>0);
           $69 = ($67>>>0)<($20>>>0);
           $or$cond17 = $68 & $69;
           if ($or$cond17) {
            $x$057 = $67;
           } else {
            break;
           }
          }
         }
         $70 = (($y$059) + 1)|0;
         $71 = ($70>>>0)<($38>>>0);
         $72 = ($70>>>0)<($$15>>>0);
         $or$cond16 = $71 & $72;
         if ($or$cond16) {
          $y$059 = $70;
         } else {
          label = 21;
          break;
         }
        }
       } else {
        label = 21;
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       $73 = HEAP32[$sum>>2]|0;
       $74 = (+($73>>>0));
       $75 = +HEAPF64[$dsum>>3];
       $76 = $75 + $74;
       HEAPF64[$dsum>>3] = $76;
       $77 = (($sum) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = (+($78>>>0));
       $80 = (($dsum) + 8|0);
       $81 = +HEAPF64[$80>>3];
       $82 = $81 + $79;
       HEAPF64[$80>>3] = $82;
       $83 = (($sum) + 8|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (+($84>>>0));
       $86 = (($dsum) + 16|0);
       $87 = +HEAPF64[$86>>3];
       $88 = $87 + $85;
       HEAPF64[$86>>3] = $88;
       $89 = (($sum) + 12|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (+($90>>>0));
       $92 = (($dsum) + 24|0);
       $93 = +HEAPF64[$92>>3];
       $94 = $93 + $91;
       HEAPF64[$92>>3] = $94;
       $95 = (($sum) + 16|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (+($96>>>0));
       $98 = (($dsum) + 32|0);
       $99 = +HEAPF64[$98>>3];
       $100 = $99 + $97;
       HEAPF64[$98>>3] = $100;
       $101 = (($sum) + 20|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = (+($102>>>0));
       $104 = (($dsum) + 40|0);
       $105 = +HEAPF64[$104>>3];
       $106 = $105 + $103;
       HEAPF64[$104>>3] = $106;
       $107 = (($sum) + 24|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (+($108>>>0));
       $110 = (($dsum) + 48|0);
       $111 = +HEAPF64[$110>>3];
       $112 = $111 + $109;
       HEAPF64[$110>>3] = $112;
       $113 = (($sum) + 28|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (+($114>>>0));
       $116 = (($dsum) + 56|0);
       $117 = +HEAPF64[$116>>3];
       $118 = $117 + $115;
       HEAPF64[$116>>3] = $118;
      }
      $119 = (($col$061) + 8)|0;
      $120 = ($119>>>0)<($20>>>0);
      if ($120) {
       $col$061 = $119;
      } else {
       break;
      }
     }
    }
    $121 = (($row$067) + 8)|0;
    $122 = ($121>>>0)<($$15>>>0);
    if ($122) {
     $row$067 = $121;
    } else {
     break;
    }
   }
  }
  $123 = +HEAPF64[$dsum>>3];
  $124 = $123 != 0.0;
  if ($124) {
   $125 = (($dsum) + 32|0);
   $126 = +HEAPF64[$125>>3];
   $127 = $126 / $123;
   $128 = $127;
   HEAPF32[132048>>2] = $128;
  }
  $129 = (($dsum) + 8|0);
  $130 = +HEAPF64[$129>>3];
  $131 = $130 != 0.0;
  if ($131) {
   $507 = (($dsum) + 40|0);
   $508 = +HEAPF64[$507>>3];
   $509 = $508 / $130;
   $510 = $509;
   HEAPF32[((132048 + 4|0))>>2] = $510;
  }
  $511 = (($dsum) + 16|0);
  $512 = +HEAPF64[$511>>3];
  $513 = $512 != 0.0;
  if ($513) {
   $514 = (($dsum) + 48|0);
   $515 = +HEAPF64[$514>>3];
   $516 = $515 / $512;
   $517 = $516;
   HEAPF32[((132048 + 8|0))>>2] = $517;
  }
  $518 = (($dsum) + 24|0);
  $519 = +HEAPF64[$518>>3];
  $520 = $519 != 0.0;
  if ($520) {
   $521 = (($dsum) + 56|0);
   $522 = +HEAPF64[$521>>3];
   $523 = $522 / $519;
   $524 = $523;
   HEAPF32[((132048 + 12|0))>>2] = $524;
  }
 }
 $132 = HEAP32[184>>2]|0;
 $133 = ($132|0)!=(0);
 $134 = +HEAPF32[133480>>2];
 $135 = $134 != -1.0;
 $or$cond4 = $133 & $135;
 do {
  if ($or$cond4) {
   ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
   $136 = HEAP32[584>>2]|0;
   $row$153 = 0;
   while(1) {
    $137 = $row$153 << 1;
    $col$152 = 0;
    while(1) {
     $138 = $col$152 & 1;
     $139 = $138 | $137;
     $140 = $139 << 1;
     $141 = $136 >>> $140;
     $142 = $141 & 3;
     $143 = ((190368 + ($row$153<<4)|0) + ($col$152<<1)|0);
     $144 = HEAP16[$143>>1]|0;
     $145 = $144&65535;
     $146 = (134176 + ($142<<1)|0);
     $147 = HEAP16[$146>>1]|0;
     $148 = $147&65535;
     $149 = (($145) - ($148))|0;
     $150 = ($149|0)>(0);
     if ($150) {
      $151 = (($sum) + ($142<<2)|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = (($152) + ($149))|0;
      HEAP32[$151>>2] = $153;
     }
     $154 = $142 | 4;
     $155 = (($sum) + ($154<<2)|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) + 1)|0;
     HEAP32[$155>>2] = $157;
     $158 = (($col$152) + 1)|0;
     $exitcond77 = ($158|0)==(8);
     if ($exitcond77) {
      break;
     } else {
      $col$152 = $158;
     }
    }
    $159 = (($row$153) + 1)|0;
    $exitcond78 = ($159|0)==(8);
    if ($exitcond78) {
     break;
    } else {
     $row$153 = $159;
    }
   }
   $160 = HEAP32[$sum>>2]|0;
   $161 = ($160|0)==(0);
   if (!($161)) {
    $162 = (($sum) + 4|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==(0);
    if (!($164)) {
     $165 = (($sum) + 8|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($166|0)==(0);
     if (!($167)) {
      $168 = (($sum) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($169|0)==(0);
      if (!($170)) {
       $171 = (($sum) + 16|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (+($172>>>0));
       $174 = HEAP32[$sum>>2]|0;
       $175 = (+($174>>>0));
       $176 = $173 / $175;
       HEAPF32[132048>>2] = $176;
       $177 = (($sum) + 20|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = (+($178>>>0));
       $180 = (($sum) + 4|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = (+($181>>>0));
       $183 = $179 / $182;
       HEAPF32[((132048 + 4|0))>>2] = $183;
       $184 = (($sum) + 24|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = (+($185>>>0));
       $187 = (($sum) + 8|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (+($188>>>0));
       $190 = $186 / $189;
       HEAPF32[((132048 + 8|0))>>2] = $190;
       $191 = (($sum) + 28|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = (+($192>>>0));
       $194 = (($sum) + 12|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = (+($195>>>0));
       $197 = $193 / $196;
       HEAPF32[((132048 + 12|0))>>2] = $197;
       break;
      }
     }
    }
   }
   $198 = +HEAPF32[133480>>2];
   $199 = $198 != 0.0;
   $200 = +HEAPF32[((133480 + 8|0))>>2];
   $201 = $200 != 0.0;
   $or$cond6 = $199 & $201;
   if ($or$cond6) {
    ;HEAP32[132048+0>>2]=HEAP32[133480+0>>2]|0;HEAP32[132048+4>>2]=HEAP32[133480+4>>2]|0;HEAP32[132048+8>>2]=HEAP32[133480+8>>2]|0;HEAP32[132048+12>>2]=HEAP32[133480+12>>2]|0;
    break;
   } else {
    $202 = HEAP32[_stderr>>2]|0;
    $203 = HEAP32[680>>2]|0;
    HEAP32[$vararg_buffer>>2] = $203;
    (_fprintf(($202|0),(190496|0),($vararg_buffer|0))|0);
    break;
   }
  }
 } while(0);
 $204 = +HEAPF32[((132048 + 4|0))>>2];
 $205 = $204 == 0.0;
 if ($205) {
  HEAPF32[((132048 + 4|0))>>2] = 1.0;
 }
 $206 = +HEAPF32[((132048 + 12|0))>>2];
 $207 = $206 == 0.0;
 if ($207) {
  $208 = HEAP32[132272>>2]|0;
  $209 = ($208>>>0)<(4);
  $210 = +HEAPF32[((132048 + 4|0))>>2];
  $211 = $209 ? $210 : 1.0;
  HEAPF32[((132048 + 12|0))>>2] = $211;
 }
 $212 = HEAP32[132360>>2]|0;
 $213 = HEAP32[132368>>2]|0;
 $214 = +HEAPF32[128>>2];
 $215 = $214 != 0.0;
 if ($215) {
  _wavelet_denoise();
 }
 $216 = HEAP32[132360>>2]|0;
 $217 = HEAP32[132368>>2]|0;
 $218 = (($217) - ($216))|0;
 HEAP32[132368>>2] = $218;
 $219 = +HEAPF32[132048>>2];
 $220 = $219;
 $221 = $220 < 1.7976931348623157E+308;
 $dmin$1 = $221 ? $220 : 1.7976931348623157E+308;
 $222 = $219 > 0.0;
 $dmax$1 = $222 ? $220 : 0.0;
 $223 = +HEAPF32[((132048 + 4|0))>>2];
 $224 = $223;
 $225 = $dmin$1 > $224;
 $dmin$1$1 = $225 ? $224 : $dmin$1;
 $226 = $dmax$1 < $224;
 $dmax$1$1 = $226 ? $224 : $dmax$1;
 $227 = +HEAPF32[((132048 + 8|0))>>2];
 $228 = $227;
 $229 = $dmin$1$1 > $228;
 $dmin$1$2 = $229 ? $228 : $dmin$1$1;
 $230 = $dmax$1$1 < $228;
 $dmax$1$2 = $230 ? $228 : $dmax$1$1;
 $231 = +HEAPF32[((132048 + 12|0))>>2];
 $232 = $231;
 $233 = $dmin$1$2 > $232;
 $dmin$1$3 = $233 ? $232 : $dmin$1$2;
 $234 = $dmax$1$2 < $232;
 $dmax$1$3 = $234 ? $232 : $dmax$1$2;
 $235 = HEAP32[160>>2]|0;
 $236 = ($235|0)==(0);
 $dmin$0$dmax$0 = $236 ? $dmin$1$3 : $dmax$1$3;
 $237 = HEAP32[132368>>2]|0;
 $238 = (+($237>>>0));
 $239 = +HEAPF32[132048>>2];
 $240 = $239;
 $241 = $240 / $dmin$0$dmax$0;
 $242 = $241;
 HEAPF32[132048>>2] = $242;
 $243 = $242;
 $244 = $243 * 65535.0;
 $245 = $244 / $238;
 $246 = $245;
 HEAPF32[$scale_mul>>2] = $246;
 $247 = +HEAPF32[((132048 + 4|0))>>2];
 $248 = $247;
 $249 = $248 / $dmin$0$dmax$0;
 $250 = $249;
 HEAPF32[((132048 + 4|0))>>2] = $250;
 $251 = $250;
 $252 = $251 * 65535.0;
 $253 = $252 / $238;
 $254 = $253;
 $255 = (($scale_mul) + 4|0);
 HEAPF32[$255>>2] = $254;
 $256 = +HEAPF32[((132048 + 8|0))>>2];
 $257 = $256;
 $258 = $257 / $dmin$0$dmax$0;
 $259 = $258;
 HEAPF32[((132048 + 8|0))>>2] = $259;
 $260 = $259;
 $261 = $260 * 65535.0;
 $262 = $261 / $238;
 $263 = $262;
 $264 = (($scale_mul) + 8|0);
 HEAPF32[$264>>2] = $263;
 $265 = +HEAPF32[((132048 + 12|0))>>2];
 $266 = $265;
 $267 = $266 / $dmin$0$dmax$0;
 $268 = $267;
 HEAPF32[((132048 + 12|0))>>2] = $268;
 $269 = $268;
 $270 = $269 * 65535.0;
 $271 = $270 / $238;
 $272 = $271;
 $273 = (($scale_mul) + 12|0);
 HEAPF32[$273>>2] = $272;
 $274 = HEAP32[168>>2]|0;
 $275 = ($274|0)==(0);
 if (!($275)) {
  $276 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $212;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $213;
  (_fprintf(($276|0),(190536|0),($vararg_buffer1|0))|0);
  $277 = HEAP32[_stderr>>2]|0;
  $278 = +HEAPF32[132048>>2];
  $279 = $278;
  HEAPF64[$vararg_buffer5>>3] = $279;
  (_fprintf(($277|0),(190600|0),($vararg_buffer5|0))|0);
  $280 = +HEAPF32[((132048 + 4|0))>>2];
  $281 = $280;
  HEAPF64[$vararg_buffer8>>3] = $281;
  (_fprintf(($277|0),(190600|0),($vararg_buffer8|0))|0);
  $282 = +HEAPF32[((132048 + 8|0))>>2];
  $283 = $282;
  HEAPF64[$vararg_buffer11>>3] = $283;
  (_fprintf(($277|0),(190600|0),($vararg_buffer11|0))|0);
  $284 = +HEAPF32[((132048 + 12|0))>>2];
  $285 = $284;
  HEAPF64[$vararg_buffer14>>3] = $285;
  (_fprintf(($277|0),(190600|0),($vararg_buffer14|0))|0);
  (_fputc(10,($277|0))|0);
 }
 $286 = HEAP32[584>>2]|0;
 $287 = ($286>>>0)>(1000);
 if ($287) {
  $288 = HEAP16[((134176 + 8|0))>>1]|0;
  $289 = $288&65535;
  $290 = (($289) + 1)|0;
  $$mask = $290 & 131070;
  $291 = ($$mask|0)==(2);
  if ($291) {
   $292 = HEAP16[((134176 + 10|0))>>1]|0;
   $293 = $292&65535;
   $294 = (($293) + 1)|0;
   $$mask14 = $294 & 131070;
   $295 = ($$mask14|0)==(2);
   if ($295) {
    $296 = HEAP32[584>>2]|0;
    $297 = HEAP16[((134176 + 12|0))>>1]|0;
    $298 = $297&65535;
    $299 = $296 & 3;
    $300 = (134176 + ($299<<1)|0);
    $301 = HEAP16[$300>>1]|0;
    $302 = $301&65535;
    $303 = (($302) + ($298))|0;
    $304 = $303&65535;
    HEAP16[$300>>1] = $304;
    $305 = HEAP16[((134176 + 10|0))>>1]|0;
    $306 = ($305<<16>>16)!=(1);
    $307 = $306&1;
    $308 = $307 | 6;
    $309 = (134176 + ($308<<1)|0);
    $310 = HEAP16[$309>>1]|0;
    $311 = $310&65535;
    $312 = $296 >>> 2;
    $313 = $312 & 3;
    $314 = (134176 + ($313<<1)|0);
    $315 = HEAP16[$314>>1]|0;
    $316 = $315&65535;
    $317 = (($316) + ($311))|0;
    $318 = $317&65535;
    HEAP16[$314>>1] = $318;
    $319 = HEAP16[((134176 + 8|0))>>1]|0;
    $320 = ($319<<16>>16)!=(1);
    $321 = HEAP16[((134176 + 10|0))>>1]|0;
    $322 = $321&65535;
    $$op = (($322) + 6)|0;
    $323 = $320 ? $$op : 6;
    $324 = (134176 + ($323<<1)|0);
    $325 = HEAP16[$324>>1]|0;
    $326 = $325&65535;
    $327 = $296 >>> 4;
    $328 = $327 & 3;
    $329 = (134176 + ($328<<1)|0);
    $330 = HEAP16[$329>>1]|0;
    $331 = $330&65535;
    $332 = (($331) + ($326))|0;
    $333 = $332&65535;
    HEAP16[$329>>1] = $333;
    $334 = HEAP16[((134176 + 8|0))>>1]|0;
    $335 = ($334<<16>>16)!=(1);
    $336 = HEAP16[((134176 + 10|0))>>1]|0;
    $337 = $336&65535;
    $338 = $335 ? $337 : 0;
    $339 = ($336<<16>>16)!=(1);
    $340 = $339&1;
    $341 = $340 | 6;
    $342 = (($341) + ($338))|0;
    $343 = (134176 + ($342<<1)|0);
    $344 = HEAP16[$343>>1]|0;
    $345 = $344&65535;
    $346 = $296 >>> 6;
    $347 = $346 & 3;
    $348 = (134176 + ($347<<1)|0);
    $349 = HEAP16[$348>>1]|0;
    $350 = $349&65535;
    $351 = (($350) + ($345))|0;
    $352 = $351&65535;
    HEAP16[$348>>1] = $352;
    HEAP16[((134176 + 10|0))>>1] = 0;
    HEAP16[((134176 + 8|0))>>1] = 0;
   }
  }
 }
 $353 = HEAP16[190336>>1]|0;
 $354 = $353&65535;
 $355 = HEAP16[132104>>1]|0;
 $356 = $355&65535;
 $357 = Math_imul($356, $354)|0;
 $$mask83 = $357 & 1073741823;
 $358 = ($$mask83|0)==(0);
 if (!($358)) {
  $359 = HEAP32[132112>>2]|0;
  $360 = $355&65535;
  $361 = $353&65535;
  $362 = Math_imul($360, $361)|0;
  $363 = $362 << 2;
  $i$041 = 0;
  while(1) {
   $364 = (($359) + ($i$041<<1)|0);
   $365 = HEAP16[$364>>1]|0;
   $366 = $365&65535;
   $367 = ($365<<16>>16)==(0);
   if (!($367)) {
    $368 = HEAP16[((134176 + 8|0))>>1]|0;
    $369 = $368&65535;
    $370 = ($368<<16>>16)==(0);
    if ($370) {
     $val$1 = $366;
    } else {
     $371 = HEAP16[((134176 + 10|0))>>1]|0;
     $372 = $371&65535;
     $373 = ($371<<16>>16)==(0);
     if ($373) {
      $val$1 = $366;
     } else {
      $374 = $i$041 >>> 2;
      $375 = HEAP16[132104>>1]|0;
      $376 = $375&65535;
      $377 = (($374>>>0) / ($376>>>0))&-1;
      $378 = (($377>>>0) % ($369>>>0))&-1;
      $379 = Math_imul($378, $372)|0;
      $380 = (($379) + 6)|0;
      $381 = (($374>>>0) % ($376>>>0))&-1;
      $382 = (($381>>>0) % ($372>>>0))&-1;
      $383 = (($380) + ($382))|0;
      $384 = (134176 + ($383<<1)|0);
      $385 = HEAP16[$384>>1]|0;
      $386 = $385&65535;
      $387 = (($366) - ($386))|0;
      $val$1 = $387;
     }
    }
    $388 = $i$041 & 3;
    $389 = (134176 + ($388<<1)|0);
    $390 = HEAP16[$389>>1]|0;
    $391 = $390&65535;
    $392 = (($val$1) - ($391))|0;
    $393 = (($scale_mul) + ($388<<2)|0);
    $394 = +HEAPF32[$393>>2];
    $395 = (+($392|0));
    $396 = $394 * $395;
    $397 = (~~(($396)));
    $398 = ($397|0)<(65535);
    $399 = $398 ? $397 : 65535;
    $400 = ($399|0)<(0);
    $401 = $399&65535;
    $402 = $400 ? 0 : $401;
    $403 = HEAP32[132112>>2]|0;
    $404 = (($403) + ($i$041<<1)|0);
    HEAP16[$404>>1] = $402;
   }
   $405 = (($i$041) + 1)|0;
   $exitcond71 = ($405|0)==($363|0);
   if ($exitcond71) {
    break;
   } else {
    $i$041 = $405;
   }
  }
 }
 $406 = +HEAPF64[24>>3];
 $407 = $406 != 1.0;
 $408 = +HEAPF64[((24 + 16|0))>>3];
 $409 = $408 != 1.0;
 $or$cond8 = $407 | $409;
 $410 = HEAP32[132272>>2]|0;
 $411 = ($410|0)==(3);
 $or$cond10 = $or$cond8 & $411;
 if (!($or$cond10)) {
  STACKTOP = sp;return;
 }
 $412 = HEAP32[168>>2]|0;
 $413 = ($412|0)==(0);
 if (!($413)) {
  $414 = HEAP32[_stderr>>2]|0;
  (_fwrite((190608|0),35,1,($414|0))|0);
 }
 $415 = $357 << 1;
 $416 = ($357|0)==(0);
 $417 = $355&65535;
 $418 = $353&65535;
 $419 = Math_imul($417, $418)|0;
 $c$938 = 0;
 while(1) {
  $420 = (24 + ($c$938<<3)|0);
  $421 = +HEAPF64[$420>>3];
  $422 = $421 == 1.0;
  if (!($422)) {
   $423 = (_malloc($415)|0);
   _merror($423,190648);
   if (!($416)) {
    $424 = HEAP32[132112>>2]|0;
    $i$131 = 0;
    while(1) {
     $430 = ((($424) + ($i$131<<3)|0) + ($c$938<<1)|0);
     $431 = HEAP16[$430>>1]|0;
     $432 = (($423) + ($i$131<<1)|0);
     HEAP16[$432>>1] = $431;
     $433 = (($i$131) + 1)|0;
     $exitcond = ($433|0)==($419|0);
     if ($exitcond) {
      break;
     } else {
      $i$131 = $433;
     }
    }
   }
   $425 = HEAP16[190336>>1]|0;
   $426 = ($425<<16>>16)==(0);
   if (!($426)) {
    $427 = $425&65535;
    $428 = +HEAPF64[$420>>3];
    $429 = HEAP32[132112>>2]|0;
    $436 = $427;$row$234 = 0;
    while(1) {
     $434 = (+($row$234>>>0));
     $435 = (+($436|0));
     $437 = $435 * 0.5;
     $438 = $434 - $437;
     $439 = $438 * $428;
     $440 = $437 + $439;
     $441 = $440;
     $442 = (~~(($441))>>>0);
     $443 = (($436) + -2)|0;
     $444 = ($442>>>0)>($443>>>0);
     do {
      if (!($444)) {
       $445 = (+($442>>>0));
       $446 = $441 - $445;
       $447 = HEAP16[132104>>1]|0;
       $448 = ($447<<16>>16)==(0);
       if ($448) {
        break;
       }
       $449 = $447&65535;
       $450 = +HEAPF64[$420>>3];
       $451 = 1.0 - $446;
       $454 = $449;$col$232 = 0;
       while(1) {
        $452 = (+($col$232>>>0));
        $453 = (+($454|0));
        $455 = $453 * 0.5;
        $456 = $452 - $455;
        $457 = $456 * $450;
        $458 = $455 + $457;
        $459 = $458;
        $460 = (~~(($459))>>>0);
        $461 = (($454) + -2)|0;
        $462 = ($460>>>0)>($461>>>0);
        if (!($462)) {
         $463 = (+($460>>>0));
         $464 = $459 - $463;
         $465 = Math_imul($454, $442)|0;
         $$sum = (($460) + ($465))|0;
         $466 = (($423) + ($$sum<<1)|0);
         $467 = HEAP16[$466>>1]|0;
         $468 = $467&65535;
         $469 = (+($468|0));
         $470 = 1.0 - $464;
         $471 = $470 * $469;
         $$sum11 = (($$sum) + 1)|0;
         $472 = (($423) + ($$sum11<<1)|0);
         $473 = HEAP16[$472>>1]|0;
         $474 = $473&65535;
         $475 = (+($474|0));
         $476 = $464 * $475;
         $477 = $471 + $476;
         $478 = $451 * $477;
         $$sum12 = (($$sum) + ($454))|0;
         $479 = (($423) + ($$sum12<<1)|0);
         $480 = HEAP16[$479>>1]|0;
         $481 = $480&65535;
         $482 = (+($481|0));
         $483 = $470 * $482;
         $484 = (($454) + 1)|0;
         $$sum13 = (($484) + ($$sum))|0;
         $485 = (($423) + ($$sum13<<1)|0);
         $486 = HEAP16[$485>>1]|0;
         $487 = $486&65535;
         $488 = (+($487|0));
         $489 = $464 * $488;
         $490 = $483 + $489;
         $491 = $446 * $490;
         $492 = $478 + $491;
         $493 = (~~(($492))&65535);
         $494 = Math_imul($454, $row$234)|0;
         $495 = (($494) + ($col$232))|0;
         $496 = ((($429) + ($495<<3)|0) + ($c$938<<1)|0);
         HEAP16[$496>>1] = $493;
        }
        $497 = (($col$232) + 1)|0;
        $498 = HEAP16[132104>>1]|0;
        $499 = $498&65535;
        $500 = ($497>>>0)<($499>>>0);
        if ($500) {
         $454 = $499;$col$232 = $497;
        } else {
         break;
        }
       }
      }
     } while(0);
     $501 = (($row$234) + 1)|0;
     $502 = HEAP16[190336>>1]|0;
     $503 = $502&65535;
     $504 = ($501>>>0)<($503>>>0);
     if ($504) {
      $436 = $503;$row$234 = $501;
     } else {
      break;
     }
    }
   }
   _free($423);
  }
  $505 = (($c$938) + 2)|0;
  $506 = ($505>>>0)<(4);
  if ($506) {
   $c$938 = $505;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _pre_interpolate() {
 var $$ = 0, $$44 = 0, $$lcssa = 0, $$not = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $col$2$ph = 0, $col$232 = 0, $col$3$lcssa = 0, $col$325 = 0, $col$418 = 0, $col$512 = 0, $or$cond = 0, $row$010 = 0, $row$130 = 0, $row$221 = 0, $row$313 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[132096>>1]|0;
 $1 = ($0<<16>>16)==(0);
 do {
  if (!($1)) {
   $2 = HEAP32[136>>2]|0;
   $3 = ($2|0)==(0);
   if ($3) {
    $65 = HEAP16[132080>>1]|0;
    $66 = $65&65535;
    $67 = HEAP16[132088>>1]|0;
    $68 = $67&65535;
    $69 = $68 << 3;
    $70 = (_calloc($66,$69)|0);
    _merror($70,190664);
    $71 = HEAP16[132080>>1]|0;
    $72 = ($71<<16>>16)==(0);
    if (!($72)) {
     $row$221 = 0;
     while(1) {
      $73 = HEAP16[132088>>1]|0;
      $74 = ($73<<16>>16)==(0);
      if (!($74)) {
       $75 = $73&65535;
       $76 = $row$221 >> 1;
       $87 = $75;$col$418 = 0;
       while(1) {
        $77 = (_fcol($row$221,$col$418)|0);
        $78 = HEAP16[132104>>1]|0;
        $79 = $78&65535;
        $80 = Math_imul($79, $76)|0;
        $81 = $col$418 >> 1;
        $82 = (($80) + ($81))|0;
        $83 = HEAP32[132112>>2]|0;
        $84 = ((($83) + ($82<<3)|0) + ($77<<1)|0);
        $85 = HEAP16[$84>>1]|0;
        $86 = Math_imul($87, $row$221)|0;
        $88 = (($86) + ($col$418))|0;
        $89 = ((($70) + ($88<<3)|0) + ($77<<1)|0);
        HEAP16[$89>>1] = $85;
        $90 = (($col$418) + 1)|0;
        $91 = HEAP16[132088>>1]|0;
        $92 = $91&65535;
        $93 = ($90|0)<($92|0);
        if ($93) {
         $87 = $92;$col$418 = $90;
        } else {
         break;
        }
       }
      }
      $94 = (($row$221) + 1)|0;
      $95 = HEAP16[132080>>1]|0;
      $96 = $95&65535;
      $97 = ($94|0)<($96|0);
      if ($97) {
       $row$221 = $94;
      } else {
       break;
      }
     }
    }
    $98 = HEAP32[132112>>2]|0;
    _free($98);
    HEAP32[132112>>2] = $70;
    HEAP16[132096>>1] = 0;
    break;
   }
   $4 = HEAP16[190336>>1]|0;
   HEAP16[132080>>1] = $4;
   $5 = HEAP16[132104>>1]|0;
   HEAP16[132088>>1] = $5;
   $6 = HEAP32[584>>2]|0;
   $7 = ($6|0)==(9);
   if ($7) {
    $8 = HEAP16[132088>>1]|0;
    $9 = $8&65535;
    $10 = HEAP32[132112>>2]|0;
    $11 = (($10) + 8|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = (($10) + 12|0);
    $14 = HEAP16[$13>>1]|0;
    $15 = $14 | $12;
    $16 = ($15<<16>>16)==(0);
    if ($16) {
     $col$2$ph = 1;$row$010 = 0;
    } else {
     $21 = (($10) + 16|0);
     $22 = HEAP16[$21>>1]|0;
     $23 = (($10) + 20|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = $24 | $22;
     $26 = ($25<<16>>16)==(0);
     if ($26) {
      $col$2$ph = 2;$row$010 = 0;
     } else {
      $146 = (($10) + 24|0);
      $147 = HEAP16[$146>>1]|0;
      $148 = (($10) + 28|0);
      $149 = HEAP16[$148>>1]|0;
      $150 = $149 | $147;
      $151 = ($150<<16>>16)==(0);
      if ($151) {
       $col$2$ph = 3;$row$010 = 0;
      } else {
       $152 = (($9) + 1)|0;
       $153 = (($10) + ($152<<3)|0);
       $154 = HEAP16[$153>>1]|0;
       $155 = ((($10) + ($152<<3)|0) + 4|0);
       $156 = HEAP16[$155>>1]|0;
       $157 = $156 | $154;
       $158 = ($157<<16>>16)==(0);
       if ($158) {
        $col$2$ph = 1;$row$010 = 1;
       } else {
        $159 = (($9) + 2)|0;
        $160 = (($10) + ($159<<3)|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = ((($10) + ($159<<3)|0) + 4|0);
        $163 = HEAP16[$162>>1]|0;
        $164 = $163 | $161;
        $165 = ($164<<16>>16)==(0);
        if ($165) {
         $col$2$ph = 2;$row$010 = 1;
        } else {
         $166 = (($9) + 3)|0;
         $167 = (($10) + ($166<<3)|0);
         $168 = HEAP16[$167>>1]|0;
         $169 = ((($10) + ($166<<3)|0) + 4|0);
         $170 = HEAP16[$169>>1]|0;
         $171 = $170 | $168;
         $172 = ($171<<16>>16)==(0);
         if ($172) {
          $col$2$ph = 3;$row$010 = 1;
         } else {
          $173 = $9 << 1;
          $174 = $173 | 1;
          $175 = (($10) + ($174<<3)|0);
          $176 = HEAP16[$175>>1]|0;
          $177 = ((($10) + ($174<<3)|0) + 4|0);
          $178 = HEAP16[$177>>1]|0;
          $179 = $178 | $176;
          $180 = ($179<<16>>16)==(0);
          if ($180) {
           $col$2$ph = 1;$row$010 = 2;
          } else {
           $181 = (($173) + 2)|0;
           $182 = (($10) + ($181<<3)|0);
           $183 = HEAP16[$182>>1]|0;
           $184 = ((($10) + ($181<<3)|0) + 4|0);
           $185 = HEAP16[$184>>1]|0;
           $186 = $185 | $183;
           $187 = ($186<<16>>16)==(0);
           if ($187) {
            $col$2$ph = 2;$row$010 = 2;
           } else {
            $188 = (($173) + 3)|0;
            $189 = (($10) + ($188<<3)|0);
            $190 = HEAP16[$189>>1]|0;
            $191 = ((($10) + ($188<<3)|0) + 4|0);
            $192 = HEAP16[$191>>1]|0;
            $193 = $192 | $190;
            $194 = ($193<<16>>16)==(0);
            $$ = $194 ? 2 : 3;
            $$44 = $194 ? 3 : 4;
            $col$2$ph = $$44;$row$010 = $$;
           }
          }
         }
        }
       }
      }
     }
    }
    $17 = HEAP16[132080>>1]|0;
    $18 = $17&65535;
    $19 = ($row$010>>>0)<($18>>>0);
    if ($19) {
     $20 = HEAP32[132112>>2]|0;
     $col$232 = $col$2$ph;$row$130 = $row$010;
     while(1) {
      $27 = (($col$232) + -1)|0;
      $28 = (($27|0) % 3)&-1;
      $29 = (($28) + 1)|0;
      $30 = HEAP16[132088>>1]|0;
      $31 = $30&65535;
      $32 = (($31) + -1)|0;
      $33 = ($29|0)<($32|0);
      if ($33) {
       $35 = $31;$col$325 = $29;
       while(1) {
        $34 = Math_imul($35, $row$130)|0;
        $$sum = (($34) + ($col$325))|0;
        $$sum2 = (($$sum) + -1)|0;
        $$sum3 = (($$sum) + 1)|0;
        $36 = (($20) + ($$sum2<<3)|0);
        $37 = HEAP16[$36>>1]|0;
        $38 = $37&65535;
        $39 = (($20) + ($$sum3<<3)|0);
        $40 = HEAP16[$39>>1]|0;
        $41 = $40&65535;
        $42 = (($41) + ($38))|0;
        $43 = $42 >>> 1;
        $44 = $43&65535;
        $45 = (($20) + ($$sum<<3)|0);
        HEAP16[$45>>1] = $44;
        $46 = ((($20) + ($$sum2<<3)|0) + 4|0);
        $47 = HEAP16[$46>>1]|0;
        $48 = $47&65535;
        $49 = ((($20) + ($$sum3<<3)|0) + 4|0);
        $50 = HEAP16[$49>>1]|0;
        $51 = $50&65535;
        $52 = (($51) + ($48))|0;
        $53 = $52 >>> 1;
        $54 = $53&65535;
        $55 = ((($20) + ($$sum<<3)|0) + 4|0);
        HEAP16[$55>>1] = $54;
        $56 = (($col$325) + 3)|0;
        $57 = HEAP16[132088>>1]|0;
        $58 = $57&65535;
        $59 = (($58) + -1)|0;
        $60 = ($56|0)<($59|0);
        if ($60) {
         $35 = $58;$col$325 = $56;
        } else {
         $col$3$lcssa = $56;
         break;
        }
       }
      } else {
       $col$3$lcssa = $29;
      }
      $61 = (($row$130) + 3)|0;
      $62 = HEAP16[132080>>1]|0;
      $63 = $62&65535;
      $64 = ($61|0)<($63|0);
      if ($64) {
       $col$232 = $col$3$lcssa;$row$130 = $61;
      } else {
       break;
      }
     }
    }
   }
  }
 } while(0);
 $99 = HEAP32[584>>2]|0;
 $100 = ($99>>>0)>(1000);
 $101 = HEAP32[132272>>2]|0;
 $102 = ($101|0)==(3);
 $or$cond = $100 & $102;
 do {
  if ($or$cond) {
   $103 = HEAP32[144>>2]|0;
   $104 = HEAP32[136>>2]|0;
   $105 = $104 ^ $103;
   HEAP32[142384>>2] = $105;
   $106 = $104 | $103;
   $107 = ($106|0)==(0);
   if (!($107)) {
    $108 = HEAP32[132272>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[132272>>2] = $109;
    break;
   }
   $110 = HEAP32[584>>2]|0;
   $111 = $110 >>> 5;
   $112 = $111 & 1;
   $113 = HEAP16[132080>>1]|0;
   $114 = $113&65535;
   $115 = ($112>>>0)<($114>>>0);
   if ($115) {
    $116 = HEAP32[584>>2]|0;
    $117 = HEAP32[132112>>2]|0;
    $122 = $110;$row$313 = $112;
    while(1) {
     $118 = $row$313 << 2;
     $119 = $118 & 28;
     $120 = $119 | 2;
     $121 = $122 >>> $120;
     $123 = $121 & 1;
     $124 = HEAP16[132088>>1]|0;
     $125 = $124&65535;
     $126 = ($123>>>0)<($125>>>0);
     if ($126) {
      $128 = $125;$col$512 = $123;
      while(1) {
       $127 = Math_imul($128, $row$313)|0;
       $129 = (($127) + ($col$512))|0;
       $130 = ((($117) + ($129<<3)|0) + 6|0);
       $131 = HEAP16[$130>>1]|0;
       $132 = ((($117) + ($129<<3)|0) + 2|0);
       HEAP16[$132>>1] = $131;
       $133 = (($col$512) + 2)|0;
       $134 = HEAP16[132088>>1]|0;
       $135 = $134&65535;
       $136 = ($133|0)<($135|0);
       if ($136) {
        $128 = $135;$col$512 = $133;
       } else {
        break;
       }
      }
     }
     $137 = (($row$313) + 2)|0;
     $138 = HEAP16[132080>>1]|0;
     $139 = $138&65535;
     $140 = ($137|0)<($139|0);
     if ($140) {
      $122 = $116;$row$313 = $137;
     } else {
      $$lcssa = $116;
      break;
     }
    }
   } else {
    $$lcssa = $110;
   }
   $141 = $$lcssa << 1;
   $$not = $141 | 1431655765;
   $142 = $$not ^ -1431655766;
   $143 = $142 & $$lcssa;
   HEAP32[584>>2] = $143;
  }
 } while(0);
 $144 = HEAP32[136>>2]|0;
 $145 = ($144|0)==(0);
 if ($145) {
  return;
 }
 HEAP32[584>>2] = 0;
 return;
}
function _border_interpolate($border) {
 $border = $border|0;
 var $$col$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $c$03 = 0, $col$04 = 0, $col$1 = 0, $exitcond = 0, $indvars$iv = 0, $indvars$iv$next = 0, $or$cond = 0;
 var $row$07 = 0, $sum = 0, $y$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sum = sp;
 $0 = HEAP16[132080>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $indvars$iv = 2;$row$07 = 0;
 while(1) {
  $2 = HEAP16[132088>>1]|0;
  $3 = ($2<<16>>16)==(0);
  if (!($3)) {
   $4 = $2&65535;
   $5 = ($row$07>>>0)<($border>>>0);
   $6 = (($row$07) + -1)|0;
   $13 = $4;$col$04 = 0;
   while(1) {
    $7 = ($col$04|0)!=($border|0);
    $or$cond = $5 | $7;
    if ($or$cond) {
     $col$1 = $col$04;
    } else {
     $8 = HEAP16[132080>>1]|0;
     $9 = $8&65535;
     $10 = (($9) - ($border))|0;
     $11 = ($row$07>>>0)<($10>>>0);
     $12 = (($13) - ($border))|0;
     $$col$0 = $11 ? $12 : $col$04;
     $col$1 = $$col$0;
    }
    ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;HEAP32[$sum+16>>2]=0|0;HEAP32[$sum+20>>2]=0|0;HEAP32[$sum+24>>2]=0|0;HEAP32[$sum+28>>2]=0|0;
    $14 = (($col$1) + -1)|0;
    $15 = HEAP16[132080>>1]|0;
    $16 = $15&65535;
    $17 = HEAP16[132088>>1]|0;
    $18 = $17&65535;
    $19 = HEAP32[132112>>2]|0;
    $y$02 = $6;
    while(1) {
     $20 = ($y$02>>>0)<($16>>>0);
     $21 = Math_imul($18, $y$02)|0;
     if ($20) {
      $22 = ($14>>>0)<($18>>>0);
      if ($22) {
       $23 = (_fcol($y$02,$14)|0);
       $24 = (($21) + ($14))|0;
       $25 = ((($19) + ($24<<3)|0) + ($23<<1)|0);
       $26 = HEAP16[$25>>1]|0;
       $27 = $26&65535;
       $28 = (($sum) + ($23<<2)|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($29) + ($27))|0;
       HEAP32[$28>>2] = $30;
       $31 = (($23) + 4)|0;
       $32 = (($sum) + ($31<<2)|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = (($33) + 1)|0;
       HEAP32[$32>>2] = $34;
      }
      $64 = ($col$1>>>0)<($18>>>0);
      if ($64) {
       $65 = (_fcol($y$02,$col$1)|0);
       $66 = (($21) + ($col$1))|0;
       $67 = ((($19) + ($66<<3)|0) + ($65<<1)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $68&65535;
       $70 = (($sum) + ($65<<2)|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = (($71) + ($69))|0;
       HEAP32[$70>>2] = $72;
       $73 = (($65) + 4)|0;
       $74 = (($sum) + ($73<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (($75) + 1)|0;
       HEAP32[$74>>2] = $76;
      }
      $77 = (($col$1) + 1)|0;
      $78 = ($77>>>0)<($18>>>0);
      if ($78) {
       $79 = (_fcol($y$02,$77)|0);
       $80 = (($21) + ($77))|0;
       $81 = ((($19) + ($80<<3)|0) + ($79<<1)|0);
       $82 = HEAP16[$81>>1]|0;
       $83 = $82&65535;
       $84 = (($sum) + ($79<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (($85) + ($83))|0;
       HEAP32[$84>>2] = $86;
       $87 = (($79) + 4)|0;
       $88 = (($sum) + ($87<<2)|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (($89) + 1)|0;
       HEAP32[$88>>2] = $90;
      }
     }
     $91 = (($y$02) + 1)|0;
     $exitcond = ($91|0)==($indvars$iv|0);
     if ($exitcond) {
      break;
     } else {
      $y$02 = $91;
     }
    }
    $35 = (_fcol($row$07,$col$1)|0);
    $36 = HEAP32[132272>>2]|0;
    $37 = ($36|0)==(0);
    if (!($37)) {
     $38 = HEAP32[132272>>2]|0;
     $39 = HEAP32[132112>>2]|0;
     $c$03 = 0;
     while(1) {
      $40 = ($c$03|0)==($35|0);
      if (!($40)) {
       $41 = (($c$03) + 4)|0;
       $42 = (($sum) + ($41<<2)|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($43|0)==(0);
       if (!($44)) {
        $45 = (($sum) + ($c$03<<2)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = (($46>>>0) / ($43>>>0))&-1;
        $48 = $47&65535;
        $49 = HEAP16[132088>>1]|0;
        $50 = $49&65535;
        $51 = Math_imul($50, $row$07)|0;
        $52 = (($51) + ($col$1))|0;
        $53 = ((($39) + ($52<<3)|0) + ($c$03<<1)|0);
        HEAP16[$53>>1] = $48;
       }
      }
      $54 = (($c$03) + 1)|0;
      $55 = ($54>>>0)<($38>>>0);
      if ($55) {
       $c$03 = $54;
      } else {
       break;
      }
     }
    }
    $56 = (($col$1) + 1)|0;
    $57 = HEAP16[132088>>1]|0;
    $58 = $57&65535;
    $59 = ($56>>>0)<($58>>>0);
    if ($59) {
     $13 = $58;$col$04 = $56;
    } else {
     break;
    }
   }
  }
  $60 = (($row$07) + 1)|0;
  $61 = HEAP16[132080>>1]|0;
  $62 = $61&65535;
  $63 = ($60>>>0)<($62>>>0);
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  if ($63) {
   $indvars$iv = $indvars$iv$next;$row$07 = $60;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _lin_interpolate() {
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c$020 = 0, $code = 0, $col$025 = 0, $col$110 = 0, $exitcond29 = 0, $i$04 = 0, $ip$019 = 0, $ip$2 = 0, $ip$2$1 = 0, $ip$2$2 = 0, $ip$2$2$lcssa = 0, $ip$321 = 0, $ip$4 = 0, $ip$5$lcssa = 0, $ip$55 = 0, $ip$66 = 0, $row$026 = 0;
 var $row$113 = 0, $scevgep$sum30 = 0, $scevgep27$sum = 0, $scevgep28 = 0, $sum = 0, $y$018 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32784|0;
 $code = sp + 16|0;
 $sum = sp;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((190688|0),26,1,($2|0))|0);
 }
 $3 = HEAP32[584>>2]|0;
 $4 = ($3|0)==(9);
 $$ = $4 ? 6 : 16;
 _border_interpolate(1);
 $row$026 = 0;
 while(1) {
  $col$025 = 0;
  while(1) {
   $10 = (((($code) + ($row$026<<11)|0) + ($col$025<<7)|0) + 4|0);
   $11 = (_fcol($row$026,$col$025)|0);
   ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
   $ip$019 = $10;$y$018 = -1;
   while(1) {
    $12 = ($y$018|0)==(0);
    $13 = $12&1;
    $14 = (($y$018) + ($row$026))|0;
    $15 = (($col$025) + -1)|0;
    $16 = (_fcol($14,$15)|0);
    $17 = ($16|0)==($11|0);
    if ($17) {
     $ip$2 = $ip$019;
    } else {
     $18 = HEAP16[132088>>1]|0;
     $19 = $18&65535;
     $20 = Math_imul($19, $y$018)|0;
     $21 = $20 << 2;
     $22 = (($21) + -4)|0;
     $23 = (($22) + ($16))|0;
     $24 = (($ip$019) + 4|0);
     HEAP32[$ip$019>>2] = $23;
     $25 = (($ip$019) + 8|0);
     HEAP32[$24>>2] = $13;
     $26 = (($ip$019) + 12|0);
     HEAP32[$25>>2] = $16;
     $27 = 1 << $13;
     $28 = (($sum) + ($16<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($29) + ($27))|0;
     HEAP32[$28>>2] = $30;
     $ip$2 = $26;
    }
    $31 = $12 ? 2 : 1;
    $32 = (_fcol($14,$col$025)|0);
    $33 = ($32|0)==($11|0);
    if ($33) {
     $ip$2$1 = $ip$2;
    } else {
     $113 = HEAP16[132088>>1]|0;
     $114 = $113&65535;
     $115 = Math_imul($114, $y$018)|0;
     $116 = $115 << 2;
     $117 = (($116) + ($32))|0;
     $118 = (($ip$2) + 4|0);
     HEAP32[$ip$2>>2] = $117;
     $119 = (($ip$2) + 8|0);
     HEAP32[$118>>2] = $31;
     $120 = (($ip$2) + 12|0);
     HEAP32[$119>>2] = $32;
     $121 = 1 << $31;
     $122 = (($sum) + ($32<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($123) + ($121))|0;
     HEAP32[$122>>2] = $124;
     $ip$2$1 = $120;
    }
    $125 = (($col$025) + 1)|0;
    $126 = (_fcol($14,$125)|0);
    $127 = ($126|0)==($11|0);
    if ($127) {
     $ip$2$2 = $ip$2$1;
    } else {
     $128 = HEAP16[132088>>1]|0;
     $129 = $128&65535;
     $130 = Math_imul($129, $y$018)|0;
     $131 = $130 << 2;
     $132 = (($131) + 4)|0;
     $133 = (($132) + ($126))|0;
     $134 = (($ip$2$1) + 4|0);
     HEAP32[$ip$2$1>>2] = $133;
     $135 = (($ip$2$1) + 8|0);
     HEAP32[$134>>2] = $13;
     $136 = (($ip$2$1) + 12|0);
     HEAP32[$135>>2] = $126;
     $137 = 1 << $13;
     $138 = (($sum) + ($126<<2)|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + ($137))|0;
     HEAP32[$138>>2] = $140;
     $ip$2$2 = $136;
    }
    $141 = (($y$018) + 1)|0;
    $exitcond29 = ($141|0)==(2);
    if ($exitcond29) {
     $ip$2$2$lcssa = $ip$2$2;
     break;
    } else {
     $ip$019 = $ip$2$2;$y$018 = $141;
    }
   }
   $34 = ((($code) + ($row$026<<11)|0) + ($col$025<<7)|0);
   $35 = $ip$2$2$lcssa;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = $37 >> 2;
   $39 = (($38|0) / 3)&-1;
   HEAP32[$34>>2] = $39;
   $40 = HEAP32[132272>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $c$020 = 0;$ip$321 = $ip$2$2$lcssa;
    while(1) {
     $42 = ($c$020|0)==($11|0);
     if ($42) {
      $ip$4 = $ip$321;
     } else {
      $43 = (($ip$321) + 4|0);
      HEAP32[$ip$321>>2] = $c$020;
      $44 = (($sum) + ($c$020<<2)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (256 / ($45|0))&-1;
      $47 = (($ip$321) + 8|0);
      HEAP32[$43>>2] = $46;
      $ip$4 = $47;
     }
     $48 = (($c$020) + 1)|0;
     $49 = HEAP32[132272>>2]|0;
     $50 = ($48>>>0)<($49>>>0);
     if ($50) {
      $c$020 = $48;$ip$321 = $ip$4;
     } else {
      break;
     }
    }
   }
   $51 = (($col$025) + 1)|0;
   $52 = ($51|0)<($$|0);
   if ($52) {
    $col$025 = $51;
   } else {
    break;
   }
  }
  $53 = (($row$026) + 1)|0;
  $54 = ($53|0)<($$|0);
  if ($54) {
   $row$026 = $53;
  } else {
   break;
  }
 }
 $5 = HEAP16[132080>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + -1)|0;
 $8 = ($7|0)>(1);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[132112>>2]|0;
 $row$113 = 1;
 while(1) {
  $55 = HEAP16[132088>>1]|0;
  $56 = $55&65535;
  $57 = (($56) + -1)|0;
  $58 = ($57|0)>(1);
  if ($58) {
   $59 = (($row$113|0) % ($$|0))&-1;
   $60 = $59 << 9;
   $scevgep$sum30 = $60 | 1;
   $62 = $56;$col$110 = 1;
   while(1) {
    $61 = Math_imul($62, $row$113)|0;
    $63 = (($61) + ($col$110))|0;
    $64 = (($col$110|0) % ($$|0))&-1;
    $65 = ((($code) + ($59<<11)|0) + ($64<<7)|0);
    ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
    $66 = (((($code) + ($59<<11)|0) + ($64<<7)|0) + 4|0);
    $67 = HEAP32[$65>>2]|0;
    $68 = ($67|0)==(0);
    if ($68) {
     $ip$5$lcssa = $66;
    } else {
     $69 = $64 << 5;
     $70 = ($67*3)|0;
     $71 = (($69) + ($70))|0;
     $i$04 = $67;$ip$55 = $66;
     while(1) {
      $72 = (($i$04) + -1)|0;
      $73 = HEAP32[$ip$55>>2]|0;
      $74 = ((($9) + ($63<<3)|0) + ($73<<1)|0);
      $75 = HEAP16[$74>>1]|0;
      $76 = $75&65535;
      $77 = (($ip$55) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = $76 << $78;
      $80 = (($ip$55) + 8|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (($sum) + ($81<<2)|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + ($79))|0;
      HEAP32[$82>>2] = $84;
      $85 = (($ip$55) + 12|0);
      $86 = ($72|0)==(0);
      if ($86) {
       break;
      } else {
       $i$04 = $72;$ip$55 = $85;
      }
     }
     $scevgep27$sum = (($scevgep$sum30) + ($71))|0;
     $scevgep28 = (($code) + ($scevgep27$sum<<2)|0);
     $ip$5$lcssa = $scevgep28;
    }
    $87 = HEAP32[132272>>2]|0;
    $88 = (($87) + -1)|0;
    $89 = ($88|0)==(0);
    if (!($89)) {
     $101 = $88;$ip$66 = $ip$5$lcssa;
     while(1) {
      $90 = HEAP32[$ip$66>>2]|0;
      $91 = (($sum) + ($90<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($ip$66) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = Math_imul($94, $92)|0;
      $96 = $95 >>> 8;
      $97 = $96&65535;
      $98 = ((($9) + ($63<<3)|0) + ($90<<1)|0);
      HEAP16[$98>>1] = $97;
      $99 = (($ip$66) + 8|0);
      $100 = (($101) + -1)|0;
      $102 = ($100|0)==(0);
      if ($102) {
       break;
      } else {
       $101 = $100;$ip$66 = $99;
      }
     }
    }
    $103 = (($col$110) + 1)|0;
    $104 = HEAP16[132088>>1]|0;
    $105 = $104&65535;
    $106 = (($105) + -1)|0;
    $107 = ($103|0)<($106|0);
    if ($107) {
     $62 = $105;$col$110 = $103;
    } else {
     break;
    }
   }
  }
  $108 = (($row$113) + 1)|0;
  $109 = HEAP16[132080>>1]|0;
  $110 = $109&65535;
  $111 = (($110) + -1)|0;
  $112 = ($108|0)<($111|0);
  if ($112) {
   $row$113 = $108;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _vng_interpolate() {
 var $$ = 0, $$3 = 0, $$gmin$0 = 0, $$gmin$0$1 = 0, $$gmin$0$2 = 0, $$gmin$0$3 = 0, $$gmin$0$4 = 0, $$gmin$0$5 = 0, $$gmin$0$6 = 0, $$lcssa11 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brow = 0, $c$018 = 0, $c$127 = 0, $code = 0, $col$047 = 0, $col$129 = 0, $exitcond54 = 0, $exitcond58 = 0, $exitcond59 = 0, $g$146 = 0;
 var $g$325 = 0, $gmax$1 = 0, $gmax$1$1 = 0, $gmax$1$2 = 0, $gmax$1$3 = 0, $gmax$1$4 = 0, $gmax$1$5 = 0, $gmax$1$6 = 0, $gval = 0, $ip$050 = 0, $ip$1022 = 0, $ip$148 = 0, $ip$244 = 0, $ip$4 = 0, $ip$4$1 = 0, $ip$4$2 = 0, $ip$4$3 = 0, $ip$4$4 = 0, $ip$4$5 = 0, $ip$4$6 = 0;
 var $ip$4$7 = 0, $ip$5 = 0, $ip$5$lcssa = 0, $ip$645 = 0, $ip$7 = 0, $ip$8$be = 0, $ip$8$lcssa = 0, $ip$812 = 0, $ispos = 0, $ispos1 = 0, $neg = 0, $neg2 = 0, $num$026 = 0, $num$1 = 0, $num$1$lcssa = 0, $pcol$1 = 0, $prow$1 = 0, $row$049 = 0, $row$2$lcssa = 0, $row$236 = 0;
 var $scevgep = 0, $scevgep$lcssa = 0, $storemerge = 0, $sum = 0, $t$043 = 0, $t$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0;
 $brow = sp + 1072|0;
 $code = sp + 48|0;
 $gval = sp + 16|0;
 $sum = sp;
 _lin_interpolate();
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((191128|0),21,1,($2|0))|0);
 }
 $3 = HEAP32[584>>2]|0;
 $4 = ($3|0)==(1);
 $$ = $4 ? 16 : 2;
 $$3 = $4 ? 16 : 8;
 $5 = ($3|0)==(9);
 $pcol$1 = $5 ? 6 : $$;
 $prow$1 = $5 ? 6 : $$3;
 $6 = Math_imul($prow$1, $pcol$1)|0;
 $7 = (_calloc($6,1280)|0);
 _merror($7,191152);
 $ip$050 = $7;$row$049 = 0;
 while(1) {
  $8 = (($row$049) + 1)|0;
  $col$047 = 0;$ip$148 = $ip$050;
  while(1) {
   $9 = ((($code) + ($row$049<<6)|0) + ($col$047<<2)|0);
   HEAP32[$9>>2] = $ip$148;
   HEAP32[190720>>2] = 190728;
   $10 = (($col$047) + 1)|0;
   $ip$244 = $ip$148;$t$043 = 0;
   while(1) {
    $11 = HEAP32[190720>>2]|0;
    $12 = (($11) + 1|0);
    HEAP32[190720>>2] = $12;
    $13 = HEAP8[$11>>0]|0;
    $14 = $13 << 24 >> 24;
    $15 = (($11) + 2|0);
    HEAP32[190720>>2] = $15;
    $16 = HEAP8[$12>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = (($11) + 3|0);
    HEAP32[190720>>2] = $18;
    $19 = HEAP8[$15>>0]|0;
    $20 = $19 << 24 >> 24;
    $21 = (($11) + 4|0);
    HEAP32[190720>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = (($11) + 5|0);
    HEAP32[190720>>2] = $24;
    $25 = HEAP8[$21>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = (($11) + 6|0);
    HEAP32[190720>>2] = $27;
    $28 = HEAP8[$24>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = (($14) + ($row$049))|0;
    $31 = (($17) + ($col$047))|0;
    $32 = (_fcol($30,$31)|0);
    $33 = (($20) + ($row$049))|0;
    $34 = (($23) + ($col$047))|0;
    $35 = (_fcol($33,$34)|0);
    $36 = ($35|0)==($32|0);
    do {
     if ($36) {
      $37 = (_fcol($row$049,$10)|0);
      $38 = ($37|0)==($32|0);
      if ($38) {
       $39 = (_fcol($8,$col$047)|0);
       $40 = ($39|0)==($32|0);
       $41 = $40;
      } else {
       $41 = 0;
      }
      $42 = $41 ? 2 : 1;
      $43 = (($14) - ($20))|0;
      $ispos = ($43|0)>(-1);
      $neg = (0 - ($43))|0;
      $44 = $ispos ? $43 : $neg;
      $45 = ($44|0)==($42|0);
      if ($45) {
       $46 = (($17) - ($23))|0;
       $ispos1 = ($46|0)>(-1);
       $neg2 = (0 - ($46))|0;
       $47 = $ispos1 ? $46 : $neg2;
       $48 = ($47|0)==($42|0);
       if ($48) {
        $ip$5 = $ip$244;
        break;
       }
      }
      $49 = HEAP16[132088>>1]|0;
      $50 = $49&65535;
      $51 = Math_imul($50, $14)|0;
      $52 = (($51) + ($17))|0;
      $53 = $52 << 2;
      $54 = (($53) + ($32))|0;
      $55 = (($ip$244) + 4|0);
      HEAP32[$ip$244>>2] = $54;
      $56 = HEAP16[132088>>1]|0;
      $57 = $56&65535;
      $58 = Math_imul($57, $20)|0;
      $59 = (($58) + ($23))|0;
      $60 = $59 << 2;
      $61 = (($60) + ($32))|0;
      $62 = (($ip$244) + 8|0);
      HEAP32[$55>>2] = $61;
      $63 = (($ip$244) + 12|0);
      HEAP32[$62>>2] = $26;
      $64 = $29 & 1;
      $65 = ($64|0)==(0);
      if ($65) {
       $340 = 4;$ip$4 = $63;
      } else {
       $66 = (($ip$244) + 16|0);
       HEAP32[$63>>2] = 0;
       $340 = 5;$ip$4 = $66;
      }
      $67 = $29 & 2;
      $68 = ($67|0)==(0);
      if ($68) {
       $ip$4$1 = $ip$4;
      } else {
       $339 = (($ip$244) + ($340<<2)|0);
       HEAP32[$ip$4>>2] = 1;
       $ip$4$1 = $339;
      }
      $341 = $29 & 4;
      $342 = ($341|0)==(0);
      if ($342) {
       $ip$4$2 = $ip$4$1;
      } else {
       $343 = (($ip$4$1) + 4|0);
       HEAP32[$ip$4$1>>2] = 2;
       $ip$4$2 = $343;
      }
      $344 = $29 & 8;
      $345 = ($344|0)==(0);
      if ($345) {
       $ip$4$3 = $ip$4$2;
      } else {
       $346 = (($ip$4$2) + 4|0);
       HEAP32[$ip$4$2>>2] = 3;
       $ip$4$3 = $346;
      }
      $347 = $29 & 16;
      $348 = ($347|0)==(0);
      if ($348) {
       $ip$4$4 = $ip$4$3;
      } else {
       $349 = (($ip$4$3) + 4|0);
       HEAP32[$ip$4$3>>2] = 4;
       $ip$4$4 = $349;
      }
      $350 = $29 & 32;
      $351 = ($350|0)==(0);
      if ($351) {
       $ip$4$5 = $ip$4$4;
      } else {
       $352 = (($ip$4$4) + 4|0);
       HEAP32[$ip$4$4>>2] = 5;
       $ip$4$5 = $352;
      }
      $353 = $29 & 64;
      $354 = ($353|0)==(0);
      if ($354) {
       $ip$4$6 = $ip$4$5;
      } else {
       $355 = (($ip$4$5) + 4|0);
       HEAP32[$ip$4$5>>2] = 6;
       $ip$4$6 = $355;
      }
      $356 = $29 & 128;
      $357 = ($356|0)==(0);
      if ($357) {
       $ip$4$7 = $ip$4$6;
      } else {
       $358 = (($ip$4$6) + 4|0);
       HEAP32[$ip$4$6>>2] = 7;
       $ip$4$7 = $358;
      }
      $359 = (($ip$4$7) + 4|0);
      HEAP32[$ip$4$7>>2] = -1;
      $ip$5 = $359;
     } else {
      $ip$5 = $ip$244;
     }
    } while(0);
    $69 = (($t$043) + 1)|0;
    $exitcond58 = ($69|0)==(64);
    if ($exitcond58) {
     $ip$5$lcssa = $ip$5;
     break;
    } else {
     $ip$244 = $ip$5;$t$043 = $69;
    }
   }
   $70 = (($ip$5$lcssa) + 4|0);
   HEAP32[$ip$5$lcssa>>2] = 2147483647;
   HEAP32[190720>>2] = 191112;
   $g$146 = 0;$ip$645 = $70;
   while(1) {
    $71 = HEAP32[190720>>2]|0;
    $72 = (($71) + 1|0);
    HEAP32[190720>>2] = $72;
    $73 = HEAP8[$71>>0]|0;
    $74 = $73 << 24 >> 24;
    $75 = (($71) + 2|0);
    HEAP32[190720>>2] = $75;
    $76 = HEAP8[$72>>0]|0;
    $77 = $76 << 24 >> 24;
    $78 = HEAP16[132088>>1]|0;
    $79 = $78&65535;
    $80 = Math_imul($79, $74)|0;
    $81 = (($80) + ($77))|0;
    $82 = $81 << 2;
    $83 = (($ip$645) + 4|0);
    HEAP32[$ip$645>>2] = $82;
    $84 = (_fcol($row$049,$col$047)|0);
    $85 = (($74) + ($row$049))|0;
    $86 = (($77) + ($col$047))|0;
    $87 = (_fcol($85,$86)|0);
    $88 = ($87|0)==($84|0);
    if ($88) {
     $storemerge = 0;
    } else {
     $89 = $74 << 1;
     $90 = (($89) + ($row$049))|0;
     $91 = $77 << 1;
     $92 = (($91) + ($col$047))|0;
     $93 = (_fcol($90,$92)|0);
     $94 = ($93|0)==($84|0);
     if ($94) {
      $95 = HEAP16[132088>>1]|0;
      $96 = $95&65535;
      $97 = Math_imul($96, $74)|0;
      $98 = (($97) + ($77))|0;
      $99 = $98 << 3;
      $100 = (($99) + ($84))|0;
      $storemerge = $100;
     } else {
      $storemerge = 0;
     }
    }
    $ip$7 = (($ip$645) + 8|0);
    HEAP32[$83>>2] = $storemerge;
    $101 = (($g$146) + 1)|0;
    $exitcond59 = ($101|0)==(8);
    if ($exitcond59) {
     break;
    } else {
     $g$146 = $101;$ip$645 = $ip$7;
    }
   }
   $scevgep = (($ip$5$lcssa) + 68|0);
   $102 = (($col$047) + 1)|0;
   $103 = ($102|0)<($pcol$1|0);
   if ($103) {
    $col$047 = $102;$ip$148 = $scevgep;
   } else {
    $scevgep$lcssa = $scevgep;
    break;
   }
  }
  $104 = (($row$049) + 1)|0;
  $105 = ($104|0)<($prow$1|0);
  if ($105) {
   $ip$050 = $scevgep$lcssa;$row$049 = $104;
  } else {
   break;
  }
 }
 $107 = HEAP16[132088>>1]|0;
 $108 = $107&65535;
 $109 = ($108*3)|0;
 $110 = (_calloc($109,8)|0);
 $111 = (($brow) + 16|0);
 HEAP32[$111>>2] = $110;
 _merror($110,191152);
 $112 = HEAP16[132088>>1]|0;
 $113 = $112&65535;
 $114 = HEAP32[$111>>2]|0;
 HEAP32[$brow>>2] = $114;
 $115 = HEAP32[$111>>2]|0;
 $116 = (($115) + ($113<<3)|0);
 $117 = (($brow) + 4|0);
 HEAP32[$117>>2] = $116;
 $118 = HEAP32[$111>>2]|0;
 $119 = $113 << 1;
 $120 = (($118) + ($119<<3)|0);
 $121 = (($brow) + 8|0);
 HEAP32[$121>>2] = $120;
 $122 = HEAP16[132080>>1]|0;
 $123 = $122&65535;
 $124 = (($123) + -2)|0;
 $125 = ($124|0)>(2);
 if (!($125)) {
  $row$2$lcssa = 2;
  $314 = (($row$2$lcssa) + -2)|0;
  $315 = HEAP16[132088>>1]|0;
  $316 = $315&65535;
  $317 = Math_imul($316, $314)|0;
  $318 = (($317) + 2)|0;
  $319 = HEAP32[132112>>2]|0;
  $320 = (($319) + ($318<<3)|0);
  $321 = HEAP32[$brow>>2]|0;
  $322 = (($321) + 16|0);
  $323 = $316 << 3;
  $324 = (($323) + -32)|0;
  _memcpy(($320|0),($322|0),($324|0))|0;
  $325 = (($row$2$lcssa) + -1)|0;
  $326 = HEAP16[132088>>1]|0;
  $327 = $326&65535;
  $328 = Math_imul($327, $325)|0;
  $329 = (($328) + 2)|0;
  $330 = HEAP32[132112>>2]|0;
  $331 = (($330) + ($329<<3)|0);
  $332 = (($brow) + 4|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = (($333) + 16|0);
  $335 = $327 << 3;
  $336 = (($335) + -32)|0;
  _memcpy(($331|0),($334|0),($336|0))|0;
  $337 = HEAP32[$111>>2]|0;
  _free($337);
  $338 = HEAP32[$code>>2]|0;
  _free($338);
  STACKTOP = sp;return;
 }
 $106 = (($brow) + 8|0);
 $row$236 = 2;
 while(1) {
  $126 = HEAP16[132088>>1]|0;
  $127 = $126&65535;
  $128 = (($127) + -2)|0;
  $129 = ($128|0)>(2);
  if ($129) {
   $130 = (($row$236|0) % ($prow$1|0))&-1;
   $131 = HEAP32[$106>>2]|0;
   $133 = $127;$col$129 = 2;
   while(1) {
    $132 = Math_imul($133, $row$236)|0;
    $134 = (($132) + ($col$129))|0;
    $135 = HEAP32[132112>>2]|0;
    $136 = (($135) + ($134<<3)|0);
    $137 = (($col$129|0) % ($pcol$1|0))&-1;
    $138 = ((($code) + ($130<<6)|0) + ($137<<2)|0);
    $139 = HEAP32[$138>>2]|0;
    ;HEAP32[$gval+0>>2]=0|0;HEAP32[$gval+4>>2]=0|0;HEAP32[$gval+8>>2]=0|0;HEAP32[$gval+12>>2]=0|0;HEAP32[$gval+16>>2]=0|0;HEAP32[$gval+20>>2]=0|0;HEAP32[$gval+24>>2]=0|0;HEAP32[$gval+28>>2]=0|0;
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(2147483647);
    if ($141) {
     $ip$8$lcssa = $139;
    } else {
     $143 = $140;$ip$812 = $139;
     while(1) {
      $142 = ((($135) + ($134<<3)|0) + ($143<<1)|0);
      $144 = HEAP16[$142>>1]|0;
      $145 = $144&65535;
      $146 = (($ip$812) + 4|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ((($135) + ($134<<3)|0) + ($147<<1)|0);
      $149 = HEAP16[$148>>1]|0;
      $150 = $149&65535;
      $151 = (($145) - ($150))|0;
      $152 = $151 >> 31;
      $153 = $152 ^ $151;
      $154 = (($153) - ($152))|0;
      $155 = (($ip$812) + 8|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $154 << $156;
      $158 = (($ip$812) + 12|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = (($gval) + ($159<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = (($157) + ($161))|0;
      HEAP32[$160>>2] = $162;
      $163 = (($ip$812) + 20|0);
      $164 = (($ip$812) + 16|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==(-1);
      if ($166) {
       $ip$8$be = $163;
      } else {
       $169 = (($gval) + ($165<<2)|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = (($170) + ($157))|0;
       HEAP32[$169>>2] = $171;
       $172 = (($ip$812) + 24|0);
       $173 = HEAP32[$163>>2]|0;
       $174 = ($173|0)==(-1);
       if ($174) {
        $ip$8$be = $172;
       } else {
        $176 = $173;$180 = $172;
        while(1) {
         $175 = (($gval) + ($176<<2)|0);
         $177 = HEAP32[$175>>2]|0;
         $178 = (($177) + ($157))|0;
         HEAP32[$175>>2] = $178;
         $179 = (($180) + 4|0);
         $181 = HEAP32[$180>>2]|0;
         $182 = ($181|0)==(-1);
         if ($182) {
          $ip$8$be = $179;
          break;
         } else {
          $176 = $181;$180 = $179;
         }
        }
       }
      }
      $167 = HEAP32[$ip$8$be>>2]|0;
      $168 = ($167|0)==(2147483647);
      if ($168) {
       $ip$8$lcssa = $ip$8$be;
       break;
      } else {
       $143 = $167;$ip$812 = $ip$8$be;
      }
     }
    }
    $183 = HEAP32[$gval>>2]|0;
    $184 = (($gval) + 4|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = ($183|0)>($185|0);
    $$gmin$0 = $186 ? $185 : $183;
    $187 = ($183|0)<($185|0);
    $gmax$1 = $187 ? $185 : $183;
    $188 = (($gval) + 8|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$gmin$0|0)>($189|0);
    $$gmin$0$1 = $190 ? $189 : $$gmin$0;
    $191 = ($gmax$1|0)<($189|0);
    $gmax$1$1 = $191 ? $189 : $gmax$1;
    $192 = (($gval) + 12|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = ($$gmin$0$1|0)>($193|0);
    $$gmin$0$2 = $194 ? $193 : $$gmin$0$1;
    $195 = ($gmax$1$1|0)<($193|0);
    $gmax$1$2 = $195 ? $193 : $gmax$1$1;
    $196 = (($gval) + 16|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ($$gmin$0$2|0)>($197|0);
    $$gmin$0$3 = $198 ? $197 : $$gmin$0$2;
    $199 = ($gmax$1$2|0)<($197|0);
    $gmax$1$3 = $199 ? $197 : $gmax$1$2;
    $200 = (($gval) + 20|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = ($$gmin$0$3|0)>($201|0);
    $$gmin$0$4 = $202 ? $201 : $$gmin$0$3;
    $203 = ($gmax$1$3|0)<($201|0);
    $gmax$1$4 = $203 ? $201 : $gmax$1$3;
    $204 = (($gval) + 24|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($$gmin$0$4|0)>($205|0);
    $$gmin$0$5 = $206 ? $205 : $$gmin$0$4;
    $207 = ($gmax$1$4|0)<($205|0);
    $gmax$1$5 = $207 ? $205 : $gmax$1$4;
    $208 = (($gval) + 28|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ($gmax$1$5|0)<($209|0);
    $gmax$1$6 = $210 ? $209 : $gmax$1$5;
    $211 = ($gmax$1$6|0)==(0);
    if ($211) {
     $212 = (($131) + ($col$129<<3)|0);
     $213 = $136;
     $214 = $213;
     $215 = HEAPU16[$214>>1]|(HEAPU16[$214+2>>1]<<16);
     $216 = (($213) + 4)|0;
     $217 = $216;
     $218 = HEAPU16[$217>>1]|(HEAPU16[$217+2>>1]<<16);
     $219 = $212;
     $220 = $219;
     HEAP16[$220>>1]=$215&65535;HEAP16[$220+2>>1]=$215>>>16;
     $221 = (($219) + 4)|0;
     $222 = $221;
     HEAP16[$222>>1]=$218&65535;HEAP16[$222+2>>1]=$218>>>16;
    } else {
     $223 = (($ip$8$lcssa) + 4|0);
     $224 = ($$gmin$0$5|0)>($209|0);
     $$gmin$0$6 = $224 ? $209 : $$gmin$0$5;
     $225 = $gmax$1$6 >> 1;
     $226 = (($$gmin$0$6) + ($225))|0;
     ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
     $227 = (_fcol($row$236,$col$129)|0);
     $g$325 = 0;$ip$1022 = $223;$num$026 = 0;
     while(1) {
      $233 = (($gval) + ($g$325<<2)|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ($234|0)>($226|0);
      if ($235) {
       $num$1 = $num$026;
      } else {
       $236 = HEAP32[132272>>2]|0;
       $237 = ($236|0)==(0);
       if (!($237)) {
        $238 = (($ip$1022) + 4|0);
        $c$018 = 0;
        while(1) {
         $239 = ($c$018|0)==($227|0);
         if ($239) {
          $240 = HEAP32[$238>>2]|0;
          $241 = ($240|0)==(0);
          if ($241) {
           label = 42;
          } else {
           $242 = ((($135) + ($134<<3)|0) + ($c$018<<1)|0);
           $243 = HEAP16[$242>>1]|0;
           $244 = $243&65535;
           $245 = ((($135) + ($134<<3)|0) + ($240<<1)|0);
           $246 = HEAP16[$245>>1]|0;
           $247 = $246&65535;
           $248 = (($247) + ($244))|0;
           $249 = $248 >>> 1;
           $250 = (($sum) + ($c$018<<2)|0);
           $251 = HEAP32[$250>>2]|0;
           $252 = (($249) + ($251))|0;
           HEAP32[$250>>2] = $252;
          }
         } else {
          label = 42;
         }
         if ((label|0) == 42) {
          label = 0;
          $253 = HEAP32[$ip$1022>>2]|0;
          $254 = (($253) + ($c$018))|0;
          $255 = ((($135) + ($134<<3)|0) + ($254<<1)|0);
          $256 = HEAP16[$255>>1]|0;
          $257 = $256&65535;
          $258 = (($sum) + ($c$018<<2)|0);
          $259 = HEAP32[$258>>2]|0;
          $260 = (($259) + ($257))|0;
          HEAP32[$258>>2] = $260;
         }
         $261 = (($c$018) + 1)|0;
         $262 = HEAP32[132272>>2]|0;
         $263 = ($261>>>0)<($262>>>0);
         if ($263) {
          $c$018 = $261;
         } else {
          break;
         }
        }
       }
       $264 = (($num$026) + 1)|0;
       $num$1 = $264;
      }
      $265 = (($g$325) + 1)|0;
      $266 = (($ip$1022) + 8|0);
      $exitcond54 = ($265|0)==(8);
      if ($exitcond54) {
       $num$1$lcssa = $num$1;
       break;
      } else {
       $g$325 = $265;$ip$1022 = $266;$num$026 = $num$1;
      }
     }
     $228 = HEAP32[132272>>2]|0;
     $229 = ($228|0)==(0);
     if (!($229)) {
      $230 = ((($135) + ($134<<3)|0) + ($227<<1)|0);
      $231 = HEAP32[132272>>2]|0;
      $232 = (($sum) + ($227<<2)|0);
      $c$127 = 0;
      while(1) {
       $267 = HEAP16[$230>>1]|0;
       $268 = $267&65535;
       $269 = ($c$127|0)==($227|0);
       if ($269) {
        $t$1 = $268;
       } else {
        $270 = (($sum) + ($c$127<<2)|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = HEAP32[$232>>2]|0;
        $273 = (($271) - ($272))|0;
        $274 = (($273|0) / ($num$1$lcssa|0))&-1;
        $275 = (($274) + ($268))|0;
        $t$1 = $275;
       }
       $276 = ($t$1|0)<(65535);
       $277 = $276 ? $t$1 : 65535;
       $278 = ($277|0)<(0);
       $279 = $277&65535;
       $280 = $278 ? 0 : $279;
       $281 = ((($131) + ($col$129<<3)|0) + ($c$127<<1)|0);
       HEAP16[$281>>1] = $280;
       $282 = (($c$127) + 1)|0;
       $283 = ($282>>>0)<($231>>>0);
       if ($283) {
        $c$127 = $282;
       } else {
        break;
       }
      }
     }
    }
    $284 = (($col$129) + 1)|0;
    $285 = HEAP16[132088>>1]|0;
    $286 = $285&65535;
    $287 = (($286) + -2)|0;
    $288 = ($284|0)<($287|0);
    if ($288) {
     $133 = $286;$col$129 = $284;
    } else {
     $$lcssa11 = $286;
     break;
    }
   }
  } else {
   $$lcssa11 = $127;
  }
  $289 = ($row$236|0)>(3);
  if ($289) {
   $290 = (($row$236) + -2)|0;
   $291 = Math_imul($$lcssa11, $290)|0;
   $292 = (($291) + 2)|0;
   $293 = HEAP32[132112>>2]|0;
   $294 = (($293) + ($292<<3)|0);
   $295 = HEAP32[$brow>>2]|0;
   $296 = (($295) + 16|0);
   $297 = $$lcssa11 << 3;
   $298 = (($297) + -32)|0;
   _memcpy(($294|0),($296|0),($298|0))|0;
  }
  $299 = HEAP32[$brow>>2]|0;
  $300 = (($brow) + 12|0);
  HEAP32[$300>>2] = $299;
  $301 = (($brow) + 4|0);
  $302 = HEAP32[$301>>2]|0;
  HEAP32[$brow>>2] = $302;
  $303 = (($brow) + 8|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = (($brow) + 4|0);
  HEAP32[$305>>2] = $304;
  $306 = (($brow) + 12|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($brow) + 8|0);
  HEAP32[$308>>2] = $307;
  $309 = (($row$236) + 1)|0;
  $310 = HEAP16[132080>>1]|0;
  $311 = $310&65535;
  $312 = (($311) + -2)|0;
  $313 = ($309|0)<($312|0);
  if ($313) {
   $row$236 = $309;
  } else {
   $row$2$lcssa = $309;
   break;
  }
 }
 $314 = (($row$2$lcssa) + -2)|0;
 $315 = HEAP16[132088>>1]|0;
 $316 = $315&65535;
 $317 = Math_imul($316, $314)|0;
 $318 = (($317) + 2)|0;
 $319 = HEAP32[132112>>2]|0;
 $320 = (($319) + ($318<<3)|0);
 $321 = HEAP32[$brow>>2]|0;
 $322 = (($321) + 16|0);
 $323 = $316 << 3;
 $324 = (($323) + -32)|0;
 _memcpy(($320|0),($322|0),($324|0))|0;
 $325 = (($row$2$lcssa) + -1)|0;
 $326 = HEAP16[132088>>1]|0;
 $327 = $326&65535;
 $328 = Math_imul($327, $325)|0;
 $329 = (($328) + 2)|0;
 $330 = HEAP32[132112>>2]|0;
 $331 = (($330) + ($329<<3)|0);
 $332 = (($brow) + 4|0);
 $333 = HEAP32[$332>>2]|0;
 $334 = (($333) + 16|0);
 $335 = $327 << 3;
 $336 = (($335) + -32)|0;
 _memcpy(($331|0),($334|0),($336|0))|0;
 $337 = HEAP32[$111>>2]|0;
 _free($337);
 $338 = HEAP32[$code>>2]|0;
 _free($338);
 STACKTOP = sp;return;
}
function _ppg_interpolate() {
 var $$ = 0, $$$ = 0, $$$17 = 0, $$17 = 0, $$19 = 0, $$21 = 0, $$23 = 0, $$neg27 = 0, $$neg28 = 0, $$neg29 = 0, $$neg30 = 0, $$neg32 = 0, $$neg35 = 0, $$neg36 = 0, $$neg37 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum1225 = 0;
 var $$sum13 = 0, $$sum14 = 0, $$sum1531 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$057 = 0, $c$1$lcssa = 0;
 var $c$151 = 0, $col$068 = 0, $col$156 = 0, $col$243 = 0, $diff = 0, $dir = 0, $guess = 0, $i$064 = 0, $i$152 = 0, $i$242 = 0, $i$242$phi = 0, $row$072 = 0, $row$161 = 0, $row$247 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $dir = sp + 16|0;
 $diff = sp + 8|0;
 $guess = sp;
 HEAP32[$dir>>2] = 1;
 $0 = (($dir) + 4|0);
 $1 = HEAP16[132088>>1]|0;
 $2 = $1&65535;
 HEAP32[$0>>2] = $2;
 $3 = (($dir) + 8|0);
 HEAP32[$3>>2] = -1;
 $4 = (($dir) + 12|0);
 $5 = HEAP16[132088>>1]|0;
 $6 = $5&65535;
 $7 = (0 - ($6))|0;
 HEAP32[$4>>2] = $7;
 $8 = (($dir) + 16|0);
 HEAP32[$8>>2] = 1;
 _border_interpolate(3);
 $9 = HEAP32[168>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = HEAP32[_stderr>>2]|0;
  (_fwrite((191176|0),21,1,($11|0))|0);
 }
 $12 = HEAP16[132080>>1]|0;
 $13 = $12&65535;
 $14 = (($13) + -3)|0;
 $15 = ($14|0)>(3);
 if ($15) {
  $16 = HEAP32[584>>2]|0;
  $17 = HEAP32[132112>>2]|0;
  $18 = HEAP32[$dir>>2]|0;
  $19 = ($18|0)>(0);
  $20 = (($diff) + 4|0);
  $row$072 = 3;
  while(1) {
   $29 = $row$072 << 1;
   $30 = $29 & 14;
   $31 = $30 << 1;
   $32 = $31 | 2;
   $33 = $16 >>> $32;
   $34 = $33 & 1;
   $35 = (($34) + 3)|0;
   $36 = $34 | $30;
   $37 = $36 << 1;
   $38 = $37 ^ 2;
   $39 = $16 >>> $38;
   $40 = $39 & 3;
   $41 = HEAP16[132088>>1]|0;
   $42 = $41&65535;
   $43 = (($42) + -3)|0;
   $44 = ($35|0)<($43|0);
   if ($44) {
    $46 = $42;$col$068 = $35;
    while(1) {
     $45 = Math_imul($46, $row$072)|0;
     $$sum7 = (($45) + ($col$068))|0;
     if ($19) {
      $47 = ((($17) + ($$sum7<<3)|0) + ($40<<1)|0);
      $48 = HEAP16[$47>>1]|0;
      $49 = $48&65535;
      $50 = $48&65535;
      $51 = $18;$i$064 = 0;
      while(1) {
       $$sum10 = (($$sum7) - ($51))|0;
       $52 = ((($17) + ($$sum10<<3)|0) + 2|0);
       $53 = HEAP16[$52>>1]|0;
       $54 = $53&65535;
       $55 = (($49) + ($54))|0;
       $$sum11 = (($51) + ($$sum7))|0;
       $56 = ((($17) + ($$sum11<<3)|0) + 2|0);
       $57 = HEAP16[$56>>1]|0;
       $58 = $57&65535;
       $59 = (($55) + ($58))|0;
       $60 = $59 << 1;
       $61 = $51 << 1;
       $$sum1225 = (($$sum7) - ($61))|0;
       $62 = ((($17) + ($$sum1225<<3)|0) + ($40<<1)|0);
       $63 = HEAP16[$62>>1]|0;
       $64 = $63&65535;
       $65 = (($60) - ($64))|0;
       $66 = $51 << 1;
       $$sum13 = (($66) + ($$sum7))|0;
       $67 = ((($17) + ($$sum13<<3)|0) + ($40<<1)|0);
       $68 = HEAP16[$67>>1]|0;
       $69 = $68&65535;
       $70 = (($65) - ($69))|0;
       $71 = (($guess) + ($i$064<<2)|0);
       HEAP32[$71>>2] = $70;
       $72 = HEAP16[$62>>1]|0;
       $73 = $72&65535;
       $74 = (($73) - ($50))|0;
       $75 = $74 >> 31;
       $76 = $75 ^ $74;
       $$neg27 = $74 >>> 31;
       $77 = HEAP16[$67>>1]|0;
       $78 = $77&65535;
       $79 = (($78) - ($50))|0;
       $80 = $79 >> 31;
       $81 = $80 ^ $79;
       $$neg28 = $79 >>> 31;
       $82 = HEAP16[$52>>1]|0;
       $83 = $82&65535;
       $84 = HEAP16[$56>>1]|0;
       $85 = $84&65535;
       $86 = (($83) - ($85))|0;
       $87 = $86 >> 31;
       $88 = $87 ^ $86;
       $$neg29 = $86 >>> 31;
       $89 = (($76) + ($$neg27))|0;
       $90 = (($89) + ($$neg28))|0;
       $91 = (($90) + ($81))|0;
       $92 = (($91) + ($$neg29))|0;
       $93 = (($92) + ($88))|0;
       $94 = ($93*3)|0;
       $95 = ($51*3)|0;
       $$sum14 = (($95) + ($$sum7))|0;
       $96 = ((($17) + ($$sum14<<3)|0) + 2|0);
       $97 = HEAP16[$96>>1]|0;
       $98 = $97&65535;
       $99 = (($98) - ($85))|0;
       $100 = $99 >> 31;
       $101 = $100 ^ $99;
       $$neg30 = $99 >>> 31;
       $102 = Math_imul($51, -3)|0;
       $$sum1531 = (($$sum7) + ($102))|0;
       $103 = ((($17) + ($$sum1531<<3)|0) + 2|0);
       $104 = HEAP16[$103>>1]|0;
       $105 = $104&65535;
       $106 = (($105) - ($83))|0;
       $107 = $106 >> 31;
       $108 = $107 ^ $106;
       $$neg32 = $106 >>> 31;
       $109 = (($101) + ($$neg30))|0;
       $110 = (($109) + ($$neg32))|0;
       $111 = (($110) + ($108))|0;
       $112 = $111 << 1;
       $113 = (($112) + ($94))|0;
       $114 = (($diff) + ($i$064<<2)|0);
       HEAP32[$114>>2] = $113;
       $115 = (($i$064) + 1)|0;
       $116 = (($dir) + ($115<<2)|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($117|0)>(0);
       if ($118) {
        $51 = $117;$i$064 = $115;
       } else {
        break;
       }
      }
     }
     $119 = HEAP32[$diff>>2]|0;
     $120 = HEAP32[$20>>2]|0;
     $121 = ($119|0)>($120|0);
     $122 = $121&1;
     $123 = (($dir) + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $$sum8 = (($124) + ($$sum7))|0;
     $125 = ((($17) + ($$sum8<<3)|0) + 2|0);
     $126 = HEAP16[$125>>1]|0;
     $127 = $126&65535;
     $$sum9 = (($$sum7) - ($124))|0;
     $128 = ((($17) + ($$sum9<<3)|0) + 2|0);
     $129 = HEAP16[$128>>1]|0;
     $130 = $129&65535;
     $131 = ($126&65535)<($129&65535);
     $132 = (($guess) + ($122<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133 >> 2;
     if ($131) {
      $135 = ($134|0)<($130|0);
      $$ = $135 ? $134 : $130;
      $136 = ($127|0)>($$|0);
      $$$ = $136 ? $127 : $$;
      $140 = $$$;
     } else {
      $137 = ($134|0)<($127|0);
      $$17 = $137 ? $134 : $127;
      $138 = ($130|0)>($$17|0);
      $$$17 = $138 ? $130 : $$17;
      $140 = $$$17;
     }
     $139 = $140&65535;
     $141 = ((($17) + ($$sum7<<3)|0) + 2|0);
     HEAP16[$141>>1] = $139;
     $142 = (($col$068) + 2)|0;
     $143 = HEAP16[132088>>1]|0;
     $144 = $143&65535;
     $145 = (($144) + -3)|0;
     $146 = ($142|0)<($145|0);
     if ($146) {
      $46 = $144;$col$068 = $142;
     } else {
      break;
     }
    }
   }
   $147 = (($row$072) + 1)|0;
   $148 = HEAP16[132080>>1]|0;
   $149 = $148&65535;
   $150 = (($149) + -3)|0;
   $151 = ($147|0)<($150|0);
   if ($151) {
    $row$072 = $147;
   } else {
    break;
   }
  }
 }
 $21 = HEAP16[132080>>1]|0;
 $22 = $21&65535;
 $23 = (($22) + -1)|0;
 $24 = ($23|0)>(1);
 if ($24) {
  $25 = HEAP32[584>>2]|0;
  $26 = HEAP32[132112>>2]|0;
  $27 = HEAP32[$dir>>2]|0;
  $28 = ($27|0)>(0);
  $row$161 = 1;
  while(1) {
   $165 = $row$161 << 1;
   $166 = $165 & 14;
   $167 = $166 << 1;
   $168 = $25 >>> $167;
   $169 = $168 & 1;
   $170 = (($169) + 1)|0;
   $171 = HEAP16[132088>>1]|0;
   $172 = $171&65535;
   $173 = (($172) + -1)|0;
   $174 = ($170|0)<($173|0);
   if ($174) {
    $175 = $169 | $166;
    $176 = $175 << 1;
    $177 = $25 >>> $176;
    $178 = $177 & 3;
    $180 = $172;$c$057 = $178;$col$156 = $170;
    while(1) {
     $179 = Math_imul($180, $row$161)|0;
     $$sum3 = (($179) + ($col$156))|0;
     if ($28) {
      $181 = ((($26) + ($$sum3<<3)|0) + 2|0);
      $182 = $27;$c$151 = $c$057;$i$152 = 0;
      while(1) {
       $$sum4 = (($$sum3) - ($182))|0;
       $183 = ((($26) + ($$sum4<<3)|0) + ($c$151<<1)|0);
       $184 = HEAP16[$183>>1]|0;
       $185 = $184&65535;
       $$sum5 = (($182) + ($$sum3))|0;
       $186 = ((($26) + ($$sum5<<3)|0) + ($c$151<<1)|0);
       $187 = HEAP16[$186>>1]|0;
       $188 = $187&65535;
       $189 = (($188) + ($185))|0;
       $190 = HEAP16[$181>>1]|0;
       $191 = $190&65535;
       $192 = $191 << 1;
       $193 = (($189) + ($192))|0;
       $194 = ((($26) + ($$sum4<<3)|0) + 2|0);
       $195 = HEAP16[$194>>1]|0;
       $196 = $195&65535;
       $197 = (($193) - ($196))|0;
       $198 = ((($26) + ($$sum5<<3)|0) + 2|0);
       $199 = HEAP16[$198>>1]|0;
       $200 = $199&65535;
       $201 = (($197) - ($200))|0;
       $202 = $201 >> 1;
       $203 = ($202|0)<(65535);
       $$19 = $203 ? $202 : 65535;
       $204 = ($$19|0)<(0);
       $205 = $$19&65535;
       $206 = $204 ? 0 : $205;
       $207 = ((($26) + ($$sum3<<3)|0) + ($c$151<<1)|0);
       HEAP16[$207>>1] = $206;
       $208 = (2 - ($c$151))|0;
       $209 = (($i$152) + 1)|0;
       $210 = (($dir) + ($209<<2)|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)>(0);
       if ($212) {
        $182 = $211;$c$151 = $208;$i$152 = $209;
       } else {
        $c$1$lcssa = $208;
        break;
       }
      }
     } else {
      $c$1$lcssa = $c$057;
     }
     $213 = (($col$156) + 2)|0;
     $214 = HEAP16[132088>>1]|0;
     $215 = $214&65535;
     $216 = (($215) + -1)|0;
     $217 = ($213|0)<($216|0);
     if ($217) {
      $180 = $215;$c$057 = $c$1$lcssa;$col$156 = $213;
     } else {
      break;
     }
    }
   }
   $218 = (($row$161) + 1)|0;
   $219 = HEAP16[132080>>1]|0;
   $220 = $219&65535;
   $221 = (($220) + -1)|0;
   $222 = ($218|0)<($221|0);
   if ($222) {
    $row$161 = $218;
   } else {
    break;
   }
  }
 }
 $152 = HEAP16[132080>>1]|0;
 $153 = $152&65535;
 $154 = (($153) + -1)|0;
 $155 = ($154|0)>(1);
 if (!($155)) {
  STACKTOP = sp;return;
 }
 $156 = HEAP32[584>>2]|0;
 $157 = HEAP32[132112>>2]|0;
 $158 = HEAP32[$dir>>2]|0;
 $159 = (($dir) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + ($158))|0;
 $162 = ($161|0)>(0);
 $163 = (($diff) + 4|0);
 $164 = (($guess) + 4|0);
 $row$247 = 1;
 while(1) {
  $223 = $row$247 << 1;
  $224 = $223 & 14;
  $225 = $224 << 1;
  $226 = $225 | 2;
  $227 = $156 >>> $226;
  $228 = $227 & 1;
  $229 = (($228) + 1)|0;
  $230 = $228 | $224;
  $231 = $230 << 1;
  $232 = $231 ^ 2;
  $233 = $156 >>> $232;
  $234 = $233 & 3;
  $235 = (2 - ($234))|0;
  $236 = HEAP16[132088>>1]|0;
  $237 = $236&65535;
  $238 = (($237) + -1)|0;
  $239 = ($229|0)<($238|0);
  if ($239) {
   $241 = $237;$col$243 = $229;
   while(1) {
    $240 = Math_imul($241, $row$247)|0;
    $$sum = (($240) + ($col$243))|0;
    if ($162) {
     $242 = ((($157) + ($$sum<<3)|0) + 2|0);
     $243 = HEAP16[$242>>1]|0;
     $244 = $243&65535;
     $245 = $243&65535;
     $246 = $245 << 1;
     $247 = $161;$289 = 1;$i$242 = 0;
     while(1) {
      $$sum1 = (($$sum) - ($247))|0;
      $248 = ((($157) + ($$sum1<<3)|0) + ($235<<1)|0);
      $249 = HEAP16[$248>>1]|0;
      $250 = $249&65535;
      $$sum2 = (($247) + ($$sum))|0;
      $251 = ((($157) + ($$sum2<<3)|0) + ($235<<1)|0);
      $252 = HEAP16[$251>>1]|0;
      $253 = $252&65535;
      $254 = (($250) - ($253))|0;
      $255 = $254 >> 31;
      $256 = $255 ^ $254;
      $$neg35 = $254 >>> 31;
      $257 = ((($157) + ($$sum1<<3)|0) + 2|0);
      $258 = HEAP16[$257>>1]|0;
      $259 = $258&65535;
      $260 = (($259) - ($244))|0;
      $261 = $260 >> 31;
      $262 = $261 ^ $260;
      $$neg36 = $260 >>> 31;
      $263 = ((($157) + ($$sum2<<3)|0) + 2|0);
      $264 = HEAP16[$263>>1]|0;
      $265 = $264&65535;
      $266 = (($265) - ($244))|0;
      $267 = $266 >> 31;
      $268 = $267 ^ $266;
      $$neg37 = $266 >>> 31;
      $269 = (($256) + ($$neg35))|0;
      $270 = (($269) + ($$neg36))|0;
      $271 = (($270) + ($262))|0;
      $272 = (($271) + ($$neg37))|0;
      $273 = (($272) + ($268))|0;
      $274 = (($diff) + ($i$242<<2)|0);
      HEAP32[$274>>2] = $273;
      $275 = HEAP16[$248>>1]|0;
      $276 = $275&65535;
      $277 = HEAP16[$251>>1]|0;
      $278 = $277&65535;
      $279 = (($278) + ($276))|0;
      $280 = (($279) + ($246))|0;
      $281 = HEAP16[$257>>1]|0;
      $282 = $281&65535;
      $283 = (($280) - ($282))|0;
      $284 = HEAP16[$263>>1]|0;
      $285 = $284&65535;
      $286 = (($283) - ($285))|0;
      $287 = (($guess) + ($i$242<<2)|0);
      HEAP32[$287>>2] = $286;
      $288 = (($dir) + ($289<<2)|0);
      $290 = HEAP32[$288>>2]|0;
      $291 = (($289) + 1)|0;
      $292 = (($dir) + ($291<<2)|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (($293) + ($290))|0;
      $295 = ($294|0)>(0);
      if ($295) {
       $i$242$phi = $289;$247 = $294;$289 = $291;$i$242 = $i$242$phi;
      } else {
       break;
      }
     }
    }
    $296 = HEAP32[$diff>>2]|0;
    $297 = HEAP32[$163>>2]|0;
    $298 = ($296|0)==($297|0);
    if ($298) {
     $309 = HEAP32[$guess>>2]|0;
     $310 = HEAP32[$164>>2]|0;
     $311 = (($310) + ($309))|0;
     $312 = $311 >> 2;
     $313 = ($312|0)<(65535);
     $$23 = $313 ? $312 : 65535;
     $314 = ($$23|0)<(0);
     $315 = $$23&65535;
     $316 = $314 ? 0 : $315;
     $317 = ((($157) + ($$sum<<3)|0) + ($235<<1)|0);
     HEAP16[$317>>1] = $316;
    } else {
     $299 = ($296|0)>($297|0);
     $300 = $299&1;
     $301 = (($guess) + ($300<<2)|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = $302 >> 1;
     $304 = ($303|0)<(65535);
     $$21 = $304 ? $303 : 65535;
     $305 = ($$21|0)<(0);
     $306 = $$21&65535;
     $307 = $305 ? 0 : $306;
     $308 = ((($157) + ($$sum<<3)|0) + ($235<<1)|0);
     HEAP16[$308>>1] = $307;
    }
    $318 = (($col$243) + 2)|0;
    $319 = HEAP16[132088>>1]|0;
    $320 = $319&65535;
    $321 = (($320) + -1)|0;
    $322 = ($318|0)<($321|0);
    if ($322) {
     $241 = $320;$col$243 = $318;
    } else {
     break;
    }
   }
  }
  $323 = (($row$247) + 1)|0;
  $324 = HEAP16[132080>>1]|0;
  $325 = $324&65535;
  $326 = (($325) + -1)|0;
  $327 = ($323|0)<($326|0);
  if ($327) {
   $row$247 = $323;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _cielab($rgb,$lab) {
 $rgb = $rgb|0;
 $lab = $lab|0;
 var $$ = 0, $$3 = 0, $$4 = 0, $$lcssa = 0.0, $$lcssa45 = 0.0, $$lcssa46 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0;
 var $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0;
 var $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $c$013 = 0;
 var $exitcond27 = 0, $exitcond27$1 = 0, $exitcond27$2 = 0, $exitcond30 = 0, $i$012 = 0, $j$09 = 0, $j$09$1 = 0, $j$09$2 = 0, $phitmp = 0, $phitmp1 = 0, $phitmp2 = 0, $phitmp21 = 0, $phitmp22 = 0, $phitmp23 = 0, $xyz$sroa$0$0$lcssa35 = 0, $xyz$sroa$0$016 = 0.0, $xyz$sroa$20$0$lcssa38 = 0, $xyz$sroa$20$0$lcssa39 = 0, $xyz$sroa$20$014 = 0.0, $xyz$sroa$9$0$lcssa36 = 0;
 var $xyz$sroa$9$0$lcssa37 = 0, $xyz$sroa$9$015 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rgb|0)==(0|0);
 if ($0) {
  $i$012 = 0;
 } else {
  $1 = HEAP32[132272>>2]|0;
  $2 = ($1|0)==(0);
  if ($2) {
   $xyz$sroa$0$0$lcssa35 = 0;$xyz$sroa$20$0$lcssa38 = 0;$xyz$sroa$9$0$lcssa36 = 0;
   label = 13;
  } else {
   $3 = HEAP32[132272>>2]|0;
   $c$013 = 0;$xyz$sroa$0$016 = 0.5;$xyz$sroa$20$014 = 0.5;$xyz$sroa$9$015 = 0.5;
   while(1) {
    $44 = (453344 + ($c$013<<2)|0);
    $45 = +HEAPF32[$44>>2];
    $46 = (($rgb) + ($c$013<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47&65535;
    $49 = (+($48|0));
    $50 = $45 * $49;
    $51 = $xyz$sroa$0$016 + $50;
    $52 = ((453344 + ($c$013<<2)|0) + 16|0);
    $53 = +HEAPF32[$52>>2];
    $54 = $53 * $49;
    $55 = $xyz$sroa$9$015 + $54;
    $56 = ((453344 + ($c$013<<2)|0) + 32|0);
    $57 = +HEAPF32[$56>>2];
    $58 = $57 * $49;
    $59 = $xyz$sroa$20$014 + $58;
    $60 = (($c$013) + 1)|0;
    $61 = ($60>>>0)<($3>>>0);
    if ($61) {
     $c$013 = $60;$xyz$sroa$0$016 = $51;$xyz$sroa$20$014 = $59;$xyz$sroa$9$015 = $55;
    } else {
     $$lcssa = $51;$$lcssa45 = $55;$$lcssa46 = $59;
     break;
    }
   }
   $phitmp21 = (~~(($$lcssa)));
   $phitmp22 = (~~(($$lcssa45)));
   $phitmp23 = (~~(($$lcssa46)));
   $phitmp = ($phitmp21|0)<(0);
   if ($phitmp) {
    $64 = 0;$xyz$sroa$20$0$lcssa39 = $phitmp23;$xyz$sroa$9$0$lcssa37 = $phitmp22;
   } else {
    $xyz$sroa$0$0$lcssa35 = $phitmp21;$xyz$sroa$20$0$lcssa38 = $phitmp23;$xyz$sroa$9$0$lcssa36 = $phitmp22;
    label = 13;
   }
  }
  if ((label|0) == 13) {
   $62 = ($xyz$sroa$0$0$lcssa35|0)<(65535);
   $$ = $62 ? $xyz$sroa$0$0$lcssa35 : 65535;
   $64 = $$;$xyz$sroa$20$0$lcssa39 = $xyz$sroa$20$0$lcssa38;$xyz$sroa$9$0$lcssa37 = $xyz$sroa$9$0$lcssa36;
  }
  $63 = (191200 + ($64<<2)|0);
  $65 = +HEAPF32[$63>>2];
  $phitmp1 = ($xyz$sroa$9$0$lcssa37|0)<(0);
  if ($phitmp1) {
   $68 = 0;
  } else {
   $66 = ($xyz$sroa$9$0$lcssa37|0)<(65535);
   $$3 = $66 ? $xyz$sroa$9$0$lcssa37 : 65535;
   $68 = $$3;
  }
  $67 = (191200 + ($68<<2)|0);
  $69 = +HEAPF32[$67>>2];
  $phitmp2 = ($xyz$sroa$20$0$lcssa39|0)<(0);
  if ($phitmp2) {
   $72 = 0;
  } else {
   $70 = ($xyz$sroa$20$0$lcssa39|0)<(65535);
   $$4 = $70 ? $xyz$sroa$20$0$lcssa39 : 65535;
   $72 = $$4;
  }
  $71 = (191200 + ($72<<2)|0);
  $73 = +HEAPF32[$71>>2];
  $74 = $69 * 116.0;
  $75 = $74 + -16.0;
  $76 = $75 * 64.0;
  $77 = (~~(($76)));
  HEAP16[$lab>>1] = $77;
  $78 = $65 - $69;
  $79 = $78 * 32000.0;
  $80 = (~~(($79)));
  $81 = (($lab) + 2|0);
  HEAP16[$81>>1] = $80;
  $82 = $69 - $73;
  $83 = $82 * 12800.0;
  $84 = (~~(($83)));
  $85 = (($lab) + 4|0);
  HEAP16[$85>>1] = $84;
  return;
 }
 while(1) {
  $4 = (+($i$012|0));
  $5 = $4 / 65535.0;
  $6 = $5;
  $7 = $6;
  $8 = $7 > 0.0088559999999999993;
  if ($8) {
   $9 = (+Math_pow((+$7),0.33333333333333331));
   $13 = $9;
  } else {
   $10 = $7 * 7.7869999999999999;
   $11 = $10 + 0.13793103448275862;
   $13 = $11;
  }
  $12 = $13;
  $14 = (191200 + ($i$012<<2)|0);
  HEAPF32[$14>>2] = $12;
  $15 = (($i$012) + 1)|0;
  $exitcond30 = ($15|0)==(65536);
  if ($exitcond30) {
   break;
  } else {
   $i$012 = $15;
  }
 }
 $16 = HEAP32[132272>>2]|0;
 $17 = ($16|0)==(0);
 $18 = (($16) + -1)|0;
 if ($17) {
  return;
 } else {
  $j$09 = 0;
 }
 while(1) {
  $19 = (453344 + ($j$09<<2)|0);
  $20 = (132280 + ($j$09<<2)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $21;
  $23 = $22 * 0.41245300000000001;
  $24 = $23 / 0.95045602321624755;
  $25 = $24 + 0.0;
  $26 = $25;
  $27 = ((132280 + ($j$09<<2)|0) + 16|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28;
  $30 = $29 * 0.35758000000000001;
  $31 = $30 / 0.95045602321624755;
  $32 = $26;
  $33 = $31 + $32;
  $34 = $33;
  $35 = ((132280 + ($j$09<<2)|0) + 32|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $36;
  $38 = $37 * 0.180423;
  $39 = $38 / 0.95045602321624755;
  $40 = $34;
  $41 = $39 + $40;
  $42 = $41;
  HEAPF32[$19>>2] = $42;
  $43 = (($j$09) + 1)|0;
  $exitcond27 = ($j$09|0)==($18|0);
  if ($exitcond27) {
   break;
  } else {
   $j$09 = $43;
  }
 }
 if ($17) {
  return;
 } else {
  $j$09$1 = 0;
 }
 while(1) {
  $86 = ((453344 + ($j$09$1<<2)|0) + 16|0);
  $87 = (132280 + ($j$09$1<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $88;
  $90 = $89 * 0.212671;
  $91 = $90 + 0.0;
  $92 = $91;
  $93 = ((132280 + ($j$09$1<<2)|0) + 16|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $94;
  $96 = $95 * 0.71516000000000002;
  $97 = $92;
  $98 = $96 + $97;
  $99 = $98;
  $100 = ((132280 + ($j$09$1<<2)|0) + 32|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $101;
  $103 = $102 * 0.072168999999999997;
  $104 = $99;
  $105 = $103 + $104;
  $106 = $105;
  HEAPF32[$86>>2] = $106;
  $107 = (($j$09$1) + 1)|0;
  $exitcond27$1 = ($j$09$1|0)==($18|0);
  if ($exitcond27$1) {
   break;
  } else {
   $j$09$1 = $107;
  }
 }
 if ($17) {
  return;
 } else {
  $j$09$2 = 0;
 }
 while(1) {
  $108 = ((453344 + ($j$09$2<<2)|0) + 32|0);
  $109 = (132280 + ($j$09$2<<2)|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $110;
  $112 = $111 * 0.019334;
  $113 = $112 / 1.0887540578842163;
  $114 = $113 + 0.0;
  $115 = $114;
  $116 = ((132280 + ($j$09$2<<2)|0) + 16|0);
  $117 = +HEAPF32[$116>>2];
  $118 = $117;
  $119 = $118 * 0.11919299999999999;
  $120 = $119 / 1.0887540578842163;
  $121 = $115;
  $122 = $120 + $121;
  $123 = $122;
  $124 = ((132280 + ($j$09$2<<2)|0) + 32|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $125;
  $127 = $126 * 0.95022700000000004;
  $128 = $127 / 1.0887540578842163;
  $129 = $123;
  $130 = $128 + $129;
  $131 = $130;
  HEAPF32[$108>>2] = $131;
  $132 = (($j$09$2) + 1)|0;
  $exitcond27$2 = ($j$09$2|0)==($18|0);
  if ($exitcond27$2) {
   break;
  } else {
   $j$09$2 = $132;
  }
 }
 return;
}
function _xtrans_interpolate($passes) {
 $passes = $passes|0;
 var $$ = 0, $$$20 = 0, $$$20$1 = 0, $$$20$2 = 0, $$$20$3 = 0, $$$22 = 0, $$$22$1 = 0, $$$22$2 = 0, $$20 = 0, $$20$1 = 0, $$20$2 = 0, $$20$3 = 0, $$22 = 0, $$22$1 = 0, $$22$2 = 0, $$28 = 0, $$29 = 0, $$lcssa107 = 0, $$max$5 = 0, $$min$1 = 0;
 var $$min$1$1 = 0, $$min$1$2 = 0, $$min$1$3 = 0, $$min$1$4 = 0, $$min$1$5 = 0, $$neg53 = 0, $$neg54 = 0, $$neg55 = 0, $$neg56 = 0, $$neg68 = 0, $$not = 0, $$pr = 0, $$pr$1 = 0, $$row$2 = 0, $$sgcol$2256 = 0, $$sgcol$2256$lcssa = 0, $$sgcol$2256$lcssa$lcssa = 0, $$sgcol$2256$lcssa$lcssa$lcssa = 0, $$sgrow$2255 = 0, $$sgrow$2255$lcssa = 0;
 var $$sgrow$2255$lcssa$lcssa = 0, $$sgrow$2255$lcssa$lcssa$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum14$1 = 0, $$sum1542 = 0, $$sum1542$1 = 0, $$sum16 = 0, $$sum16$1 = 0, $$sum1743 = 0, $$sum1743$1 = 0, $$sum18 = 0, $$sum19 = 0, $$sum19$1 = 0, $$sum19$2 = 0, $$sum19$3 = 0;
 var $$sum19$4 = 0, $$sum19$5 = 0, $$sum2 = 0, $$sum3 = 0, $$sum445 = 0, $$sum445$1 = 0, $$sum445$2 = 0, $$sum5 = 0, $$sum5$1 = 0, $$sum5$2 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0.0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0.0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0.0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0.0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0.0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0;
 var $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0;
 var $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0;
 var $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0;
 var $1183 = 0.0, $1184 = 0.0, $1185 = 0.0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0;
 var $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0;
 var $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0.0, $1235 = 0, $1236 = 0;
 var $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0.0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0.0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0.0, $1252 = 0, $1253 = 0, $1254 = 0;
 var $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0.0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0.0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0.0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0;
 var $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0;
 var $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0;
 var $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0;
 var $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0;
 var $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0;
 var $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0;
 var $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0;
 var $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $allhex = 0, $avg = 0, $brmerge = 0, $c$0253 = 0, $col$0258 = 0, $col$10180 = 0, $col$11199 = 0, $col$12227 = 0, $col$1246 = 0, $col$2 = 0, $col$3108 = 0;
 var $col$4114 = 0, $col$5121 = 0, $col$6138 = 0, $col$7148 = 0, $col$8163 = 0, $col$9174 = 0, $color = 0, $d$0257 = 0, $d$10216 = 0, $d$11222 = 0, $d$2136 = 0, $d$3147 = 0, $d$4160 = 0, $d$5186 = 0, $d$6191 = 0, $d$7197 = 0, $d$8210 = 0, $d$9212 = 0, $diff = 0, $exitcond = 0;
 var $exitcond268 = 0, $exitcond275 = 0, $exitcond279 = 0, $exitcond284 = 0, $exitcond288 = 0, $exitcond292 = 0, $exitcond293 = 0, $exitcond297 = 0, $exitcond301 = 0, $exitcond305 = 0, $exitcond309 = 0, $exitcond310 = 0, $exitcond316 = 0, $exitcond322 = 0, $exitcond328 = 0, $exitcond334 = 0, $exitcond335 = 0, $exitcond336 = 0, $exitcond339 = 0, $exitcond345 = 0;
 var $exitcond351 = 0, $exitcond354 = 0, $exitcond356 = 0, $exitcond358 = 0, $exitcond361 = 0, $exitcond362 = 0, $exitcond363 = 0, $h$0135 = 0, $hm = 0, $i$0133 = 0, $indvars$iv$next312 = 0, $indvars$iv$next318 = 0, $indvars$iv$next324 = 0, $indvars$iv$next330 = 0, $indvars$iv$next341 = 0, $indvars$iv$next343 = 0, $indvars$iv$next347 = 0, $indvars$iv$next349 = 0, $indvars$iv311 = 0, $indvars$iv317 = 0;
 var $indvars$iv323 = 0, $indvars$iv329 = 0, $indvars$iv340 = 0, $indvars$iv342 = 0, $indvars$iv346 = 0, $indvars$iv348 = 0, $left$0234 = 0, $max$0248 = 0, $max$2$1 = 0, $max$2$2 = 0, $max$2$3 = 0, $max$2$4 = 0, $max$2$5 = 0, $max$3 = 0, $max$4 = 0, $max$5215 = 0, $mcol$0 = 0, $min$0247 = 0, $min$3 = 0, $min$4 = 0;
 var $ng$0254 = 0, $ng$1 = 0, $or$cond = 0, $pass$0170 = 0, $rgb$2171 = 0, $rgb$330 = 0, $rgb$331 = 0, $rix$0134 = 0, $rix$1 = 0, $rix$2146 = 0, $rix$3158 = 0, $row$0261 = 0, $row$10177 = 0, $row$11183 = 0, $row$12202 = 0, $row$1252 = 0, $row$13229 = 0, $row$2$lcssa = 0, $row$2245 = 0, $row$3 = 0;
 var $row$4109 = 0, $row$5118 = 0, $row$6125 = 0, $row$7142 = 0, $row$8152 = 0, $row$9166 = 0, $sgcol$0263 = 0, $sgcol$1260 = 0, $sgcol$2256 = 0, $sgrow$0262 = 0, $sgrow$1259 = 0, $sgrow$2255 = 0, $smax = 0, $smax267 = 0, $smax274 = 0, $smax278 = 0, $smax283 = 0, $smax287 = 0, $smax296 = 0, $smax300 = 0;
 var $smax304 = 0, $smax308 = 0, $smax315 = 0, $smax321 = 0, $smax327 = 0, $smax333 = 0, $smax344 = 0, $smax350 = 0, $top$0239 = 0, $tr$0$lcssa = 0.0, $tr$0190 = 0.0, $tr$1 = 0.0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0;
 $vararg_buffer = sp;
 $hm = sp + 144|0;
 $avg = sp + 128|0;
 $color = sp + 32|0;
 $allhex = sp + 176|0;
 $diff = sp + 8|0;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer>>2] = $passes;
  (_fprintf(($2|0),(453488|0),($vararg_buffer|0))|0);
 }
 _cielab(0,0);
 $3 = ($passes|0)>(1);
 $4 = $3&1;
 $5 = 4 << $4;
 $6 = Math_imul($5, 2883584)|0;
 $7 = (($6) + 1572864)|0;
 $8 = (_malloc($7)|0);
 _merror($8,453528);
 $9 = Math_imul($5, 1572864)|0;
 $10 = (($8) + ($9)|0);
 $11 = (($9) + 1572864)|0;
 $12 = (($8) + ($11)|0);
 $13 = Math_imul($5, 2621440)|0;
 $14 = (($13) + 1572864)|0;
 $15 = (($8) + ($14)|0);
 $16 = HEAP16[132088>>1]|0;
 $17 = $16&65535;
 $row$0261 = 0;$sgcol$0263 = 0;$sgrow$0262 = 0;
 while(1) {
  $18 = (($row$0261) + 6)|0;
  $19 = (($18|0) % 6)&-1;
  $20 = (($row$0261) + 6)|0;
  $21 = $row$0261&65535;
  $col$0258 = 0;$sgcol$1260 = $sgcol$0263;$sgrow$1259 = $sgrow$0262;
  while(1) {
   $28 = (($col$0258) + 6)|0;
   $29 = (($28|0) % 6)&-1;
   $30 = ((608 + (($19*6)|0)|0) + ($29)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(1);
   $33 = $32&1;
   $34 = (($col$0258) + 6)|0;
   $35 = $col$0258&65535;
   $36 = $32 ? 2 : 1;
   $37 = $33 << 1;
   $d$0257 = 0;$ng$0254 = 0;$sgcol$2256 = $sgcol$1260;$sgrow$2255 = $sgrow$1259;
   while(1) {
    $38 = (($d$0257) + 2)|0;
    $39 = (453392 + ($38<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40 << 16 >> 16;
    $42 = (($34) + ($41))|0;
    $43 = (($42|0) % 6)&-1;
    $44 = (453392 + ($d$0257<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 << 16 >> 16;
    $47 = (($20) + ($46))|0;
    $48 = (($47|0) % 6)&-1;
    $49 = ((608 + (($48*6)|0)|0) + ($43)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ($50<<24>>24)==(1);
    $52 = (($ng$0254) + 1)|0;
    $ng$1 = $51 ? 0 : $52;
    $53 = ($ng$1|0)==(4);
    $$sgrow$2255 = $53 ? $21 : $sgrow$2255;
    $$sgcol$2256 = $53 ? $35 : $sgcol$2256;
    $54 = ($ng$1|0)==($36|0);
    if ($54) {
     $56 = HEAP16[$44>>1]|0;
     $57 = $56 << 16 >> 16;
     $58 = $d$0257 | 1;
     $59 = (453392 + ($58<<1)|0);
     $60 = HEAP16[$59>>1]|0;
     $61 = $60 << 16 >> 16;
     $62 = HEAP16[$39>>1]|0;
     $63 = $62 << 16 >> 16;
     $64 = (($d$0257) + 3)|0;
     $65 = (453392 + ($64<<1)|0);
     $66 = HEAP16[$65>>1]|0;
     $67 = $66 << 16 >> 16;
     $68 = $37 & $d$0257;
     $c$0253 = 0;
     while(1) {
      $69 = $c$0253 << 1;
      $70 = ((453416 + ($33<<5)|0) + ($69<<1)|0);
      $71 = HEAP16[$70>>1]|0;
      $72 = $71 << 16 >> 16;
      $73 = Math_imul($72, $57)|0;
      $74 = $69 | 1;
      $75 = ((453416 + ($33<<5)|0) + ($74<<1)|0);
      $76 = HEAP16[$75>>1]|0;
      $77 = $76 << 16 >> 16;
      $78 = Math_imul($77, $61)|0;
      $79 = (($78) + ($73))|0;
      $80 = Math_imul($63, $72)|0;
      $81 = Math_imul($67, $77)|0;
      $82 = (($81) + ($80))|0;
      $83 = Math_imul($17, $79)|0;
      $84 = (($82) + ($83))|0;
      $85 = $84&65535;
      $86 = $c$0253 ^ $68;
      $87 = (((($allhex) + (($row$0261*96)|0)|0) + ($col$0258<<5)|0) + ($86<<1)|0);
      HEAP16[$87>>1] = $85;
      $88 = $79 << 9;
      $89 = (($82) + ($88))|0;
      $90 = $89&65535;
      $91 = ((((($allhex) + (($row$0261*96)|0)|0) + ($col$0258<<5)|0) + ($86<<1)|0) + 16|0);
      HEAP16[$91>>1] = $90;
      $92 = (($c$0253) + 1)|0;
      $exitcond361 = ($92|0)==(8);
      if ($exitcond361) {
       break;
      } else {
       $c$0253 = $92;
      }
     }
    }
    $55 = ($38|0)<(10);
    if ($55) {
     $d$0257 = $38;$ng$0254 = $ng$1;$sgcol$2256 = $$sgcol$2256;$sgrow$2255 = $$sgrow$2255;
    } else {
     $$sgcol$2256$lcssa = $$sgcol$2256;$$sgrow$2255$lcssa = $$sgrow$2255;
     break;
    }
   }
   $93 = (($col$0258) + 1)|0;
   $exitcond362 = ($93|0)==(3);
   if ($exitcond362) {
    $$sgcol$2256$lcssa$lcssa = $$sgcol$2256$lcssa;$$sgrow$2255$lcssa$lcssa = $$sgrow$2255$lcssa;
    break;
   } else {
    $col$0258 = $93;$sgcol$1260 = $$sgcol$2256$lcssa;$sgrow$1259 = $$sgrow$2255$lcssa;
   }
  }
  $94 = (($row$0261) + 1)|0;
  $exitcond363 = ($94|0)==(3);
  if ($exitcond363) {
   $$sgcol$2256$lcssa$lcssa$lcssa = $$sgcol$2256$lcssa$lcssa;$$sgrow$2255$lcssa$lcssa$lcssa = $$sgrow$2255$lcssa$lcssa;
   break;
  } else {
   $row$0261 = $94;$sgcol$0263 = $$sgcol$2256$lcssa$lcssa;$sgrow$0262 = $$sgrow$2255$lcssa$lcssa;
  }
 }
 $22 = HEAP16[132080>>1]|0;
 $23 = $22&65535;
 $24 = (($23) + -2)|0;
 $25 = ($24|0)>(2);
 if ($25) {
  $26 = HEAP32[132112>>2]|0;
  $27 = $$sgrow$2255$lcssa$lcssa$lcssa&65535;
  $row$1252 = 2;
  while(1) {
   $95 = HEAP16[132088>>1]|0;
   $96 = $95&65535;
   $97 = (($96) + -2)|0;
   $98 = ($97|0)>(2);
   if ($98) {
    $133 = $96;$col$1246 = 2;$max$0248 = 0;$min$0247 = -1;$row$2245 = $row$1252;
    while(1) {
     $125 = (($col$1246) + 6)|0;
     $126 = (($125|0) % 6)&-1;
     $127 = (($row$2245) + 6)|0;
     $128 = (($127|0) % 6)&-1;
     $129 = ((608 + (($128*6)|0)|0) + ($126)|0);
     $130 = HEAP8[$129>>0]|0;
     $131 = ($130<<24>>24)==(1);
     do {
      if ($131) {
       $col$2 = $col$1246;$max$4 = 0;$min$4 = -1;$row$3 = $row$2245;
      } else {
       $132 = Math_imul($133, $row$2245)|0;
       $$sum18 = (($132) + ($col$1246))|0;
       $134 = (($col$1246|0) % 3)&-1;
       $135 = (($row$2245|0) % 3)&-1;
       $136 = ($max$0248<<16>>16)==(0);
       if ($136) {
        $137 = ((($allhex) + (($135*96)|0)|0) + ($134<<5)|0);
        $138 = HEAP16[$137>>1]|0;
        $139 = $138 << 16 >> 16;
        $$sum19 = (($139) + ($$sum18))|0;
        $140 = ((($26) + ($$sum19<<3)|0) + 2|0);
        $141 = HEAP16[$140>>1]|0;
        $142 = ($min$0247&65535)>($141&65535);
        $$min$1 = $142 ? $141 : $min$0247;
        $143 = (((($allhex) + (($135*96)|0)|0) + ($134<<5)|0) + 2|0);
        $144 = HEAP16[$143>>1]|0;
        $145 = $144 << 16 >> 16;
        $$sum19$1 = (($145) + ($$sum18))|0;
        $146 = ((($26) + ($$sum19$1<<3)|0) + 2|0);
        $147 = HEAP16[$146>>1]|0;
        $148 = ($$min$1&65535)>($147&65535);
        $$min$1$1 = $148 ? $147 : $$min$1;
        $149 = ($141&65535)<($147&65535);
        $max$2$1 = $149 ? $147 : $141;
        $150 = (((($allhex) + (($135*96)|0)|0) + ($134<<5)|0) + 4|0);
        $151 = HEAP16[$150>>1]|0;
        $152 = $151 << 16 >> 16;
        $$sum19$2 = (($152) + ($$sum18))|0;
        $153 = ((($26) + ($$sum19$2<<3)|0) + 2|0);
        $154 = HEAP16[$153>>1]|0;
        $155 = ($$min$1$1&65535)>($154&65535);
        $$min$1$2 = $155 ? $154 : $$min$1$1;
        $156 = ($max$2$1&65535)<($154&65535);
        $max$2$2 = $156 ? $154 : $max$2$1;
        $157 = (((($allhex) + (($135*96)|0)|0) + ($134<<5)|0) + 6|0);
        $158 = HEAP16[$157>>1]|0;
        $159 = $158 << 16 >> 16;
        $$sum19$3 = (($159) + ($$sum18))|0;
        $160 = ((($26) + ($$sum19$3<<3)|0) + 2|0);
        $161 = HEAP16[$160>>1]|0;
        $162 = ($$min$1$2&65535)>($161&65535);
        $$min$1$3 = $162 ? $161 : $$min$1$2;
        $163 = ($max$2$2&65535)<($161&65535);
        $max$2$3 = $163 ? $161 : $max$2$2;
        $164 = (((($allhex) + (($135*96)|0)|0) + ($134<<5)|0) + 8|0);
        $165 = HEAP16[$164>>1]|0;
        $166 = $165 << 16 >> 16;
        $$sum19$4 = (($166) + ($$sum18))|0;
        $167 = ((($26) + ($$sum19$4<<3)|0) + 2|0);
        $168 = HEAP16[$167>>1]|0;
        $169 = ($$min$1$3&65535)>($168&65535);
        $$min$1$4 = $169 ? $168 : $$min$1$3;
        $170 = ($max$2$3&65535)<($168&65535);
        $max$2$4 = $170 ? $168 : $max$2$3;
        $171 = (((($allhex) + (($135*96)|0)|0) + ($134<<5)|0) + 10|0);
        $172 = HEAP16[$171>>1]|0;
        $173 = $172 << 16 >> 16;
        $$sum19$5 = (($173) + ($$sum18))|0;
        $174 = ((($26) + ($$sum19$5<<3)|0) + 2|0);
        $175 = HEAP16[$174>>1]|0;
        $176 = ($$min$1$4&65535)>($175&65535);
        $$min$1$5 = $176 ? $175 : $$min$1$4;
        $177 = ($max$2$4&65535)<($175&65535);
        $max$2$5 = $177 ? $175 : $max$2$4;
        $max$3 = $max$2$5;$min$3 = $$min$1$5;
       } else {
        $max$3 = $max$0248;$min$3 = $min$0247;
       }
       $178 = ((($26) + ($$sum18<<3)|0) + 2|0);
       HEAP16[$178>>1] = $min$3;
       $179 = ((($26) + ($$sum18<<3)|0) + 6|0);
       HEAP16[$179>>1] = $max$3;
       $180 = (($row$2245) - ($27))|0;
       $181 = (($180|0) % 3)&-1;
       if ((($181|0) == 2)) {
        $188 = (($col$1246) + 2)|0;
        $189 = HEAP16[132088>>1]|0;
        $190 = $189&65535;
        $191 = (($190) + -3)|0;
        $192 = ($188|0)<($191|0);
        $193 = ($row$2245|0)>(2);
        $or$cond = $193 & $192;
        $194 = $or$cond << 31 >> 31;
        $$row$2 = (($194) + ($row$2245))|0;
        $col$2 = $188;$max$4 = 0;$min$4 = -1;$row$3 = $$row$2;
        break;
       } else if (!((($181|0) == 1))) {
        $col$2 = $col$1246;$max$4 = $max$3;$min$4 = $min$3;$row$3 = $row$2245;
        break;
       }
       $182 = HEAP16[132080>>1]|0;
       $183 = $182&65535;
       $184 = (($183) + -3)|0;
       $185 = ($row$2245|0)<($184|0);
       if ($185) {
        $186 = (($row$2245) + 1)|0;
        $187 = (($col$1246) + -1)|0;
        $col$2 = $187;$max$4 = $max$3;$min$4 = $min$3;$row$3 = $186;
       } else {
        $col$2 = $col$1246;$max$4 = $max$3;$min$4 = $min$3;$row$3 = $row$2245;
       }
      }
     } while(0);
     $195 = (($col$2) + 1)|0;
     $196 = HEAP16[132088>>1]|0;
     $197 = $196&65535;
     $198 = (($197) + -2)|0;
     $199 = ($195|0)<($198|0);
     if ($199) {
      $133 = $197;$col$1246 = $195;$max$0248 = $max$4;$min$0247 = $min$4;$row$2245 = $row$3;
     } else {
      $row$2$lcssa = $row$3;
      break;
     }
    }
   } else {
    $row$2$lcssa = $row$1252;
   }
   $200 = (($row$2$lcssa) + 1)|0;
   $201 = HEAP16[132080>>1]|0;
   $202 = $201&65535;
   $203 = (($202) + -2)|0;
   $204 = ($200|0)<($203|0);
   if ($204) {
    $row$1252 = $200;
   } else {
    break;
   }
  }
 }
 $99 = HEAP16[132080>>1]|0;
 $100 = $99&65535;
 $101 = (($100) + -19)|0;
 $102 = ($101|0)>(3);
 if (!($102)) {
  _free($8);
  _border_interpolate(8);
  STACKTOP = sp;return;
 }
 $103 = ($passes|0)>(0);
 $104 = ($5|0)>(0);
 $105 = $5 << 18;
 $106 = ($5|0)>(0);
 $107 = (($5) + -4)|0;
 $108 = ($5|0)>(4);
 $109 = ($5|0)>(1);
 $110 = ($5|0)>(0);
 $111 = (($avg) + 12|0);
 $112 = (($avg) + 12|0);
 $113 = ($5|0)>(0);
 $114 = ($5|0)>(0);
 $115 = $$sgrow$2255$lcssa$lcssa$lcssa&65535;
 $116 = $$sgrow$2255$lcssa$lcssa$lcssa&65535;
 $117 = $$sgcol$2256$lcssa$lcssa$lcssa&65535;
 $118 = ($5|0)>(0);
 $119 = $$sgcol$2256$lcssa$lcssa$lcssa&65535;
 $120 = (($color) + 32|0);
 $121 = (($color) + 36|0);
 $122 = $$sgrow$2255$lcssa$lcssa$lcssa&65535;
 $123 = (($passes) + -1)|0;
 $124 = (($5) + -1)|0;
 $indvars$iv317 = -7;$indvars$iv329 = -8;$indvars$iv346 = -9;$indvars$iv348 = -516;$top$0239 = 3;
 while(1) {
  $205 = HEAP16[132088>>1]|0;
  $206 = $205&65535;
  $207 = (($206) + -19)|0;
  $208 = ($207|0)>(3);
  if ($208) {
   $209 = (($top$0239) + 512)|0;
   $210 = ($top$0239|0)<(8);
   $211 = $210 ? $top$0239 : 8;
   $212 = (($top$0239) + 2)|0;
   $213 = (($top$0239) - ($116))|0;
   $214 = (($213) + 4)|0;
   $215 = (($214|0) % 3)&-1;
   $216 = (($top$0239) + 4)|0;
   $217 = (($216) - ($215))|0;
   $218 = (($top$0239) + 3)|0;
   $219 = (($top$0239) + 2)|0;
   $226 = $206;$indvars$iv311 = -7;$indvars$iv323 = -8;$indvars$iv340 = -9;$indvars$iv342 = -516;$left$0234 = 3;
   while(1) {
    $220 = HEAP16[132080>>1]|0;
    $221 = $220&65535;
    $222 = (($221) + -3)|0;
    $223 = ($209|0)<($222|0);
    $$ = $223 ? $209 : $222;
    $224 = (($left$0234) + 512)|0;
    $225 = (($226) + -3)|0;
    $227 = ($224|0)<($225|0);
    $228 = $227 ? $224 : $225;
    $229 = ($$|0)>($top$0239|0);
    if ($229) {
     $230 = ($228|0)>($left$0234|0);
     $231 = (2 - ($226))|0;
     $232 = ($indvars$iv342|0)>($231|0);
     $smax = $232 ? $indvars$iv342 : $231;
     $233 = (-2 - ($smax))|0;
     $234 = $220&65535;
     $235 = (2 - ($234))|0;
     $236 = ($indvars$iv348|0)>($235|0);
     $smax267 = $236 ? $indvars$iv348 : $235;
     $237 = (-2 - ($smax267))|0;
     $row$4109 = $top$0239;
     while(1) {
      if ($230) {
       $238 = (($row$4109) - ($top$0239))|0;
       $col$3108 = $left$0234;
       while(1) {
        $239 = (($col$3108) - ($left$0234))|0;
        $240 = ((($8) + (($238*3072)|0)|0) + (($239*6)|0)|0);
        $241 = HEAP16[132088>>1]|0;
        $242 = $241&65535;
        $243 = Math_imul($242, $row$4109)|0;
        $244 = (($243) + ($col$3108))|0;
        $245 = HEAP32[132112>>2]|0;
        $246 = (($245) + ($244<<3)|0);
        ;HEAP16[$240+0>>1]=HEAP16[$246+0>>1]|0;HEAP16[$240+2>>1]=HEAP16[$246+2>>1]|0;HEAP16[$240+4>>1]=HEAP16[$246+4>>1]|0;
        $247 = (($col$3108) + 1)|0;
        $exitcond = ($col$3108|0)==($233|0);
        if ($exitcond) {
         break;
        } else {
         $col$3108 = $247;
        }
       }
      }
      $248 = (($row$4109) + 1)|0;
      $exitcond268 = ($row$4109|0)==($237|0);
      if ($exitcond268) {
       break;
      } else {
       $row$4109 = $248;
      }
     }
    }
    $258 = (($8) + 1572864|0);
    _memcpy(($258|0),($8|0),1572864)|0;
    $259 = (($8) + 3145728|0);
    _memcpy(($259|0),($8|0),1572864)|0;
    $260 = (($8) + 4718592|0);
    _memcpy(($260|0),($8|0),1572864)|0;
    $261 = ($$|0)>($top$0239|0);
    if ($261) {
     $249 = ($228|0)>($left$0234|0);
     $250 = HEAP32[132112>>2]|0;
     $251 = (2 - ($226))|0;
     $252 = ($indvars$iv342|0)>($251|0);
     $smax274 = $252 ? $indvars$iv342 : $251;
     $253 = (-2 - ($smax274))|0;
     $254 = $220&65535;
     $255 = (2 - ($254))|0;
     $256 = ($indvars$iv348|0)>($255|0);
     $smax278 = $256 ? $indvars$iv348 : $255;
     $257 = (-2 - ($smax278))|0;
     $row$5118 = $top$0239;
     while(1) {
      if ($249) {
       $304 = (($row$5118) + 6)|0;
       $305 = (($304|0) % 6)&-1;
       $306 = (($row$5118|0) % 3)&-1;
       $307 = (($row$5118) - ($top$0239))|0;
       $308 = (($row$5118) - ($122))|0;
       $309 = (($308|0) % 3)&-1;
       $310 = ($309|0)==(0);
       $311 = $310&1;
       $col$4114 = $left$0234;
       while(1) {
        $312 = (($col$4114) + 6)|0;
        $313 = (($312|0) % 6)&-1;
        $314 = ((608 + (($305*6)|0)|0) + ($313)|0);
        $315 = HEAP8[$314>>0]|0;
        $316 = $315 << 24 >> 24;
        $317 = ($315<<24>>24)==(1);
        if (!($317)) {
         $318 = HEAP16[132088>>1]|0;
         $319 = $318&65535;
         $320 = Math_imul($319, $row$5118)|0;
         $$sum6 = (($320) + ($col$4114))|0;
         $321 = (($col$4114|0) % 3)&-1;
         $322 = ((($allhex) + (($306*96)|0)|0) + ($321<<5)|0);
         $323 = (((($allhex) + (($306*96)|0)|0) + ($321<<5)|0) + 2|0);
         $324 = HEAP16[$323>>1]|0;
         $325 = $324 << 16 >> 16;
         $$sum7 = (($325) + ($$sum6))|0;
         $326 = ((($250) + ($$sum7<<3)|0) + 2|0);
         $327 = HEAP16[$326>>1]|0;
         $328 = $327&65535;
         $329 = HEAP16[$322>>1]|0;
         $330 = $329 << 16 >> 16;
         $$sum8 = (($330) + ($$sum6))|0;
         $331 = ((($250) + ($$sum8<<3)|0) + 2|0);
         $332 = HEAP16[$331>>1]|0;
         $333 = $332&65535;
         $334 = (($333) + ($328))|0;
         $335 = ($334*174)|0;
         $336 = $325 << 1;
         $$sum9 = (($336) + ($$sum6))|0;
         $337 = ((($250) + ($$sum9<<3)|0) + 2|0);
         $338 = HEAP16[$337>>1]|0;
         $339 = $338&65535;
         $340 = $330 << 1;
         $$sum10 = (($340) + ($$sum6))|0;
         $341 = ((($250) + ($$sum10<<3)|0) + 2|0);
         $342 = HEAP16[$341>>1]|0;
         $343 = $342&65535;
         $344 = (($343) + ($339))|0;
         $345 = Math_imul($344, -46)|0;
         $346 = (($335) + ($345))|0;
         HEAP32[$120>>2] = $346;
         $347 = (((($allhex) + (($306*96)|0)|0) + ($321<<5)|0) + 6|0);
         $348 = HEAP16[$347>>1]|0;
         $349 = $348 << 16 >> 16;
         $$sum11 = (($349) + ($$sum6))|0;
         $350 = ((($250) + ($$sum11<<3)|0) + 2|0);
         $351 = HEAP16[$350>>1]|0;
         $352 = $351&65535;
         $353 = ($352*223)|0;
         $354 = (((($allhex) + (($306*96)|0)|0) + ($321<<5)|0) + 4|0);
         $355 = HEAP16[$354>>1]|0;
         $356 = $355 << 16 >> 16;
         $$sum12 = (($356) + ($$sum6))|0;
         $357 = ((($250) + ($$sum12<<3)|0) + 2|0);
         $358 = HEAP16[$357>>1]|0;
         $359 = $358&65535;
         $360 = ($359*33)|0;
         $361 = (($360) + ($353))|0;
         $362 = ((($250) + ($$sum6<<3)|0) + ($316<<1)|0);
         $363 = HEAP16[$362>>1]|0;
         $364 = $363&65535;
         $$sum13 = (($$sum6) - ($356))|0;
         $365 = ((($250) + ($$sum13<<3)|0) + ($316<<1)|0);
         $366 = HEAP16[$365>>1]|0;
         $367 = $366&65535;
         $368 = (($364) - ($367))|0;
         $369 = ($368*92)|0;
         $370 = (($361) + ($369))|0;
         HEAP32[$121>>2] = $370;
         $371 = HEAP16[$362>>1]|0;
         $372 = $371&65535;
         $373 = $372 << 1;
         $374 = (((($allhex) + (($306*96)|0)|0) + ($321<<5)|0) + 8|0);
         $375 = HEAP16[$374>>1]|0;
         $376 = $375 << 16 >> 16;
         $$sum14 = (($376) + ($$sum6))|0;
         $377 = ((($250) + ($$sum14<<3)|0) + 2|0);
         $378 = HEAP16[$377>>1]|0;
         $379 = $378&65535;
         $380 = ($379*164)|0;
         $381 = $376 << 1;
         $$sum1542 = (($$sum6) - ($381))|0;
         $382 = ((($250) + ($$sum1542<<3)|0) + 2|0);
         $383 = HEAP16[$382>>1]|0;
         $384 = $383&65535;
         $385 = ($384*92)|0;
         $386 = (($385) + ($380))|0;
         $387 = ($376*3)|0;
         $$sum16 = (($387) + ($$sum6))|0;
         $388 = ((($250) + ($$sum16<<3)|0) + ($316<<1)|0);
         $389 = HEAP16[$388>>1]|0;
         $390 = $389&65535;
         $391 = (($373) - ($390))|0;
         $392 = Math_imul($376, -3)|0;
         $$sum1743 = (($$sum6) + ($392))|0;
         $393 = ((($250) + ($$sum1743<<3)|0) + ($316<<1)|0);
         $394 = HEAP16[$393>>1]|0;
         $395 = $394&65535;
         $396 = (($391) - ($395))|0;
         $397 = ($396*33)|0;
         $398 = (($386) + ($397))|0;
         $399 = (($color) + 40|0);
         HEAP32[$399>>2] = $398;
         $400 = (((($allhex) + (($306*96)|0)|0) + ($321<<5)|0) + 10|0);
         $401 = HEAP16[$400>>1]|0;
         $402 = $401 << 16 >> 16;
         $$sum14$1 = (($402) + ($$sum6))|0;
         $403 = ((($250) + ($$sum14$1<<3)|0) + 2|0);
         $404 = HEAP16[$403>>1]|0;
         $405 = $404&65535;
         $406 = ($405*164)|0;
         $407 = $402 << 1;
         $$sum1542$1 = (($$sum6) - ($407))|0;
         $408 = ((($250) + ($$sum1542$1<<3)|0) + 2|0);
         $409 = HEAP16[$408>>1]|0;
         $410 = $409&65535;
         $411 = ($410*92)|0;
         $412 = (($411) + ($406))|0;
         $413 = ($402*3)|0;
         $$sum16$1 = (($413) + ($$sum6))|0;
         $414 = ((($250) + ($$sum16$1<<3)|0) + ($316<<1)|0);
         $415 = HEAP16[$414>>1]|0;
         $416 = $415&65535;
         $417 = (($373) - ($416))|0;
         $418 = Math_imul($402, -3)|0;
         $$sum1743$1 = (($$sum6) + ($418))|0;
         $419 = ((($250) + ($$sum1743$1<<3)|0) + ($316<<1)|0);
         $420 = HEAP16[$419>>1]|0;
         $421 = $420&65535;
         $422 = (($417) - ($421))|0;
         $423 = ($422*33)|0;
         $424 = (($412) + ($423))|0;
         $425 = (($color) + 44|0);
         HEAP32[$425>>2] = $424;
         $426 = ((($250) + ($$sum6<<3)|0) + 2|0);
         $427 = ((($250) + ($$sum6<<3)|0) + 6|0);
         $428 = (($col$4114) - ($left$0234))|0;
         $429 = HEAP16[$426>>1]|0;
         $430 = $429&65535;
         $431 = (($color) + 32|0);
         $432 = HEAP32[$431>>2]|0;
         $433 = $432 >> 8;
         $434 = HEAP16[$427>>1]|0;
         $435 = $434&65535;
         $436 = ($433|0)<($435|0);
         $$20 = $436 ? $433 : $435;
         $437 = ($430|0)>($$20|0);
         $$$20 = $437 ? $430 : $$20;
         $438 = $$$20&65535;
         $439 = ((((($8) + (Math_imul($311, 1572864)|0)|0) + (($307*3072)|0)|0) + (($428*6)|0)|0) + 2|0);
         HEAP16[$439>>1] = $438;
         $440 = HEAP16[$426>>1]|0;
         $441 = $440&65535;
         $442 = (($color) + 36|0);
         $443 = HEAP32[$442>>2]|0;
         $444 = $443 >> 8;
         $445 = HEAP16[$427>>1]|0;
         $446 = $445&65535;
         $447 = ($444|0)<($446|0);
         $$20$1 = $447 ? $444 : $446;
         $448 = ($441|0)>($$20$1|0);
         $$$20$1 = $448 ? $441 : $$20$1;
         $449 = $$$20$1&65535;
         $450 = $311 ^ 1;
         $451 = ((((($8) + (Math_imul($450, 1572864)|0)|0) + (($307*3072)|0)|0) + (($428*6)|0)|0) + 2|0);
         HEAP16[$451>>1] = $449;
         $452 = HEAP16[$426>>1]|0;
         $453 = $452&65535;
         $454 = (($color) + 40|0);
         $455 = HEAP32[$454>>2]|0;
         $456 = $455 >> 8;
         $457 = HEAP16[$427>>1]|0;
         $458 = $457&65535;
         $459 = ($456|0)<($458|0);
         $$20$2 = $459 ? $456 : $458;
         $460 = ($453|0)>($$20$2|0);
         $$$20$2 = $460 ? $453 : $$20$2;
         $461 = $$$20$2&65535;
         $462 = $311 | 2;
         $463 = ((((($8) + (Math_imul($462, 1572864)|0)|0) + (($307*3072)|0)|0) + (($428*6)|0)|0) + 2|0);
         HEAP16[$463>>1] = $461;
         $464 = HEAP16[$426>>1]|0;
         $465 = $464&65535;
         $466 = (($color) + 44|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = $467 >> 8;
         $469 = HEAP16[$427>>1]|0;
         $470 = $469&65535;
         $471 = ($468|0)<($470|0);
         $$20$3 = $471 ? $468 : $470;
         $472 = ($465|0)>($$20$3|0);
         $$$20$3 = $472 ? $465 : $$20$3;
         $473 = $$$20$3&65535;
         $474 = $311 ^ 3;
         $475 = ((((($8) + (Math_imul($474, 1572864)|0)|0) + (($307*3072)|0)|0) + (($428*6)|0)|0) + 2|0);
         HEAP16[$475>>1] = $473;
        }
        $476 = (($col$4114) + 1)|0;
        $exitcond275 = ($col$4114|0)==($253|0);
        if ($exitcond275) {
         break;
        } else {
         $col$4114 = $476;
        }
       }
      }
      $477 = (($row$5118) + 1)|0;
      $exitcond279 = ($row$5118|0)==($257|0);
      if ($exitcond279) {
       break;
      } else {
       $row$5118 = $477;
      }
     }
    }
    if ($103) {
     $262 = (($$) + -2)|0;
     $263 = ($212|0)<($262|0);
     $264 = (($left$0234) + 2)|0;
     $265 = (($228) + -2)|0;
     $266 = ($264|0)<($265|0);
     $267 = (($$) + -2)|0;
     $268 = ($217|0)<($267|0);
     $269 = (($$) + -3)|0;
     $270 = ($218|0)<($269|0);
     $271 = (($left$0234) + 2)|0;
     $272 = (($228) + -2)|0;
     $273 = (($left$0234) + 3)|0;
     $274 = (($228) + -3)|0;
     $275 = ($273|0)<($274|0);
     $276 = (($left$0234) - ($119))|0;
     $277 = (($276) + 4)|0;
     $278 = (($277|0) % 3)&-1;
     $279 = (($left$0234) + 4)|0;
     $280 = (($279) - ($278))|0;
     $281 = (($228) + -2)|0;
     $282 = ($280|0)<($281|0);
     $283 = (2 - ($226))|0;
     $284 = ($indvars$iv342|0)>($283|0);
     $smax283 = $284 ? $indvars$iv342 : $283;
     $285 = (-4 - ($smax283))|0;
     $286 = $220&65535;
     $287 = (2 - ($286))|0;
     $288 = ($indvars$iv348|0)>($287|0);
     $smax287 = $288 ? $indvars$iv348 : $287;
     $289 = (-4 - ($smax287))|0;
     $290 = (2 - ($226))|0;
     $291 = ($indvars$iv342|0)>($290|0);
     $smax296 = $291 ? $indvars$iv342 : $290;
     $292 = (-5 - ($smax296))|0;
     $293 = $220&65535;
     $294 = (2 - ($293))|0;
     $295 = ($indvars$iv348|0)>($294|0);
     $smax300 = $295 ? $indvars$iv348 : $294;
     $296 = (-5 - ($smax300))|0;
     $297 = (2 - ($226))|0;
     $298 = ($indvars$iv342|0)>($297|0);
     $smax304 = $298 ? $indvars$iv342 : $297;
     $299 = (-4 - ($smax304))|0;
     $300 = $220&65535;
     $301 = (2 - ($300))|0;
     $302 = ($indvars$iv348|0)>($301|0);
     $smax308 = $302 ? $indvars$iv348 : $301;
     $303 = (-4 - ($smax308))|0;
     $pass$0170 = 0;$rgb$2171 = $8;
     while(1) {
      if ((($pass$0170|0) == 1)) {
       $478 = (($rgb$2171) + 6291456|0);
       _memcpy(($478|0),($8|0),6291456)|0;
       $rgb$330 = $478;
       label = 46;
      } else if ((($pass$0170|0) == 0)) {
       $rgb$331 = $rgb$2171;
      } else {
       $rgb$330 = $rgb$2171;
       label = 46;
      }
      if ((label|0) == 46) {
       label = 0;
       if ($263) {
        $479 = HEAP32[132112>>2]|0;
        $row$6125 = $212;
        while(1) {
         if ($266) {
          $480 = (($row$6125) + 6)|0;
          $481 = (($480|0) % 6)&-1;
          $482 = (($row$6125|0) % 3)&-1;
          $483 = (($row$6125) - ($top$0239))|0;
          $484 = (($row$6125) - ($115))|0;
          $485 = (($484|0) % 3)&-1;
          $486 = ($485|0)==(0);
          $487 = $486&1;
          $col$5121 = $264;
          while(1) {
           $488 = (($col$5121) + 6)|0;
           $489 = (($488|0) % 6)&-1;
           $490 = ((608 + (($481*6)|0)|0) + ($489)|0);
           $491 = HEAP8[$490>>0]|0;
           $492 = $491 << 24 >> 24;
           $493 = ($491<<24>>24)==(1);
           if (!($493)) {
            $494 = HEAP16[132088>>1]|0;
            $495 = $494&65535;
            $496 = Math_imul($495, $row$6125)|0;
            $$sum3 = (($496) + ($col$5121))|0;
            $497 = (($col$5121|0) % 3)&-1;
            $498 = (($col$5121) - ($left$0234))|0;
            $499 = ((($479) + ($$sum3<<3)|0) + 2|0);
            $500 = ((($479) + ($$sum3<<3)|0) + 6|0);
            $501 = $487 ^ 1;
            $502 = (((($allhex) + (($482*96)|0)|0) + ($497<<5)|0) + 22|0);
            $503 = HEAP16[$502>>1]|0;
            $504 = $503 << 16 >> 16;
            $505 = $504 << 1;
            $$sum445 = (($498) - ($505))|0;
            $506 = ((((($rgb$330) + (Math_imul($501, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum445*6)|0)|0) + 2|0);
            $507 = HEAP16[$506>>1]|0;
            $508 = $507&65535;
            $$sum5 = (($504) + ($498))|0;
            $509 = ((((($rgb$330) + (Math_imul($501, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum5*6)|0)|0) + 2|0);
            $510 = HEAP16[$509>>1]|0;
            $511 = $510&65535;
            $512 = $511 << 1;
            $513 = (($512) + ($508))|0;
            $514 = ((((($rgb$330) + (Math_imul($501, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum445*6)|0)|0) + ($492<<1)|0);
            $515 = HEAP16[$514>>1]|0;
            $516 = $515&65535;
            $517 = (($513) - ($516))|0;
            $518 = ((((($rgb$330) + (Math_imul($501, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum5*6)|0)|0) + ($492<<1)|0);
            $519 = HEAP16[$518>>1]|0;
            $520 = $519&65535;
            $521 = $520 << 1;
            $522 = (($517) - ($521))|0;
            $523 = ((((($rgb$330) + (Math_imul($501, 1572864)|0)|0) + (($483*3072)|0)|0) + (($498*6)|0)|0) + ($492<<1)|0);
            $524 = HEAP16[$523>>1]|0;
            $525 = $524&65535;
            $526 = ($525*3)|0;
            $527 = (($522) + ($526))|0;
            $528 = HEAP16[$499>>1]|0;
            $529 = $528&65535;
            $530 = (($527|0) / 3)&-1;
            $531 = HEAP16[$500>>1]|0;
            $532 = $531&65535;
            $533 = ($530|0)<($532|0);
            $$22 = $533 ? $530 : $532;
            $534 = ($529|0)>($$22|0);
            $$$22 = $534 ? $529 : $$22;
            $535 = $$$22&65535;
            $536 = ((((($rgb$330) + (Math_imul($501, 1572864)|0)|0) + (($483*3072)|0)|0) + (($498*6)|0)|0) + 2|0);
            HEAP16[$536>>1] = $535;
            $537 = $487 | 2;
            $538 = (((($allhex) + (($482*96)|0)|0) + ($497<<5)|0) + 24|0);
            $539 = HEAP16[$538>>1]|0;
            $540 = $539 << 16 >> 16;
            $541 = $540 << 1;
            $$sum445$1 = (($498) - ($541))|0;
            $542 = ((((($rgb$330) + (Math_imul($537, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum445$1*6)|0)|0) + 2|0);
            $543 = HEAP16[$542>>1]|0;
            $544 = $543&65535;
            $$sum5$1 = (($540) + ($498))|0;
            $545 = ((((($rgb$330) + (Math_imul($537, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum5$1*6)|0)|0) + 2|0);
            $546 = HEAP16[$545>>1]|0;
            $547 = $546&65535;
            $548 = $547 << 1;
            $549 = (($548) + ($544))|0;
            $550 = ((((($rgb$330) + (Math_imul($537, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum445$1*6)|0)|0) + ($492<<1)|0);
            $551 = HEAP16[$550>>1]|0;
            $552 = $551&65535;
            $553 = (($549) - ($552))|0;
            $554 = ((((($rgb$330) + (Math_imul($537, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum5$1*6)|0)|0) + ($492<<1)|0);
            $555 = HEAP16[$554>>1]|0;
            $556 = $555&65535;
            $557 = $556 << 1;
            $558 = (($553) - ($557))|0;
            $559 = ((((($rgb$330) + (Math_imul($537, 1572864)|0)|0) + (($483*3072)|0)|0) + (($498*6)|0)|0) + ($492<<1)|0);
            $560 = HEAP16[$559>>1]|0;
            $561 = $560&65535;
            $562 = ($561*3)|0;
            $563 = (($558) + ($562))|0;
            $564 = HEAP16[$499>>1]|0;
            $565 = $564&65535;
            $566 = (($563|0) / 3)&-1;
            $567 = HEAP16[$500>>1]|0;
            $568 = $567&65535;
            $569 = ($566|0)<($568|0);
            $$22$1 = $569 ? $566 : $568;
            $570 = ($565|0)>($$22$1|0);
            $$$22$1 = $570 ? $565 : $$22$1;
            $571 = $$$22$1&65535;
            $572 = ((((($rgb$330) + (Math_imul($537, 1572864)|0)|0) + (($483*3072)|0)|0) + (($498*6)|0)|0) + 2|0);
            HEAP16[$572>>1] = $571;
            $573 = $487 ^ 3;
            $574 = (((($allhex) + (($482*96)|0)|0) + ($497<<5)|0) + 26|0);
            $575 = HEAP16[$574>>1]|0;
            $576 = $575 << 16 >> 16;
            $577 = $576 << 1;
            $$sum445$2 = (($498) - ($577))|0;
            $578 = ((((($rgb$330) + (Math_imul($573, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum445$2*6)|0)|0) + 2|0);
            $579 = HEAP16[$578>>1]|0;
            $580 = $579&65535;
            $$sum5$2 = (($576) + ($498))|0;
            $581 = ((((($rgb$330) + (Math_imul($573, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum5$2*6)|0)|0) + 2|0);
            $582 = HEAP16[$581>>1]|0;
            $583 = $582&65535;
            $584 = $583 << 1;
            $585 = (($584) + ($580))|0;
            $586 = ((((($rgb$330) + (Math_imul($573, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum445$2*6)|0)|0) + ($492<<1)|0);
            $587 = HEAP16[$586>>1]|0;
            $588 = $587&65535;
            $589 = (($585) - ($588))|0;
            $590 = ((((($rgb$330) + (Math_imul($573, 1572864)|0)|0) + (($483*3072)|0)|0) + (($$sum5$2*6)|0)|0) + ($492<<1)|0);
            $591 = HEAP16[$590>>1]|0;
            $592 = $591&65535;
            $593 = $592 << 1;
            $594 = (($589) - ($593))|0;
            $595 = ((((($rgb$330) + (Math_imul($573, 1572864)|0)|0) + (($483*3072)|0)|0) + (($498*6)|0)|0) + ($492<<1)|0);
            $596 = HEAP16[$595>>1]|0;
            $597 = $596&65535;
            $598 = ($597*3)|0;
            $599 = (($594) + ($598))|0;
            $600 = HEAP16[$499>>1]|0;
            $601 = $600&65535;
            $602 = (($599|0) / 3)&-1;
            $603 = HEAP16[$500>>1]|0;
            $604 = $603&65535;
            $605 = ($602|0)<($604|0);
            $$22$2 = $605 ? $602 : $604;
            $606 = ($601|0)>($$22$2|0);
            $$$22$2 = $606 ? $601 : $$22$2;
            $607 = $$$22$2&65535;
            $608 = ((((($rgb$330) + (Math_imul($573, 1572864)|0)|0) + (($483*3072)|0)|0) + (($498*6)|0)|0) + 2|0);
            HEAP16[$608>>1] = $607;
           }
           $609 = (($col$5121) + 1)|0;
           $exitcond284 = ($col$5121|0)==($285|0);
           if ($exitcond284) {
            break;
           } else {
            $col$5121 = $609;
           }
          }
         }
         $610 = (($row$6125) + 1)|0;
         $exitcond288 = ($row$6125|0)==($289|0);
         if ($exitcond288) {
          $rgb$331 = $rgb$330;
          break;
         } else {
          $row$6125 = $610;
         }
        }
       } else {
        $rgb$331 = $rgb$330;
       }
      }
      if ($268) {
       $row$7142 = $217;
       while(1) {
        if ($282) {
         $611 = (($row$7142) - ($top$0239))|0;
         $612 = (($row$7142) + 6)|0;
         $613 = (($612|0) % 6)&-1;
         $col$6138 = $280;
         while(1) {
          $614 = (($col$6138) - ($left$0234))|0;
          $615 = ((($rgb$331) + (($611*3072)|0)|0) + (($614*6)|0)|0);
          $616 = (($col$6138) + 7)|0;
          $617 = (($616|0) % 6)&-1;
          $618 = ((608 + (($613*6)|0)|0) + ($617)|0);
          $619 = HEAP8[$618>>0]|0;
          $620 = $619 << 24 >> 24;
          ;HEAP32[$diff+0>>2]=0|0;HEAP32[$diff+4>>2]=0|0;HEAP32[$diff+8>>2]=0|0;HEAP32[$diff+12>>2]=0|0;HEAP32[$diff+16>>2]=0|0;HEAP32[$diff+20>>2]=0|0;
          $d$2136 = 0;$h$0135 = $620;$i$0133 = 1;$rix$0134 = $615;
          while(1) {
           $621 = (($rix$0134) + 2|0);
           $622 = HEAP16[$621>>1]|0;
           $623 = $622&65535;
           $624 = $623 << 1;
           $625 = (0 - ($i$0133))|0;
           $626 = ($d$2136|0)>(1);
           $627 = (($diff) + ($d$2136<<2)|0);
           $628 = ((($rix$0134) + (($i$0133*6)|0)|0) + 2|0);
           $629 = HEAP16[$628>>1]|0;
           $630 = $629&65535;
           $631 = (($624) - ($630))|0;
           $632 = ((($rix$0134) + (($625*6)|0)|0) + 2|0);
           $633 = HEAP16[$632>>1]|0;
           $634 = $633&65535;
           $635 = (($631) - ($634))|0;
           $636 = ((($rix$0134) + (($i$0133*6)|0)|0) + ($h$0135<<1)|0);
           $637 = HEAP16[$636>>1]|0;
           $638 = $637&65535;
           $639 = (($635) + ($638))|0;
           $640 = ((($rix$0134) + (($625*6)|0)|0) + ($h$0135<<1)|0);
           $641 = HEAP16[$640>>1]|0;
           $642 = $641&65535;
           $643 = (($639) + ($642))|0;
           $644 = ((($color) + ($h$0135<<5)|0) + ($d$2136<<2)|0);
           HEAP32[$644>>2] = $643;
           if ($626) {
            $645 = HEAP16[$628>>1]|0;
            $646 = $645&65535;
            $647 = HEAP16[$632>>1]|0;
            $648 = $647&65535;
            $649 = (($646) - ($648))|0;
            $650 = HEAP16[$636>>1]|0;
            $651 = $650&65535;
            $652 = (($649) - ($651))|0;
            $653 = HEAP16[$640>>1]|0;
            $654 = $653&65535;
            $655 = (($652) + ($654))|0;
            $656 = Math_imul($655, $655)|0;
            $657 = Math_imul($635, $635)|0;
            $658 = (($656) + ($657))|0;
            $659 = (+($658|0));
            $660 = +HEAPF32[$627>>2];
            $661 = $660 + $659;
            HEAPF32[$627>>2] = $661;
           }
           $662 = $h$0135 ^ 2;
           $663 = $i$0133 << 1;
           $664 = ((($rix$0134) + (($663*6)|0)|0) + 2|0);
           $665 = HEAP16[$664>>1]|0;
           $666 = $665&65535;
           $667 = (($624) - ($666))|0;
           $668 = $625 << 1;
           $669 = ((($rix$0134) + (($668*6)|0)|0) + 2|0);
           $670 = HEAP16[$669>>1]|0;
           $671 = $670&65535;
           $672 = (($667) - ($671))|0;
           $673 = ((($rix$0134) + (($663*6)|0)|0) + ($662<<1)|0);
           $674 = HEAP16[$673>>1]|0;
           $675 = $674&65535;
           $676 = (($672) + ($675))|0;
           $677 = ((($rix$0134) + (($668*6)|0)|0) + ($662<<1)|0);
           $678 = HEAP16[$677>>1]|0;
           $679 = $678&65535;
           $680 = (($676) + ($679))|0;
           $681 = ((($color) + ($662<<5)|0) + ($d$2136<<2)|0);
           HEAP32[$681>>2] = $680;
           do {
            if ($626) {
             $1169 = HEAP16[$664>>1]|0;
             $1170 = $1169&65535;
             $1171 = HEAP16[$669>>1]|0;
             $1172 = $1171&65535;
             $1173 = (($1170) - ($1172))|0;
             $1174 = HEAP16[$673>>1]|0;
             $1175 = $1174&65535;
             $1176 = (($1173) - ($1175))|0;
             $1177 = HEAP16[$677>>1]|0;
             $1178 = $1177&65535;
             $1179 = (($1176) + ($1178))|0;
             $1180 = Math_imul($1179, $1179)|0;
             $1181 = Math_imul($672, $672)|0;
             $1182 = (($1180) + ($1181))|0;
             $1183 = (+($1182|0));
             $1184 = +HEAPF32[$627>>2];
             $1185 = $1184 + $1183;
             HEAPF32[$627>>2] = $1185;
             $1186 = $d$2136 & 1;
             $1187 = ($1186|0)==(0);
             if ($1187) {
              $rix$1 = $rix$0134;
              break;
             }
             $682 = (($d$2136) + -1)|0;
             $683 = (($diff) + ($682<<2)|0);
             $684 = +HEAPF32[$683>>2];
             $685 = (($diff) + ($d$2136<<2)|0);
             $686 = +HEAPF32[$685>>2];
             $687 = $684 < $686;
             if ($687) {
              $688 = (($color) + ($682<<2)|0);
              $689 = HEAP32[$688>>2]|0;
              $690 = (($color) + ($d$2136<<2)|0);
              HEAP32[$690>>2] = $689;
              $691 = ((($color) + ($682<<2)|0) + 64|0);
              $692 = HEAP32[$691>>2]|0;
              $693 = ((($color) + ($d$2136<<2)|0) + 64|0);
              HEAP32[$693>>2] = $692;
             }
             if ($1187) {
              $rix$1 = $rix$0134;
             } else {
              label = 64;
             }
            } else {
             label = 64;
            }
           } while(0);
           if ((label|0) == 64) {
            label = 0;
            $694 = (($color) + ($d$2136<<2)|0);
            $695 = HEAP32[$694>>2]|0;
            $696 = ($695|0)<(131070);
            do {
             if ($696) {
              $697 = ($695|0)<(-1);
              if ($697) {
               $701 = 0;
               break;
              }
              $$pr = HEAP32[$694>>2]|0;
              $698 = ($$pr|0)<(131070);
              if (!($698)) {
               $701 = 65535;
               break;
              }
              $699 = (($$pr|0) / 2)&-1;
              $701 = $699;
             } else {
              $701 = 65535;
             }
            } while(0);
            $700 = $701&65535;
            HEAP16[$rix$0134>>1] = $700;
            $702 = ((($color) + ($d$2136<<2)|0) + 64|0);
            $703 = HEAP32[$702>>2]|0;
            $704 = ($703|0)<(131070);
            do {
             if ($704) {
              $1188 = ($703|0)<(-1);
              if ($1188) {
               $1192 = 0;
               break;
              }
              $$pr$1 = HEAP32[$702>>2]|0;
              $1189 = ($$pr$1|0)<(131070);
              if (!($1189)) {
               $1192 = 65535;
               break;
              }
              $1190 = (($$pr$1|0) / 2)&-1;
              $1192 = $1190;
             } else {
              $1192 = 65535;
             }
            } while(0);
            $1191 = $1192&65535;
            $1193 = (($rix$0134) + 4|0);
            HEAP16[$1193>>1] = $1191;
            $1194 = (($rix$0134) + 1572864|0);
            $rix$1 = $1194;
           }
           $705 = (($d$2136) + 1)|0;
           $706 = $i$0133 ^ 513;
           $exitcond292 = ($705|0)==(6);
           if ($exitcond292) {
            break;
           } else {
            $d$2136 = $705;$h$0135 = $662;$i$0133 = $706;$rix$0134 = $rix$1;
           }
          }
          $707 = (($col$6138) + 3)|0;
          $708 = ($707|0)<($281|0);
          if ($708) {
           $col$6138 = $707;
          } else {
           break;
          }
         }
        }
        $709 = (($row$7142) + 3)|0;
        $710 = ($709|0)<($267|0);
        if ($710) {
         $row$7142 = $709;
        } else {
         break;
        }
       }
      }
      if ($270) {
       $row$8152 = $218;
       while(1) {
        if ($275) {
         $711 = (($row$8152) + 6)|0;
         $712 = (($711|0) % 6)&-1;
         $713 = (($row$8152) - ($top$0239))|0;
         $714 = (($row$8152) - ($116))|0;
         $715 = (($714|0) % 3)&-1;
         $716 = ($715|0)!=(0);
         $717 = $716 ? 512 : 1;
         $718 = $717 ^ 513;
         $719 = ($718*3)|0;
         $720 = (0 - ($717))|0;
         $721 = (0 - ($719))|0;
         $col$7148 = $273;
         while(1) {
          $722 = (($col$7148) + 6)|0;
          $723 = (($722|0) % 6)&-1;
          $724 = ((608 + (($712*6)|0)|0) + ($723)|0);
          $725 = HEAP8[$724>>0]|0;
          $726 = $725 << 24 >> 24;
          $727 = (2 - ($726))|0;
          $728 = ($727|0)==(1);
          if (!($728)) {
           $729 = (($col$7148) - ($left$0234))|0;
           $730 = ((($rgb$331) + (($713*3072)|0)|0) + (($729*6)|0)|0);
           $d$3147 = 0;$rix$2146 = $730;
           while(1) {
            $731 = ($d$3147|0)>(1);
            do {
             if ($731) {
              $771 = $717;
             } else {
              $732 = $d$3147 ^ $717;
              $733 = $732 & 1;
              $734 = ($733|0)==(0);
              if (!($734)) {
               $771 = $717;
               break;
              }
              $735 = (($rix$2146) + 2|0);
              $736 = HEAP16[$735>>1]|0;
              $737 = $736&65535;
              $738 = ((($rix$2146) + (($717*6)|0)|0) + 2|0);
              $739 = HEAP16[$738>>1]|0;
              $740 = $739&65535;
              $741 = (($737) - ($740))|0;
              $742 = $741 >> 31;
              $743 = $742 ^ $741;
              $$neg53 = $741 >>> 31;
              $744 = ((($rix$2146) + (($720*6)|0)|0) + 2|0);
              $745 = HEAP16[$744>>1]|0;
              $746 = $745&65535;
              $747 = (($737) - ($746))|0;
              $748 = $747 >> 31;
              $749 = $748 ^ $747;
              $$neg54 = $747 >>> 31;
              $750 = (($743) + ($$neg53))|0;
              $751 = (($750) + ($$neg54))|0;
              $752 = (($751) + ($749))|0;
              $753 = ((($rix$2146) + (($719*6)|0)|0) + 2|0);
              $754 = HEAP16[$753>>1]|0;
              $755 = $754&65535;
              $756 = (($737) - ($755))|0;
              $757 = $756 >> 31;
              $758 = $757 ^ $756;
              $$neg55 = $756 >>> 31;
              $759 = ((($rix$2146) + (($721*6)|0)|0) + 2|0);
              $760 = HEAP16[$759>>1]|0;
              $761 = $760&65535;
              $762 = (($737) - ($761))|0;
              $763 = $762 >> 31;
              $764 = $763 ^ $762;
              $$neg56 = $762 >>> 31;
              $765 = (($758) + ($$neg55))|0;
              $766 = (($765) + ($$neg56))|0;
              $767 = (($766) + ($764))|0;
              $768 = $767 << 1;
              $769 = ($752|0)<($768|0);
              $$29 = $769 ? $717 : $719;
              $771 = $$29;
             }
            } while(0);
            $770 = ((($rix$2146) + (($771*6)|0)|0) + ($727<<1)|0);
            $772 = HEAP16[$770>>1]|0;
            $773 = $772&65535;
            $774 = (0 - ($771))|0;
            $775 = ((($rix$2146) + (($774*6)|0)|0) + ($727<<1)|0);
            $776 = HEAP16[$775>>1]|0;
            $777 = $776&65535;
            $778 = (($777) + ($773))|0;
            $779 = (($rix$2146) + 2|0);
            $780 = HEAP16[$779>>1]|0;
            $781 = $780&65535;
            $782 = $781 << 1;
            $783 = (($778) + ($782))|0;
            $784 = ((($rix$2146) + (($771*6)|0)|0) + 2|0);
            $785 = HEAP16[$784>>1]|0;
            $786 = $785&65535;
            $787 = (($783) - ($786))|0;
            $788 = ((($rix$2146) + (($774*6)|0)|0) + 2|0);
            $789 = HEAP16[$788>>1]|0;
            $790 = $789&65535;
            $791 = (($787) - ($790))|0;
            $792 = ($791|0)<(-1);
            do {
             if ($792) {
              $811 = 0;
             } else {
              $793 = HEAP16[$770>>1]|0;
              $794 = $793&65535;
              $795 = HEAP16[$775>>1]|0;
              $796 = $795&65535;
              $797 = (($796) + ($794))|0;
              $798 = HEAP16[$779>>1]|0;
              $799 = $798&65535;
              $800 = $799 << 1;
              $801 = (($797) + ($800))|0;
              $802 = HEAP16[$784>>1]|0;
              $803 = $802&65535;
              $804 = (($801) - ($803))|0;
              $805 = HEAP16[$788>>1]|0;
              $806 = $805&65535;
              $807 = (($804) - ($806))|0;
              $808 = ($807|0)<(131070);
              if (!($808)) {
               $811 = 65535;
               break;
              }
              $809 = (($807|0) / 2)&-1;
              $811 = $809;
             }
            } while(0);
            $810 = $811&65535;
            $812 = (($rix$2146) + ($727<<1)|0);
            HEAP16[$812>>1] = $810;
            $813 = (($d$3147) + 1)|0;
            $814 = (($rix$2146) + 1572864|0);
            $exitcond293 = ($813|0)==(4);
            if ($exitcond293) {
             break;
            } else {
             $d$3147 = $813;$rix$2146 = $814;
            }
           }
          }
          $815 = (($col$7148) + 1)|0;
          $exitcond297 = ($col$7148|0)==($292|0);
          if ($exitcond297) {
           break;
          } else {
           $col$7148 = $815;
          }
         }
        }
        $816 = (($row$8152) + 1)|0;
        $exitcond301 = ($row$8152|0)==($296|0);
        if ($exitcond301) {
         break;
        } else {
         $row$8152 = $816;
        }
       }
      }
      $817 = ($219|0)<($267|0);
      if ($817) {
       $row$9166 = $219;
       while(1) {
        $818 = (($row$9166) - ($116))|0;
        $819 = (($818|0) % 3)&-1;
        $820 = ($819|0)==(0);
        $$not = ($271|0)>=($272|0);
        $brmerge = $820 | $$not;
        if (!($brmerge)) {
         $821 = (($row$9166) - ($top$0239))|0;
         $822 = (($row$9166|0) % 3)&-1;
         $col$8163 = $271;
         while(1) {
          $823 = (($col$8163) - ($117))|0;
          $824 = (($823|0) % 3)&-1;
          $825 = ($824|0)==(0);
          do {
           if (!($825)) {
            $826 = (($col$8163|0) % 3)&-1;
            if (!($118)) {
             break;
            }
            $827 = (($col$8163) - ($left$0234))|0;
            $828 = ((($rgb$331) + (($821*3072)|0)|0) + (($827*6)|0)|0);
            $d$4160 = 0;$rix$3158 = $828;
            while(1) {
             $829 = ((((($allhex) + (($822*96)|0)|0) + ($826<<5)|0) + ($d$4160<<1)|0) + 16|0);
             $830 = HEAP16[$829>>1]|0;
             $831 = $830 << 16 >> 16;
             $832 = $d$4160 | 1;
             $833 = ((((($allhex) + (($822*96)|0)|0) + ($826<<5)|0) + ($832<<1)|0) + 16|0);
             $834 = HEAP16[$833>>1]|0;
             $835 = $834 << 16 >> 16;
             $836 = (0 - ($835))|0;
             $837 = ($831|0)==($836|0);
             $838 = (($rix$3158) + 2|0);
             $839 = HEAP16[$838>>1]|0;
             $840 = $839&65535;
             if ($837) {
              $896 = $840 << 1;
              $897 = ((($rix$3158) + (($831*6)|0)|0) + 2|0);
              $898 = HEAP16[$897>>1]|0;
              $899 = $898&65535;
              $900 = (($896) - ($899))|0;
              $901 = ((($rix$3158) + (($835*6)|0)|0) + 2|0);
              $902 = HEAP16[$901>>1]|0;
              $903 = $902&65535;
              $904 = (($900) - ($903))|0;
              $905 = HEAP16[$829>>1]|0;
              $906 = $905 << 16 >> 16;
              $907 = (($rix$3158) + (($906*6)|0)|0);
              $908 = HEAP16[$907>>1]|0;
              $909 = $908&65535;
              $910 = (($909) + ($904))|0;
              $911 = HEAP16[$833>>1]|0;
              $912 = $911 << 16 >> 16;
              $913 = (($rix$3158) + (($912*6)|0)|0);
              $914 = HEAP16[$913>>1]|0;
              $915 = $914&65535;
              $916 = (($910) + ($915))|0;
              $917 = ($916|0)<(-1);
              do {
               if ($917) {
                $933 = 0;
               } else {
                $918 = HEAP16[$829>>1]|0;
                $919 = $918 << 16 >> 16;
                $920 = (($rix$3158) + (($919*6)|0)|0);
                $921 = HEAP16[$920>>1]|0;
                $922 = $921&65535;
                $923 = (($922) + ($904))|0;
                $924 = HEAP16[$833>>1]|0;
                $925 = $924 << 16 >> 16;
                $926 = (($rix$3158) + (($925*6)|0)|0);
                $927 = HEAP16[$926>>1]|0;
                $928 = $927&65535;
                $929 = (($923) + ($928))|0;
                $930 = ($929|0)<(131070);
                if (!($930)) {
                 $933 = 65535;
                 break;
                }
                $931 = (($929|0) / 2)&-1;
                $933 = $931;
               }
              } while(0);
              $932 = $933&65535;
              HEAP16[$rix$3158>>1] = $932;
              $934 = HEAP16[$829>>1]|0;
              $935 = $934 << 16 >> 16;
              $936 = ((($rix$3158) + (($935*6)|0)|0) + 4|0);
              $937 = HEAP16[$936>>1]|0;
              $938 = $937&65535;
              $939 = (($938) + ($904))|0;
              $940 = HEAP16[$833>>1]|0;
              $941 = $940 << 16 >> 16;
              $942 = ((($rix$3158) + (($941*6)|0)|0) + 4|0);
              $943 = HEAP16[$942>>1]|0;
              $944 = $943&65535;
              $945 = (($939) + ($944))|0;
              $946 = ($945|0)<(-1);
              do {
               if ($946) {
                $1228 = 0;
               } else {
                $1213 = HEAP16[$829>>1]|0;
                $1214 = $1213 << 16 >> 16;
                $1215 = ((($rix$3158) + (($1214*6)|0)|0) + 4|0);
                $1216 = HEAP16[$1215>>1]|0;
                $1217 = $1216&65535;
                $1218 = (($1217) + ($904))|0;
                $1219 = HEAP16[$833>>1]|0;
                $1220 = $1219 << 16 >> 16;
                $1221 = ((($rix$3158) + (($1220*6)|0)|0) + 4|0);
                $1222 = HEAP16[$1221>>1]|0;
                $1223 = $1222&65535;
                $1224 = (($1218) + ($1223))|0;
                $1225 = ($1224|0)<(131070);
                if (!($1225)) {
                 $1228 = 65535;
                 break;
                }
                $1226 = (($1224|0) / 2)&-1;
                $1228 = $1226;
               }
              } while(0);
              $1227 = $1228&65535;
              $1229 = (($rix$3158) + 4|0);
              HEAP16[$1229>>1] = $1227;
             } else {
              $841 = ($840*3)|0;
              $842 = ((($rix$3158) + (($831*6)|0)|0) + 2|0);
              $843 = HEAP16[$842>>1]|0;
              $844 = $843&65535;
              $845 = $844 << 1;
              $846 = (($841) - ($845))|0;
              $847 = ((($rix$3158) + (($835*6)|0)|0) + 2|0);
              $848 = HEAP16[$847>>1]|0;
              $849 = $848&65535;
              $850 = (($846) - ($849))|0;
              $851 = HEAP16[$829>>1]|0;
              $852 = $851 << 16 >> 16;
              $853 = (($rix$3158) + (($852*6)|0)|0);
              $854 = HEAP16[$853>>1]|0;
              $855 = $854&65535;
              $856 = $855 << 1;
              $857 = (($856) + ($850))|0;
              $858 = HEAP16[$833>>1]|0;
              $859 = $858 << 16 >> 16;
              $860 = (($rix$3158) + (($859*6)|0)|0);
              $861 = HEAP16[$860>>1]|0;
              $862 = $861&65535;
              $863 = (($857) + ($862))|0;
              $864 = ($863|0)<(-2);
              do {
               if ($864) {
                $881 = 0;
               } else {
                $865 = HEAP16[$829>>1]|0;
                $866 = $865 << 16 >> 16;
                $867 = (($rix$3158) + (($866*6)|0)|0);
                $868 = HEAP16[$867>>1]|0;
                $869 = $868&65535;
                $870 = $869 << 1;
                $871 = (($870) + ($850))|0;
                $872 = HEAP16[$833>>1]|0;
                $873 = $872 << 16 >> 16;
                $874 = (($rix$3158) + (($873*6)|0)|0);
                $875 = HEAP16[$874>>1]|0;
                $876 = $875&65535;
                $877 = (($871) + ($876))|0;
                $878 = ($877|0)<(196605);
                if (!($878)) {
                 $881 = 65535;
                 break;
                }
                $879 = (($877|0) / 3)&-1;
                $881 = $879;
               }
              } while(0);
              $880 = $881&65535;
              HEAP16[$rix$3158>>1] = $880;
              $882 = HEAP16[$829>>1]|0;
              $883 = $882 << 16 >> 16;
              $884 = ((($rix$3158) + (($883*6)|0)|0) + 4|0);
              $885 = HEAP16[$884>>1]|0;
              $886 = $885&65535;
              $887 = $886 << 1;
              $888 = (($887) + ($850))|0;
              $889 = HEAP16[$833>>1]|0;
              $890 = $889 << 16 >> 16;
              $891 = ((($rix$3158) + (($890*6)|0)|0) + 4|0);
              $892 = HEAP16[$891>>1]|0;
              $893 = $892&65535;
              $894 = (($888) + ($893))|0;
              $895 = ($894|0)<(-2);
              do {
               if ($895) {
                $1211 = 0;
               } else {
                $1195 = HEAP16[$829>>1]|0;
                $1196 = $1195 << 16 >> 16;
                $1197 = ((($rix$3158) + (($1196*6)|0)|0) + 4|0);
                $1198 = HEAP16[$1197>>1]|0;
                $1199 = $1198&65535;
                $1200 = $1199 << 1;
                $1201 = (($1200) + ($850))|0;
                $1202 = HEAP16[$833>>1]|0;
                $1203 = $1202 << 16 >> 16;
                $1204 = ((($rix$3158) + (($1203*6)|0)|0) + 4|0);
                $1205 = HEAP16[$1204>>1]|0;
                $1206 = $1205&65535;
                $1207 = (($1201) + ($1206))|0;
                $1208 = ($1207|0)<(196605);
                if (!($1208)) {
                 $1211 = 65535;
                 break;
                }
                $1209 = (($1207|0) / 3)&-1;
                $1211 = $1209;
               }
              } while(0);
              $1210 = $1211&65535;
              $1212 = (($rix$3158) + 4|0);
              HEAP16[$1212>>1] = $1210;
             }
             $947 = (($d$4160) + 2)|0;
             $948 = (($rix$3158) + 1572864|0);
             $949 = ($947|0)<($5|0);
             if ($949) {
              $d$4160 = $947;$rix$3158 = $948;
             } else {
              break;
             }
            }
           }
          } while(0);
          $950 = (($col$8163) + 1)|0;
          $exitcond305 = ($col$8163|0)==($299|0);
          if ($exitcond305) {
           break;
          } else {
           $col$8163 = $950;
          }
         }
        }
        $951 = (($row$9166) + 1)|0;
        $exitcond309 = ($row$9166|0)==($303|0);
        if ($exitcond309) {
         break;
        } else {
         $row$9166 = $951;
        }
       }
      }
      $952 = (($pass$0170) + 1)|0;
      $exitcond310 = ($pass$0170|0)==($123|0);
      if ($exitcond310) {
       break;
      } else {
       $pass$0170 = $952;$rgb$2171 = $rgb$331;
      }
     }
    }
    $953 = (($$) - ($top$0239))|0;
    $954 = (($228) - ($left$0234))|0;
    if ($104) {
     $955 = (($953) + -2)|0;
     $956 = ($955|0)>(2);
     $957 = (($953) + -3)|0;
     $958 = ($957|0)>(3);
     $959 = (($954) + -3)|0;
     $960 = ($959|0)>(3);
     $961 = (($954) + -2)|0;
     $962 = ($961|0)>(2);
     $963 = (2 - ($226))|0;
     $964 = ($indvars$iv342|0)>($963|0);
     $smax315 = $964 ? $indvars$iv342 : $963;
     $965 = (($indvars$iv311) - ($smax315))|0;
     $966 = $220&65535;
     $967 = (2 - ($966))|0;
     $968 = ($indvars$iv348|0)>($967|0);
     $smax321 = $968 ? $indvars$iv348 : $967;
     $969 = (($indvars$iv317) - ($smax321))|0;
     $970 = (2 - ($226))|0;
     $971 = ($indvars$iv342|0)>($970|0);
     $smax327 = $971 ? $indvars$iv342 : $970;
     $972 = (($indvars$iv323) - ($smax327))|0;
     $973 = $220&65535;
     $974 = (2 - ($973))|0;
     $975 = ($indvars$iv348|0)>($974|0);
     $smax333 = $975 ? $indvars$iv348 : $974;
     $976 = (($indvars$iv329) - ($smax333))|0;
     $d$5186 = 0;
     while(1) {
      if ($956) {
       $row$10177 = 2;
       while(1) {
        if ($962) {
         $col$9174 = 2;
         while(1) {
          $977 = (((($8) + (Math_imul($d$5186, 1572864)|0)|0) + (($row$10177*3072)|0)|0) + (($col$9174*6)|0)|0);
          $978 = ((($10) + (($row$10177*3072)|0)|0) + (($col$9174*6)|0)|0);
          _cielab($977,$978);
          $979 = (($col$9174) + 1)|0;
          $exitcond316 = ($col$9174|0)==($965|0);
          if ($exitcond316) {
           break;
          } else {
           $col$9174 = $979;
          }
         }
        }
        $980 = (($row$10177) + 1)|0;
        $exitcond322 = ($row$10177|0)==($969|0);
        if ($exitcond322) {
         break;
        } else {
         $row$10177 = $980;
        }
       }
      }
      $981 = $d$5186 & 3;
      $982 = (453480 + ($981<<1)|0);
      $983 = HEAP16[$982>>1]|0;
      $984 = $983 << 16 >> 16;
      if ($958) {
       $row$11183 = 3;
       while(1) {
        if ($960) {
         $col$10180 = 3;
         while(1) {
          $985 = ((($10) + (($row$11183*3072)|0)|0) + (($col$10180*6)|0)|0);
          $986 = HEAP16[$985>>1]|0;
          $987 = $986 << 16 >> 16;
          $988 = $987 << 1;
          $$sum = (($col$10180) + ($984))|0;
          $989 = ((($10) + (($row$11183*3072)|0)|0) + (($$sum*6)|0)|0);
          $990 = HEAP16[$989>>1]|0;
          $991 = $990 << 16 >> 16;
          $992 = (($988) - ($991))|0;
          $$sum2 = (($col$10180) - ($984))|0;
          $993 = ((($10) + (($row$11183*3072)|0)|0) + (($$sum2*6)|0)|0);
          $994 = HEAP16[$993>>1]|0;
          $995 = $994 << 16 >> 16;
          $996 = (($992) - ($995))|0;
          $997 = Math_imul($996, $996)|0;
          $998 = (((($10) + (($row$11183*3072)|0)|0) + (($col$10180*6)|0)|0) + 2|0);
          $999 = HEAP16[$998>>1]|0;
          $1000 = $999 << 16 >> 16;
          $1001 = $1000 << 1;
          $1002 = (((($10) + (($row$11183*3072)|0)|0) + (($$sum*6)|0)|0) + 2|0);
          $1003 = HEAP16[$1002>>1]|0;
          $1004 = $1003 << 16 >> 16;
          $1005 = (($1001) - ($1004))|0;
          $1006 = (((($10) + (($row$11183*3072)|0)|0) + (($$sum2*6)|0)|0) + 2|0);
          $1007 = HEAP16[$1006>>1]|0;
          $1008 = $1007 << 16 >> 16;
          $1009 = (($1005) - ($1008))|0;
          $1010 = ($996*500)|0;
          $1011 = (($1010|0) / 232)&-1;
          $1012 = (($1009) + ($1011))|0;
          $1013 = Math_imul($1012, $1012)|0;
          $1014 = (($1013) + ($997))|0;
          $1015 = (((($10) + (($row$11183*3072)|0)|0) + (($col$10180*6)|0)|0) + 4|0);
          $1016 = HEAP16[$1015>>1]|0;
          $1017 = $1016 << 16 >> 16;
          $1018 = $1017 << 1;
          $1019 = (((($10) + (($row$11183*3072)|0)|0) + (($$sum*6)|0)|0) + 4|0);
          $1020 = HEAP16[$1019>>1]|0;
          $1021 = $1020 << 16 >> 16;
          $1022 = (($1018) - ($1021))|0;
          $1023 = (((($10) + (($row$11183*3072)|0)|0) + (($$sum2*6)|0)|0) + 4|0);
          $1024 = HEAP16[$1023>>1]|0;
          $1025 = $1024 << 16 >> 16;
          $1026 = (($1022) - ($1025))|0;
          $$neg68 = (($1010|0) / -580)&-1;
          $1027 = (($1026) + ($$neg68))|0;
          $1028 = Math_imul($1027, $1027)|0;
          $1029 = (($1014) + ($1028))|0;
          $1030 = (+($1029|0));
          $1031 = (((($12) + ($d$5186<<20)|0) + ($row$11183<<11)|0) + ($col$10180<<2)|0);
          HEAPF32[$1031>>2] = $1030;
          $1032 = (($col$10180) + 1)|0;
          $exitcond328 = ($col$10180|0)==($972|0);
          if ($exitcond328) {
           break;
          } else {
           $col$10180 = $1032;
          }
         }
        }
        $1033 = (($row$11183) + 1)|0;
        $exitcond334 = ($row$11183|0)==($976|0);
        if ($exitcond334) {
         break;
        } else {
         $row$11183 = $1033;
        }
       }
      }
      $1034 = (($d$5186) + 1)|0;
      $exitcond335 = ($d$5186|0)==($124|0);
      if ($exitcond335) {
       break;
      } else {
       $d$5186 = $1034;
      }
     }
    }
    _memset(($15|0),0,($105|0))|0;
    $1035 = (($953) + -4)|0;
    $1036 = ($1035|0)>(4);
    if ($1036) {
     $1037 = (($954) + -4)|0;
     $1038 = ($1037|0)>(4);
     $1039 = (2 - ($226))|0;
     $1040 = ($indvars$iv342|0)>($1039|0);
     $smax344 = $1040 ? $indvars$iv342 : $1039;
     $1041 = (($indvars$iv340) - ($smax344))|0;
     $1042 = $220&65535;
     $1043 = (2 - ($1042))|0;
     $1044 = ($indvars$iv348|0)>($1043|0);
     $smax350 = $1044 ? $indvars$iv348 : $1043;
     $1045 = (($indvars$iv346) - ($smax350))|0;
     $row$12202 = 4;
     while(1) {
      if ($1038) {
       $col$11199 = 4;
       while(1) {
        if ($113) {
         $d$6191 = 0;$tr$0190 = 3.4028234663852886E+38;
         while(1) {
          $1046 = (((($12) + ($d$6191<<20)|0) + ($row$12202<<11)|0) + ($col$11199<<2)|0);
          $1047 = +HEAPF32[$1046>>2];
          $1048 = $tr$0190 > $1047;
          $tr$1 = $1048 ? $1047 : $tr$0190;
          $1049 = (($d$6191) + 1)|0;
          $exitcond336 = ($d$6191|0)==($124|0);
          if ($exitcond336) {
           $tr$0$lcssa = $tr$1;
           break;
          } else {
           $d$6191 = $1049;$tr$0190 = $tr$1;
          }
         }
        } else {
         $tr$0$lcssa = 3.4028234663852886E+38;
        }
        $1050 = $tr$0$lcssa * 8.0;
        if ($114) {
         $d$7197 = 0;
         while(1) {
          $1051 = (((($15) + ($d$7197<<18)|0) + ($row$12202<<9)|0) + ($col$11199)|0);
          $1052 = (($row$12202) + -1)|0;
          $1053 = (($col$11199) + -1)|0;
          $1054 = (((($12) + ($d$7197<<20)|0) + ($1052<<11)|0) + ($1053<<2)|0);
          $1055 = +HEAPF32[$1054>>2];
          $1056 = !($1055 <= $1050);
          if (!($1056)) {
           $1057 = HEAP8[$1051>>0]|0;
           $1058 = (($1057) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1058;
          }
          $1059 = (((($12) + ($d$7197<<20)|0) + ($1052<<11)|0) + ($col$11199<<2)|0);
          $1060 = +HEAPF32[$1059>>2];
          $1061 = !($1060 <= $1050);
          if (!($1061)) {
           $1230 = HEAP8[$1051>>0]|0;
           $1231 = (($1230) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1231;
          }
          $1232 = (($col$11199) + 1)|0;
          $1233 = (((($12) + ($d$7197<<20)|0) + ($1052<<11)|0) + ($1232<<2)|0);
          $1234 = +HEAPF32[$1233>>2];
          $1235 = !($1234 <= $1050);
          if (!($1235)) {
           $1236 = HEAP8[$1051>>0]|0;
           $1237 = (($1236) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1237;
          }
          $1238 = (($col$11199) + -1)|0;
          $1239 = (((($12) + ($d$7197<<20)|0) + ($row$12202<<11)|0) + ($1238<<2)|0);
          $1240 = +HEAPF32[$1239>>2];
          $1241 = !($1240 <= $1050);
          if (!($1241)) {
           $1242 = HEAP8[$1051>>0]|0;
           $1243 = (($1242) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1243;
          }
          $1244 = (((($12) + ($d$7197<<20)|0) + ($row$12202<<11)|0) + ($col$11199<<2)|0);
          $1245 = +HEAPF32[$1244>>2];
          $1246 = !($1245 <= $1050);
          if (!($1246)) {
           $1247 = HEAP8[$1051>>0]|0;
           $1248 = (($1247) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1248;
          }
          $1249 = (($col$11199) + 1)|0;
          $1250 = (((($12) + ($d$7197<<20)|0) + ($row$12202<<11)|0) + ($1249<<2)|0);
          $1251 = +HEAPF32[$1250>>2];
          $1252 = !($1251 <= $1050);
          if (!($1252)) {
           $1253 = HEAP8[$1051>>0]|0;
           $1254 = (($1253) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1254;
          }
          $1255 = (($row$12202) + 1)|0;
          $1256 = (($col$11199) + -1)|0;
          $1257 = (((($12) + ($d$7197<<20)|0) + ($1255<<11)|0) + ($1256<<2)|0);
          $1258 = +HEAPF32[$1257>>2];
          $1259 = !($1258 <= $1050);
          if (!($1259)) {
           $1260 = HEAP8[$1051>>0]|0;
           $1261 = (($1260) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1261;
          }
          $1262 = (((($12) + ($d$7197<<20)|0) + ($1255<<11)|0) + ($col$11199<<2)|0);
          $1263 = +HEAPF32[$1262>>2];
          $1264 = !($1263 <= $1050);
          if (!($1264)) {
           $1265 = HEAP8[$1051>>0]|0;
           $1266 = (($1265) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1266;
          }
          $1267 = (($col$11199) + 1)|0;
          $1268 = (((($12) + ($d$7197<<20)|0) + ($1255<<11)|0) + ($1267<<2)|0);
          $1269 = +HEAPF32[$1268>>2];
          $1270 = !($1269 <= $1050);
          if (!($1270)) {
           $1271 = HEAP8[$1051>>0]|0;
           $1272 = (($1271) + 1)<<24>>24;
           HEAP8[$1051>>0] = $1272;
          }
          $1273 = (($d$7197) + 1)|0;
          $exitcond339 = ($d$7197|0)==($124|0);
          if ($exitcond339) {
           break;
          } else {
           $d$7197 = $1273;
          }
         }
        }
        $1062 = (($col$11199) + 1)|0;
        $exitcond345 = ($col$11199|0)==($1041|0);
        if ($exitcond345) {
         break;
        } else {
         $col$11199 = $1062;
        }
       }
      }
      $1063 = (($row$12202) + 1)|0;
      $exitcond351 = ($row$12202|0)==($1045|0);
      if ($exitcond351) {
       break;
      } else {
       $row$12202 = $1063;
      }
     }
    }
    $1064 = HEAP16[132080>>1]|0;
    $1065 = $1064&65535;
    $1066 = (($1065) - ($top$0239))|0;
    $1067 = ($1066|0)<(516);
    $1068 = (($1066) + 2)|0;
    $$28 = $1067 ? $1068 : $953;
    $1069 = HEAP16[132088>>1]|0;
    $1070 = $1069&65535;
    $1071 = (($1070) - ($left$0234))|0;
    $1072 = (($$28) + -8)|0;
    $1073 = ($211|0)<($1072|0);
    if ($1073) {
     $1074 = ($1071|0)<(516);
     $1075 = (($1071) + 2)|0;
     $mcol$0 = $1074 ? $1075 : $954;
     $1076 = ($left$0234|0)<(8);
     $1077 = $1076 ? $left$0234 : 8;
     $1078 = (($mcol$0) + -8)|0;
     $1079 = ($1077|0)<($1078|0);
     $1080 = HEAP32[132112>>2]|0;
     $row$13229 = $211;
     while(1) {
      if ($1079) {
       $1081 = (($row$13229) + ($top$0239))|0;
       $col$12227 = $1077;
       while(1) {
        if ($106) {
         $d$8210 = 0;
         while(1) {
          $1274 = (($hm) + ($d$8210<<2)|0);
          HEAP32[$1274>>2] = 0;
          $1275 = (($col$12227) + -2)|0;
          $1276 = (($row$13229) + -2)|0;
          $1277 = (($row$13229) + -1)|0;
          $1278 = (($row$13229) + 1)|0;
          $1279 = (($row$13229) + 2)|0;
          $1280 = (((($15) + ($d$8210<<18)|0) + ($1276<<9)|0) + ($1275)|0);
          $1281 = HEAP8[$1280>>0]|0;
          $1282 = $1281 << 24 >> 24;
          $1283 = (($col$12227) + -1)|0;
          $1284 = (((($15) + ($d$8210<<18)|0) + ($1276<<9)|0) + ($1283)|0);
          $1285 = HEAP8[$1284>>0]|0;
          $1286 = $1285 << 24 >> 24;
          $1287 = (($1282) + ($1286))|0;
          $1288 = (((($15) + ($d$8210<<18)|0) + ($1276<<9)|0) + ($col$12227)|0);
          $1289 = HEAP8[$1288>>0]|0;
          $1290 = $1289 << 24 >> 24;
          $1291 = (($1287) + ($1290))|0;
          $1292 = (($col$12227) + 1)|0;
          $1293 = (((($15) + ($d$8210<<18)|0) + ($1276<<9)|0) + ($1292)|0);
          $1294 = HEAP8[$1293>>0]|0;
          $1295 = $1294 << 24 >> 24;
          $1296 = (($1291) + ($1295))|0;
          $1297 = (($col$12227) + 2)|0;
          $1298 = (((($15) + ($d$8210<<18)|0) + ($1276<<9)|0) + ($1297)|0);
          $1299 = HEAP8[$1298>>0]|0;
          $1300 = $1299 << 24 >> 24;
          $1301 = (($1296) + ($1300))|0;
          $1302 = (((($15) + ($d$8210<<18)|0) + ($1277<<9)|0) + ($1275)|0);
          $1303 = HEAP8[$1302>>0]|0;
          $1304 = $1303 << 24 >> 24;
          $1305 = (($1301) + ($1304))|0;
          $1306 = (($col$12227) + -1)|0;
          $1307 = (((($15) + ($d$8210<<18)|0) + ($1277<<9)|0) + ($1306)|0);
          $1308 = HEAP8[$1307>>0]|0;
          $1309 = $1308 << 24 >> 24;
          $1310 = (($1305) + ($1309))|0;
          $1311 = (((($15) + ($d$8210<<18)|0) + ($1277<<9)|0) + ($col$12227)|0);
          $1312 = HEAP8[$1311>>0]|0;
          $1313 = $1312 << 24 >> 24;
          $1314 = (($1310) + ($1313))|0;
          $1315 = (($col$12227) + 1)|0;
          $1316 = (((($15) + ($d$8210<<18)|0) + ($1277<<9)|0) + ($1315)|0);
          $1317 = HEAP8[$1316>>0]|0;
          $1318 = $1317 << 24 >> 24;
          $1319 = (($1314) + ($1318))|0;
          $1320 = (($col$12227) + 2)|0;
          $1321 = (((($15) + ($d$8210<<18)|0) + ($1277<<9)|0) + ($1320)|0);
          $1322 = HEAP8[$1321>>0]|0;
          $1323 = $1322 << 24 >> 24;
          $1324 = (($1319) + ($1323))|0;
          $1325 = (((($15) + ($d$8210<<18)|0) + ($row$13229<<9)|0) + ($1275)|0);
          $1326 = HEAP8[$1325>>0]|0;
          $1327 = $1326 << 24 >> 24;
          $1328 = (($1324) + ($1327))|0;
          $1329 = (($col$12227) + -1)|0;
          $1330 = (((($15) + ($d$8210<<18)|0) + ($row$13229<<9)|0) + ($1329)|0);
          $1331 = HEAP8[$1330>>0]|0;
          $1332 = $1331 << 24 >> 24;
          $1333 = (($1328) + ($1332))|0;
          $1334 = (((($15) + ($d$8210<<18)|0) + ($row$13229<<9)|0) + ($col$12227)|0);
          $1335 = HEAP8[$1334>>0]|0;
          $1336 = $1335 << 24 >> 24;
          $1337 = (($1333) + ($1336))|0;
          $1338 = (($col$12227) + 1)|0;
          $1339 = (((($15) + ($d$8210<<18)|0) + ($row$13229<<9)|0) + ($1338)|0);
          $1340 = HEAP8[$1339>>0]|0;
          $1341 = $1340 << 24 >> 24;
          $1342 = (($1337) + ($1341))|0;
          $1343 = (($col$12227) + 2)|0;
          $1344 = (((($15) + ($d$8210<<18)|0) + ($row$13229<<9)|0) + ($1343)|0);
          $1345 = HEAP8[$1344>>0]|0;
          $1346 = $1345 << 24 >> 24;
          $1347 = (($1342) + ($1346))|0;
          $1348 = (((($15) + ($d$8210<<18)|0) + ($1278<<9)|0) + ($1275)|0);
          $1349 = HEAP8[$1348>>0]|0;
          $1350 = $1349 << 24 >> 24;
          $1351 = (($1347) + ($1350))|0;
          $1352 = (($col$12227) + -1)|0;
          $1353 = (((($15) + ($d$8210<<18)|0) + ($1278<<9)|0) + ($1352)|0);
          $1354 = HEAP8[$1353>>0]|0;
          $1355 = $1354 << 24 >> 24;
          $1356 = (($1351) + ($1355))|0;
          $1357 = (((($15) + ($d$8210<<18)|0) + ($1278<<9)|0) + ($col$12227)|0);
          $1358 = HEAP8[$1357>>0]|0;
          $1359 = $1358 << 24 >> 24;
          $1360 = (($1356) + ($1359))|0;
          $1361 = (($col$12227) + 1)|0;
          $1362 = (((($15) + ($d$8210<<18)|0) + ($1278<<9)|0) + ($1361)|0);
          $1363 = HEAP8[$1362>>0]|0;
          $1364 = $1363 << 24 >> 24;
          $1365 = (($1360) + ($1364))|0;
          $1366 = (($col$12227) + 2)|0;
          $1367 = (((($15) + ($d$8210<<18)|0) + ($1278<<9)|0) + ($1366)|0);
          $1368 = HEAP8[$1367>>0]|0;
          $1369 = $1368 << 24 >> 24;
          $1370 = (($1365) + ($1369))|0;
          $1371 = (((($15) + ($d$8210<<18)|0) + ($1279<<9)|0) + ($1275)|0);
          $1372 = HEAP8[$1371>>0]|0;
          $1373 = $1372 << 24 >> 24;
          $1374 = (($1370) + ($1373))|0;
          $1375 = (($col$12227) + -1)|0;
          $1376 = (((($15) + ($d$8210<<18)|0) + ($1279<<9)|0) + ($1375)|0);
          $1377 = HEAP8[$1376>>0]|0;
          $1378 = $1377 << 24 >> 24;
          $1379 = (($1374) + ($1378))|0;
          $1380 = (((($15) + ($d$8210<<18)|0) + ($1279<<9)|0) + ($col$12227)|0);
          $1381 = HEAP8[$1380>>0]|0;
          $1382 = $1381 << 24 >> 24;
          $1383 = (($1379) + ($1382))|0;
          $1384 = (($col$12227) + 1)|0;
          $1385 = (((($15) + ($d$8210<<18)|0) + ($1279<<9)|0) + ($1384)|0);
          $1386 = HEAP8[$1385>>0]|0;
          $1387 = $1386 << 24 >> 24;
          $1388 = (($1383) + ($1387))|0;
          $1389 = (($col$12227) + 2)|0;
          $1390 = (((($15) + ($d$8210<<18)|0) + ($1279<<9)|0) + ($1389)|0);
          $1391 = HEAP8[$1390>>0]|0;
          $1392 = $1391 << 24 >> 24;
          $1393 = (($1388) + ($1392))|0;
          HEAP32[$1274>>2] = $1393;
          $1394 = (($d$8210) + 1)|0;
          $exitcond354 = ($d$8210|0)==($124|0);
          if ($exitcond354) {
           break;
          } else {
           $d$8210 = $1394;
          }
         }
        }
        if ($108) {
         $d$9212 = 0;
         while(1) {
          $1082 = (($hm) + ($d$9212<<2)|0);
          $1083 = HEAP32[$1082>>2]|0;
          $1084 = (($d$9212) + 4)|0;
          $1085 = (($hm) + ($1084<<2)|0);
          $1086 = HEAP32[$1085>>2]|0;
          $1087 = ($1083|0)<($1086|0);
          do {
           if ($1087) {
            HEAP32[$1082>>2] = 0;
           } else {
            $1088 = ($1083|0)>($1086|0);
            if (!($1088)) {
             break;
            }
            HEAP32[$1085>>2] = 0;
           }
          } while(0);
          $1089 = (($d$9212) + 1)|0;
          $1090 = ($1089|0)<($107|0);
          if ($1090) {
           $d$9212 = $1089;
          } else {
           break;
          }
         }
        }
        $1091 = HEAP32[$hm>>2]|0;
        $1092 = $1091 & 65535;
        if ($109) {
         $1093 = $1091&65535;
         $1096 = $1092;$d$10216 = 1;$max$5215 = $1093;
         while(1) {
          $1094 = (($hm) + ($d$10216<<2)|0);
          $1095 = HEAP32[$1094>>2]|0;
          $1097 = ($1096|0)<($1095|0);
          $1098 = $1095&65535;
          $$max$5 = $1097 ? $1098 : $max$5215;
          $1099 = (($d$10216) + 1)|0;
          $1100 = $$max$5&65535;
          $exitcond356 = ($d$10216|0)==($124|0);
          if ($exitcond356) {
           $$lcssa107 = $1100;
           break;
          } else {
           $1096 = $1100;$d$10216 = $1099;$max$5215 = $$max$5;
          }
         }
        } else {
         $$lcssa107 = $1092;
        }
        ;HEAP32[$avg+0>>2]=0|0;HEAP32[$avg+4>>2]=0|0;HEAP32[$avg+8>>2]=0|0;HEAP32[$avg+12>>2]=0|0;
        if ($110) {
         $1101 = $$lcssa107 >>> 3;
         $1102 = (($$lcssa107) - ($1101))|0;
         $1103 = $1102 & 65535;
         $d$11222 = 0;
         while(1) {
          $1104 = (($hm) + ($d$11222<<2)|0);
          $1105 = HEAP32[$1104>>2]|0;
          $1106 = ($1105|0)<($1103|0);
          if (!($1106)) {
           $1107 = (((($8) + (Math_imul($d$11222, 1572864)|0)|0) + (($row$13229*3072)|0)|0) + (($col$12227*6)|0)|0);
           $1108 = HEAP16[$1107>>1]|0;
           $1109 = $1108&65535;
           $1110 = HEAP32[$avg>>2]|0;
           $1111 = (($1110) + ($1109))|0;
           HEAP32[$avg>>2] = $1111;
           $1112 = ((((($8) + (Math_imul($d$11222, 1572864)|0)|0) + (($row$13229*3072)|0)|0) + (($col$12227*6)|0)|0) + 2|0);
           $1113 = HEAP16[$1112>>1]|0;
           $1114 = $1113&65535;
           $1115 = (($avg) + 4|0);
           $1116 = HEAP32[$1115>>2]|0;
           $1117 = (($1116) + ($1114))|0;
           HEAP32[$1115>>2] = $1117;
           $1118 = ((((($8) + (Math_imul($d$11222, 1572864)|0)|0) + (($row$13229*3072)|0)|0) + (($col$12227*6)|0)|0) + 4|0);
           $1119 = HEAP16[$1118>>1]|0;
           $1120 = $1119&65535;
           $1121 = (($avg) + 8|0);
           $1122 = HEAP32[$1121>>2]|0;
           $1123 = (($1122) + ($1120))|0;
           HEAP32[$1121>>2] = $1123;
           $1124 = HEAP32[$112>>2]|0;
           $1125 = (($1124) + 1)|0;
           HEAP32[$112>>2] = $1125;
          }
          $1126 = (($d$11222) + 1)|0;
          $exitcond358 = ($d$11222|0)==($124|0);
          if ($exitcond358) {
           break;
          } else {
           $d$11222 = $1126;
          }
         }
        }
        $1127 = HEAP32[$111>>2]|0;
        $1128 = (($col$12227) + ($left$0234))|0;
        $1129 = HEAP32[$avg>>2]|0;
        $1130 = (($1129|0) / ($1127|0))&-1;
        $1131 = $1130&65535;
        $1132 = HEAP16[132088>>1]|0;
        $1133 = $1132&65535;
        $1134 = Math_imul($1133, $1081)|0;
        $1135 = (($1128) + ($1134))|0;
        $1136 = (($1080) + ($1135<<3)|0);
        HEAP16[$1136>>1] = $1131;
        $1137 = (($avg) + 4|0);
        $1138 = HEAP32[$1137>>2]|0;
        $1139 = (($1138|0) / ($1127|0))&-1;
        $1140 = $1139&65535;
        $1141 = HEAP16[132088>>1]|0;
        $1142 = $1141&65535;
        $1143 = Math_imul($1142, $1081)|0;
        $1144 = (($1128) + ($1143))|0;
        $1145 = ((($1080) + ($1144<<3)|0) + 2|0);
        HEAP16[$1145>>1] = $1140;
        $1146 = (($avg) + 8|0);
        $1147 = HEAP32[$1146>>2]|0;
        $1148 = (($1147|0) / ($1127|0))&-1;
        $1149 = $1148&65535;
        $1150 = HEAP16[132088>>1]|0;
        $1151 = $1150&65535;
        $1152 = Math_imul($1151, $1081)|0;
        $1153 = (($1128) + ($1152))|0;
        $1154 = ((($1080) + ($1153<<3)|0) + 4|0);
        HEAP16[$1154>>1] = $1149;
        $1155 = (($col$12227) + 1)|0;
        $1156 = ($1155|0)<($1078|0);
        if ($1156) {
         $col$12227 = $1155;
        } else {
         break;
        }
       }
      }
      $1157 = (($row$13229) + 1)|0;
      $1158 = ($1157|0)<($1072|0);
      if ($1158) {
       $row$13229 = $1157;
      } else {
       break;
      }
     }
    }
    $1159 = (($left$0234) + 496)|0;
    $1160 = HEAP16[132088>>1]|0;
    $1161 = $1160&65535;
    $1162 = (($1161) + -19)|0;
    $1163 = ($1159|0)<($1162|0);
    $indvars$iv$next343 = (($indvars$iv342) + -496)|0;
    $indvars$iv$next312 = (($indvars$iv311) + -496)|0;
    $indvars$iv$next324 = (($indvars$iv323) + -496)|0;
    $indvars$iv$next341 = (($indvars$iv340) + -496)|0;
    if ($1163) {
     $226 = $1161;$indvars$iv311 = $indvars$iv$next312;$indvars$iv323 = $indvars$iv$next324;$indvars$iv340 = $indvars$iv$next341;$indvars$iv342 = $indvars$iv$next343;$left$0234 = $1159;
    } else {
     break;
    }
   }
  }
  $1164 = (($top$0239) + 496)|0;
  $1165 = HEAP16[132080>>1]|0;
  $1166 = $1165&65535;
  $1167 = (($1166) + -19)|0;
  $1168 = ($1164|0)<($1167|0);
  $indvars$iv$next349 = (($indvars$iv348) + -496)|0;
  $indvars$iv$next318 = (($indvars$iv317) + -496)|0;
  $indvars$iv$next330 = (($indvars$iv329) + -496)|0;
  $indvars$iv$next347 = (($indvars$iv346) + -496)|0;
  if ($1168) {
   $indvars$iv317 = $indvars$iv$next318;$indvars$iv329 = $indvars$iv$next330;$indvars$iv346 = $indvars$iv$next347;$indvars$iv348 = $indvars$iv$next349;$top$0239 = $1164;
  } else {
   break;
  }
 }
 _free($8);
 _border_interpolate(8);
 STACKTOP = sp;return;
}
function _ahd_interpolate() {
 var $$ = 0, $$$ = 0, $$$40 = 0, $$$42 = 0, $$$44 = 0, $$40 = 0, $$42 = 0, $$44 = 0, $$48 = 0, $$48$ = 0, $$51 = 0, $$sum = 0, $$sum$1 = 0, $$sum$2 = 0, $$sum$3 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0;
 var $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum3355 = 0, $$sum34 = 0;
 var $$sum8 = 0, $$sum8$1 = 0, $$sum8$2 = 0, $$sum8$3 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $abdiff = 0, $c$0 = 0, $col$073 = 0, $col$177 = 0, $col$290 = 0, $col$399 = 0, $d$084 = 0, $d$187 = 0, $exitcond = 0, $exitcond109 = 0, $hm = 0;
 var $ldiff = 0, $left$0103 = 0, $row$075 = 0, $row$180 = 0, $row$291 = 0, $row$3101 = 0, $top$0105 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $hm = sp + 64|0;
 $ldiff = sp + 32|0;
 $abdiff = sp;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((453552|0),21,1,($2|0))|0);
 }
 _cielab(0,0);
 _border_interpolate(5);
 $3 = (_malloc(6815744)|0);
 _merror($3,453576);
 $4 = (($3) + 3145728|0);
 $5 = (($3) + 6291456|0);
 $6 = HEAP16[132080>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + -5)|0;
 $9 = ($8|0)>(2);
 if (!($9)) {
  _free($3);
  STACKTOP = sp;return;
 }
 $10 = (($3) + 1572864|0);
 $11 = (($ldiff) + 4|0);
 $12 = (($ldiff) + 24|0);
 $13 = (($ldiff) + 28|0);
 $14 = (($abdiff) + 4|0);
 $15 = (($abdiff) + 24|0);
 $16 = (($abdiff) + 28|0);
 $17 = (($hm) + 4|0);
 $18 = (($3) + 1572864|0);
 $top$0105 = 2;
 while(1) {
  $19 = HEAP16[132088>>1]|0;
  $20 = $19&65535;
  $21 = (($20) + -5)|0;
  $22 = ($21|0)>(2);
  if ($22) {
   $23 = $top$0105 | 1;
   $24 = (($top$0105) + 511)|0;
   $25 = ($23|0)<($24|0);
   $26 = (($top$0105) + 2)|0;
   $27 = (($top$0105) + 3)|0;
   $left$0103 = 2;
   while(1) {
    $28 = HEAP32[584>>2]|0;
    $29 = (($left$0103) + 512)|0;
    $30 = HEAP32[132112>>2]|0;
    $row$075 = $top$0105;
    while(1) {
     $31 = HEAP16[132080>>1]|0;
     $32 = $31&65535;
     $33 = (($32) + -2)|0;
     $34 = ($row$075|0)<($33|0);
     if (!($34)) {
      break;
     }
     $38 = $row$075 << 1;
     $39 = $38 & 14;
     $40 = $39 << 1;
     $41 = $28 >>> $40;
     $42 = $41 & 1;
     $43 = $42 | $left$0103;
     $44 = $42 | $39;
     $45 = $44 << 1;
     $46 = $28 >>> $45;
     $47 = $46 & 3;
     $48 = ($43|0)<($29|0);
     L16: do {
      if ($48) {
       $49 = (($row$075) - ($top$0105))|0;
       $col$073 = $43;
       while(1) {
        $50 = HEAP16[132088>>1]|0;
        $51 = $50&65535;
        $52 = (($51) + -2)|0;
        $53 = ($col$073|0)<($52|0);
        if (!($53)) {
         break L16;
        }
        $54 = Math_imul($51, $row$075)|0;
        $$sum26 = (($54) + ($col$073))|0;
        $$sum27 = (($$sum26) + -1)|0;
        $55 = ((($30) + ($$sum27<<3)|0) + 2|0);
        $56 = HEAP16[$55>>1]|0;
        $57 = $56&65535;
        $58 = ((($30) + ($$sum26<<3)|0) + ($47<<1)|0);
        $59 = HEAP16[$58>>1]|0;
        $60 = $59&65535;
        $61 = (($60) + ($57))|0;
        $$sum28 = (($$sum26) + 1)|0;
        $62 = ((($30) + ($$sum28<<3)|0) + 2|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = $63&65535;
        $65 = (($61) + ($64))|0;
        $66 = $65 << 1;
        $$sum29 = (($$sum26) + -2)|0;
        $67 = ((($30) + ($$sum29<<3)|0) + ($47<<1)|0);
        $68 = HEAP16[$67>>1]|0;
        $69 = $68&65535;
        $70 = (($66) - ($69))|0;
        $$sum30 = (($$sum26) + 2)|0;
        $71 = ((($30) + ($$sum30<<3)|0) + ($47<<1)|0);
        $72 = HEAP16[$71>>1]|0;
        $73 = $72&65535;
        $74 = (($70) - ($73))|0;
        $75 = $74 >> 2;
        $76 = ($56&65535)<($63&65535);
        if ($76) {
         $77 = ($75|0)<($64|0);
         $$ = $77 ? $75 : $64;
         $78 = ($57|0)>($$|0);
         $$$ = $78 ? $57 : $$;
         $82 = $$$;
        } else {
         $79 = ($75|0)<($57|0);
         $$40 = $79 ? $75 : $57;
         $80 = ($64|0)>($$40|0);
         $$$40 = $80 ? $64 : $$40;
         $82 = $$$40;
        }
        $81 = $82&65535;
        $83 = (($col$073) - ($left$0103))|0;
        $84 = (((($3) + (($49*3072)|0)|0) + (($83*6)|0)|0) + 2|0);
        HEAP16[$84>>1] = $81;
        $85 = HEAP16[132088>>1]|0;
        $86 = $85&65535;
        $$sum31 = (($$sum26) - ($86))|0;
        $87 = ((($30) + ($$sum31<<3)|0) + 2|0);
        $88 = HEAP16[$87>>1]|0;
        $89 = $88&65535;
        $90 = HEAP16[$58>>1]|0;
        $91 = $90&65535;
        $92 = (($91) + ($89))|0;
        $$sum32 = (($86) + ($$sum26))|0;
        $93 = ((($30) + ($$sum32<<3)|0) + 2|0);
        $94 = HEAP16[$93>>1]|0;
        $95 = $94&65535;
        $96 = (($92) + ($95))|0;
        $97 = $96 << 1;
        $98 = $86 << 1;
        $$sum3355 = (($$sum26) - ($98))|0;
        $99 = ((($30) + ($$sum3355<<3)|0) + ($47<<1)|0);
        $100 = HEAP16[$99>>1]|0;
        $101 = $100&65535;
        $102 = (($97) - ($101))|0;
        $103 = $86 << 1;
        $$sum34 = (($103) + ($$sum26))|0;
        $104 = ((($30) + ($$sum34<<3)|0) + ($47<<1)|0);
        $105 = HEAP16[$104>>1]|0;
        $106 = $105&65535;
        $107 = (($102) - ($106))|0;
        $108 = $107 >> 2;
        $109 = ($88&65535)<($94&65535);
        if ($109) {
         $110 = ($108|0)<($95|0);
         $$42 = $110 ? $108 : $95;
         $111 = ($89|0)>($$42|0);
         $$$42 = $111 ? $89 : $$42;
         $115 = $$$42;
        } else {
         $112 = ($108|0)<($89|0);
         $$44 = $112 ? $108 : $89;
         $113 = ($95|0)>($$44|0);
         $$$44 = $113 ? $95 : $$44;
         $115 = $$$44;
        }
        $114 = $115&65535;
        $116 = (((($10) + (($49*3072)|0)|0) + (($83*6)|0)|0) + 2|0);
        HEAP16[$116>>1] = $114;
        $117 = (($col$073) + 2)|0;
        $118 = ($117|0)<($29|0);
        if ($118) {
         $col$073 = $117;
        } else {
         break;
        }
       }
      }
     } while(0);
     $119 = (($row$075) + 1)|0;
     $120 = (($top$0105) + 511)|0;
     $121 = ($row$075|0)<($120|0);
     if ($121) {
      $row$075 = $119;
     } else {
      break;
     }
    }
    $35 = $left$0103 | 1;
    $36 = (($left$0103) + 511)|0;
    $37 = ($35|0)<($36|0);
    $d$084 = 0;
    while(1) {
     L33: do {
      if ($25) {
       $row$180 = $23;
       while(1) {
        $122 = HEAP16[132080>>1]|0;
        $123 = $122&65535;
        $124 = (($123) + -3)|0;
        $125 = ($row$180|0)<($124|0);
        if (!($125)) {
         break L33;
        }
        L37: do {
         if ($37) {
          $126 = (($row$180) - ($top$0105))|0;
          $127 = $row$180 << 1;
          $128 = $127 & 14;
          $129 = (($127) + 2)|0;
          $130 = $129 & 14;
          $col$177 = $35;
          while(1) {
           $131 = HEAP16[132088>>1]|0;
           $132 = $131&65535;
           $133 = (($132) + -3)|0;
           $134 = ($col$177|0)<($133|0);
           if (!($134)) {
            break L37;
           }
           $135 = HEAP32[132112>>2]|0;
           $136 = Math_imul($132, $row$180)|0;
           $$sum9 = (($136) + ($col$177))|0;
           $137 = (($col$177) - ($left$0103))|0;
           $138 = HEAP32[584>>2]|0;
           $139 = $col$177 & 1;
           $140 = $139 | $128;
           $141 = $140 << 1;
           $142 = $138 >>> $141;
           $143 = $142 & 3;
           $144 = (2 - ($143))|0;
           $145 = ($144|0)==(1);
           if ($145) {
            $146 = $139 | $130;
            $147 = $146 << 1;
            $148 = $138 >>> $147;
            $149 = $148 & 3;
            $150 = ((($135) + ($$sum9<<3)|0) + 2|0);
            $151 = HEAP16[$150>>1]|0;
            $152 = $151&65535;
            $153 = (2 - ($149))|0;
            $$sum18 = (($$sum9) + -1)|0;
            $154 = ((($135) + ($$sum18<<3)|0) + ($153<<1)|0);
            $155 = HEAP16[$154>>1]|0;
            $156 = $155&65535;
            $$sum19 = (($$sum9) + 1)|0;
            $157 = ((($135) + ($$sum19<<3)|0) + ($153<<1)|0);
            $158 = HEAP16[$157>>1]|0;
            $159 = $158&65535;
            $160 = (($159) + ($156))|0;
            $$sum20 = (($137) + -1)|0;
            $161 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum20*6)|0)|0) + 2|0);
            $162 = HEAP16[$161>>1]|0;
            $163 = $162&65535;
            $164 = (($160) - ($163))|0;
            $$sum21 = (($137) + 1)|0;
            $165 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum21*6)|0)|0) + 2|0);
            $166 = HEAP16[$165>>1]|0;
            $167 = $166&65535;
            $168 = (($164) - ($167))|0;
            $169 = $168 >> 1;
            $170 = (($169) + ($152))|0;
            $171 = ($170|0)<(65535);
            $172 = $171 ? $170 : 65535;
            $173 = ($172|0)<(0);
            $174 = $172&65535;
            $175 = $173 ? 0 : $174;
            $176 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($137*6)|0)|0) + ($153<<1)|0);
            HEAP16[$176>>1] = $175;
            $177 = HEAP16[$150>>1]|0;
            $178 = $177&65535;
            $179 = HEAP16[132088>>1]|0;
            $180 = $179&65535;
            $$sum22 = (($$sum9) - ($180))|0;
            $181 = ((($135) + ($$sum22<<3)|0) + ($149<<1)|0);
            $182 = HEAP16[$181>>1]|0;
            $183 = $182&65535;
            $$sum23 = (($180) + ($$sum9))|0;
            $184 = ((($135) + ($$sum23<<3)|0) + ($149<<1)|0);
            $185 = HEAP16[$184>>1]|0;
            $186 = $185&65535;
            $187 = (($186) + ($183))|0;
            $$sum24 = (($137) + -512)|0;
            $188 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum24*6)|0)|0) + 2|0);
            $189 = HEAP16[$188>>1]|0;
            $190 = $189&65535;
            $191 = (($187) - ($190))|0;
            $$sum25 = (($137) + 512)|0;
            $192 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum25*6)|0)|0) + 2|0);
            $193 = HEAP16[$192>>1]|0;
            $194 = $193&65535;
            $195 = (($191) - ($194))|0;
            $196 = $195 >> 1;
            $197 = (($196) + ($178))|0;
            $c$0 = $149;$val$0 = $197;
           } else {
            $198 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($137*6)|0)|0) + 2|0);
            $199 = HEAP16[$198>>1]|0;
            $200 = $199&65535;
            $201 = $132 ^ -1;
            $$sum10 = (($$sum9) + ($201))|0;
            $202 = ((($135) + ($$sum10<<3)|0) + ($144<<1)|0);
            $203 = HEAP16[$202>>1]|0;
            $204 = $203&65535;
            $205 = (1 - ($132))|0;
            $$sum11 = (($205) + ($$sum9))|0;
            $206 = ((($135) + ($$sum11<<3)|0) + ($144<<1)|0);
            $207 = HEAP16[$206>>1]|0;
            $208 = $207&65535;
            $209 = (($132) + -1)|0;
            $$sum12 = (($209) + ($$sum9))|0;
            $210 = ((($135) + ($$sum12<<3)|0) + ($144<<1)|0);
            $211 = HEAP16[$210>>1]|0;
            $212 = $211&65535;
            $213 = (($132) + 1)|0;
            $$sum13 = (($213) + ($$sum9))|0;
            $214 = ((($135) + ($$sum13<<3)|0) + ($144<<1)|0);
            $215 = HEAP16[$214>>1]|0;
            $216 = $215&65535;
            $$sum14 = (($137) + -513)|0;
            $217 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum14*6)|0)|0) + 2|0);
            $218 = HEAP16[$217>>1]|0;
            $219 = $218&65535;
            $$sum15 = (($137) + -511)|0;
            $220 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum15*6)|0)|0) + 2|0);
            $221 = HEAP16[$220>>1]|0;
            $222 = $221&65535;
            $$sum16 = (($137) + 511)|0;
            $223 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum16*6)|0)|0) + 2|0);
            $224 = HEAP16[$223>>1]|0;
            $225 = $224&65535;
            $$sum17 = (($137) + 513)|0;
            $226 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($$sum17*6)|0)|0) + 2|0);
            $227 = HEAP16[$226>>1]|0;
            $228 = $227&65535;
            $229 = (($204) + 1)|0;
            $230 = (($229) + ($208))|0;
            $231 = (($230) + ($212))|0;
            $232 = (($231) + ($216))|0;
            $233 = (($232) - ($219))|0;
            $234 = (($233) - ($222))|0;
            $235 = (($234) - ($225))|0;
            $236 = (($235) - ($228))|0;
            $237 = $236 >> 2;
            $238 = (($237) + ($200))|0;
            $c$0 = $144;$val$0 = $238;
           }
           $239 = ($val$0|0)<(65535);
           $240 = $239 ? $val$0 : 65535;
           $241 = ($240|0)<(0);
           $242 = $240&65535;
           $243 = $241 ? 0 : $242;
           $244 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($137*6)|0)|0) + ($c$0<<1)|0);
           HEAP16[$244>>1] = $243;
           $245 = HEAP32[584>>2]|0;
           $246 = $245 >>> $141;
           $247 = $246 & 3;
           $248 = ((($135) + ($$sum9<<3)|0) + ($247<<1)|0);
           $249 = HEAP16[$248>>1]|0;
           $250 = ((((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($137*6)|0)|0) + ($247<<1)|0);
           HEAP16[$250>>1] = $249;
           $251 = (((($3) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($137*6)|0)|0);
           $252 = (((($4) + (Math_imul($d$084, 1572864)|0)|0) + (($126*3072)|0)|0) + (($137*6)|0)|0);
           _cielab($251,$252);
           $253 = (($col$177) + 1)|0;
           $254 = ($253|0)<($36|0);
           if ($254) {
            $col$177 = $253;
           } else {
            break;
           }
          }
         }
        } while(0);
        $255 = (($row$180) + 1)|0;
        $256 = ($255|0)<($24|0);
        if ($256) {
         $row$180 = $255;
        } else {
         break;
        }
       }
      }
     } while(0);
     $257 = (($d$084) + 1)|0;
     $exitcond = ($257|0)==(2);
     if ($exitcond) {
      break;
     } else {
      $d$084 = $257;
     }
    }
    _memset(($5|0),0,524288)|0;
    $258 = HEAP16[132080>>1]|0;
    $259 = $258&65535;
    $260 = (($259) + -4)|0;
    $261 = (($left$0103) + 2)|0;
    $262 = HEAP16[132088>>1]|0;
    $263 = $262&65535;
    $264 = (($263) + -4)|0;
    $row$291 = $26;
    while(1) {
     $265 = ($row$291|0)<($260|0);
     if (!($265)) {
      break;
     }
     $266 = (($row$291) - ($top$0105))|0;
     $col$290 = $261;
     while(1) {
      $267 = ($col$290|0)<($264|0);
      if (!($267)) {
       break;
      }
      $268 = (($col$290) - ($left$0103))|0;
      $$sum = (($268) + -1)|0;
      $d$187 = 0;
      while(1) {
       $269 = (((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($268*6)|0)|0);
       $270 = HEAP16[$269>>1]|0;
       $271 = $270 << 16 >> 16;
       $272 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($268*6)|0)|0) + 2|0);
       $273 = HEAP16[$272>>1]|0;
       $274 = $273 << 16 >> 16;
       $275 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($268*6)|0)|0) + 4|0);
       $276 = HEAP16[$275>>1]|0;
       $277 = $276 << 16 >> 16;
       $278 = (((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum*6)|0)|0);
       $279 = HEAP16[$278>>1]|0;
       $280 = $279 << 16 >> 16;
       $281 = (($271) - ($280))|0;
       $282 = $281 >> 31;
       $283 = $282 ^ $281;
       $284 = (($283) - ($282))|0;
       $285 = (($ldiff) + ($d$187<<4)|0);
       HEAP32[$285>>2] = $284;
       $$sum8 = (($268) + -1)|0;
       $286 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8*6)|0)|0) + 2|0);
       $287 = HEAP16[$286>>1]|0;
       $288 = $287 << 16 >> 16;
       $289 = (($274) - ($288))|0;
       $290 = Math_imul($289, $289)|0;
       $291 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8*6)|0)|0) + 4|0);
       $292 = HEAP16[$291>>1]|0;
       $293 = $292 << 16 >> 16;
       $294 = (($277) - ($293))|0;
       $295 = Math_imul($294, $294)|0;
       $296 = (($295) + ($290))|0;
       $297 = (($abdiff) + ($d$187<<4)|0);
       HEAP32[$297>>2] = $296;
       $$sum$1 = (($268) + 1)|0;
       $298 = (((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum$1*6)|0)|0);
       $299 = HEAP16[$298>>1]|0;
       $300 = $299 << 16 >> 16;
       $301 = (($271) - ($300))|0;
       $302 = $301 >> 31;
       $303 = $302 ^ $301;
       $304 = (($303) - ($302))|0;
       $305 = ((($ldiff) + ($d$187<<4)|0) + 4|0);
       HEAP32[$305>>2] = $304;
       $$sum8$1 = (($268) + 1)|0;
       $306 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8$1*6)|0)|0) + 2|0);
       $307 = HEAP16[$306>>1]|0;
       $308 = $307 << 16 >> 16;
       $309 = (($274) - ($308))|0;
       $310 = Math_imul($309, $309)|0;
       $311 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8$1*6)|0)|0) + 4|0);
       $312 = HEAP16[$311>>1]|0;
       $313 = $312 << 16 >> 16;
       $314 = (($277) - ($313))|0;
       $315 = Math_imul($314, $314)|0;
       $316 = (($315) + ($310))|0;
       $317 = ((($abdiff) + ($d$187<<4)|0) + 4|0);
       HEAP32[$317>>2] = $316;
       $$sum$2 = (($268) + -512)|0;
       $318 = (((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum$2*6)|0)|0);
       $319 = HEAP16[$318>>1]|0;
       $320 = $319 << 16 >> 16;
       $321 = (($271) - ($320))|0;
       $322 = $321 >> 31;
       $323 = $322 ^ $321;
       $324 = (($323) - ($322))|0;
       $325 = ((($ldiff) + ($d$187<<4)|0) + 8|0);
       HEAP32[$325>>2] = $324;
       $$sum8$2 = (($268) + -512)|0;
       $326 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8$2*6)|0)|0) + 2|0);
       $327 = HEAP16[$326>>1]|0;
       $328 = $327 << 16 >> 16;
       $329 = (($274) - ($328))|0;
       $330 = Math_imul($329, $329)|0;
       $331 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8$2*6)|0)|0) + 4|0);
       $332 = HEAP16[$331>>1]|0;
       $333 = $332 << 16 >> 16;
       $334 = (($277) - ($333))|0;
       $335 = Math_imul($334, $334)|0;
       $336 = (($335) + ($330))|0;
       $337 = ((($abdiff) + ($d$187<<4)|0) + 8|0);
       HEAP32[$337>>2] = $336;
       $$sum$3 = (($268) + 512)|0;
       $338 = (((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum$3*6)|0)|0);
       $339 = HEAP16[$338>>1]|0;
       $340 = $339 << 16 >> 16;
       $341 = (($271) - ($340))|0;
       $342 = $341 >> 31;
       $343 = $342 ^ $341;
       $344 = (($343) - ($342))|0;
       $345 = ((($ldiff) + ($d$187<<4)|0) + 12|0);
       HEAP32[$345>>2] = $344;
       $$sum8$3 = (($268) + 512)|0;
       $346 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8$3*6)|0)|0) + 2|0);
       $347 = HEAP16[$346>>1]|0;
       $348 = $347 << 16 >> 16;
       $349 = (($274) - ($348))|0;
       $350 = Math_imul($349, $349)|0;
       $351 = ((((($4) + (Math_imul($d$187, 1572864)|0)|0) + (($266*3072)|0)|0) + (($$sum8$3*6)|0)|0) + 4|0);
       $352 = HEAP16[$351>>1]|0;
       $353 = $352 << 16 >> 16;
       $354 = (($277) - ($353))|0;
       $355 = Math_imul($354, $354)|0;
       $356 = (($355) + ($350))|0;
       $357 = ((($abdiff) + ($d$187<<4)|0) + 12|0);
       HEAP32[$357>>2] = $356;
       $358 = (($d$187) + 1)|0;
       $exitcond109 = ($358|0)==(2);
       if ($exitcond109) {
        break;
       } else {
        $d$187 = $358;
       }
      }
      $359 = HEAP32[$ldiff>>2]|0;
      $360 = HEAP32[$11>>2]|0;
      $361 = ($359>>>0)>($360>>>0);
      $$48 = $361 ? $359 : $360;
      $362 = HEAP32[$12>>2]|0;
      $363 = HEAP32[$13>>2]|0;
      $364 = ($362>>>0)>($363>>>0);
      $365 = $364 ? $362 : $363;
      $366 = ($$48>>>0)<($365>>>0);
      $$48$ = $366 ? $$48 : $365;
      $367 = HEAP32[$abdiff>>2]|0;
      $368 = HEAP32[$14>>2]|0;
      $369 = ($367>>>0)>($368>>>0);
      $$51 = $369 ? $367 : $368;
      $370 = HEAP32[$15>>2]|0;
      $371 = HEAP32[$16>>2]|0;
      $372 = ($370>>>0)>($371>>>0);
      $373 = $372 ? $370 : $371;
      $374 = ($$51>>>0)<($373>>>0);
      $375 = $374 ? $$51 : $373;
      $376 = ((($5) + ($266<<9)|0) + ($268)|0);
      $377 = HEAP32[$ldiff>>2]|0;
      $378 = ($377>>>0)>($$48$>>>0);
      if (!($378)) {
       $379 = HEAP32[$abdiff>>2]|0;
       $380 = ($379>>>0)>($375>>>0);
       if (!($380)) {
        $381 = HEAP8[$376>>0]|0;
        $382 = (($381) + 1)<<24>>24;
        HEAP8[$376>>0] = $382;
       }
      }
      $383 = (($ldiff) + 4|0);
      $384 = HEAP32[$383>>2]|0;
      $385 = ($384>>>0)>($$48$>>>0);
      if (!($385)) {
       $485 = (($abdiff) + 4|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = ($486>>>0)>($375>>>0);
       if (!($487)) {
        $488 = HEAP8[$376>>0]|0;
        $489 = (($488) + 1)<<24>>24;
        HEAP8[$376>>0] = $489;
       }
      }
      $490 = (($ldiff) + 8|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = ($491>>>0)>($$48$>>>0);
      if (!($492)) {
       $493 = (($abdiff) + 8|0);
       $494 = HEAP32[$493>>2]|0;
       $495 = ($494>>>0)>($375>>>0);
       if (!($495)) {
        $496 = HEAP8[$376>>0]|0;
        $497 = (($496) + 1)<<24>>24;
        HEAP8[$376>>0] = $497;
       }
      }
      $498 = (($ldiff) + 12|0);
      $499 = HEAP32[$498>>2]|0;
      $500 = ($499>>>0)>($$48$>>>0);
      if (!($500)) {
       $501 = (($abdiff) + 12|0);
       $502 = HEAP32[$501>>2]|0;
       $503 = ($502>>>0)>($375>>>0);
       if (!($503)) {
        $504 = HEAP8[$376>>0]|0;
        $505 = (($504) + 1)<<24>>24;
        HEAP8[$376>>0] = $505;
       }
      }
      $506 = (((($5) + ($266<<9)|0) + ($268)|0) + 262144|0);
      $507 = (($ldiff) + 16|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ($508>>>0)>($$48$>>>0);
      if (!($509)) {
       $510 = (($abdiff) + 16|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = ($511>>>0)>($375>>>0);
       if (!($512)) {
        $513 = HEAP8[$506>>0]|0;
        $514 = (($513) + 1)<<24>>24;
        HEAP8[$506>>0] = $514;
       }
      }
      $515 = (($ldiff) + 20|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = ($516>>>0)>($$48$>>>0);
      if (!($517)) {
       $518 = (($abdiff) + 20|0);
       $519 = HEAP32[$518>>2]|0;
       $520 = ($519>>>0)>($375>>>0);
       if (!($520)) {
        $521 = HEAP8[$506>>0]|0;
        $522 = (($521) + 1)<<24>>24;
        HEAP8[$506>>0] = $522;
       }
      }
      $523 = (($ldiff) + 24|0);
      $524 = HEAP32[$523>>2]|0;
      $525 = ($524>>>0)>($$48$>>>0);
      if (!($525)) {
       $526 = (($abdiff) + 24|0);
       $527 = HEAP32[$526>>2]|0;
       $528 = ($527>>>0)>($375>>>0);
       if (!($528)) {
        $529 = HEAP8[$506>>0]|0;
        $530 = (($529) + 1)<<24>>24;
        HEAP8[$506>>0] = $530;
       }
      }
      $531 = (($ldiff) + 28|0);
      $532 = HEAP32[$531>>2]|0;
      $533 = ($532>>>0)>($$48$>>>0);
      if (!($533)) {
       $534 = (($abdiff) + 28|0);
       $535 = HEAP32[$534>>2]|0;
       $536 = ($535>>>0)>($375>>>0);
       if (!($536)) {
        $537 = HEAP8[$506>>0]|0;
        $538 = (($537) + 1)<<24>>24;
        HEAP8[$506>>0] = $538;
       }
      }
      $539 = (($col$290) + 1)|0;
      $540 = (($left$0103) + 509)|0;
      $541 = ($col$290|0)<($540|0);
      if ($541) {
       $col$290 = $539;
      } else {
       break;
      }
     }
     $386 = (($row$291) + 1)|0;
     $387 = (($top$0105) + 509)|0;
     $388 = ($row$291|0)<($387|0);
     if ($388) {
      $row$291 = $386;
     } else {
      break;
     }
    }
    $389 = (($left$0103) + 3)|0;
    $390 = HEAP32[132112>>2]|0;
    $row$3101 = $27;
    while(1) {
     $391 = HEAP16[132080>>1]|0;
     $392 = $391&65535;
     $393 = (($392) + -5)|0;
     $394 = ($row$3101|0)<($393|0);
     if (!($394)) {
      break;
     }
     $395 = (($row$3101) - ($top$0105))|0;
     $396 = (($395) + -1)|0;
     $col$399 = $389;
     while(1) {
      $397 = HEAP16[132088>>1]|0;
      $398 = $397&65535;
      $399 = (($398) + -5)|0;
      $400 = ($col$399|0)<($399|0);
      if (!($400)) {
       break;
      }
      $406 = (($col$399) - ($left$0103))|0;
      $542 = (($406) + -1)|0;
      $543 = (($395) + 1)|0;
      $544 = ((($5) + ($396<<9)|0) + ($542)|0);
      $545 = HEAP8[$544>>0]|0;
      $546 = $545 << 24 >> 24;
      $547 = ((($5) + ($396<<9)|0) + ($406)|0);
      $548 = HEAP8[$547>>0]|0;
      $549 = $548 << 24 >> 24;
      $550 = (($546) + ($549))|0;
      $551 = (($406) + 1)|0;
      $552 = ((($5) + ($396<<9)|0) + ($551)|0);
      $553 = HEAP8[$552>>0]|0;
      $554 = $553 << 24 >> 24;
      $555 = (($550) + ($554))|0;
      $556 = ((($5) + ($395<<9)|0) + ($542)|0);
      $557 = HEAP8[$556>>0]|0;
      $558 = $557 << 24 >> 24;
      $559 = (($555) + ($558))|0;
      $560 = ((($5) + ($395<<9)|0) + ($406)|0);
      $561 = HEAP8[$560>>0]|0;
      $562 = $561 << 24 >> 24;
      $563 = (($559) + ($562))|0;
      $564 = (($406) + 1)|0;
      $565 = ((($5) + ($395<<9)|0) + ($564)|0);
      $566 = HEAP8[$565>>0]|0;
      $567 = $566 << 24 >> 24;
      $568 = (($563) + ($567))|0;
      $569 = ((($5) + ($543<<9)|0) + ($542)|0);
      $570 = HEAP8[$569>>0]|0;
      $571 = $570 << 24 >> 24;
      $572 = (($568) + ($571))|0;
      $573 = ((($5) + ($543<<9)|0) + ($406)|0);
      $574 = HEAP8[$573>>0]|0;
      $575 = $574 << 24 >> 24;
      $576 = (($572) + ($575))|0;
      $577 = (($406) + 1)|0;
      $578 = ((($5) + ($543<<9)|0) + ($577)|0);
      $579 = HEAP8[$578>>0]|0;
      $580 = $579 << 24 >> 24;
      $581 = (($576) + ($580))|0;
      HEAP32[$hm>>2] = $581;
      $582 = (($hm) + 4|0);
      $583 = (($395) + 1)|0;
      $584 = (((($5) + ($396<<9)|0) + ($542)|0) + 262144|0);
      $585 = HEAP8[$584>>0]|0;
      $586 = $585 << 24 >> 24;
      $587 = (((($5) + ($396<<9)|0) + ($406)|0) + 262144|0);
      $588 = HEAP8[$587>>0]|0;
      $589 = $588 << 24 >> 24;
      $590 = (($586) + ($589))|0;
      $591 = (($406) + 1)|0;
      $592 = (((($5) + ($396<<9)|0) + ($591)|0) + 262144|0);
      $593 = HEAP8[$592>>0]|0;
      $594 = $593 << 24 >> 24;
      $595 = (($590) + ($594))|0;
      $596 = (((($5) + ($395<<9)|0) + ($542)|0) + 262144|0);
      $597 = HEAP8[$596>>0]|0;
      $598 = $597 << 24 >> 24;
      $599 = (($595) + ($598))|0;
      $600 = (((($5) + ($395<<9)|0) + ($406)|0) + 262144|0);
      $601 = HEAP8[$600>>0]|0;
      $602 = $601 << 24 >> 24;
      $603 = (($599) + ($602))|0;
      $604 = (($406) + 1)|0;
      $605 = (((($5) + ($395<<9)|0) + ($604)|0) + 262144|0);
      $606 = HEAP8[$605>>0]|0;
      $607 = $606 << 24 >> 24;
      $608 = (($603) + ($607))|0;
      $609 = (((($5) + ($583<<9)|0) + ($542)|0) + 262144|0);
      $610 = HEAP8[$609>>0]|0;
      $611 = $610 << 24 >> 24;
      $612 = (($608) + ($611))|0;
      $613 = (((($5) + ($583<<9)|0) + ($406)|0) + 262144|0);
      $614 = HEAP8[$613>>0]|0;
      $615 = $614 << 24 >> 24;
      $616 = (($612) + ($615))|0;
      $617 = (($406) + 1)|0;
      $618 = (((($5) + ($583<<9)|0) + ($617)|0) + 262144|0);
      $619 = HEAP8[$618>>0]|0;
      $620 = $619 << 24 >> 24;
      $621 = (($616) + ($620))|0;
      HEAP32[$582>>2] = $621;
      $622 = HEAP32[$hm>>2]|0;
      $623 = ($622|0)==($621|0);
      if ($623) {
       $427 = ((($3) + (($395*3072)|0)|0) + (($406*6)|0)|0);
       $428 = HEAP16[$427>>1]|0;
       $429 = $428&65535;
       $430 = ((($18) + (($395*3072)|0)|0) + (($406*6)|0)|0);
       $431 = HEAP16[$430>>1]|0;
       $432 = $431&65535;
       $433 = (($432) + ($429))|0;
       $434 = $433 >>> 1;
       $435 = $434&65535;
       $436 = HEAP16[132088>>1]|0;
       $437 = $436&65535;
       $438 = Math_imul($437, $row$3101)|0;
       $439 = (($438) + ($col$399))|0;
       $440 = (($390) + ($439<<3)|0);
       HEAP16[$440>>1] = $435;
       $441 = (((($3) + (($395*3072)|0)|0) + (($406*6)|0)|0) + 2|0);
       $442 = HEAP16[$441>>1]|0;
       $443 = $442&65535;
       $444 = (((($18) + (($395*3072)|0)|0) + (($406*6)|0)|0) + 2|0);
       $445 = HEAP16[$444>>1]|0;
       $446 = $445&65535;
       $447 = (($446) + ($443))|0;
       $448 = $447 >>> 1;
       $449 = $448&65535;
       $450 = HEAP16[132088>>1]|0;
       $451 = $450&65535;
       $452 = Math_imul($451, $row$3101)|0;
       $453 = (($452) + ($col$399))|0;
       $454 = ((($390) + ($453<<3)|0) + 2|0);
       HEAP16[$454>>1] = $449;
       $455 = (((($3) + (($395*3072)|0)|0) + (($406*6)|0)|0) + 4|0);
       $456 = HEAP16[$455>>1]|0;
       $457 = $456&65535;
       $458 = (((($18) + (($395*3072)|0)|0) + (($406*6)|0)|0) + 4|0);
       $459 = HEAP16[$458>>1]|0;
       $460 = $459&65535;
       $461 = (($460) + ($457))|0;
       $462 = $461 >>> 1;
       $463 = $462&65535;
       $464 = HEAP16[132088>>1]|0;
       $465 = $464&65535;
       $466 = Math_imul($465, $row$3101)|0;
       $467 = (($466) + ($col$399))|0;
       $468 = ((($390) + ($467<<3)|0) + 4|0);
       HEAP16[$468>>1] = $463;
      } else {
       $401 = HEAP32[$17>>2]|0;
       $402 = HEAP32[$hm>>2]|0;
       $403 = ($401|0)>($402|0);
       $404 = $403&1;
       $405 = (((($3) + (Math_imul($404, 1572864)|0)|0) + (($395*3072)|0)|0) + (($406*6)|0)|0);
       $407 = HEAP16[$405>>1]|0;
       $408 = HEAP16[132088>>1]|0;
       $409 = $408&65535;
       $410 = Math_imul($409, $row$3101)|0;
       $411 = (($410) + ($col$399))|0;
       $412 = (($390) + ($411<<3)|0);
       HEAP16[$412>>1] = $407;
       $413 = ((((($3) + (Math_imul($404, 1572864)|0)|0) + (($395*3072)|0)|0) + (($406*6)|0)|0) + 2|0);
       $414 = HEAP16[$413>>1]|0;
       $415 = HEAP16[132088>>1]|0;
       $416 = $415&65535;
       $417 = Math_imul($416, $row$3101)|0;
       $418 = (($417) + ($col$399))|0;
       $419 = ((($390) + ($418<<3)|0) + 2|0);
       HEAP16[$419>>1] = $414;
       $420 = ((((($3) + (Math_imul($404, 1572864)|0)|0) + (($395*3072)|0)|0) + (($406*6)|0)|0) + 4|0);
       $421 = HEAP16[$420>>1]|0;
       $422 = HEAP16[132088>>1]|0;
       $423 = $422&65535;
       $424 = Math_imul($423, $row$3101)|0;
       $425 = (($424) + ($col$399))|0;
       $426 = ((($390) + ($425<<3)|0) + 4|0);
       HEAP16[$426>>1] = $421;
      }
      $469 = (($col$399) + 1)|0;
      $470 = (($left$0103) + 508)|0;
      $471 = ($col$399|0)<($470|0);
      if ($471) {
       $col$399 = $469;
      } else {
       break;
      }
     }
     $472 = (($row$3101) + 1)|0;
     $473 = (($top$0105) + 508)|0;
     $474 = ($row$3101|0)<($473|0);
     if ($474) {
      $row$3101 = $472;
     } else {
      break;
     }
    }
    $475 = (($left$0103) + 506)|0;
    $476 = HEAP16[132088>>1]|0;
    $477 = $476&65535;
    $478 = (($477) + -5)|0;
    $479 = ($475|0)<($478|0);
    if ($479) {
     $left$0103 = $475;
    } else {
     break;
    }
   }
  }
  $480 = (($top$0105) + 506)|0;
  $481 = HEAP16[132080>>1]|0;
  $482 = $481&65535;
  $483 = (($482) + -5)|0;
  $484 = ($480|0)<($483|0);
  if ($484) {
   $top$0105 = $480;
  } else {
   break;
  }
 }
 _free($3);
 STACKTOP = sp;return;
}
function _median_filter() {
 var $$ = 0, $$lcssa3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$019 = 0, $i$08 = 0, $i$112 = 0;
 var $k$09 = 0, $med = 0, $pass$020 = 0, $pix$04 = 0, $pix$113 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $med = sp + 4|0;
 $0 = HEAP32[224>>2]|0;
 $1 = ($0|0)<(1);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[_stderr>>2]|0;
 $3 = (($med) + 16|0);
 $pass$020 = 1;
 while(1) {
  $4 = HEAP32[168>>2]|0;
  $5 = ($4|0)==(0);
  if (!($5)) {
   HEAP32[$vararg_buffer>>2] = $pass$020;
   (_fprintf(($2|0),(453640|0),($vararg_buffer|0))|0);
  }
  $6 = HEAP32[132112>>2]|0;
  $c$019 = 0;
  while(1) {
   $7 = HEAP16[132088>>1]|0;
   $8 = $7&65535;
   $9 = HEAP16[132080>>1]|0;
   $10 = $9&65535;
   $11 = Math_imul($10, $8)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$lcssa3 = $8;
   } else {
    $pix$04 = $6;
    while(1) {
     $13 = (($pix$04) + ($c$019<<1)|0);
     $14 = HEAP16[$13>>1]|0;
     $15 = (($pix$04) + 6|0);
     HEAP16[$15>>1] = $14;
     $16 = (($pix$04) + 8|0);
     $17 = HEAP16[132088>>1]|0;
     $18 = $17&65535;
     $19 = HEAP16[132080>>1]|0;
     $20 = $19&65535;
     $21 = Math_imul($20, $18)|0;
     $22 = (($6) + ($21<<3)|0);
     $23 = ($16>>>0)<($22>>>0);
     if ($23) {
      $pix$04 = $16;
     } else {
      $$lcssa3 = $18;
      break;
     }
    }
   }
   $24 = HEAP16[132088>>1]|0;
   $25 = $24&65535;
   $26 = HEAP16[132080>>1]|0;
   $27 = $26&65535;
   $28 = (($27) + -1)|0;
   $29 = Math_imul($28, $25)|0;
   $30 = ($$lcssa3|0)<($29|0);
   if ($30) {
    $31 = (($6) + ($$lcssa3<<3)|0);
    $38 = $25;$pix$113 = $31;
    while(1) {
     $32 = $pix$113;
     $33 = $6;
     $34 = (($32) - ($33))|0;
     $35 = $34 >> 3;
     $36 = (($35) + 1)|0;
     $37 = (($36|0) % ($38|0))&-1;
     $39 = ($37|0)<(2);
     if (!($39)) {
      $40 = (0 - ($38))|0;
      $41 = HEAP16[132088>>1]|0;
      $42 = $41&65535;
      $43 = ($42|0)<($40|0);
      if ($43) {
       $i$112 = 0;
      } else {
       $44 = HEAP16[132088>>1]|0;
       $45 = $44&65535;
       $46 = $44&65535;
       $i$08 = $40;$k$09 = 0;
       while(1) {
        $47 = (($i$08) + -1)|0;
        $48 = ((($pix$113) + ($47<<3)|0) + 6|0);
        $49 = HEAP16[$48>>1]|0;
        $50 = $49&65535;
        $51 = ((($pix$113) + ($47<<3)|0) + 2|0);
        $52 = HEAP16[$51>>1]|0;
        $53 = $52&65535;
        $54 = (($50) - ($53))|0;
        $55 = (($k$09) + 1)|0;
        $56 = (($med) + ($k$09<<2)|0);
        HEAP32[$56>>2] = $54;
        $57 = ((($pix$113) + ($i$08<<3)|0) + 6|0);
        $58 = HEAP16[$57>>1]|0;
        $59 = $58&65535;
        $60 = ((($pix$113) + ($i$08<<3)|0) + 2|0);
        $61 = HEAP16[$60>>1]|0;
        $62 = $61&65535;
        $63 = (($59) - ($62))|0;
        $64 = (($k$09) + 2)|0;
        $65 = (($med) + ($55<<2)|0);
        HEAP32[$65>>2] = $63;
        $66 = (($i$08) + 1)|0;
        $67 = ((($pix$113) + ($66<<3)|0) + 6|0);
        $68 = HEAP16[$67>>1]|0;
        $69 = $68&65535;
        $70 = ((($pix$113) + ($66<<3)|0) + 2|0);
        $71 = HEAP16[$70>>1]|0;
        $72 = $71&65535;
        $73 = (($69) - ($72))|0;
        $74 = (($med) + ($64<<2)|0);
        HEAP32[$74>>2] = $73;
        $75 = (($k$09) + 3)|0;
        $76 = (($45) + ($i$08))|0;
        $77 = ($76|0)>($46|0);
        if ($77) {
         $i$112 = 0;
         break;
        } else {
         $i$08 = $76;$k$09 = $75;
        }
       }
      }
      while(1) {
       $78 = (453600 + ($i$112)|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = $79&255;
       $81 = (($med) + ($80<<2)|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = $i$112 | 1;
       $84 = (453600 + ($83)|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = $85&255;
       $87 = (($med) + ($86<<2)|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($82|0)>($88|0);
       if ($89) {
        $90 = (($88) + ($82))|0;
        HEAP32[$81>>2] = $90;
        $91 = HEAP8[$78>>0]|0;
        $92 = $91&255;
        $93 = (($med) + ($92<<2)|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = HEAP8[$84>>0]|0;
        $96 = $95&255;
        $97 = (($med) + ($96<<2)|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = (($94) - ($98))|0;
        HEAP32[$97>>2] = $99;
        $100 = HEAP8[$78>>0]|0;
        $101 = $100&255;
        $102 = (($med) + ($101<<2)|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = HEAP8[$84>>0]|0;
        $105 = $104&255;
        $106 = (($med) + ($105<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $108 = (($103) - ($107))|0;
        HEAP32[$102>>2] = $108;
       }
       $109 = (($i$112) + 2)|0;
       $110 = ($109>>>0)<(38);
       if ($110) {
        $i$112 = $109;
       } else {
        break;
       }
      }
      $111 = HEAP32[$3>>2]|0;
      $112 = (($pix$113) + 2|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = $113&65535;
      $115 = (($114) + ($111))|0;
      $116 = ($115|0)<(65535);
      $$ = $116 ? $115 : 65535;
      $117 = ($$|0)<(0);
      $118 = $$&65535;
      $119 = $117 ? 0 : $118;
      $120 = (($pix$113) + ($c$019<<1)|0);
      HEAP16[$120>>1] = $119;
     }
     $121 = (($pix$113) + 8|0);
     $122 = HEAP16[132088>>1]|0;
     $123 = $122&65535;
     $124 = HEAP16[132080>>1]|0;
     $125 = $124&65535;
     $126 = (($125) + -1)|0;
     $127 = Math_imul($126, $123)|0;
     $128 = (($6) + ($127<<3)|0);
     $129 = ($121>>>0)<($128>>>0);
     if ($129) {
      $38 = $123;$pix$113 = $121;
     } else {
      break;
     }
    }
   }
   $130 = (($c$019) + 2)|0;
   $131 = ($130|0)<(3);
   if ($131) {
    $c$019 = $130;
   } else {
    break;
   }
  }
  $132 = (($pass$020) + 1)|0;
  $133 = HEAP32[224>>2]|0;
  $134 = ($pass$020|0)<($133|0);
  if ($134) {
   $pass$020 = $132;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _blend_highlights() {
 var $$ = 0.0, $$clip$0 = 0, $$lcssa = 0.0, $$lcssa75 = 0.0, $$lcssa76 = 0.0, $$lcssa77 = 0.0, $$lcssa78 = 0.0, $$promoted = 0.0, $$promoted$1 = 0.0, $$promoted27 = 0.0, $$promoted27$1 = 0.0, $$promoted39 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$052 = 0, $c$1$lcssa = 0, $c$110 = 0, $c$213 = 0, $c$319 = 0, $c$319$1 = 0, $c$423 = 0, $c$423$1 = 0, $c$532 = 0, $c$641 = 0, $c$744 = 0, $cam = 0, $clip$0$lcssa = 0, $clip$053 = 0, $col$046 = 0, $cond = 0, $exitcond = 0, $exitcond$1 = 0;
 var $exitcond60 = 0, $exitcond60$1 = 0, $exitcond62 = 0, $exitcond62$1 = 0, $exitcond65 = 0, $exitcond66 = 0, $exitcond67 = 0, $exitcond69 = 0, $j$015 = 0, $j$015$1 = 0, $j$135 = 0, $lab = 0, $row$050 = 0, $sqrtf = 0.0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $cam = sp + 40|0;
 $lab = sp + 8|0;
 $sum = sp;
 $0 = HEAP32[132272>>2]|0;
 $1 = (($0) + -3)|0;
 $2 = ($1>>>0)>(1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[168>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[_stderr>>2]|0;
  (_fwrite((453928|0),23,1,($5|0))|0);
 }
 $6 = HEAP32[132272>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $clip$0$lcssa = 2147483647;
 } else {
  $8 = HEAP32[132272>>2]|0;
  $c$052 = 0;$clip$053 = 2147483647;
  while(1) {
   $26 = (132048 + ($c$052<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27 * 65535.0;
   $29 = (~~(($28)));
   $30 = ($clip$053|0)>($29|0);
   $$clip$0 = $30 ? $29 : $clip$053;
   $31 = (($c$052) + 1)|0;
   $32 = ($31>>>0)<($8>>>0);
   if ($32) {
    $c$052 = $31;$clip$053 = $$clip$0;
   } else {
    $clip$0$lcssa = $$clip$0;
    break;
   }
  }
 }
 $9 = HEAP16[132080>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[132272>>2]|0;
 $12 = ($11|0)==(0);
 $13 = ($11|0)==(0);
 $14 = ($11|0)==(0);
 $15 = ($11>>>0)>(1);
 $16 = ($11|0)==(0);
 $17 = (($sum) + 4|0);
 $18 = HEAP32[132272>>2]|0;
 $19 = ($18>>>0)>(1);
 $20 = ($18|0)==(0);
 $21 = HEAP32[132112>>2]|0;
 $22 = ($18|0)==(0);
 $23 = (+($clip$0$lcssa|0));
 $24 = (($11) + -1)|0;
 $25 = (($18) + -1)|0;
 $row$050 = 0;
 while(1) {
  $33 = HEAP16[132088>>1]|0;
  $34 = ($33<<16>>16)==(0);
  if (!($34)) {
   $col$046 = 0;
   while(1) {
    L20: do {
     if ($12) {
      $c$1$lcssa = 0;
     } else {
      $35 = HEAP16[132088>>1]|0;
      $36 = $35&65535;
      $37 = Math_imul($36, $row$050)|0;
      $38 = (($37) + ($col$046))|0;
      $c$110 = 0;
      while(1) {
       $39 = ((($21) + ($38<<3)|0) + ($c$110<<1)|0);
       $40 = HEAP16[$39>>1]|0;
       $41 = $40&65535;
       $42 = ($41|0)>($clip$0$lcssa|0);
       if ($42) {
        $c$1$lcssa = $c$110;
        break L20;
       }
       $43 = (($c$110) + 1)|0;
       $44 = ($43>>>0)<($18>>>0);
       if ($44) {
        $c$110 = $43;
       } else {
        $c$1$lcssa = $43;
        break;
       }
      }
     }
    } while(0);
    $45 = ($c$1$lcssa|0)==($11|0);
    if (!($45)) {
     if (!($13)) {
      $46 = HEAP16[132088>>1]|0;
      $47 = $46&65535;
      $48 = Math_imul($47, $row$050)|0;
      $49 = (($48) + ($col$046))|0;
      $c$213 = 0;
      while(1) {
       $50 = ((($21) + ($49<<3)|0) + ($c$213<<1)|0);
       $51 = HEAP16[$50>>1]|0;
       $52 = (+($51&65535));
       $53 = (($cam) + ($c$213<<2)|0);
       HEAPF32[$53>>2] = $52;
       $54 = $52 < $23;
       $$ = $54 ? $52 : $23;
       $55 = ((($cam) + ($c$213<<2)|0) + 16|0);
       HEAPF32[$55>>2] = $$;
       $56 = (($c$213) + 1)|0;
       $57 = ($56>>>0)<($18>>>0);
       if ($57) {
        $c$213 = $56;
       } else {
        break;
       }
      }
     }
     if (!($14)) {
      $c$319 = 0;
      while(1) {
       $58 = (($lab) + ($c$319<<2)|0);
       HEAPF32[$58>>2] = 0.0;
       if (!($16)) {
        $$promoted = +HEAPF32[$58>>2];
        $66 = $$promoted;$j$015 = 0;
        while(1) {
         $59 = (($11) + -3)|0;
         $60 = (((453672 + ($59<<6)|0) + ($c$319<<4)|0) + ($j$015<<2)|0);
         $61 = +HEAPF32[$60>>2];
         $62 = (($cam) + ($j$015<<2)|0);
         $63 = +HEAPF32[$62>>2];
         $64 = $61 * $63;
         $65 = $66 + $64;
         $67 = (($j$015) + 1)|0;
         $exitcond = ($j$015|0)==($24|0);
         if ($exitcond) {
          $$lcssa = $65;
          break;
         } else {
          $66 = $65;$j$015 = $67;
         }
        }
        HEAPF32[$58>>2] = $$lcssa;
       }
       $68 = (($c$319) + 1)|0;
       $exitcond60 = ($c$319|0)==($24|0);
       if ($exitcond60) {
        break;
       } else {
        $c$319 = $68;
       }
      }
     }
     HEAPF32[$sum>>2] = 0.0;
     if ($15) {
      $$promoted27 = +HEAPF32[$sum>>2];
      $73 = $$promoted27;$c$423 = 1;
      while(1) {
       $69 = (($lab) + ($c$423<<2)|0);
       $70 = +HEAPF32[$69>>2];
       $71 = $70 * $70;
       $72 = $73 + $71;
       $74 = (($c$423) + 1)|0;
       $exitcond62 = ($c$423|0)==($24|0);
       if ($exitcond62) {
        $$lcssa75 = $72;
        break;
       } else {
        $73 = $72;$c$423 = $74;
       }
      }
      HEAPF32[$sum>>2] = $$lcssa75;
     }
     if (!($14)) {
      $c$319$1 = 0;
      while(1) {
       $109 = ((($lab) + ($c$319$1<<2)|0) + 16|0);
       HEAPF32[$109>>2] = 0.0;
       if (!($16)) {
        $$promoted$1 = +HEAPF32[$109>>2];
        $117 = $$promoted$1;$j$015$1 = 0;
        while(1) {
         $110 = (($11) + -3)|0;
         $111 = (((453672 + ($110<<6)|0) + ($c$319$1<<4)|0) + ($j$015$1<<2)|0);
         $112 = +HEAPF32[$111>>2];
         $113 = ((($cam) + ($j$015$1<<2)|0) + 16|0);
         $114 = +HEAPF32[$113>>2];
         $115 = $112 * $114;
         $116 = $117 + $115;
         $118 = (($j$015$1) + 1)|0;
         $exitcond$1 = ($j$015$1|0)==($24|0);
         if ($exitcond$1) {
          $$lcssa76 = $116;
          break;
         } else {
          $117 = $116;$j$015$1 = $118;
         }
        }
        HEAPF32[$109>>2] = $$lcssa76;
       }
       $119 = (($c$319$1) + 1)|0;
       $exitcond60$1 = ($c$319$1|0)==($24|0);
       if ($exitcond60$1) {
        break;
       } else {
        $c$319$1 = $119;
       }
      }
     }
     $120 = (($sum) + 4|0);
     HEAPF32[$120>>2] = 0.0;
     if ($15) {
      $$promoted27$1 = +HEAPF32[$120>>2];
      $125 = $$promoted27$1;$c$423$1 = 1;
      while(1) {
       $121 = ((($lab) + ($c$423$1<<2)|0) + 16|0);
       $122 = +HEAPF32[$121>>2];
       $123 = $122 * $122;
       $124 = $125 + $123;
       $126 = (($c$423$1) + 1)|0;
       $exitcond62$1 = ($c$423$1|0)==($24|0);
       if ($exitcond62$1) {
        $$lcssa77 = $124;
        break;
       } else {
        $125 = $124;$c$423$1 = $126;
       }
      }
      HEAPF32[$120>>2] = $$lcssa77;
     }
     $127 = +HEAPF32[$17>>2];
     $128 = +HEAPF32[$sum>>2];
     $129 = $127 / $128;
     $sqrtf = (+Math_sqrt((+$129)));
     if ($19) {
      $c$532 = 1;
      while(1) {
       $75 = (($lab) + ($c$532<<2)|0);
       $76 = +HEAPF32[$75>>2];
       $77 = $sqrtf * $76;
       HEAPF32[$75>>2] = $77;
       $78 = (($c$532) + 1)|0;
       $exitcond65 = ($c$532|0)==($25|0);
       if ($exitcond65) {
        break;
       } else {
        $c$532 = $78;
       }
      }
     }
     $cond = ($18|0)==(0);
     if (!($cond)) {
      $c$641 = 0;
      while(1) {
       $79 = (($cam) + ($c$641<<2)|0);
       HEAPF32[$79>>2] = 0.0;
       if (!($22)) {
        $$promoted39 = +HEAPF32[$79>>2];
        $87 = $$promoted39;$j$135 = 0;
        while(1) {
         $80 = (($18) + -3)|0;
         $81 = (((453800 + ($80<<6)|0) + ($c$641<<4)|0) + ($j$135<<2)|0);
         $82 = +HEAPF32[$81>>2];
         $83 = (($lab) + ($j$135<<2)|0);
         $84 = +HEAPF32[$83>>2];
         $85 = $82 * $84;
         $86 = $87 + $85;
         $88 = (($j$135) + 1)|0;
         $exitcond66 = ($j$135|0)==($25|0);
         if ($exitcond66) {
          $$lcssa78 = $86;
          break;
         } else {
          $87 = $86;$j$135 = $88;
         }
        }
        HEAPF32[$79>>2] = $$lcssa78;
       }
       $89 = (($c$641) + 1)|0;
       $exitcond67 = ($c$641|0)==($25|0);
       if ($exitcond67) {
        break;
       } else {
        $c$641 = $89;
       }
      }
      if (!($20)) {
       $c$744 = 0;
       while(1) {
        $90 = (($cam) + ($c$744<<2)|0);
        $91 = +HEAPF32[$90>>2];
        $92 = (+($18>>>0));
        $93 = $91 / $92;
        $94 = (~~(($93))&65535);
        $95 = HEAP16[132088>>1]|0;
        $96 = $95&65535;
        $97 = Math_imul($96, $row$050)|0;
        $98 = (($97) + ($col$046))|0;
        $99 = ((($21) + ($98<<3)|0) + ($c$744<<1)|0);
        HEAP16[$99>>1] = $94;
        $100 = (($c$744) + 1)|0;
        $exitcond69 = ($c$744|0)==($25|0);
        if ($exitcond69) {
         break;
        } else {
         $c$744 = $100;
        }
       }
      }
     }
    }
    $101 = (($col$046) + 1)|0;
    $102 = HEAP16[132088>>1]|0;
    $103 = $102&65535;
    $104 = ($101|0)<($103|0);
    if ($104) {
     $col$046 = $101;
    } else {
     break;
    }
   }
  }
  $105 = (($row$050) + 1)|0;
  $106 = HEAP16[132080>>1]|0;
  $107 = $106&65535;
  $108 = ($105|0)<($107|0);
  if ($108) {
   $row$050 = $105;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _recover_highlights() {
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$074 = 0, $c$170 = 0, $c$262 = 0, $change$040 = 0, $change$1 = 0;
 var $change$1$lcssa = 0, $col$010 = 0, $col$147 = 0, $cond = 0, $count$0$lcssa = 0, $count$015 = 0, $count$1$lcssa = 0, $count$19 = 0, $count$2 = 0, $count$331 = 0, $count$4 = 0, $count$4$lcssa = 0, $d$032 = 0, $exitcond = 0, $exitcond77 = 0, $exitcond78 = 0, $hsat = 0, $i$041 = 0, $i$145 = 0, $kc$0$lcssa = 0;
 var $kc$069 = 0, $kc$1 = 0, $mcol$026 = 0, $mcol$134 = 0, $mcol$256 = 0, $mrow$029 = 0, $mrow$138 = 0, $mrow$260 = 0, $or$cond = 0, $row$016 = 0, $row$151 = 0, $spread$0 = 0, $sum$0$lcssa = 0.0, $sum$018 = 0.0, $sum$1$lcssa = 0.0, $sum$112 = 0.0, $sum$2 = 0.0, $sum$333 = 0.0, $sum$4 = 0.0, $sum$4$lcssa = 0.0;
 var $wgt$0$lcssa = 0.0, $wgt$017 = 0.0, $wgt$1$lcssa = 0.0, $wgt$111 = 0.0, $wgt$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hsat = sp;
 $0 = HEAP32[168>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[_stderr>>2]|0;
  (_fwrite((453968|0),25,1,($2|0))|0);
 }
 $3 = HEAP32[160>>2]|0;
 $4 = (4 - ($3))|0;
 $5 = (+_ldexp(1.0,$4));
 $6 = $5;
 $7 = HEAP32[132272>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $kc$0$lcssa = 0;
 } else {
  $9 = HEAP32[132272>>2]|0;
  $c$074 = 0;
  while(1) {
   $12 = (132048 + ($c$074<<2)|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $13 * 32000.0;
   $15 = (~~(($14)));
   $16 = (($hsat) + ($c$074<<2)|0);
   HEAP32[$16>>2] = $15;
   $17 = (($c$074) + 1)|0;
   $18 = ($17>>>0)<($9>>>0);
   if ($18) {
    $c$074 = $17;
   } else {
    break;
   }
  }
  $$pr = HEAP32[132272>>2]|0;
  $10 = ($$pr>>>0)>(1);
  if ($10) {
   $11 = HEAP32[132272>>2]|0;
   $c$170 = 1;$kc$069 = 0;
   while(1) {
    $19 = (132048 + ($kc$069<<2)|0);
    $20 = +HEAPF32[$19>>2];
    $21 = (132048 + ($c$170<<2)|0);
    $22 = +HEAPF32[$21>>2];
    $23 = $20 < $22;
    $kc$1 = $23 ? $c$170 : $kc$069;
    $24 = (($c$170) + 1)|0;
    $25 = ($24>>>0)<($11>>>0);
    if ($25) {
     $c$170 = $24;$kc$069 = $kc$1;
    } else {
     $kc$0$lcssa = $kc$1;
     break;
    }
   }
  } else {
   $kc$0$lcssa = 0;
  }
 }
 $26 = HEAP16[132080>>1]|0;
 $27 = $26&65535;
 $28 = HEAP16[132096>>1]|0;
 $29 = $28&65535;
 $30 = 4 >>> $29;
 $31 = (($27>>>0) / ($30>>>0))&-1;
 $32 = HEAP16[132088>>1]|0;
 $33 = $32&65535;
 $34 = (($33>>>0) / ($30>>>0))&-1;
 $35 = $34 << 2;
 $36 = (_calloc($31,$35)|0);
 _merror($36,454000);
 $37 = HEAP32[132272>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  _free($36);
  STACKTOP = sp;return;
 }
 $39 = HEAP32[132272>>2]|0;
 $40 = Math_imul($34, $31)|0;
 $41 = $40 << 2;
 $42 = ($31|0)==(0);
 $43 = 32.0 / $6;
 $44 = (~~(($43)));
 $45 = ($31|0)==(0);
 $46 = ($34|0)==(0);
 $47 = ($40|0)==(0);
 $48 = ($31|0)==(0);
 $49 = ($34|0)==(0);
 $50 = HEAP32[132112>>2]|0;
 $51 = ($34|0)==(0);
 $52 = $32&65535;
 $53 = (($52>>>0) / ($30>>>0))&-1;
 $54 = $26&65535;
 $55 = (($54>>>0) / ($30>>>0))&-1;
 $56 = Math_imul($53, $55)|0;
 $57 = (($56) + -1)|0;
 $58 = $32&65535;
 $59 = (($58>>>0) / ($30>>>0))&-1;
 $60 = $26&65535;
 $61 = (($60>>>0) / ($30>>>0))&-1;
 $62 = Math_imul($59, $61)|0;
 $63 = (($62) + -1)|0;
 $c$262 = 0;
 while(1) {
  $64 = ($c$262|0)==($kc$0$lcssa|0);
  if (!($64)) {
   _memset(($36|0),0,($41|0))|0;
   if ($42) {
    $spread$0 = $44;
   } else {
    $65 = HEAP16[132096>>1]|0;
    $66 = $65&65535;
    $67 = 4 >>> $66;
    $68 = $65&65535;
    $69 = 4 >>> $68;
    $70 = $65&65535;
    $71 = 4 >>> $70;
    $72 = HEAP16[132096>>1]|0;
    $73 = $72&65535;
    $74 = 4 >>> $73;
    $75 = HEAP16[132088>>1]|0;
    $76 = $75&65535;
    $77 = (($hsat) + ($c$262<<2)|0);
    $78 = $72&65535;
    $79 = 4 >>> $78;
    $mrow$029 = 0;
    while(1) {
     if (!($51)) {
      $80 = Math_imul($67, $mrow$029)|0;
      $81 = (($mrow$029) + 1)|0;
      $82 = Math_imul($69, $81)|0;
      $83 = ($80>>>0)<($82>>>0);
      $84 = Math_imul($mrow$029, $34)|0;
      $85 = Math_imul($74, $81)|0;
      $mcol$026 = 0;
      while(1) {
       if ($83) {
        $86 = (($mcol$026) + 1)|0;
        $87 = Math_imul($71, $86)|0;
        $88 = Math_imul($79, $86)|0;
        $90 = $69;$count$015 = 0;$row$016 = $80;$sum$018 = 0.0;$wgt$017 = 0.0;
        while(1) {
         $89 = Math_imul($90, $mcol$026)|0;
         $91 = ($89>>>0)<($87>>>0);
         if ($91) {
          $92 = Math_imul($76, $row$016)|0;
          $93 = HEAP32[$77>>2]|0;
          $col$010 = $89;$count$19 = $count$015;$sum$112 = $sum$018;$wgt$111 = $wgt$017;
          while(1) {
           $94 = (($92) + ($col$010))|0;
           $95 = ((($50) + ($94<<3)|0) + ($c$262<<1)|0);
           $96 = HEAP16[$95>>1]|0;
           $97 = $96&65535;
           $98 = (($97|0) / ($93|0))&-1;
           $99 = ($98|0)==(1);
           do {
            if ($99) {
             $100 = ((($50) + ($94<<3)|0) + ($kc$0$lcssa<<1)|0);
             $101 = HEAP16[$100>>1]|0;
             $102 = ($101&65535)>(24000);
             if (!($102)) {
              $count$2 = $count$19;$sum$2 = $sum$112;$wgt$2 = $wgt$111;
              break;
             }
             $103 = $101&65535;
             $104 = (+($97|0));
             $105 = $sum$112 + $104;
             $106 = (+($103|0));
             $107 = $wgt$111 + $106;
             $108 = (($count$19) + 1)|0;
             $count$2 = $108;$sum$2 = $105;$wgt$2 = $107;
            } else {
             $count$2 = $count$19;$sum$2 = $sum$112;$wgt$2 = $wgt$111;
            }
           } while(0);
           $109 = (($col$010) + 1)|0;
           $110 = ($109>>>0)<($88>>>0);
           if ($110) {
            $col$010 = $109;$count$19 = $count$2;$sum$112 = $sum$2;$wgt$111 = $wgt$2;
           } else {
            $count$1$lcssa = $count$2;$sum$1$lcssa = $sum$2;$wgt$1$lcssa = $wgt$2;
            break;
           }
          }
         } else {
          $count$1$lcssa = $count$015;$sum$1$lcssa = $sum$018;$wgt$1$lcssa = $wgt$017;
         }
         $111 = (($row$016) + 1)|0;
         $112 = ($111>>>0)<($85>>>0);
         if ($112) {
          $90 = $74;$count$015 = $count$1$lcssa;$row$016 = $111;$sum$018 = $sum$1$lcssa;$wgt$017 = $wgt$1$lcssa;
         } else {
          $$lcssa = $74;$count$0$lcssa = $count$1$lcssa;$sum$0$lcssa = $sum$1$lcssa;$wgt$0$lcssa = $wgt$1$lcssa;
          break;
         }
        }
       } else {
        $$lcssa = $69;$count$0$lcssa = 0;$sum$0$lcssa = 0.0;$wgt$0$lcssa = 0.0;
       }
       $113 = Math_imul($$lcssa, $$lcssa)|0;
       $114 = ($count$0$lcssa|0)==($113|0);
       if ($114) {
        $115 = $sum$0$lcssa / $wgt$0$lcssa;
        $116 = (($mcol$026) + ($84))|0;
        $117 = (($36) + ($116<<2)|0);
        HEAPF32[$117>>2] = $115;
       }
       $118 = (($mcol$026) + 1)|0;
       $119 = ($118>>>0)<($34>>>0);
       if ($119) {
        $mcol$026 = $118;
       } else {
        break;
       }
      }
     }
     $120 = (($mrow$029) + 1)|0;
     $121 = ($120>>>0)<($31>>>0);
     if ($121) {
      $mrow$029 = $120;
     } else {
      $spread$0 = $44;
      break;
     }
    }
   }
   while(1) {
    $122 = (($spread$0) + -1)|0;
    $123 = ($spread$0|0)==(0);
    if ($123) {
     label = 47;
     break;
    }
    if (!($45)) {
     $mrow$138 = 0;
     while(1) {
      if (!($46)) {
       $124 = Math_imul($mrow$138, $34)|0;
       $mcol$134 = 0;
       while(1) {
        $125 = (($mcol$134) + ($124))|0;
        $126 = (($36) + ($125<<2)|0);
        $127 = +HEAPF32[$126>>2];
        $128 = $127 != 0.0;
        if (!($128)) {
         $count$331 = 0;$d$032 = 0;$sum$333 = 0.0;
         while(1) {
          $129 = (453952 + ($d$032<<1)|0);
          $130 = HEAP8[$129>>0]|0;
          $131 = $130 << 24 >> 24;
          $132 = (($131) + ($mrow$138))|0;
          $133 = ((453952 + ($d$032<<1)|0) + 1|0);
          $134 = HEAP8[$133>>0]|0;
          $135 = $134 << 24 >> 24;
          $136 = (($135) + ($mcol$134))|0;
          $137 = ($132>>>0)<($31>>>0);
          $138 = ($136>>>0)<($34>>>0);
          $or$cond = $137 & $138;
          do {
           if ($or$cond) {
            $139 = Math_imul($132, $34)|0;
            $140 = (($139) + ($136))|0;
            $141 = (($36) + ($140<<2)|0);
            $142 = +HEAPF32[$141>>2];
            $143 = $142 > 0.0;
            if (!($143)) {
             $count$4 = $count$331;$sum$4 = $sum$333;
             break;
            }
            $144 = $d$032 & 1;
            $145 = (($144) + 1)|0;
            $146 = (+($145>>>0));
            $147 = $146 * $142;
            $148 = $sum$333 + $147;
            $149 = (($145) + ($count$331))|0;
            $count$4 = $149;$sum$4 = $148;
           } else {
            $count$4 = $count$331;$sum$4 = $sum$333;
           }
          } while(0);
          $150 = (($d$032) + 1)|0;
          $exitcond = ($150|0)==(8);
          if ($exitcond) {
           $count$4$lcssa = $count$4;$sum$4$lcssa = $sum$4;
           break;
          } else {
           $count$331 = $count$4;$d$032 = $150;$sum$333 = $sum$4;
          }
         }
         $151 = ($count$4$lcssa|0)>(3);
         if ($151) {
          $152 = $6 + $sum$4$lcssa;
          $153 = -$152;
          $154 = (+($count$4$lcssa|0));
          $155 = $6 + $154;
          $156 = $153 / $155;
          HEAPF32[$126>>2] = $156;
         }
        }
        $157 = (($mcol$134) + 1)|0;
        $158 = ($157>>>0)<($34>>>0);
        if ($158) {
         $mcol$134 = $157;
        } else {
         break;
        }
       }
      }
      $159 = (($mrow$138) + 1)|0;
      $160 = ($159>>>0)<($31>>>0);
      if ($160) {
       $mrow$138 = $159;
      } else {
       break;
      }
     }
    }
    $cond = ($40|0)==(0);
    if ($cond) {
     break;
    } else {
     $change$040 = 0;$i$041 = 0;
    }
    while(1) {
     $161 = (($36) + ($i$041<<2)|0);
     $162 = +HEAPF32[$161>>2];
     $163 = $162 < 0.0;
     if ($163) {
      $164 = -$162;
      HEAPF32[$161>>2] = $164;
      $change$1 = 1;
     } else {
      $change$1 = $change$040;
     }
     $165 = (($i$041) + 1)|0;
     $exitcond77 = ($i$041|0)==($57|0);
     if ($exitcond77) {
      $change$1$lcssa = $change$1;
      break;
     } else {
      $change$040 = $change$1;$i$041 = $165;
     }
    }
    $166 = ($change$1$lcssa|0)==(0);
    if ($166) {
     label = 47;
     break;
    } else {
     $spread$0 = $122;
    }
   }
   if ((label|0) == 47) {
    label = 0;
    if (!($47)) {
     $i$145 = 0;
     while(1) {
      $168 = (($36) + ($i$145<<2)|0);
      $169 = +HEAPF32[$168>>2];
      $170 = $169 == 0.0;
      if ($170) {
       HEAPF32[$168>>2] = 1.0;
      }
      $171 = (($i$145) + 1)|0;
      $exitcond78 = ($i$145|0)==($63|0);
      if ($exitcond78) {
       break;
      } else {
       $i$145 = $171;
      }
     }
    }
   }
   if (!($48)) {
    $167 = (($hsat) + ($c$262<<2)|0);
    $mrow$260 = 0;
    while(1) {
     if (!($49)) {
      $172 = (($mrow$260) + 1)|0;
      $173 = Math_imul($mrow$260, $34)|0;
      $mcol$256 = 0;
      while(1) {
       $174 = HEAP16[132096>>1]|0;
       $175 = $174&65535;
       $176 = 4 >>> $175;
       $177 = Math_imul($176, $mrow$260)|0;
       $178 = $174&65535;
       $179 = 4 >>> $178;
       $180 = Math_imul($179, $172)|0;
       $181 = ($177>>>0)<($180>>>0);
       if ($181) {
        $182 = (($mcol$256) + 1)|0;
        $183 = (($mcol$256) + ($173))|0;
        $184 = (($36) + ($183<<2)|0);
        $186 = $179;$row$151 = $177;
        while(1) {
         $185 = Math_imul($186, $mcol$256)|0;
         $187 = HEAP16[132096>>1]|0;
         $188 = $187&65535;
         $189 = 4 >>> $188;
         $190 = Math_imul($189, $182)|0;
         $191 = ($185>>>0)<($190>>>0);
         if ($191) {
          $192 = HEAP32[$167>>2]|0;
          $col$147 = $185;
          while(1) {
           $193 = HEAP16[132088>>1]|0;
           $194 = $193&65535;
           $195 = Math_imul($194, $row$151)|0;
           $196 = (($195) + ($col$147))|0;
           $197 = ((($50) + ($196<<3)|0) + ($c$262<<1)|0);
           $198 = HEAP16[$197>>1]|0;
           $199 = $198&65535;
           $200 = (($199|0) / ($192|0))&-1;
           $201 = ($200|0)>(1);
           do {
            if ($201) {
             $202 = ((($50) + ($196<<3)|0) + ($kc$0$lcssa<<1)|0);
             $203 = HEAP16[$202>>1]|0;
             $204 = $203&65535;
             $205 = (+($204|0));
             $206 = +HEAPF32[$184>>2];
             $207 = $206 * $205;
             $208 = (~~(($207)));
             $209 = ($199|0)<($208|0);
             if (!($209)) {
              break;
             }
             $210 = ($208|0)<(65535);
             $211 = $210 ? $208 : 65535;
             $212 = ($211|0)<(0);
             $213 = $211&65535;
             $214 = $212 ? 0 : $213;
             HEAP16[$197>>1] = $214;
            }
           } while(0);
           $215 = (($col$147) + 1)|0;
           $216 = HEAP16[132096>>1]|0;
           $217 = $216&65535;
           $218 = 4 >>> $217;
           $219 = Math_imul($218, $182)|0;
           $220 = ($215>>>0)<($219>>>0);
           if ($220) {
            $col$147 = $215;
           } else {
            break;
           }
          }
         }
         $221 = (($row$151) + 1)|0;
         $222 = HEAP16[132096>>1]|0;
         $223 = $222&65535;
         $224 = 4 >>> $223;
         $225 = Math_imul($224, $172)|0;
         $226 = ($221>>>0)<($225>>>0);
         if ($226) {
          $186 = $224;$row$151 = $221;
         } else {
          break;
         }
        }
       }
       $227 = (($mcol$256) + 1)|0;
       $228 = ($227>>>0)<($34>>>0);
       if ($228) {
        $mcol$256 = $227;
       } else {
        break;
       }
      }
     }
     $229 = (($mrow$260) + 1)|0;
     $230 = ($229>>>0)<($31>>>0);
     if ($230) {
      $mrow$260 = $229;
     } else {
      break;
     }
    }
   }
  }
  $231 = (($c$262) + 1)|0;
  $232 = ($231>>>0)<($39>>>0);
  if ($232) {
   $c$262 = $231;
  } else {
   break;
  }
 }
 _free($36);
 STACKTOP = sp;return;
}
function _tiff_get($base,$tag,$type,$len,$save) {
 $base = $base|0;
 $tag = $tag|0;
 $type = $type|0;
 $len = $len|0;
 $save = $save|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_get2()|0);
 $1 = $0&65535;
 HEAP32[$tag>>2] = $1;
 $2 = (_get2()|0);
 $3 = $2&65535;
 HEAP32[$type>>2] = $3;
 $4 = (_get4()|0);
 HEAP32[$len>>2] = $4;
 $5 = HEAP32[864>>2]|0;
 $6 = (_ftell(($5|0))|0);
 $7 = (($6) + 4)|0;
 HEAP32[$save>>2] = $7;
 $8 = HEAP32[$len>>2]|0;
 $9 = HEAP32[$type>>2]|0;
 $10 = ($9>>>0)<(14);
 $$ = $10 ? $9 : 0;
 $11 = (454024 + ($$)|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = (($13) + -48)|0;
 $15 = Math_imul($14, $8)|0;
 $16 = ($15>>>0)>(4);
 if (!($16)) {
  return;
 }
 $17 = HEAP32[864>>2]|0;
 $18 = (_get4()|0);
 $19 = (($18) + ($base))|0;
 (_fseek(($17|0),($19|0),0)|0);
 return;
}
function _parse_thumb_note($base,$toff,$tlen) {
 $base = $base|0;
 $toff = $toff|0;
 $tlen = $tlen|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tag = sp + 12|0;
 $type = sp + 8|0;
 $len = sp + 4|0;
 $save = sp;
 $0 = (_get2()|0);
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $0&65535;
 $$in = $2;
 while(1) {
  $3 = (($$in) + -1)|0;
  _tiff_get($base,$tag,$type,$len,$save);
  $4 = HEAP32[$tag>>2]|0;
  $5 = ($4|0)==($toff|0);
  if ($5) {
   $6 = (_get4()|0);
   $7 = (($6) + ($base))|0;
   HEAP32[454040>>2] = $7;
  }
  $8 = HEAP32[$tag>>2]|0;
  $9 = ($8|0)==($tlen|0);
  if ($9) {
   $10 = (_get4()|0);
   HEAP32[133768>>2] = $10;
  }
  $11 = HEAP32[864>>2]|0;
  $12 = HEAP32[$save>>2]|0;
  (_fseek(($11|0),($12|0),0)|0);
  $13 = ($3|0)==(0);
  if ($13) {
   break;
  } else {
   $$in = $3;
  }
 }
 STACKTOP = sp;return;
}
function _parse_makernote($base,$uptag) {
 $base = $base|0;
 $uptag = $uptag|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$cmp = 0, $$cmp166 = 0, $$in = 0, $$lcssa245 = 0, $$mask = 0, $$mux = 0, $$not = 0, $$off = 0, $$off102 = 0, $$off102165 = 0, $$off126 = 0, $$off127 = 0, $$pr = 0, $$pr111$pr$pr = 0, $$pr113 = 0, $$pr114 = 0, $$pr115 = 0;
 var $$pr117 = 0, $$pr118 = 0, $$pr120 = 0, $$pr122 = 0, $$sum$1 = 0, $$sum$2 = 0, $$sum$3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0;
 var $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0.0;
 var $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0.0, $395 = 0, $396 = 0.0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0.0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0.0, $418 = 0, $419 = 0.0, $42 = 0.0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0.0, $432 = 0, $433 = 0.0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0.0, $591 = 0.0, $592 = 0.0, $593 = 0, $594 = 0, $595 = 0.0, $596 = 0.0;
 var $597 = 0.0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0.0, $611 = 0.0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0.0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0.0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0.0;
 var $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0, $682 = 0.0, $683 = 0.0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0, $701 = 0.0, $702 = 0.0, $703 = 0.0;
 var $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0, $721 = 0.0;
 var $722 = 0.0, $723 = 0.0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0, $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0.0, $732 = 0, $733 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $brmerge = 0, $buf = 0, $buf97 = 0, $c$2161 = 0, $cj$0179 = 0, $ck$0180 = 0, $exitcond209 = 0, $exp2 = 0.0, $exp2103 = 0.0, $exp2104 = 0.0, $i$0$lcssa = 0, $i$0162 = 0, $i$1$be = 0, $i$3178 = 0, $isdigit = 0, $isdigittmp = 0, $len = 0, $offset$0184 = 0, $or$cond = 0;
 var $or$cond105 = 0, $or$cond109 = 0, $or$cond11 = 0, $or$cond110 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond26 = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $or$cond34 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45125 = 0, $or$cond49 = 0;
 var $or$cond51 = 0, $or$cond53 = 0, $or$cond57 = 0, $or$cond59 = 0, $or$cond61 = 0, $or$cond63 = 0, $or$cond65 = 0, $or$cond67 = 0, $or$cond69 = 0, $or$cond7 = 0, $or$cond71 = 0, $or$cond73 = 0, $or$cond75 = 0, $or$cond77 = 0, $or$cond81 = 0, $or$cond83 = 0, $or$cond85 = 0, $or$cond87 = 0, $or$cond9 = 0, $or$cond93 = 0;
 var $or$cond97 = 0, $or$cond99 = 0, $or$cond99158 = 0, $save = 0, $serial$0195 = 0, $serial$1167 = 0, $serial$2 = 0, $serial$3 = 0, $serial$4 = 0, $serial$5 = 0, $serial$6 = 0, $serial$7 = 0, $tag = 0, $type = 0, $ver97$0194 = 0, $ver97$2 = 0, $ver97$3 = 0, $ver97$4 = 0, $ver97$5 = 0, $ver97$6 = 0;
 var $ver97$7 = 0, $wb = 0, $wbi$0196 = 0, $wbi$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $tag = sp + 28|0;
 $type = sp + 24|0;
 $len = sp + 20|0;
 $save = sp + 16|0;
 $wb = sp;
 $buf97 = sp + 44|0;
 $buf = sp + 32|0;
 ;HEAP32[$wb+0>>2]=0|0;HEAP32[$wb+4>>2]=0|0;HEAP32[$wb+8>>2]=0|0;HEAP32[$wb+12>>2]=0|0;
 $0 = HEAP16[928>>1]|0;
 $1 = (_strcmp(133624,454560)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[864>>2]|0;
 (_fread(($buf|0),1,10,($3|0))|0);
 $4 = (_strncmp($buf,454568,3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (_strncmp($buf,454576,3)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (_strncmp($buf,454584,4)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (_strncmp($buf,454592,4)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (_strncmp($buf,454600,2)|0);
 $13 = ($12|0)==(0);
 L16: do {
  if ($13) {
   label = 8;
  } else {
   $14 = (_strncmp($buf,454608,3)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    label = 8;
   } else {
    $52 = (_strcmp($buf,454616)|0);
    $53 = ($52|0)==(0);
    L19: do {
     if ($53) {
      $54 = HEAP32[864>>2]|0;
      $55 = (_ftell(($54|0))|0);
      $56 = (_get2()|0);
      HEAP16[928>>1] = $56;
      $57 = (_get2()|0);
      $58 = ($57<<16>>16)==(42);
      if (!($58)) {
       break L16;
      }
      $59 = (_get4()|0);
      $60 = HEAP32[864>>2]|0;
      $61 = (($59) + -8)|0;
      (_fseek(($60|0),($61|0),1)|0);
      $$1 = $55;
     } else {
      $62 = (_strcmp($buf,454624)|0);
      $63 = ($62|0)==(0);
      if (!($63)) {
       $64 = (_strcmp($buf,454632)|0);
       $65 = ($64|0)==(0);
       if (!($65)) {
        $73 = (_strncmp($buf,454640,4)|0);
        $74 = ($73|0)==(0);
        do {
         if ($74) {
          $$0 = $base;
         } else {
          $75 = (_strcmp($buf,454648)|0);
          $76 = ($75|0)==(0);
          if ($76) {
           $$0 = $base;
          } else {
           $77 = (_strncmp($buf,454664,8)|0);
           $78 = ($77|0)==(0);
           if ($78) {
            $79 = HEAP32[864>>2]|0;
            $80 = (_ftell(($79|0))|0);
            $81 = (($80) + -10)|0;
            $$0 = $81;
            break;
           }
           $83 = (_strcmp($buf,454680)|0);
           $84 = ($83|0)==(0);
           do {
            if (!($84)) {
             $85 = (_strcmp($buf,454688)|0);
             $86 = ($85|0)==(0);
             if (!($86)) {
              $87 = (_strcmp($buf,454696)|0);
              $88 = ($87|0)==(0);
              if ($88) {
               break;
              }
              $89 = (_strcmp($buf,454704)|0);
              $90 = ($89|0)==(0);
              if ($90) {
               break;
              }
              $92 = (_strcmp($buf,454712)|0);
              $93 = ($92|0)==(0);
              do {
               if (!($93)) {
                $94 = (_strcmp($buf,454720)|0);
                $95 = ($94|0)==(0);
                if ($95) {
                 break;
                }
                $97 = HEAP32[864>>2]|0;
                (_fseek(($97|0),-10,1)|0);
                $98 = (_strncmp(133624,454728,7)|0);
                $99 = ($98|0)==(0);
                if (!($99)) {
                 $$1 = $base;
                 break L19;
                }
                $100 = HEAP32[864>>2]|0;
                $101 = (_ftell(($100|0))|0);
                $$1 = $101;
                break L19;
               }
              } while(0);
              $96 = HEAP32[864>>2]|0;
              (_fseek(($96|0),-4,1)|0);
              $$1 = $base;
              break L19;
             }
            }
           } while(0);
           $91 = HEAP32[864>>2]|0;
           (_fseek(($91|0),-2,1)|0);
           $$1 = $base;
           break L19;
          }
         }
        } while(0);
        HEAP16[928>>1] = 18761;
        $82 = HEAP32[864>>2]|0;
        (_fseek(($82|0),2,1)|0);
        $$1 = $$0;
        break;
       }
      }
      $66 = HEAP32[864>>2]|0;
      $67 = (_ftell(($66|0))|0);
      $68 = (($67) + -10)|0;
      $69 = HEAP32[864>>2]|0;
      (_fseek(($69|0),-2,1)|0);
      $70 = (_get2()|0);
      HEAP16[928>>1] = $70;
      $71 = HEAP8[$buf>>0]|0;
      $72 = ($71<<24>>24)==(79);
      if ($72) {
       (_get2()|0);
       $$1 = $68;
      } else {
       $$1 = $68;
      }
     }
    } while(0);
    $102 = (_get2()|0);
    $103 = ($102&65535)>(1000);
    if ($103) {
     STACKTOP = sp;return;
    }
    $104 = HEAP16[928>>1]|0;
    $105 = ($102<<16>>16)==(0);
    if (!($105)) {
     $106 = $102&65535;
     $107 = $uptag << 16;
     $108 = (($buf) + 4|0);
     $$in = $106;$serial$0195 = 0;$ver97$0194 = 0;$wbi$0196 = 0;
     while(1) {
      $109 = (($$in) + -1)|0;
      HEAP16[928>>1] = $104;
      _tiff_get($$1,$tag,$type,$len,$save);
      $110 = HEAP32[$tag>>2]|0;
      $111 = $110 | $107;
      HEAP32[$tag>>2] = $111;
      $112 = ($111|0)==(2);
      if ($112) {
       $113 = (_strstr(133624,454736)|0);
       $114 = ($113|0)==(0|0);
       $115 = +HEAPF32[454744>>2];
       $116 = $115 != 0.0;
       $or$cond = $114 | $116;
       if (!($or$cond)) {
        (_get2()|0);
        $117 = (_get2()|0);
        $118 = (+($117&65535));
        HEAPF32[454744>>2] = $118;
       }
      }
      $119 = HEAP32[$tag>>2]|0;
      $120 = ($119|0)==(4);
      $121 = HEAP32[$len>>2]|0;
      $$off = (($121) + -27)|0;
      $122 = ($$off>>>0)<(8);
      $123 = $120 & $122;
      if ($123) {
       (_get4()|0);
       $124 = (_get2()|0);
       $125 = ($124<<16>>16)==(32767);
       $126 = +HEAPF32[454744>>2];
       $127 = $126 != 0.0;
       $or$cond7 = $125 | $127;
       if (!($or$cond7)) {
        $128 = (+($124&65535));
        $129 = $128 * 0.03125;
        $130 = $129 + -4.0;
        $exp2 = (+_exp2($130));
        $131 = $exp2 * 50.0;
        $132 = $131;
        HEAPF32[454744>>2] = $132;
       }
       (_get2()|0);
       $133 = (_get2()|0);
       $134 = ($133<<16>>16)==(32767);
       $135 = +HEAPF32[454752>>2];
       $136 = $135 != 0.0;
       $or$cond9 = $134 | $136;
       if (!($or$cond9)) {
        $137 = (+($133&65535));
        $138 = $137 * 0.015625;
        $exp2103 = (+_exp2($138));
        $139 = $exp2103;
        HEAPF32[454752>>2] = $139;
       }
       $140 = (_get2()|0);
       $141 = ($140<<16>>16)==(-1);
       $142 = +HEAPF32[454760>>2];
       $143 = $142 != 0.0;
       $or$cond11 = $141 | $143;
       if (!($or$cond11)) {
        $144 = (+($140<<16>>16));
        $145 = $144 * -0.03125;
        $exp2104 = (+_exp2($145));
        $146 = $exp2104;
        HEAPF32[454760>>2] = $146;
       }
       (_get2()|0);
       $147 = (_get2()|0);
       $148 = $147&65535;
       (_get2()|0);
       $149 = (_get2()|0);
       $150 = $149&65535;
       HEAP32[454768>>2] = $150;
       $wbi$1 = $148;
      } else {
       $wbi$1 = $wbi$0196;
      }
      $151 = HEAP32[$tag>>2]|0;
      do {
       if ((($151|0) == 4) | (($151|0) == 276)) {
        $152 = (_strncmp(133624,454776,6)|0);
        $153 = ($152|0)==(0);
        if ($153) {
         $154 = HEAP32[864>>2]|0;
         $155 = HEAP32[$tag>>2]|0;
         $156 = ($155|0)==(4);
         $157 = $156 ? 140 : 160;
         (_fseek(($154|0),($157|0),1)|0);
         $158 = (_get2()|0);
         $159 = $158&65535;
         if ((($159|0) == 72)) {
          HEAP32[454784>>2] = 0;
          break;
         } else if ((($159|0) == 76)) {
          HEAP32[454784>>2] = 6;
          break;
         } else if ((($159|0) == 82)) {
          HEAP32[454784>>2] = 5;
          break;
         } else {
          break;
         }
        }
       }
      } while(0);
      $160 = HEAP32[$tag>>2]|0;
      $161 = ($160|0)==(7);
      $162 = HEAP32[$type>>2]|0;
      $163 = ($162|0)==(2);
      $or$cond15 = $161 & $163;
      $164 = HEAP32[$len>>2]|0;
      $165 = ($164>>>0)>(20);
      $or$cond17 = $or$cond15 & $165;
      if ($or$cond17) {
       $166 = HEAP32[864>>2]|0;
       (_fgets((133112|0),64,($166|0))|0);
      }
      $167 = HEAP32[$tag>>2]|0;
      $168 = ($167|0)==(8);
      $169 = HEAP32[$type>>2]|0;
      $170 = ($169|0)==(4);
      $or$cond19 = $168 & $170;
      if ($or$cond19) {
       $171 = (_get4()|0);
       HEAP32[454768>>2] = $171;
       $$pr = HEAP32[$tag>>2]|0;
       $172 = $$pr;
      } else {
       $172 = $167;
      }
      $173 = ($172|0)==(9);
      if ($173) {
       $174 = (_strcmp(133624,454792)|0);
       $175 = ($174|0)==(0);
       if ($175) {
        $176 = HEAP32[864>>2]|0;
        (_fread((454800|0),64,1,($176|0))|0);
       }
      }
      $177 = HEAP32[$tag>>2]|0;
      $178 = ($177|0)==(12);
      $179 = HEAP32[$len>>2]|0;
      $180 = ($179|0)==(4);
      $or$cond21 = $178 & $180;
      if ($or$cond21) {
       $181 = HEAP32[$type>>2]|0;
       $182 = (+_getreal($181));
       $183 = $182;
       HEAPF32[133480>>2] = $183;
       $184 = (+_getreal($181));
       $185 = $184;
       HEAPF32[((133480 + 8|0))>>2] = $185;
       $186 = (+_getreal($181));
       $187 = $186;
       HEAPF32[((133480 + 4|0))>>2] = $187;
      }
      $188 = HEAP32[$tag>>2]|0;
      $189 = ($188|0)==(13);
      $190 = HEAP32[$type>>2]|0;
      $191 = ($190|0)==(7);
      $or$cond23 = $189 & $191;
      do {
       if ($or$cond23) {
        $192 = (_get2()|0);
        $193 = ($192<<16>>16)==(-21846);
        if (!($193)) {
         break;
        }
        $194 = HEAP32[$len>>2]|0;
        $195 = ($194>>>0)>(2);
        if ($195) {
         $196 = HEAP32[$len>>2]|0;
         $c$2161 = 2;$i$0162 = 2;
         while(1) {
          $204 = $c$2161 << 8;
          $205 = HEAP32[864>>2]|0;
          $206 = (_getc_unlocked(($205|0))|0);
          $207 = $206 | $204;
          $208 = (($i$0162) + 1)|0;
          $209 = $207 & 65535;
          $210 = ($209|0)!=(48059);
          $211 = ($208>>>0)<($196>>>0);
          $or$cond109 = $210 & $211;
          if ($or$cond109) {
           $c$2161 = $207;$i$0162 = $208;
          } else {
           $i$0$lcssa = $208;
           break;
          }
         }
        } else {
         $i$0$lcssa = 2;
        }
        $197 = (($i$0$lcssa) + 4)|0;
        $198 = HEAP32[$len>>2]|0;
        $199 = (($198) + -5)|0;
        $200 = ($197>>>0)<($199>>>0);
        if (!($200)) {
         break;
        }
        $201 = HEAP32[$len>>2]|0;
        $202 = ($201|0)==(0);
        $203 = (($201) + -5)|0;
        $213 = $197;
        while(1) {
         $212 = (_get4()|0);
         $$not = ($212|0)!=(257);
         $brmerge = $$not | $202;
         $$mux = $$not ? $213 : 0;
         do {
          if ($brmerge) {
           $i$1$be = $$mux;
          } else {
           (_get4()|0);
           $214 = HEAP32[864>>2]|0;
           $215 = (_getc_unlocked(($214|0))|0);
           $216 = ($215>>>0)<(3);
           if (!($216)) {
            $i$1$be = $201;
            break;
           }
           $217 = (454864 + ($215)|0);
           $218 = HEAP8[$217>>0]|0;
           $219 = $218 << 24 >> 24;
           $220 = (($219) + -48)|0;
           HEAP32[454784>>2] = $220;
           $i$1$be = $201;
          }
         } while(0);
         $221 = (($i$1$be) + 4)|0;
         $222 = ($221>>>0)<($203>>>0);
         if ($222) {
          $213 = $221;
         } else {
          break;
         }
        }
       }
      } while(0);
      $223 = HEAP32[$tag>>2]|0;
      $224 = ($223|0)==(16);
      $225 = HEAP32[$type>>2]|0;
      $226 = ($225|0)==(4);
      $or$cond26 = $224 & $226;
      if ($or$cond26) {
       $227 = (_get4()|0);
       HEAP32[133192>>2] = $227;
      }
      $228 = HEAP32[$tag>>2]|0;
      $229 = ($228|0)==(17);
      $230 = HEAP32[133208>>2]|0;
      $231 = ($230|0)!=(0);
      $or$cond28 = $229 & $231;
      do {
       if ($or$cond28) {
        $232 = (_strncmp(133624,454736,5)|0);
        $233 = ($232|0)==(0);
        if (!($233)) {
         break;
        }
        $234 = HEAP32[864>>2]|0;
        $235 = (_get4()|0);
        $236 = (($235) + ($$1))|0;
        (_fseek(($234|0),($236|0),0)|0);
        (_parse_tiff_ifd($$1)|0);
       }
      } while(0);
      $237 = HEAP32[$tag>>2]|0;
      $238 = ($237|0)==(20);
      $239 = HEAP32[$type>>2]|0;
      $240 = ($239|0)==(7);
      $or$cond30 = $238 & $240;
      do {
       if ($or$cond30) {
        $241 = HEAP32[$len>>2]|0;
        $242 = ($241|0)==(2560);
        $243 = HEAP32[864>>2]|0;
        if ($242) {
         (_fseek(($243|0),1248,1)|0);
         $serial$3 = $serial$0195;$ver97$3 = $ver97$0194;
         label = 165;
         break;
        }
        (_fread(($buf|0),1,10,($243|0))|0);
        $244 = (_strncmp($buf,454872,4)|0);
        $245 = ($244|0)==(0);
        if (!($245)) {
         label = 87;
         break;
        }
        $246 = HEAP32[864>>2]|0;
        $247 = (_strcmp($108,454880)|0);
        $248 = ($247|0)!=(0);
        $249 = $248 ? 46 : 1546;
        (_fseek(($246|0),($249|0),1)|0);
        $250 = (_get4()|0);
        $251 = $250 << 2;
        $252 = (+($251>>>0));
        HEAPF32[133480>>2] = $252;
        $253 = (_get4()|0);
        $254 = (_get4()|0);
        $255 = (($254) + ($253))|0;
        $256 = (+($255>>>0));
        HEAPF32[((133480 + 4|0))>>2] = $256;
        $257 = (_get4()|0);
        $258 = $257 << 2;
        $259 = (+($258>>>0));
        HEAPF32[((133480 + 8|0))>>2] = $259;
        label = 87;
       } else {
        label = 87;
       }
      } while(0);
      L119: do {
       if ((label|0) == 87) {
        label = 0;
        $260 = HEAP32[$tag>>2]|0;
        $261 = ($260|0)==(21);
        $262 = HEAP32[$type>>2]|0;
        $263 = ($262|0)==(2);
        $or$cond32 = $261 & $263;
        $264 = HEAP32[133208>>2]|0;
        $265 = ($264|0)!=(0);
        $or$cond34 = $or$cond32 & $265;
        if ($or$cond34) {
         $266 = HEAP32[864>>2]|0;
         (_fread((133688|0),64,1,($266|0))|0);
        }
        $267 = (_strstr(133624,454888)|0);
        $268 = ($267|0)==(0|0);
        $$pr111$pr$pr = HEAP32[$tag>>2]|0;
        do {
         if ($268) {
          $269 = ($$pr111$pr$pr|0)==(29);
          if ($269) {
           label = 94;
          } else {
           $serial$2 = $serial$0195;
          }
         } else {
          if ((($$pr111$pr$pr|0) == 27)) {
           HEAP32[$tag>>2] = 4120;
           $serial$2 = $serial$0195;
           break;
          } else if ((($$pr111$pr$pr|0) == 28)) {
           HEAP32[$tag>>2] = 4119;
           $serial$2 = $serial$0195;
           break;
          } else if ((($$pr111$pr$pr|0) == 29)) {
           label = 94;
           break;
          } else {
           $serial$2 = $serial$0195;
           break;
          }
         }
        } while(0);
        do {
         if ((label|0) == 94) {
          label = 0;
          $270 = HEAP32[864>>2]|0;
          $271 = (_getc_unlocked(($270|0))|0);
          $$off102165 = (($271) + 1)|0;
          $$cmp166 = ($$off102165>>>0)>(1);
          if ($$cmp166) {
           $273 = $271;$serial$1167 = $serial$0195;
          } else {
           $serial$2 = $serial$0195;
           break;
          }
          while(1) {
           $272 = ($serial$1167*10)|0;
           $isdigittmp = (($273) + -48)|0;
           $isdigit = ($isdigittmp>>>0)<(10);
           if ($isdigit) {
            $276 = $isdigittmp;
           } else {
            $274 = (($273>>>0) % 10)&-1;
            $276 = $274;
           }
           $275 = (($276) + ($272))|0;
           $277 = HEAP32[864>>2]|0;
           $278 = (_getc_unlocked(($277|0))|0);
           $$off102 = (($278) + 1)|0;
           $$cmp = ($$off102>>>0)>(1);
           if ($$cmp) {
            $273 = $278;$serial$1167 = $275;
           } else {
            $serial$2 = $275;
            break;
           }
          }
         }
        } while(0);
        $279 = HEAP32[$tag>>2]|0;
        $280 = ($279|0)==(41);
        $281 = HEAP32[$type>>2]|0;
        $282 = ($281|0)==(1);
        $or$cond37 = $280 & $282;
        if ($or$cond37) {
         $283 = ($wbi$1>>>0)<(18);
         if ($283) {
          $284 = (454896 + ($wbi$1)|0);
          $285 = HEAP8[$284>>0]|0;
          $286 = $285 << 24 >> 24;
          $287 = (($286) + -48)|0;
          $290 = $287;
         } else {
          $290 = 0;
         }
         $288 = HEAP32[864>>2]|0;
         $289 = $290 << 5;
         $291 = $289 | 8;
         (_fseek(($288|0),($291|0),1)|0);
         $292 = (_get4()|0);
         $293 = (+($292>>>0));
         HEAPF32[((133480 + 4|0))>>2] = $293;
         $294 = (_get4()|0);
         $295 = (+($294>>>0));
         HEAPF32[133480>>2] = $295;
         $296 = (_get4()|0);
         $297 = (+($296>>>0));
         HEAPF32[((133480 + 8|0))>>2] = $297;
         $298 = (_get4()|0);
         $299 = (+($298>>>0));
         HEAPF32[((133480 + 12|0))>>2] = $299;
        }
        $300 = HEAP32[$tag>>2]|0;
        $301 = ($300|0)==(61);
        $302 = HEAP32[$type>>2]|0;
        $303 = ($302|0)==(3);
        $or$cond39 = $301 & $303;
        $304 = HEAP32[$len>>2]|0;
        $305 = ($304|0)==(4);
        $or$cond41 = $or$cond39 & $305;
        if ($or$cond41) {
         $306 = (_get2()|0);
         $307 = $306&65535;
         $308 = HEAP32[((454920 + 96|0))>>2]|0;
         $309 = (14 - ($308))|0;
         $310 = $307 >>> $309;
         $311 = $310&65535;
         HEAP16[134176>>1] = $311;
         $312 = (_get2()|0);
         $313 = $312&65535;
         $314 = HEAP32[((454920 + 96|0))>>2]|0;
         $315 = (14 - ($314))|0;
         $316 = $313 >>> $315;
         $317 = $316&65535;
         HEAP16[((134176 + 2|0))>>1] = $317;
         $318 = (_get2()|0);
         $319 = $318&65535;
         $320 = HEAP32[((454920 + 96|0))>>2]|0;
         $321 = (14 - ($320))|0;
         $322 = $319 >>> $321;
         $323 = $322&65535;
         HEAP16[((134176 + 6|0))>>1] = $323;
         $324 = (_get2()|0);
         $325 = $324&65535;
         $326 = HEAP32[((454920 + 96|0))>>2]|0;
         $327 = (14 - ($326))|0;
         $328 = $325 >>> $327;
         $329 = $328&65535;
         HEAP16[((134176 + 4|0))>>1] = $329;
        }
        $330 = HEAP32[$tag>>2]|0;
        $331 = ($330|0)==(129);
        $332 = HEAP32[$type>>2]|0;
        $333 = ($332|0)==(4);
        $or$cond43 = $331 & $333;
        if ($or$cond43) {
         $334 = (_get4()|0);
         HEAP32[133280>>2] = $334;
         $335 = HEAP32[864>>2]|0;
         $336 = (($334) + 41)|0;
         (_fseek(($335|0),($336|0),0)|0);
         $337 = (_get2()|0);
         $338 = $337&65535;
         $339 = $338 << 1;
         $340 = $339&65535;
         HEAP16[133064>>1] = $340;
         $341 = (_get2()|0);
         HEAP16[132336>>1] = $341;
         HEAP32[584>>2] = 1633771873;
        }
        $342 = HEAP32[$tag>>2]|0;
        $343 = ($342|0)==(129);
        $344 = HEAP32[$type>>2]|0;
        $345 = ($344|0)==(7);
        $346 = ($342|0)==(256);
        $or$cond45125 = $343 | $346;
        $or$cond110 = $or$cond45125 & $345;
        if ($or$cond110) {
         label = 108;
        } else {
         $347 = ($342|0)==(640);
         $348 = ($344|0)==(1);
         $or$cond49 = $347 & $348;
         if ($or$cond49) {
          label = 108;
         }
        }
        if ((label|0) == 108) {
         label = 0;
         $349 = HEAP32[864>>2]|0;
         $350 = (_ftell(($349|0))|0);
         HEAP32[454040>>2] = $350;
         $351 = HEAP32[$len>>2]|0;
         HEAP32[133768>>2] = $351;
        }
        $352 = HEAP32[$tag>>2]|0;
        $353 = ($352|0)==(136);
        $354 = HEAP32[$type>>2]|0;
        $355 = ($354|0)==(4);
        $or$cond51 = $353 & $355;
        do {
         if ($or$cond51) {
          $356 = (_get4()|0);
          HEAP32[454040>>2] = $356;
          $357 = ($356|0)==(0);
          if ($357) {
           break;
          }
          $358 = (($356) + ($$1))|0;
          HEAP32[454040>>2] = $358;
         }
        } while(0);
        $359 = HEAP32[$tag>>2]|0;
        $360 = ($359|0)==(137);
        $361 = HEAP32[$type>>2]|0;
        $362 = ($361|0)==(4);
        $or$cond53 = $360 & $362;
        if ($or$cond53) {
         $363 = (_get4()|0);
         HEAP32[133768>>2] = $363;
         $$pr113 = HEAP32[$tag>>2]|0;
         $732 = $$pr113;
        } else {
         $732 = $359;
        }
        if ((($732|0) == 140) | (($732|0) == 150)) {
         $364 = HEAP32[864>>2]|0;
         $365 = (_ftell(($364|0))|0);
         HEAP32[133272>>2] = $365;
        }
        $366 = HEAP32[$tag>>2]|0;
        $367 = ($366|0)==(151);
        do {
         if ($367) {
          $368 = ($ver97$0194*10)|0;
          $369 = HEAP32[864>>2]|0;
          $370 = (_getc_unlocked(($369|0))|0);
          $371 = (($368) + -48)|0;
          $372 = (($371) + ($370))|0;
          $373 = ($372*10)|0;
          $374 = HEAP32[864>>2]|0;
          $375 = (_getc_unlocked(($374|0))|0);
          $376 = (($373) + -48)|0;
          $377 = (($376) + ($375))|0;
          $378 = ($377*10)|0;
          $379 = HEAP32[864>>2]|0;
          $380 = (_getc_unlocked(($379|0))|0);
          $381 = (($378) + -48)|0;
          $382 = (($381) + ($380))|0;
          $383 = ($382*10)|0;
          $384 = HEAP32[864>>2]|0;
          $385 = (_getc_unlocked(($384|0))|0);
          $386 = (($383) + -48)|0;
          $387 = (($386) + ($385))|0;
          if ((($387|0) == 103)) {
           $398 = HEAP32[864>>2]|0;
           (_fseek(($398|0),16,1)|0);
           $399 = (_get2()|0);
           $400 = (+($399&65535));
           HEAPF32[133480>>2] = $400;
           $401 = (_get2()|0);
           $402 = (+($401&65535));
           HEAPF32[((133480 + 4|0))>>2] = $402;
           $403 = (_get2()|0);
           $404 = (+($403&65535));
           HEAPF32[((133480 + 8|0))>>2] = $404;
           $405 = (_get2()|0);
           $406 = (+($405&65535));
           HEAPF32[((133480 + 12|0))>>2] = $406;
           $ver97$2 = 103;
           break;
          } else if ((($387|0) == 100)) {
           $388 = HEAP32[864>>2]|0;
           (_fseek(($388|0),68,1)|0);
           $389 = (_get2()|0);
           $390 = (+($389&65535));
           HEAPF32[133480>>2] = $390;
           $391 = (_get2()|0);
           $392 = (+($391&65535));
           HEAPF32[((133480 + 8|0))>>2] = $392;
           $393 = (_get2()|0);
           $394 = (+($393&65535));
           HEAPF32[((133480 + 4|0))>>2] = $394;
           $395 = (_get2()|0);
           $396 = (+($395&65535));
           HEAPF32[((133480 + 12|0))>>2] = $396;
           $ver97$2 = 100;
           break;
          } else if ((($387|0) == 102)) {
           $397 = HEAP32[864>>2]|0;
           (_fseek(($397|0),6,1)|0);
           $serial$5 = $serial$2;$ver97$5 = 102;
           label = 181;
           break L119;
          } else {
           $407 = ($387>>>0)>(199);
           if (!($407)) {
            $ver97$2 = $387;
            break;
           }
           $408 = ($387|0)==(205);
           if (!($408)) {
            $409 = HEAP32[864>>2]|0;
            (_fseek(($409|0),280,1)|0);
           }
           $410 = HEAP32[864>>2]|0;
           (_fread(($buf97|0),324,1,($410|0))|0);
           $ver97$2 = $387;
           break;
          }
         } else {
          $ver97$2 = $ver97$0194;
         }
        } while(0);
        $411 = HEAP32[$tag>>2]|0;
        $412 = ($411|0)==(161);
        $413 = HEAP32[$type>>2]|0;
        $414 = ($413|0)==(7);
        $or$cond57 = $412 & $414;
        if ($or$cond57) {
         HEAP16[928>>1] = 18761;
         $415 = HEAP32[864>>2]|0;
         (_fseek(($415|0),140,1)|0);
         $416 = (_get4()|0);
         $417 = (+($416>>>0));
         HEAPF32[133480>>2] = $417;
         $418 = (_get4()|0);
         $419 = (+($418>>>0));
         HEAPF32[((133480 + 4|0))>>2] = $419;
         $420 = (_get4()|0);
         $421 = (+($420>>>0));
         HEAPF32[((133480 + 8|0))>>2] = $421;
        }
        $422 = HEAP32[$tag>>2]|0;
        $423 = ($422|0)==(164);
        $424 = HEAP32[$type>>2]|0;
        $425 = ($424|0)==(3);
        $or$cond59 = $423 & $425;
        if ($or$cond59) {
         $426 = HEAP32[864>>2]|0;
         $427 = ($wbi$1*48)|0;
         (_fseek(($426|0),($427|0),1)|0);
         $428 = (_get2()|0);
         $429 = (+($428&65535));
         HEAPF32[133480>>2] = $429;
         $430 = (_get2()|0);
         $431 = (+($430&65535));
         HEAPF32[((133480 + 4|0))>>2] = $431;
         $432 = (_get2()|0);
         $433 = (+($432&65535));
         HEAPF32[((133480 + 8|0))>>2] = $433;
         $$pr114 = HEAP32[$tag>>2]|0;
         $434 = $$pr114;
        } else {
         $434 = $422;
        }
        $435 = ($434|0)==(167);
        do {
         if ($435) {
          $436 = (($ver97$2) + -200)|0;
          $437 = ($436>>>0)<(17);
          if (!($437)) {
           break;
          }
          $438 = $serial$2 & 255;
          $439 = (454048 + ($438)|0);
          $440 = HEAP8[$439>>0]|0;
          $441 = HEAP32[864>>2]|0;
          $442 = (_getc_unlocked(($441|0))|0);
          $443 = HEAP32[864>>2]|0;
          $444 = (_getc_unlocked(($443|0))|0);
          $445 = $444 ^ $442;
          $446 = HEAP32[864>>2]|0;
          $447 = (_getc_unlocked(($446|0))|0);
          $448 = $445 ^ $447;
          $449 = HEAP32[864>>2]|0;
          $450 = (_getc_unlocked(($449|0))|0);
          $451 = $448 ^ $450;
          $452 = ((454048 + ($451)|0) + 256|0);
          $453 = HEAP8[$452>>0]|0;
          $454 = $440&255;
          $cj$0179 = $453;$ck$0180 = 96;$i$3178 = 0;
          while(1) {
           $455 = (($ck$0180) + 1)<<24>>24;
           $456 = $ck$0180&255;
           $457 = Math_imul($456, $454)|0;
           $458 = $cj$0179&255;
           $459 = (($457) + ($458))|0;
           $460 = $459&255;
           $461 = (($buf97) + ($i$3178)|0);
           $462 = HEAP8[$461>>0]|0;
           $463 = $462&255;
           $464 = $463 ^ $459;
           $465 = $464&255;
           HEAP8[$461>>0] = $465;
           $466 = (($i$3178) + 1)|0;
           $exitcond209 = ($466|0)==(324);
           if ($exitcond209) {
            break;
           } else {
            $cj$0179 = $460;$ck$0180 = $455;$i$3178 = $466;
           }
          }
          $467 = (455360 + ($436)|0);
          $468 = HEAP8[$467>>0]|0;
          $469 = $468 << 24 >> 24;
          $470 = (($469) + -48)|0;
          $471 = $470 & -2;
          $472 = $470 & 1;
          $473 = (($buf97) + ($471)|0);
          $474 = (_sget2($473)|0);
          $475 = (+($474&65535));
          $476 = (133480 + ($472<<2)|0);
          HEAPF32[$476>>2] = $475;
          $$sum$1 = (($471) + 2)|0;
          $477 = (($buf97) + ($$sum$1)|0);
          $478 = (_sget2($477)|0);
          $479 = (+($478&65535));
          $480 = $472 ^ 1;
          $481 = (133480 + ($480<<2)|0);
          HEAPF32[$481>>2] = $479;
          $$sum$2 = (($471) + 4)|0;
          $482 = (($buf97) + ($$sum$2)|0);
          $483 = (_sget2($482)|0);
          $484 = (+($483&65535));
          $485 = $472 ^ 3;
          $486 = (133480 + ($485<<2)|0);
          HEAPF32[$486>>2] = $484;
          $$sum$3 = (($471) + 6)|0;
          $487 = (($buf97) + ($$sum$3)|0);
          $488 = (_sget2($487)|0);
          $489 = (+($488&65535));
          $490 = $472 | 2;
          $491 = (133480 + ($490<<2)|0);
          HEAPF32[$491>>2] = $489;
         }
        } while(0);
        $492 = HEAP32[$tag>>2]|0;
        $493 = ($492|0)==(512);
        $494 = HEAP32[$len>>2]|0;
        $495 = ($494|0)==(3);
        $or$cond61 = $493 & $495;
        if ($or$cond61) {
         (_get4()|0);
         $496 = (_get4()|0);
         HEAP32[454768>>2] = $496;
        }
        $497 = HEAP32[$tag>>2]|0;
        $498 = ($497|0)==(512);
        $499 = HEAP32[$len>>2]|0;
        $500 = ($499|0)==(4);
        $or$cond63 = $498 & $500;
        if ($or$cond63) {
         $501 = (_get2()|0);
         HEAP16[134176>>1] = $501;
         $502 = (_get2()|0);
         HEAP16[((134176 + 2|0))>>1] = $502;
         $503 = (_get2()|0);
         HEAP16[((134176 + 6|0))>>1] = $503;
         $504 = (_get2()|0);
         HEAP16[((134176 + 4|0))>>1] = $504;
        }
        $505 = HEAP32[$tag>>2]|0;
        $506 = ($505|0)==(513);
        $507 = HEAP32[$len>>2]|0;
        $508 = ($507|0)==(4);
        $or$cond65 = $506 & $508;
        if ($or$cond65) {
         $serial$5 = $serial$2;$ver97$5 = $ver97$2;
         label = 181;
         break;
        }
        $509 = ($505|0)==(544);
        $510 = HEAP32[$type>>2]|0;
        $511 = ($510|0)==(7);
        $or$cond67 = $509 & $511;
        if ($or$cond67) {
         $512 = HEAP32[864>>2]|0;
         $513 = (_ftell(($512|0))|0);
         HEAP32[133272>>2] = $513;
        }
        $514 = HEAP32[$tag>>2]|0;
        $515 = ($514|0)==(1025);
        $516 = HEAP32[$type>>2]|0;
        $517 = ($516|0)==(4);
        $or$cond69 = $515 & $517;
        $518 = HEAP32[$len>>2]|0;
        $519 = ($518|0)==(4);
        $or$cond71 = $or$cond69 & $519;
        if ($or$cond71) {
         $520 = (_get4()|0);
         $521 = $520&65535;
         HEAP16[134176>>1] = $521;
         $522 = (_get4()|0);
         $523 = $522&65535;
         HEAP16[((134176 + 2|0))>>1] = $523;
         $524 = (_get4()|0);
         $525 = $524&65535;
         HEAP16[((134176 + 6|0))>>1] = $525;
         $526 = (_get4()|0);
         $527 = $526&65535;
         HEAP16[((134176 + 4|0))>>1] = $527;
        }
        $528 = HEAP32[$tag>>2]|0;
        $529 = ($528|0)==(3585);
        do {
         if ($529) {
          HEAP16[928>>1] = 18761;
          $530 = HEAP32[864>>2]|0;
          (_fseek(($530|0),22,1)|0);
          $531 = HEAP32[$len>>2]|0;
          $532 = ($531>>>0)>(44);
          if (!($532)) {
           break;
          }
          $533 = HEAP32[$len>>2]|0;
          $offset$0184 = 22;
          while(1) {
           $534 = (_get4()|0);
           $535 = HEAP32[864>>2]|0;
           (_fseek(($535|0),14,1)|0);
           $536 = (_get4()|0);
           $537 = ($534|0)==(1990472199);
           if ($537) {
            $538 = (_get2()|0);
            $539 = $538&65535;
            HEAP32[454784>>2] = $539;
           } else {
            $540 = (($536) + -4)|0;
            $541 = HEAP32[864>>2]|0;
            (_fseek(($541|0),($540|0),1)|0);
           }
           $542 = (($offset$0184) + 18)|0;
           $543 = (($542) + ($536))|0;
           $544 = (($543) + 22)|0;
           $545 = ($544>>>0)<($533>>>0);
           if ($545) {
            $offset$0184 = $543;
           } else {
            $$lcssa245 = $534;
            break;
           }
          }
          HEAP32[$tag>>2] = $$lcssa245;
         }
        } while(0);
        $546 = HEAP32[$tag>>2]|0;
        $547 = ($546|0)==(3712);
        $548 = HEAP32[$len>>2]|0;
        $549 = ($548|0)==(256);
        $or$cond73 = $547 & $549;
        $550 = HEAP32[$type>>2]|0;
        $551 = ($550|0)==(7);
        $or$cond75 = $or$cond73 & $551;
        if ($or$cond75) {
         $552 = HEAP32[864>>2]|0;
         (_fseek(($552|0),48,1)|0);
         $553 = (_get2()|0);
         $554 = $553&65535;
         $555 = ($554*508)|0;
         $556 = (+($555|0));
         $557 = $556 * 1.0780000000000001;
         $558 = $557 * 1.52587890625E-5;
         $559 = $558;
         HEAPF32[133480>>2] = $559;
         $560 = (_get2()|0);
         $561 = $560&65535;
         $562 = ($561*382)|0;
         $563 = (+($562|0));
         $564 = $563 * 1.173;
         $565 = $564 * 1.52587890625E-5;
         $566 = $565;
         HEAPF32[((133480 + 8|0))>>2] = $566;
        }
        $567 = HEAP32[$tag>>2]|0;
        $568 = ($567|0)==(3840);
        $569 = HEAP32[$type>>2]|0;
        $570 = ($569|0)==(7);
        $or$cond77 = $568 & $570;
        if ($or$cond77) {
         $571 = HEAP32[$len>>2]|0;
         if ((($571|0) == 614)) {
          $572 = HEAP32[864>>2]|0;
          (_fseek(($572|0),176,1)|0);
          $serial$3 = $serial$2;$ver97$3 = $ver97$2;
          label = 165;
          break;
         } else if ((($571|0) == 734) | (($571|0) == 1502)) {
          $573 = HEAP32[864>>2]|0;
          (_fseek(($573|0),148,1)|0);
          $serial$3 = $serial$2;$ver97$3 = $ver97$2;
          label = 165;
          break;
         } else {
          $serial$7 = $serial$2;$ver97$7 = $ver97$2;
          break;
         }
        }
        $574 = ($567|0)==(4113);
        $575 = HEAP32[$len>>2]|0;
        $576 = ($575|0)==(9);
        $or$cond81 = $574 & $576;
        $577 = ($567|0)==(541065728);
        $or$cond83 = $577 | $or$cond81;
        if ($or$cond83) {
         $696 = (_get2()|0);
         $697 = (+($696<<16>>16));
         $698 = $697 * 0.00390625;
         $699 = $698;
         HEAPF32[455384>>2] = $699;
         $700 = (_get2()|0);
         $701 = (+($700<<16>>16));
         $702 = $701 * 0.00390625;
         $703 = $702;
         HEAPF32[((455384 + 4|0))>>2] = $703;
         $704 = (_get2()|0);
         $705 = (+($704<<16>>16));
         $706 = $705 * 0.00390625;
         $707 = $706;
         HEAPF32[((455384 + 8|0))>>2] = $707;
         $708 = (_get2()|0);
         $709 = (+($708<<16>>16));
         $710 = $709 * 0.00390625;
         $711 = $710;
         HEAPF32[((455384 + 16|0))>>2] = $711;
         $712 = (_get2()|0);
         $713 = (+($712<<16>>16));
         $714 = $713 * 0.00390625;
         $715 = $714;
         HEAPF32[((455384 + 20|0))>>2] = $715;
         $716 = (_get2()|0);
         $717 = (+($716<<16>>16));
         $718 = $717 * 0.00390625;
         $719 = $718;
         HEAPF32[((455384 + 24|0))>>2] = $719;
         $720 = (_get2()|0);
         $721 = (+($720<<16>>16));
         $722 = $721 * 0.00390625;
         $723 = $722;
         HEAPF32[((455384 + 32|0))>>2] = $723;
         $724 = (_get2()|0);
         $725 = (+($724<<16>>16));
         $726 = $725 * 0.00390625;
         $727 = $726;
         HEAPF32[((455384 + 36|0))>>2] = $727;
         $728 = (_get2()|0);
         $729 = (+($728<<16>>16));
         $730 = $729 * 0.00390625;
         $731 = $730;
         HEAPF32[((455384 + 40|0))>>2] = $731;
        }
        $578 = HEAP32[$tag>>2]|0;
        $579 = ($578|0)==(4114);
        $580 = ($578|0)==(541066752);
        $or$cond85 = $579 | $580;
        $581 = HEAP32[$len>>2]|0;
        $582 = ($581|0)==(4);
        $or$cond87 = $or$cond85 & $582;
        if ($or$cond87) {
         $583 = (_get2()|0);
         HEAP16[134176>>1] = $583;
         $584 = (_get2()|0);
         HEAP16[((134176 + 2|0))>>1] = $584;
         $585 = (_get2()|0);
         HEAP16[((134176 + 6|0))>>1] = $585;
         $586 = (_get2()|0);
         HEAP16[((134176 + 4|0))>>1] = $586;
        }
        $587 = HEAP32[$tag>>2]|0;
        if ((($587|0) == 4119) | (($587|0) == 541065472)) {
         $588 = (_get2()|0);
         $589 = $588&65535;
         $590 = (+($589|0));
         $591 = $590 * 0.00390625;
         $592 = $591;
         HEAPF32[133480>>2] = $592;
         $$pr115 = HEAP32[$tag>>2]|0;
         $733 = $$pr115;
        } else {
         $733 = $587;
        }
        if ((($733|0) == 4120) | (($733|0) == 541065472)) {
         $593 = (_get2()|0);
         $594 = $593&65535;
         $595 = (+($594|0));
         $596 = $595 * 0.00390625;
         $597 = $596;
         HEAPF32[((133480 + 8|0))>>2] = $597;
        }
        $598 = HEAP32[$tag>>2]|0;
        $599 = ($598|0)==(8209);
        $600 = HEAP32[$len>>2]|0;
        $601 = ($600|0)==(2);
        $or$cond93 = $599 & $601;
        if ($or$cond93) {
         $serial$3 = $serial$2;$ver97$3 = $ver97$2;
         label = 165;
        } else {
         $serial$4 = $serial$2;$ver97$4 = $ver97$2;
         label = 166;
        }
       }
      } while(0);
      if ((label|0) == 165) {
       label = 0;
       HEAP16[928>>1] = 19789;
       $602 = (_get2()|0);
       $603 = $602&65535;
       $604 = (+($603|0));
       $605 = $604 * 0.00390625;
       $606 = $605;
       HEAPF32[133480>>2] = $606;
       $607 = (_get2()|0);
       $608 = $607&65535;
       $609 = (+($608|0));
       $610 = $609 * 0.00390625;
       $611 = $610;
       HEAPF32[((133480 + 8|0))>>2] = $611;
       $serial$4 = $serial$3;$ver97$4 = $ver97$3;
       label = 166;
      }
      do {
       if ((label|0) == 166) {
        label = 0;
        $612 = HEAP32[$tag>>2]|0;
        $613 = $612 | 112;
        $614 = ($613|0)==(8304);
        if ($614) {
         $615 = HEAP32[$type>>2]|0;
         if ((($615|0) == 4) | (($615|0) == 13)) {
          $616 = HEAP32[864>>2]|0;
          $617 = (_get4()|0);
          $618 = (($617) + ($$1))|0;
          (_fseek(($616|0),($618|0),0)|0);
         }
         $$pr117 = HEAP32[$tag>>2]|0;
         $619 = $$pr117;
        } else {
         $619 = $612;
        }
        $620 = ($619|0)==(8224);
        if ($620) {
         _parse_thumb_note($$1,257,258);
        }
        $621 = HEAP32[$tag>>2]|0;
        $622 = ($621|0)==(8256);
        if ($622) {
         _parse_makernote($$1,8256);
         $$pr118 = HEAP32[$tag>>2]|0;
         $623 = $$pr118;
        } else {
         $623 = $621;
        }
        $624 = ($623|0)==(45096);
        if ($624) {
         $625 = HEAP32[864>>2]|0;
         $626 = (_get4()|0);
         $627 = (($626) + ($$1))|0;
         (_fseek(($625|0),($627|0),0)|0);
         _parse_thumb_note($$1,136,137);
        }
        $628 = HEAP32[$tag>>2]|0;
        $629 = ($628|0)==(16385);
        $630 = HEAP32[$len>>2]|0;
        $631 = ($630>>>0)>(500);
        $or$cond97 = $629 & $631;
        if (!($or$cond97)) {
         $655 = $628;$serial$6 = $serial$4;$ver97$6 = $ver97$4;
         label = 182;
         break;
        }
        $632 = ($630|0)==(582);
        do {
         if ($632) {
          $637 = 50;
         } else {
          $633 = ($630|0)==(653);
          if ($633) {
           $637 = 68;
           break;
          }
          $634 = ($630|0)==(5120);
          $635 = $634 ? 142 : 126;
          $637 = $635;
         }
        } while(0);
        $636 = HEAP32[864>>2]|0;
        (_fseek(($636|0),($637|0),1)|0);
        $serial$5 = $serial$4;$ver97$5 = $ver97$4;
        label = 181;
       }
      } while(0);
      if ((label|0) == 181) {
       label = 0;
       $638 = (_get2()|0);
       $639 = (+($638&65535));
       HEAPF32[133480>>2] = $639;
       $640 = (_get2()|0);
       $641 = (+($640&65535));
       HEAPF32[((133480 + 4|0))>>2] = $641;
       $642 = (_get2()|0);
       $643 = (+($642&65535));
       HEAPF32[((133480 + 12|0))>>2] = $643;
       $644 = (_get2()|0);
       $645 = (+($644&65535));
       HEAPF32[((133480 + 8|0))>>2] = $645;
       $646 = HEAP32[$len>>2]|0;
       $$mask = $646 & -8;
       $647 = ($$mask|0)==(1312);
       $648 = ($646|0)==(1506);
       $$ = $648 | $647;
       $649 = $$ ? 112 : 22;
       $650 = HEAP32[864>>2]|0;
       (_fseek(($650|0),($649|0),1)|0);
       $651 = (_get2()|0);
       HEAP16[133200>>1] = $651;
       $652 = (_get2()|0);
       HEAP16[((133200 + 2|0))>>1] = $652;
       $653 = (_get2()|0);
       HEAP16[((133200 + 6|0))>>1] = $653;
       $654 = (_get2()|0);
       HEAP16[((133200 + 4|0))>>1] = $654;
       $$pr120 = HEAP32[$tag>>2]|0;
       $655 = $$pr120;$serial$6 = $serial$5;$ver97$6 = $ver97$5;
       label = 182;
      }
      do {
       if ((label|0) == 182) {
        label = 0;
        $656 = ($655|0)==(16417);
        do {
         if ($656) {
          $657 = (_get4()|0);
          $658 = ($657|0)==(0);
          if ($658) {
           break;
          }
          $659 = (_get4()|0);
          $660 = ($659|0)==(0);
          if ($660) {
           break;
          }
          HEAPF32[133480>>2] = 1024.0;
          HEAPF32[((133480 + 4|0))>>2] = 1024.0;
          HEAPF32[((133480 + 8|0))>>2] = 1024.0;
          HEAPF32[((133480 + 12|0))>>2] = 1024.0;
         }
        } while(0);
        $661 = HEAP32[$tag>>2]|0;
        $662 = ($661|0)==(40993);
        if ($662) {
         $663 = (_get4()|0);
         $664 = (+($663>>>0));
         HEAPF32[133480>>2] = $664;
         $665 = (_get4()|0);
         $666 = (+($665>>>0));
         HEAPF32[((133480 + 4|0))>>2] = $666;
         $667 = (_get4()|0);
         $668 = (+($667>>>0));
         HEAPF32[((133480 + 12|0))>>2] = $668;
         $669 = (_get4()|0);
         $670 = (+($669>>>0));
         HEAPF32[((133480 + 8|0))>>2] = $670;
         $$pr122 = HEAP32[$tag>>2]|0;
         $671 = $$pr122;
        } else {
         $671 = $661;
        }
        $672 = ($671|0)==(41000);
        if ($672) {
         $673 = (_get4()|0);
         $674 = (+($673>>>0));
         $675 = +HEAPF32[133480>>2];
         $676 = $675 - $674;
         HEAPF32[133480>>2] = $676;
         $677 = (_get4()|0);
         $678 = (+($677>>>0));
         $679 = +HEAPF32[((133480 + 4|0))>>2];
         $680 = $679 - $678;
         HEAPF32[((133480 + 4|0))>>2] = $680;
         $681 = (_get4()|0);
         $682 = (+($681>>>0));
         $683 = +HEAPF32[((133480 + 12|0))>>2];
         $684 = $683 - $682;
         HEAPF32[((133480 + 12|0))>>2] = $684;
         $685 = (_get4()|0);
         $686 = (+($685>>>0));
         $687 = +HEAPF32[((133480 + 8|0))>>2];
         $688 = $687 - $686;
         HEAPF32[((133480 + 8|0))>>2] = $688;
        }
        $689 = HEAP32[$tag>>2]|0;
        $690 = ($689|0)==(45057);
        if (!($690)) {
         $serial$7 = $serial$6;$ver97$7 = $ver97$6;
         break;
        }
        $691 = (_get2()|0);
        $692 = $691&65535;
        HEAP32[133192>>2] = $692;
        $serial$7 = $serial$6;$ver97$7 = $ver97$6;
       }
      } while(0);
      $693 = HEAP32[864>>2]|0;
      $694 = HEAP32[$save>>2]|0;
      (_fseek(($693|0),($694|0),0)|0);
      $695 = ($109|0)==(0);
      if ($695) {
       break;
      } else {
       $$in = $109;$serial$0195 = $serial$7;$ver97$0194 = $ver97$7;$wbi$0196 = $wbi$1;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  HEAP16[928>>1] = 19789;
  $16 = HEAP32[864>>2]|0;
  $17 = (_ftell(($16|0))|0);
  $18 = HEAP32[133280>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  $20 = ($17>>>0)<(16384);
  $or$cond99158 = $20 & $19;
  if ($or$cond99158) {
   $21 = (($wb) + 8|0);
   $22 = (($wb) + 4|0);
   $23 = (($wb) + 12|0);
   while(1) {
    $24 = HEAP32[$21>>2]|0;
    HEAP32[$wb>>2] = $24;
    $25 = HEAP32[$22>>2]|0;
    HEAP32[$21>>2] = $25;
    $26 = HEAP32[$23>>2]|0;
    HEAP32[$22>>2] = $26;
    $27 = (_get2()|0);
    $28 = $27&65535;
    HEAP32[$23>>2] = $28;
    $29 = HEAP32[$22>>2]|0;
    $30 = ($29|0)==(256);
    $31 = ($27<<16>>16)==(256);
    $or$cond105 = $31 & $30;
    if ($or$cond105) {
     $32 = HEAP32[$wb>>2]|0;
     $$off126 = (($32) + -257)|0;
     $33 = ($$off126>>>0)<(383);
     if ($33) {
      $34 = HEAP32[$21>>2]|0;
      $$off127 = (($34) + -257)|0;
      $35 = ($$off127>>>0)<(383);
      if ($35) {
       $41 = HEAP32[$wb>>2]|0;
       $42 = (+($41>>>0));
       HEAPF32[133480>>2] = $42;
       $43 = (($wb) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (+($44>>>0));
       HEAPF32[((133480 + 4|0))>>2] = $45;
       $46 = (($wb) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (+($47>>>0));
       HEAPF32[((133480 + 8|0))>>2] = $48;
       $49 = (($wb) + 12|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = (+($50>>>0));
       HEAPF32[((133480 + 12|0))>>2] = $51;
      }
     }
    }
    $36 = HEAP32[864>>2]|0;
    $37 = (_ftell(($36|0))|0);
    $38 = HEAP32[133280>>2]|0;
    $39 = ($37>>>0)<($38>>>0);
    $40 = ($37>>>0)<(16384);
    $or$cond99 = $40 & $39;
    if (!($or$cond99)) {
     break;
    }
   }
  }
 }
 HEAP16[928>>1] = $0;
 STACKTOP = sp;return;
}
function _parse_tiff_ifd($base) {
 $base = $base|0;
 var $$ = 0, $$0 = 0, $$in = 0, $$lcssa = 0, $$lcssa227 = 0.0, $$lcssa228 = 0.0, $$lcssa229 = 0.0, $$lcssa232 = 0, $$lcssa233 = 0, $$lcssa234 = 0, $$pr = 0, $$pr200 = 0, $$promoted = 0.0, $$promoted$1 = 0.0, $$promoted$2 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0;
 var $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0.0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0.0, $353 = 0.0, $354 = 0;
 var $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0;
 var $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0;
 var $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0;
 var $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0.0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0.0, $639 = 0.0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0.0, $644 = 0.0, $645 = 0.0, $646 = 0, $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0.0, $663 = 0, $664 = 0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0.0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0.0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0.0, $697 = 0.0;
 var $698 = 0.0, $699 = 0.0, $7 = 0, $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0.0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0.0;
 var $77 = 0, $770 = 0, $771 = 0.0, $772 = 0.0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0.0, $785 = 0, $786 = 0.0, $787 = 0;
 var $788 = 0.0, $789 = 0.0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0.0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0.0, $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0.0, $821 = 0, $822 = 0.0;
 var $823 = 0, $824 = 0.0, $825 = 0.0, $826 = 0.0, $827 = 0.0, $828 = 0.0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0.0, $834 = 0, $835 = 0.0, $836 = 0, $837 = 0.0, $838 = 0.0, $839 = 0.0, $84 = 0, $840 = 0.0;
 var $841 = 0.0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0.0, $851 = 0.0, $852 = 0, $853 = 0.0, $854 = 0.0, $855 = 0, $856 = 0, $857 = 0.0, $858 = 0.0, $859 = 0;
 var $86 = 0, $860 = 0.0, $861 = 0.0, $862 = 0, $863 = 0.0, $864 = 0.0, $865 = 0, $866 = 0, $867 = 0.0, $868 = 0.0, $869 = 0, $87 = 0, $870 = 0.0, $871 = 0.0, $872 = 0, $873 = 0.0, $874 = 0.0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ab = 0, $asn = 0, $c$13$lcssa = 0, $c$13121 = 0, $c$1496 = 0, $c$1590 = 0, $c$1684 = 0, $c$1782 = 0, $c$1880 = 0, $c$2070 = 0, $c$2168 = 0;
 var $c$2261 = 0, $c$2360 = 0, $c$5127 = 0, $cam_xyz = 0, $cc = 0, $cfa$0115 = 0, $cfa_pat = 0, $cfa_pc = 0, $cm = 0, $cp$0100 = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond167 = 0, $exitcond177 = 0, $exitcond179 = 0, $i$2116 = 0, $i$3111 = 0, $i$691 = 0, $i$787 = 0;
 var $i$877 = 0, $i$973 = 0, $ifd$0142 = 0, $ifd$1 = 0, $ima_len$0144 = 0, $ima_len$1 = 0, $j$1 = 0, $j$1$1 = 0, $j$1$2 = 0, $j$1$3 = 0, $j$1$4 = 0, $j$1$in132 = 0, $j$1$in132$1 = 0, $j$1$in132$1$phi = 0, $j$1$in132$2 = 0, $j$1$in132$2$phi = 0, $j$1$in132$3 = 0, $j$1$in132$3$phi = 0, $j$1$in132$4 = 0, $j$1$in132$4$phi = 0;
 var $j$1$in132$phi = 0, $j$1131 = 0, $j$1131$1 = 0, $j$1131$2 = 0, $j$1131$3 = 0, $j$1131$4 = 0, $j$1133 = 0, $j$1133$1 = 0, $j$1133$2 = 0, $j$1133$3 = 0, $j$1133$4 = 0, $j$363 = 0, $j$363$1 = 0, $j$363$2 = 0, $jh = 0, $len = 0, $num$1$lcssa = 0.0, $num$192 = 0.0, $or$cond = 0, $or$cond10 = 0;
 var $or$cond204 = 0, $or$cond3 = 0, $or$cond6 = 0, $or$cond7 = 0, $plen$0145 = 0, $plen$1 = 0, $plen$1$ph = 0, $plen$2 = 0, $save = 0, $software = 0, $sony_curve = 0, $sony_key$0148 = 0, $sony_key$1 = 0, $sony_key$1$lcssa = 0, $sony_length$0147 = 0, $sony_length$1 = 0, $sony_length$1$lcssa = 0, $sony_offset$0146 = 0, $sony_offset$1 = 0, $sony_offset$1$lcssa = 0;
 var $tab = 0, $tag = 0, $type = 0, $umax = 0, $use_cm$0$lcssa201 = 0, $use_cm$0143 = 0, $use_cm$1 = 0, $use_cm$1$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $xyz = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0;
 $vararg_buffer13 = sp + 448|0;
 $vararg_buffer10 = sp + 440|0;
 $vararg_buffer7 = sp + 432|0;
 $vararg_buffer4 = sp + 424|0;
 $vararg_buffer1 = sp + 416|0;
 $vararg_buffer = sp + 408|0;
 $tag = sp + 600|0;
 $type = sp + 596|0;
 $len = sp + 592|0;
 $save = sp + 588|0;
 $software = sp + 880|0;
 $cfa_pat = sp + 864|0;
 $cfa_pc = sp + 584|0;
 $tab = sp + 608|0;
 $cc = sp + 280|0;
 $cm = sp + 184|0;
 $cam_xyz = sp + 88|0;
 $ab = sp + 56|0;
 $asn = sp + 24|0;
 $xyz = sp;
 $sony_curve = sp + 560|0;
 $jh = sp + 464|0;
 HEAP32[$cfa_pc>>2] = 50462976;
 ;HEAP32[$ab+0>>2]=HEAP32[456576+0>>2]|0;HEAP32[$ab+4>>2]=HEAP32[456576+4>>2]|0;HEAP32[$ab+8>>2]=HEAP32[456576+8>>2]|0;HEAP32[$ab+12>>2]=HEAP32[456576+12>>2]|0;HEAP32[$ab+16>>2]=HEAP32[456576+16>>2]|0;HEAP32[$ab+20>>2]=HEAP32[456576+20>>2]|0;HEAP32[$ab+24>>2]=HEAP32[456576+24>>2]|0;HEAP32[$ab+28>>2]=HEAP32[456576+28>>2]|0;
 ;HEAP32[$asn+0>>2]=0|0;HEAP32[$asn+4>>2]=0|0;HEAP32[$asn+8>>2]=0|0;HEAP32[$asn+12>>2]=0|0;HEAP32[$asn+16>>2]=0|0;HEAP32[$asn+20>>2]=0|0;HEAP32[$asn+24>>2]=0|0;HEAP32[$asn+28>>2]=0|0;
 ;HEAP32[$xyz+0>>2]=HEAP32[456608+0>>2]|0;HEAP32[$xyz+4>>2]=HEAP32[456608+4>>2]|0;HEAP32[$xyz+8>>2]=HEAP32[456608+8>>2]|0;HEAP32[$xyz+12>>2]=HEAP32[456608+12>>2]|0;HEAP32[$xyz+16>>2]=HEAP32[456608+16>>2]|0;HEAP32[$xyz+20>>2]=HEAP32[456608+20>>2]|0;
 ;HEAP32[$sony_curve+0>>2]=HEAP32[456632+0>>2]|0;HEAP32[$sony_curve+4>>2]=HEAP32[456632+4>>2]|0;HEAP32[$sony_curve+8>>2]=HEAP32[456632+8>>2]|0;HEAP32[$sony_curve+12>>2]=HEAP32[456632+12>>2]|0;HEAP32[$sony_curve+16>>2]=HEAP32[456632+16>>2]|0;HEAP32[$sony_curve+20>>2]=HEAP32[456632+20>>2]|0;
 $0 = HEAP32[455464>>2]|0;
 $1 = ($0>>>0)>(9);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $922 = (($0) + 1)|0;
 HEAP32[455464>>2] = $922;
 HEAPF64[$cc>>3] = 1.0;
 $923 = (($cc) + 8|0);
 ;HEAP32[$923+0>>2]=0|0;HEAP32[$923+4>>2]=0|0;HEAP32[$923+8>>2]=0|0;HEAP32[$923+12>>2]=0|0;HEAP32[$923+16>>2]=0|0;HEAP32[$923+20>>2]=0|0;
 $924 = (($cc) + 32|0);
 HEAPF64[$924>>3] = 0.0;
 $925 = (($cc) + 40|0);
 HEAPF64[$925>>3] = 1.0;
 $926 = (($cc) + 48|0);
 ;HEAP32[$926+0>>2]=0|0;HEAP32[$926+4>>2]=0|0;HEAP32[$926+8>>2]=0|0;HEAP32[$926+12>>2]=0|0;
 $927 = (($cc) + 64|0);
 $928 = (($cc) + 80|0);
 ;HEAP32[$927+0>>2]=0|0;HEAP32[$927+4>>2]=0|0;HEAP32[$927+8>>2]=0|0;HEAP32[$927+12>>2]=0|0;
 HEAPF64[$928>>3] = 1.0;
 $929 = (($cc) + 88|0);
 HEAPF64[$929>>3] = 0.0;
 $930 = (($cc) + 96|0);
 $931 = (($cc) + 120|0);
 ;HEAP32[$930+0>>2]=0|0;HEAP32[$930+4>>2]=0|0;HEAP32[$930+8>>2]=0|0;HEAP32[$930+12>>2]=0|0;HEAP32[$930+16>>2]=0|0;HEAP32[$930+20>>2]=0|0;
 HEAPF64[$931>>3] = 1.0;
 $2 = (_get2()|0);
 $932 = $2&65535;
 $933 = ($2&65535)>(512);
 if ($933) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $use_cm$0$lcssa201 = 0;
 } else {
  $4 = (($jh) + 8|0);
  $5 = (($jh) + 4|0);
  $6 = (($jh) + 12|0);
  $7 = (($jh) + 16|0);
  $8 = (($xyz) + 8|0);
  $9 = (($xyz) + 16|0);
  $$in = $932;$ifd$0142 = $0;$ima_len$0144 = 0;$plen$0145 = 16;$sony_key$0148 = 0;$sony_length$0147 = 0;$sony_offset$0146 = 0;$use_cm$0143 = 0;
  while(1) {
   $10 = (($$in) + -1)|0;
   _tiff_get($base,$tag,$type,$len,$save);
   $11 = HEAP32[$tag>>2]|0;
   L11: do {
    if ((($11|0) == 50830)) {
     $12 = HEAP32[$len>>2]|0;
     $13 = ($12|0)==(0);
     if (!($13)) {
      $i$877 = 0;
      while(1) {
       $728 = HEAP32[$type>>2]|0;
       $729 = (_getint($728)|0);
       $730 = (189976 + ($i$877<<2)|0);
       HEAP32[$730>>2] = $729;
       $731 = (($i$877) + 1)|0;
       $732 = HEAP32[$len>>2]|0;
       $733 = ($731>>>0)<($732>>>0);
       $734 = ($731|0)<(32);
       $or$cond6 = $734 & $733;
       if ($or$cond6) {
        $i$877 = $731;
       } else {
        break;
       }
      }
     }
     HEAP32[132360>>2] = 0;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50716) | (($11|0) == 50715)) {
     $22 = HEAP32[$len>>2]|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $$lcssa = 0;$num$1$lcssa = 0.0;
     } else {
      $i$691 = 0;$num$192 = 0.0;
      while(1) {
       $637 = HEAP32[$type>>2]|0;
       $638 = (+_getreal($637));
       $639 = $num$192 + $638;
       $640 = (($i$691) + 1)|0;
       $641 = HEAP32[$len>>2]|0;
       $642 = ($640>>>0)<($641>>>0);
       if ($642) {
        $i$691 = $640;$num$192 = $639;
       } else {
        $$lcssa = $641;$num$1$lcssa = $639;
        break;
       }
      }
     }
     $643 = (+($$lcssa>>>0));
     $644 = $num$1$lcssa / $643;
     $645 = $644 + 0.5;
     $646 = HEAP32[132360>>2]|0;
     $647 = (+($646>>>0));
     $648 = $645 + $647;
     $649 = (~~(($648))>>>0);
     HEAP32[132360>>2] = $649;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 9)) {
     $32 = (_get2()|0);
     $33 = ($32<<16>>16)==(0);
     if ($33) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $34 = $32&65535;
      HEAP32[584>>2] = $34;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 270)) {
     $112 = HEAP32[864>>2]|0;
     (_fread((456656|0),512,1,($112|0))|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 18) | (($11|0) == 17)) {
     $35 = HEAP32[$type>>2]|0;
     $36 = ($35|0)==(3);
     $37 = HEAP32[$len>>2]|0;
     $38 = ($37|0)==(1);
     $or$cond = $36 & $38;
     if ($or$cond) {
      $39 = (_get2()|0);
      $40 = $39&65535;
      $41 = (+($40|0));
      $42 = $41 * 0.00390625;
      $43 = $42;
      $44 = HEAP32[$tag>>2]|0;
      $45 = $44 << 1;
      $46 = (($45) + -34)|0;
      $47 = (133480 + ($46<<2)|0);
      HEAPF32[$47>>2] = $43;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 6)) {
     $25 = (_get2()|0);
     HEAP16[132080>>1] = $25;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50724) | (($11|0) == 50723)) {
     $18 = HEAP32[132272>>2]|0;
     $19 = ($18|0)==(0);
     if ($19) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $670 = $18;$i$787 = 0;
      while(1) {
       $671 = ($670|0)==(0);
       if (!($671)) {
        $c$1684 = 0;
        while(1) {
         $672 = HEAP32[$type>>2]|0;
         $673 = (+_getreal($672));
         $674 = ((($cc) + ($i$787<<5)|0) + ($c$1684<<3)|0);
         HEAPF64[$674>>3] = $673;
         $675 = (($c$1684) + 1)|0;
         $676 = HEAP32[132272>>2]|0;
         $677 = ($675>>>0)<($676>>>0);
         if ($677) {
          $c$1684 = $675;
         } else {
          break;
         }
        }
       }
       $678 = (($i$787) + 1)|0;
       $679 = HEAP32[132272>>2]|0;
       $680 = ($678>>>0)<($679>>>0);
       if ($680) {
        $670 = $679;$i$787 = $678;
       } else {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       }
      }
     }
    } else if ((($11|0) == 30) | (($11|0) == 29) | (($11|0) == 28)) {
     $52 = (_get2()|0);
     $53 = HEAP32[$tag>>2]|0;
     $54 = (($53) + -28)|0;
     $55 = (134176 + ($54<<1)|0);
     HEAP16[$55>>1] = $52;
     $56 = HEAP16[((134176 + 2|0))>>1]|0;
     HEAP16[((134176 + 6|0))>>1] = $56;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 61441) | (($11|0) == 256) | (($11|0) == 2)) {
     $88 = HEAP32[$type>>2]|0;
     $89 = (_getint($88)|0);
     $90 = (454920 + (($ifd$0142*44)|0)|0);
     HEAP32[$90>>2] = $89;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 61440)) {
     $85 = HEAP32[864>>2]|0;
     $86 = (_get4()|0);
     $87 = (($86) + ($base))|0;
     (_fseek(($85|0),($87|0),0)|0);
     (_parse_tiff_ifd($base)|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 46)) {
     $73 = HEAP32[$type>>2]|0;
     $74 = ($73|0)==(7);
     if ($74) {
      $75 = HEAP32[864>>2]|0;
      $76 = (_getc_unlocked(($75|0))|0);
      $77 = ($76|0)==(255);
      if ($77) {
       $78 = HEAP32[864>>2]|0;
       $79 = (_getc_unlocked(($78|0))|0);
       $80 = ($79|0)==(216);
       if ($80) {
        $81 = HEAP32[864>>2]|0;
        $82 = (_ftell(($81|0))|0);
        $83 = (($82) + -2)|0;
        HEAP32[454040>>2] = $83;
        $84 = HEAP32[$len>>2]|0;
        HEAP32[133768>>2] = $84;
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
       } else {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
       }
      } else {
       $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      }
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 61442) | (($11|0) == 257) | (($11|0) == 3)) {
     $91 = HEAP32[$type>>2]|0;
     $92 = (_getint($91)|0);
     $93 = ((454920 + (($ifd$0142*44)|0)|0) + 4|0);
     HEAP32[$93>>2] = $92;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 38) | (($11|0) == 37) | (($11|0) == 36)) {
     $57 = (_get2()|0);
     $58 = (+($57&65535));
     $59 = HEAP32[$tag>>2]|0;
     $60 = (($59) + -36)|0;
     $61 = (133480 + ($60<<2)|0);
     HEAPF32[$61>>2] = $58;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 61446)) {
     HEAP16[133064>>1] = 0;
     $100 = ((454920 + (($ifd$0142*44)|0)|0) + 8|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101|0)>(12);
     if ($102) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      HEAP32[189952>>2] = 9;
      $103 = (_get4()|0);
      $104 = ($103|0)!=(0);
      $105 = $104 ? 24 : 80;
      HEAP32[133096>>2] = $105;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 330)) {
     $213 = (_strcmp(133688,457264)|0);
     $214 = ($213|0)==(0);
     if ($214) {
      $218 = (454920 + (($ifd$0142*44)|0)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = ($219|0)==(3872);
      if ($220) {
       HEAP32[189952>>2] = 13;
       $221 = (_get4()|0);
       $222 = (($221) + ($base))|0;
       HEAP32[133280>>2] = $222;
       $223 = (($ifd$0142) + 1)|0;
       $ifd$1 = $223;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
       break L11;
      }
     }
     $215 = HEAP32[$len>>2]|0;
     $216 = (($215) + -1)|0;
     HEAP32[$len>>2] = $216;
     $217 = ($215|0)==(0);
     if ($217) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      while(1) {
       $224 = HEAP32[864>>2]|0;
       $225 = (_ftell(($224|0))|0);
       $226 = HEAP32[864>>2]|0;
       $227 = (_get4()|0);
       $228 = (($227) + ($base))|0;
       (_fseek(($226|0),($228|0),0)|0);
       $229 = (_parse_tiff_ifd($base)|0);
       $230 = ($229|0)==(0);
       if (!($230)) {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break L11;
       }
       $231 = HEAP32[864>>2]|0;
       $232 = (($225) + 4)|0;
       (_fseek(($231|0),($232|0),0)|0);
       $233 = HEAP32[$len>>2]|0;
       $234 = (($233) + -1)|0;
       HEAP32[$len>>2] = $234;
       $235 = ($233|0)==(0);
       if ($235) {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       }
      }
     }
    } else if ((($11|0) == 272)) {
     $114 = HEAP32[864>>2]|0;
     (_fgets((133688|0),64,($114|0))|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 61447) | (($11|0) == 513) | (($11|0) == 273)) {
     label = 41;
    } else if ((($11|0) == 50722) | (($11|0) == 50721)) {
     $20 = HEAP32[132272>>2]|0;
     $21 = ($20|0)==(0);
     if ($21) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = 1;
     } else {
      $c$1590 = 0;
      while(1) {
       $658 = HEAP32[$type>>2]|0;
       $659 = (+_getreal($658));
       $660 = (($cm) + (($c$1590*24)|0)|0);
       HEAPF64[$660>>3] = $659;
       $661 = HEAP32[$type>>2]|0;
       $662 = (+_getreal($661));
       $663 = ((($cm) + (($c$1590*24)|0)|0) + 8|0);
       HEAPF64[$663>>3] = $662;
       $664 = HEAP32[$type>>2]|0;
       $665 = (+_getreal($664));
       $666 = ((($cm) + (($c$1590*24)|0)|0) + 16|0);
       HEAPF64[$666>>3] = $665;
       $667 = (($c$1590) + 1)|0;
       $668 = HEAP32[132272>>2]|0;
       $669 = ($667>>>0)<($668>>>0);
       if ($669) {
        $c$1590 = $667;
       } else {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = 1;
        break;
       }
      }
     }
    } else if ((($11|0) == 61443) | (($11|0) == 258)) {
     $94 = HEAP32[$len>>2]|0;
     $95 = $94 & 7;
     $96 = ((454920 + (($ifd$0142*44)|0)|0) + 28|0);
     HEAP32[$96>>2] = $95;
     $97 = HEAP32[$type>>2]|0;
     $98 = (_getint($97)|0);
     $99 = ((454920 + (($ifd$0142*44)|0)|0) + 8|0);
     HEAP32[$99>>2] = $98;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 280)) {
     $115 = HEAP32[$type>>2]|0;
     $116 = ($115|0)==(4);
     if ($116) {
      HEAP32[189952>>2] = 11;
      HEAP32[133096>>2] = 8200;
      label = 41;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 50727)) {
     $16 = HEAP32[132272>>2]|0;
     $17 = ($16|0)==(0);
     if ($17) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $c$1782 = 0;
      while(1) {
       $681 = HEAP32[$type>>2]|0;
       $682 = (+_getreal($681));
       $683 = (($ab) + ($c$1782<<3)|0);
       HEAPF64[$683>>3] = $682;
       $684 = (($c$1782) + 1)|0;
       $685 = HEAP32[132272>>2]|0;
       $686 = ($684>>>0)<($685>>>0);
       if ($686) {
        $c$1782 = $684;
       } else {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       }
      }
     }
    } else if ((($11|0) == 5)) {
     $24 = (_get2()|0);
     HEAP16[132088>>1] = $24;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 323)) {
     $197 = HEAP32[$type>>2]|0;
     $198 = (_getint($197)|0);
     $199 = ((454920 + (($ifd$0142*44)|0)|0) + 40|0);
     HEAP32[$199>>2] = $198;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 324)) {
     $200 = HEAP32[$len>>2]|0;
     $201 = ($200>>>0)>(1);
     if ($201) {
      $202 = HEAP32[864>>2]|0;
      $203 = (_ftell(($202|0))|0);
      $206 = $203;
     } else {
      $204 = (_get4()|0);
      $206 = $204;
     }
     $205 = ((454920 + (($ifd$0142*44)|0)|0) + 20|0);
     HEAP32[$205>>2] = $206;
     $207 = HEAP32[$len>>2]|0;
     $208 = ($207|0)==(1);
     if ($208) {
      $209 = ((454920 + (($ifd$0142*44)|0)|0) + 40|0);
      HEAP32[$209>>2] = 0;
      $210 = ((454920 + (($ifd$0142*44)|0)|0) + 36|0);
      HEAP32[$210>>2] = 0;
      $$pr = HEAP32[$len>>2]|0;
      $211 = $$pr;
     } else {
      $211 = $207;
     }
     $212 = ($211|0)==(4);
     if ($212) {
      HEAP32[189952>>2] = 12;
      HEAP32[133208>>2] = 5;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 61454)) {
     $171 = HEAP32[$type>>2]|0;
     $172 = (_getint($171)|0);
     $173 = (+($172>>>0));
     HEAPF32[((133480 + 4|0))>>2] = $173;
     $174 = HEAP32[$type>>2]|0;
     $175 = (_getint($174)|0);
     $176 = (+($175>>>0));
     HEAPF32[133480>>2] = $176;
     $177 = HEAP32[$type>>2]|0;
     $178 = (_getint($177)|0);
     $179 = (+($178>>>0));
     HEAPF32[((133480 + 8|0))>>2] = $179;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 11) | (($11|0) == 305)) {
     $180 = HEAP32[864>>2]|0;
     (_fgets(($software|0),64,($180|0))|0);
     $181 = (_strncmp($software,457184,5)|0);
     $182 = ($181|0)==(0);
     if (!($182)) {
      $183 = (_strncmp($software,457192,5)|0);
      $184 = ($183|0)==(0);
      if (!($184)) {
       $185 = (_strncmp($software,457200,5)|0);
       $186 = ($185|0)==(0);
       if (!($186)) {
        $187 = (_strncmp($software,457208,6)|0);
        $188 = ($187|0)==(0);
        if (!($188)) {
         $189 = (_strncmp($software,457216,10)|0);
         $190 = ($189|0)==(0);
         if (!($190)) {
          $191 = (_strcmp($software,457232)|0);
          $192 = ($191|0)==(0);
          if (!($192)) {
           $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
           break L11;
          }
         }
        }
       }
      }
     }
     HEAP32[133208>>2] = 0;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 23)) {
     $48 = HEAP32[$type>>2]|0;
     $49 = ($48|0)==(3);
     if ($49) {
      $50 = (_get2()|0);
      $51 = (+($50&65535));
      HEAPF32[454744>>2] = $51;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 262)) {
     $109 = (_get2()|0);
     $110 = $109&65535;
     $111 = ((454920 + (($ifd$0142*44)|0)|0) + 16|0);
     HEAP32[$111>>2] = $110;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50728)) {
     $14 = HEAP32[132272>>2]|0;
     $15 = ($14|0)==(0);
     if ($15) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $c$1880 = 0;
      while(1) {
       $687 = HEAP32[$type>>2]|0;
       $688 = (+_getreal($687));
       $689 = (($asn) + ($c$1880<<3)|0);
       HEAPF64[$689>>3] = $688;
       $690 = (($c$1880) + 1)|0;
       $691 = HEAP32[132272>>2]|0;
       $692 = ($690>>>0)<($691>>>0);
       if ($692) {
        $c$1880 = $690;
       } else {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       }
      }
     }
    } else if ((($11|0) == 271)) {
     $113 = HEAP32[864>>2]|0;
     (_fgets((133624|0),64,($113|0))|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 39)) {
     $62 = HEAP32[$len>>2]|0;
     $63 = ($62>>>0)<(50);
     $64 = +HEAPF32[133480>>2];
     $65 = $64 != 0.0;
     $or$cond3 = $63 | $65;
     if ($or$cond3) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $66 = HEAP32[864>>2]|0;
      (_fseek(($66|0),12,1)|0);
      $67 = (_get2()|0);
      $68 = (+($67&65535));
      HEAPF32[133480>>2] = $68;
      $69 = (_get2()|0);
      $70 = (+($69&65535));
      HEAPF32[((133480 + 4|0))>>2] = $70;
      $71 = (_get2()|0);
      $72 = (+($71&65535));
      HEAPF32[((133480 + 8|0))>>2] = $72;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 7)) {
     $26 = (_get2()|0);
     $27 = $26&65535;
     $28 = HEAP16[132088>>1]|0;
     $29 = $28&65535;
     $30 = (($29) + ($27))|0;
     $31 = $30&65535;
     HEAP16[132088>>1] = $31;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50752)) {
     _read_shorts(133104,3);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50829)) {
     $710 = HEAP32[$type>>2]|0;
     $711 = (_getint($710)|0);
     $712 = $711&65535;
     HEAP16[600>>1] = $712;
     $713 = HEAP32[$type>>2]|0;
     $714 = (_getint($713)|0);
     $715 = $714&65535;
     HEAP16[592>>1] = $715;
     $716 = HEAP32[$type>>2]|0;
     $717 = (_getint($716)|0);
     $718 = HEAP16[600>>1]|0;
     $719 = $718&65535;
     $720 = (($717) - ($719))|0;
     $721 = $720&65535;
     HEAP16[132080>>1] = $721;
     $722 = HEAP32[$type>>2]|0;
     $723 = (_getint($722)|0);
     $724 = HEAP16[592>>1]|0;
     $725 = $724&65535;
     $726 = (($723) - ($725))|0;
     $727 = $726&65535;
     HEAP16[132088>>1] = $727;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50713)) {
     $600 = (_get2()|0);
     HEAP16[((134176 + 8|0))>>1] = $600;
     $601 = (_get2()|0);
     HEAP16[((134176 + 10|0))>>1] = $601;
     $602 = HEAP16[((134176 + 8|0))>>1]|0;
     $603 = $602&65535;
     $604 = $601&65535;
     $605 = Math_imul($603, $604)|0;
     $606 = ($605>>>0)>(4096);
     if ($606) {
      HEAP16[((134176 + 10|0))>>1] = 1;
      HEAP16[((134176 + 8|0))>>1] = 1;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 61450)) {
     $607 = HEAP32[$len>>2]|0;
     $608 = (+($607>>>0));
     $609 = (+Math_sqrt((+$608)));
     $610 = $609 < 64.0;
     $611 = (~~(($609))&65535);
     $612 = $610 ? $611 : 64;
     HEAP16[((134176 + 10|0))>>1] = $612;
     HEAP16[((134176 + 8|0))>>1] = $612;
     label = 167;
    } else if ((($11|0) == 50714)) {
     label = 167;
    } else if ((($11|0) == 50711)) {
     $597 = (_get2()|0);
     $598 = ($597<<16>>16)==(2);
     if ($598) {
      HEAP16[189960>>1] = 1;
      HEAP32[584>>2] = 1229539657;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 50712) | (($11|0) == 291)) {
     $599 = HEAP32[$len>>2]|0;
     _linear_table($599);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50459)) {
     $535 = HEAP16[928>>1]|0;
     $536 = HEAP32[864>>2]|0;
     $537 = (_ftell(($536|0))|0);
     $538 = HEAP32[455464>>2]|0;
     $539 = (_get2()|0);
     HEAP16[928>>1] = $539;
     $540 = HEAP32[864>>2]|0;
     (_get2()|0);
     $541 = (_get4()|0);
     $542 = (($541) + ($537))|0;
     (_fseek(($540|0),($542|0),0)|0);
     (_parse_tiff_ifd($537)|0);
     HEAP32[132368>>2] = 65535;
     HEAP32[455464>>2] = $538;
     HEAP16[928>>1] = $535;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50717)) {
     $650 = HEAP32[$type>>2]|0;
     $651 = (_getint($650)|0);
     HEAP32[132368>>2] = $651;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50718)) {
     $652 = HEAP32[$type>>2]|0;
     $653 = (+_getreal($652));
     HEAPF64[457384>>3] = $653;
     $654 = HEAP32[$type>>2]|0;
     $655 = (+_getreal($654));
     $656 = +HEAPF64[457384>>3];
     $657 = $656 / $655;
     HEAPF64[457384>>3] = $657;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50729)) {
     $693 = HEAP32[$type>>2]|0;
     $694 = (+_getreal($693));
     HEAPF64[$xyz>>3] = $694;
     $695 = HEAP32[$type>>2]|0;
     $696 = (+_getreal($695));
     HEAPF64[$8>>3] = $696;
     $697 = +HEAPF64[$xyz>>3];
     $698 = 1.0 - $697;
     $699 = $698 - $696;
     HEAPF64[$9>>3] = $699;
     $700 = +HEAPF64[$xyz>>3];
     $701 = $700 / 0.95045602321624755;
     HEAPF64[$xyz>>3] = $701;
     $702 = (($xyz) + 16|0);
     $703 = +HEAPF64[$702>>3];
     $704 = $703 / 1.0887540578842163;
     HEAPF64[$702>>3] = $704;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50740)) {
     $705 = HEAP32[133072>>2]|0;
     $706 = ($705|0)==(0);
     if ($706) {
      $707 = (_get4()|0);
      $708 = (($707) + ($base))|0;
      _parse_minolta($708);
      $709 = HEAP32[864>>2]|0;
      (_fseek(($709|0),($708|0),0)|0);
      (_parse_tiff_ifd($base)|0);
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 65026)) {
     $745 = HEAP32[$type>>2]|0;
     $746 = ($745|0)==(2);
     if ($746) {
      $747 = HEAP32[864>>2]|0;
      (_fgets((133112|0),64,($747|0))|0);
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 51009)) {
     $735 = HEAP32[864>>2]|0;
     $736 = (_ftell(($735|0))|0);
     HEAP32[133272>>2] = $736;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 64772)) {
     $737 = HEAP32[$len>>2]|0;
     $738 = ($737>>>0)<(13);
     if ($738) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $739 = HEAP32[864>>2]|0;
      (_fseek(($739|0),16,1)|0);
      $740 = (_get4()|0);
      HEAP32[133280>>2] = $740;
      $741 = HEAP32[864>>2]|0;
      (_fseek(($741|0),28,1)|0);
      $742 = (_get4()|0);
      $743 = HEAP32[133280>>2]|0;
      $744 = (($743) + ($742))|0;
      HEAP32[133280>>2] = $744;
      HEAP32[189952>>2] = 9;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 33434)) {
     $351 = HEAP32[$type>>2]|0;
     $352 = (+_getreal($351));
     $353 = $352;
     HEAPF32[454760>>2] = $353;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 33437)) {
     $354 = HEAP32[$type>>2]|0;
     $355 = (+_getreal($354));
     $356 = $355;
     HEAPF32[454752>>2] = $356;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 34306)) {
     $357 = (_get2()|0);
     $358 = $357&65535;
     $359 = (+($358|0));
     $360 = 4096.0 / $359;
     $361 = $360;
     HEAPF32[((133480 + 4|0))>>2] = $361;
     $362 = (_get2()|0);
     $363 = $362&65535;
     $364 = (+($363|0));
     $365 = 4096.0 / $364;
     $366 = $365;
     HEAPF32[133480>>2] = $366;
     $367 = (_get2()|0);
     $368 = $367&65535;
     $369 = (+($368|0));
     $370 = 4096.0 / $369;
     $371 = $370;
     HEAPF32[((133480 + 12|0))>>2] = $371;
     $372 = (_get2()|0);
     $373 = $372&65535;
     $374 = (+($373|0));
     $375 = 4096.0 / $374;
     $376 = $375;
     HEAPF32[((133480 + 8|0))>>2] = $376;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 34307)) {
     $377 = HEAP32[864>>2]|0;
     (_fread(($software|0),1,7,($377|0))|0);
     $378 = (_strncmp($software,457288,6)|0);
     $379 = ($378|0)==(0);
     if ($379) {
      HEAP32[132272>>2] = 4;
      HEAP32[132264>>2] = 0;
      $i$3111 = 0;
      while(1) {
       $380 = HEAP32[864>>2]|0;
       $381 = ((132280 + ($i$3111<<4)|0) + 4|0);
       HEAP32[$vararg_buffer>>2] = $381;
       (_fscanf(($380|0),(456360|0),($vararg_buffer|0))|0);
       $382 = HEAP32[864>>2]|0;
       $383 = (132280 + ($i$3111<<4)|0);
       HEAP32[$vararg_buffer1>>2] = $383;
       (_fscanf(($382|0),(456360|0),($vararg_buffer1|0))|0);
       $384 = HEAP32[864>>2]|0;
       $385 = ((132280 + ($i$3111<<4)|0) + 12|0);
       HEAP32[$vararg_buffer4>>2] = $385;
       (_fscanf(($384|0),(456360|0),($vararg_buffer4|0))|0);
       $386 = HEAP32[864>>2]|0;
       $387 = ((132280 + ($i$3111<<4)|0) + 8|0);
       HEAP32[$vararg_buffer7>>2] = $387;
       (_fscanf(($386|0),(456360|0),($vararg_buffer7|0))|0);
       $388 = HEAP32[184>>2]|0;
       $389 = ($388|0)==(0);
       if (!($389)) {
        $390 = (132280 + ($i$3111<<4)|0);
        $391 = +HEAPF32[$390>>2];
        $392 = $391;
        $393 = $392 + 0.0;
        $394 = ((132280 + ($i$3111<<4)|0) + 4|0);
        $395 = +HEAPF32[$394>>2];
        $396 = $395;
        $397 = $393 + $396;
        $398 = ((132280 + ($i$3111<<4)|0) + 8|0);
        $399 = +HEAPF32[$398>>2];
        $400 = $399;
        $401 = $397 + $400;
        $402 = ((132280 + ($i$3111<<4)|0) + 12|0);
        $403 = +HEAPF32[$402>>2];
        $404 = $403;
        $405 = $401 + $404;
        $406 = (132280 + ($i$3111<<4)|0);
        $407 = +HEAPF32[$406>>2];
        $408 = $407;
        $409 = $408 / $405;
        $410 = $409;
        HEAPF32[$406>>2] = $410;
        $411 = ((132280 + ($i$3111<<4)|0) + 4|0);
        $412 = +HEAPF32[$411>>2];
        $413 = $412;
        $414 = $413 / $405;
        $415 = $414;
        HEAPF32[$411>>2] = $415;
        $416 = ((132280 + ($i$3111<<4)|0) + 8|0);
        $417 = +HEAPF32[$416>>2];
        $418 = $417;
        $419 = $418 / $405;
        $420 = $419;
        HEAPF32[$416>>2] = $420;
        $421 = ((132280 + ($i$3111<<4)|0) + 12|0);
        $422 = +HEAPF32[$421>>2];
        $423 = $422;
        $424 = $423 / $405;
        $425 = $424;
        HEAPF32[$421>>2] = $425;
       }
       $426 = (($i$3111) + 1)|0;
       $exitcond177 = ($426|0)==(3);
       if ($exitcond177) {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       } else {
        $i$3111 = $426;
       }
      }
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 29184)) {
     $277 = (_get4()|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $277;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 29185)) {
     $278 = (_get4()|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $278;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 29217)) {
     $279 = (_get4()|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $279;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 40976)) {
     $444 = (_get4()|0);
     HEAP32[134144>>2] = $444;
     $445 = ((454920 + (($ifd$0142*44)|0)|0) + 12|0);
     $446 = HEAP32[$445>>2]|0;
     if ((($446|0) == 32770)) {
      HEAP32[189952>>2] = 14;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      break L11;
     } else if ((($446|0) == 32772)) {
      HEAP32[189952>>2] = 15;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      break L11;
     } else if ((($446|0) == 32773)) {
      HEAP32[189952>>2] = 16;
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      break L11;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      break L11;
     }
    } else if ((($11|0) == 46275)) {
     ;HEAP8[133624+0>>0]=HEAP8[457304+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[457304+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[457304+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[457304+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[457304+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[457304+5>>0]|0;HEAP8[133624+6>>0]=HEAP8[457304+6>>0]|0;
     $447 = HEAP32[864>>2]|0;
     $448 = (_ftell(($447|0))|0);
     HEAP32[133280>>2] = $448;
     $449 = HEAP32[$len>>2]|0;
     $ifd$1 = $ifd$0142;$ima_len$1 = $449;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 46279)) {
     $450 = ($ima_len$0144|0)==(0);
     if ($450) {
      $ifd$1 = $ifd$0142;$ima_len$1 = 0;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $451 = HEAP32[864>>2]|0;
      (_fseek(($451|0),38,1)|0);
      label = 125;
     }
    } else if ((($11|0) == 65024) | (($11|0) == 33424)) {
     $348 = HEAP32[864>>2]|0;
     $349 = (_get4()|0);
     $350 = (($349) + ($base))|0;
     (_fseek(($348|0),($350|0),0)|0);
     _parse_kodak_ifd($base);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 33422)) {
     $320 = HEAP32[584>>2]|0;
     $321 = ($320|0)==(9);
     if ($321) {
      $c$5127 = 0;
      while(1) {
       $322 = HEAP32[864>>2]|0;
       $323 = (_getc_unlocked(($322|0))|0);
       $324 = $323 & 3;
       $325 = $324&255;
       $326 = (608 + ($c$5127)|0);
       HEAP8[$326>>0] = $325;
       $327 = (($c$5127) + 1)|0;
       $exitcond179 = ($327|0)==(36);
       if ($exitcond179) {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       } else {
        $c$5127 = $327;
       }
      }
     } else {
      label = 96;
     }
    } else if ((($11|0) == 64777)) {
     label = 96;
    } else if ((($11|0) == 46274)) {
     label = 125;
    } else if ((($11|0) == 50706)) {
     $543 = HEAP32[133072>>2]|0;
     $544 = $543 << 8;
     $545 = HEAP32[864>>2]|0;
     $546 = (_getc_unlocked(($545|0))|0);
     $547 = (($546) + ($544))|0;
     HEAP32[133072>>2] = $547;
     $548 = $547 << 8;
     $549 = HEAP32[864>>2]|0;
     $550 = (_getc_unlocked(($549|0))|0);
     $551 = (($550) + ($548))|0;
     HEAP32[133072>>2] = $551;
     $552 = $551 << 8;
     $553 = HEAP32[864>>2]|0;
     $554 = (_getc_unlocked(($553|0))|0);
     $555 = (($554) + ($552))|0;
     HEAP32[133072>>2] = $555;
     $556 = $555 << 8;
     $557 = HEAP32[864>>2]|0;
     $558 = (_getc_unlocked(($557|0))|0);
     $559 = (($558) + ($556))|0;
     HEAP32[133072>>2] = $559;
     $560 = HEAP8[133624>>0]|0;
     $561 = ($560<<24>>24)==(0);
     if ($561) {
      HEAP8[133624>>0]=4673092&255;HEAP8[133624+1>>0]=(4673092>>8)&255;HEAP8[133624+2>>0]=(4673092>>16)&255;HEAP8[133624+3>>0]=4673092>>24;
     }
     HEAP32[133208>>2] = 1;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50710)) {
     $562 = HEAP32[584>>2]|0;
     $563 = ($562|0)==(9);
     if ($563) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $564 = HEAP32[$len>>2]|0;
      $565 = ($564>>>0)>(4);
      if ($565) {
       HEAP32[$len>>2] = 4;
      }
      $566 = HEAP32[$len>>2]|0;
      HEAP32[132272>>2] = $566;
      $567 = HEAP32[864>>2]|0;
      (_fread(($cfa_pc|0),1,($566|0),($567|0))|0);
      $plen$1$ph = $plen$0145;
      label = 153;
     }
    } else if ((($11|0) == 50455) | (($11|0) == 50454)) {
     $518 = HEAP32[$len>>2]|0;
     $519 = (_malloc($518)|0);
     $520 = ($519|0)==(0|0);
     if ($520) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $521 = HEAP32[$len>>2]|0;
      $522 = HEAP32[864>>2]|0;
      (_fread(($519|0),1,($521|0),($522|0))|0);
      $523 = (($519) + -1|0);
      $cp$0100 = $523;
      while(1) {
       $524 = HEAP32[$len>>2]|0;
       $525 = (($519) + ($524)|0);
       $526 = ($cp$0100>>>0)<($525>>>0);
       if (!($526)) {
        break;
       }
       $527 = (($cp$0100) + 1|0);
       $528 = (_strncmp($527,457328,8)|0);
       $529 = ($528|0)==(0);
       if ($529) {
        $530 = (($cp$0100) + 9|0);
        HEAP32[$vararg_buffer13>>2] = 133480;
        $vararg_ptr16 = (($vararg_buffer13) + 4|0);
        HEAP32[$vararg_ptr16>>2] = ((133480 + 4|0));
        $vararg_ptr17 = (($vararg_buffer13) + 8|0);
        HEAP32[$vararg_ptr17>>2] = ((133480 + 8|0));
        (_sscanf($530,457344,$vararg_buffer13)|0);
       }
       $531 = (_strchr($527,10)|0);
       $532 = ($531|0)==(0|0);
       if ($532) {
        break;
       } else {
        $cp$0100 = $531;
       }
      }
      _free($519);
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 50458)) {
     $533 = HEAP8[133624>>0]|0;
     $534 = ($533<<24>>24)==(0);
     if ($534) {
      dest=133624+0|0; src=457360+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 315)) {
     $193 = HEAP32[864>>2]|0;
     (_fread((454800|0),64,1,($193|0))|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 322)) {
     $194 = HEAP32[$type>>2]|0;
     $195 = (_getint($194)|0);
     $196 = ((454920 + (($ifd$0142*44)|0)|0) + 36|0);
     HEAP32[$196>>2] = $195;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 259)) {
     $106 = HEAP32[$type>>2]|0;
     $107 = (_getint($106)|0);
     $108 = ((454920 + (($ifd$0142*44)|0)|0) + 12|0);
     HEAP32[$108>>2] = $107;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 274)) {
     $157 = (_get2()|0);
     $158 = $157&65535;
     $159 = $158 & 7;
     $160 = (457168 + ($159)|0);
     $161 = HEAP8[$160>>0]|0;
     $162 = $161 << 24 >> 24;
     $163 = (($162) + -48)|0;
     $164 = ((454920 + (($ifd$0142*44)|0)|0) + 24|0);
     HEAP32[$164>>2] = $163;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 306)) {
     _get_timestamp(0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 29264)) {
     $280 = HEAP32[864>>2]|0;
     $281 = (_ftell(($280|0))|0);
     _parse_minolta($281);
     HEAP16[132336>>1] = 0;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 29443)) {
     $282 = (_get2()|0);
     $283 = (+($282&65535));
     HEAPF32[((133480 + 4|0))>>2] = $283;
     $284 = (_get2()|0);
     $285 = (+($284&65535));
     HEAPF32[133480>>2] = $285;
     $286 = (_get2()|0);
     $287 = (+($286&65535));
     HEAPF32[((133480 + 8|0))>>2] = $287;
     $288 = (_get2()|0);
     $289 = (+($288&65535));
     HEAPF32[((133480 + 12|0))>>2] = $289;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 29459)) {
     $290 = (_get2()|0);
     $291 = (+($290&65535));
     HEAPF32[133480>>2] = $291;
     $292 = (_get2()|0);
     $293 = (+($292&65535));
     HEAPF32[((133480 + 4|0))>>2] = $293;
     $294 = (_get2()|0);
     $295 = (+($294&65535));
     HEAPF32[((133480 + 8|0))>>2] = $295;
     $296 = (_get2()|0);
     $297 = (+($296&65535));
     HEAPF32[((133480 + 12|0))>>2] = $297;
     $298 = +HEAPF32[((133480 + 4|0))>>2];
     $299 = $298 == 1024.0;
     if ($299) {
      $300 = +HEAPF32[((133480 + 8|0))>>2];
      $301 = $300 == 1024.0;
      $303 = $301;
     } else {
      $303 = 0;
     }
     $302 = $303&1;
     $304 = $302 << 1;
     $305 = (133480 + ($304<<2)|0);
     $306 = +HEAPF32[$305>>2];
     $307 = $304 | 1;
     $308 = (133480 + ($307<<2)|0);
     $309 = +HEAPF32[$308>>2];
     $310 = $306 + $309;
     HEAPF32[$305>>2] = $310;
     $311 = +HEAPF32[$308>>2];
     $312 = $310 - $311;
     HEAPF32[$308>>2] = $312;
     $313 = +HEAPF32[$305>>2];
     $314 = $313 - $312;
     HEAPF32[$305>>2] = $314;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 34310)) {
     $427 = HEAP32[864>>2]|0;
     $428 = (_ftell(($427|0))|0);
     _parse_mos($428);
     label = 111;
    } else if ((($11|0) == 34303)) {
     label = 111;
    } else if ((($11|0) == 34665)) {
     $429 = HEAP32[864>>2]|0;
     $430 = (_get4()|0);
     $431 = (($430) + ($base))|0;
     (_fseek(($429|0),($431|0),0)|0);
     _parse_exif($base);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 33405)) {
     $315 = HEAP32[864>>2]|0;
     (_fgets((133112|0),64,($315|0))|0);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 33421)) {
     $316 = (_get2()|0);
     $317 = ($316<<16>>16)==(6);
     if ($317) {
      $318 = (_get2()|0);
      $319 = ($318<<16>>16)==(6);
      if ($319) {
       HEAP32[584>>2] = 9;
       $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      } else {
       $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      }
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    } else if ((($11|0) == 400)) {
     $236 = 133624;
     $237 = $236;
     HEAP8[$237>>0]=1852989779&255;HEAP8[$237+1>>0]=(1852989779>>8)&255;HEAP8[$237+2>>0]=(1852989779>>16)&255;HEAP8[$237+3>>0]=1852989779>>24;
     $238 = (($236) + 4)|0;
     $239 = $238;
     HEAP8[$239>>0]=6710895&255;HEAP8[$239+1>>0]=(6710895>>8)&255;HEAP8[$239+2>>0]=(6710895>>16)&255;HEAP8[$239+3>>0]=6710895>>24;
     HEAP32[132368>>2] = 4095;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 28688)) {
     $245 = (_get2()|0);
     $246 = $245&65535;
     $247 = $246 >>> 2;
     $248 = $247 & 4095;
     $249 = (($sony_curve) + 4|0);
     HEAP32[$249>>2] = $248;
     $250 = (_get2()|0);
     $251 = $250&65535;
     $252 = $251 >>> 2;
     $253 = $252 & 4095;
     $254 = (($sony_curve) + 8|0);
     HEAP32[$254>>2] = $253;
     $255 = (_get2()|0);
     $256 = $255&65535;
     $257 = $256 >>> 2;
     $258 = $257 & 4095;
     $259 = (($sony_curve) + 12|0);
     HEAP32[$259>>2] = $258;
     $260 = (_get2()|0);
     $261 = $260&65535;
     $262 = $261 >>> 2;
     $263 = $262 & 4095;
     $264 = (($sony_curve) + 16|0);
     HEAP32[$264>>2] = $263;
     $265 = HEAP32[$sony_curve>>2]|0;
     $j$1131 = (($265) + 1)|0;
     $266 = (($sony_curve) + 4|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = ($j$1131>>>0)>($267>>>0);
     if (!($268)) {
      $269 = HEAP32[$266>>2]|0;
      $j$1$in132 = $265;$j$1133 = $j$1131;
      while(1) {
       $270 = (936 + ($j$1$in132<<1)|0);
       $271 = HEAP16[$270>>1]|0;
       $272 = $271&65535;
       $273 = (($272) + 1)|0;
       $274 = $273&65535;
       $275 = (936 + ($j$1133<<1)|0);
       HEAP16[$275>>1] = $274;
       $j$1 = (($j$1133) + 1)|0;
       $276 = ($j$1>>>0)>($269>>>0);
       if ($276) {
        break;
       } else {
        $j$1$in132$phi = $j$1133;$j$1133 = $j$1;$j$1$in132 = $j$1$in132$phi;
       }
      }
     }
     $240 = (($sony_curve) + 4|0);
     $241 = HEAP32[$240>>2]|0;
     $j$1131$1 = (($241) + 1)|0;
     $242 = (($sony_curve) + 8|0);
     $243 = HEAP32[$242>>2]|0;
     $244 = ($j$1131$1>>>0)>($243>>>0);
     if (!($244)) {
      $875 = HEAP32[$242>>2]|0;
      $j$1$in132$1 = $241;$j$1133$1 = $j$1131$1;
      while(1) {
       $876 = (936 + ($j$1$in132$1<<1)|0);
       $877 = HEAP16[$876>>1]|0;
       $878 = $877&65535;
       $879 = (($878) + 2)|0;
       $880 = $879&65535;
       $881 = (936 + ($j$1133$1<<1)|0);
       HEAP16[$881>>1] = $880;
       $j$1$1 = (($j$1133$1) + 1)|0;
       $882 = ($j$1$1>>>0)>($875>>>0);
       if ($882) {
        break;
       } else {
        $j$1$in132$1$phi = $j$1133$1;$j$1133$1 = $j$1$1;$j$1$in132$1 = $j$1$in132$1$phi;
       }
      }
     }
     $883 = (($sony_curve) + 8|0);
     $884 = HEAP32[$883>>2]|0;
     $j$1131$2 = (($884) + 1)|0;
     $885 = (($sony_curve) + 12|0);
     $886 = HEAP32[$885>>2]|0;
     $887 = ($j$1131$2>>>0)>($886>>>0);
     if (!($887)) {
      $888 = HEAP32[$885>>2]|0;
      $j$1$in132$2 = $884;$j$1133$2 = $j$1131$2;
      while(1) {
       $889 = (936 + ($j$1$in132$2<<1)|0);
       $890 = HEAP16[$889>>1]|0;
       $891 = $890&65535;
       $892 = (($891) + 4)|0;
       $893 = $892&65535;
       $894 = (936 + ($j$1133$2<<1)|0);
       HEAP16[$894>>1] = $893;
       $j$1$2 = (($j$1133$2) + 1)|0;
       $895 = ($j$1$2>>>0)>($888>>>0);
       if ($895) {
        break;
       } else {
        $j$1$in132$2$phi = $j$1133$2;$j$1133$2 = $j$1$2;$j$1$in132$2 = $j$1$in132$2$phi;
       }
      }
     }
     $896 = (($sony_curve) + 12|0);
     $897 = HEAP32[$896>>2]|0;
     $j$1131$3 = (($897) + 1)|0;
     $898 = (($sony_curve) + 16|0);
     $899 = HEAP32[$898>>2]|0;
     $900 = ($j$1131$3>>>0)>($899>>>0);
     if (!($900)) {
      $901 = HEAP32[$898>>2]|0;
      $j$1$in132$3 = $897;$j$1133$3 = $j$1131$3;
      while(1) {
       $902 = (936 + ($j$1$in132$3<<1)|0);
       $903 = HEAP16[$902>>1]|0;
       $904 = $903&65535;
       $905 = (($904) + 8)|0;
       $906 = $905&65535;
       $907 = (936 + ($j$1133$3<<1)|0);
       HEAP16[$907>>1] = $906;
       $j$1$3 = (($j$1133$3) + 1)|0;
       $908 = ($j$1$3>>>0)>($901>>>0);
       if ($908) {
        break;
       } else {
        $j$1$in132$3$phi = $j$1133$3;$j$1133$3 = $j$1$3;$j$1$in132$3 = $j$1$in132$3$phi;
       }
      }
     }
     $909 = (($sony_curve) + 16|0);
     $910 = HEAP32[$909>>2]|0;
     $j$1131$4 = (($910) + 1)|0;
     $911 = (($sony_curve) + 20|0);
     $912 = HEAP32[$911>>2]|0;
     $913 = ($j$1131$4>>>0)>($912>>>0);
     if ($913) {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     } else {
      $914 = HEAP32[$911>>2]|0;
      $j$1$in132$4 = $910;$j$1133$4 = $j$1131$4;
      while(1) {
       $915 = (936 + ($j$1$in132$4<<1)|0);
       $916 = HEAP16[$915>>1]|0;
       $917 = $916&65535;
       $918 = (($917) + 16)|0;
       $919 = $918&65535;
       $920 = (936 + ($j$1133$4<<1)|0);
       HEAP16[$920>>1] = $919;
       $j$1$4 = (($j$1133$4) + 1)|0;
       $921 = ($j$1$4>>>0)>($914>>>0);
       if ($921) {
        $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
        break;
       } else {
        $j$1$in132$4$phi = $j$1133$4;$j$1133$4 = $j$1$4;$j$1$in132$4 = $j$1$in132$4$phi;
       }
      }
     }
    } else if ((($11|0) == 277)) {
     $165 = HEAP32[$type>>2]|0;
     $166 = (_getint($165)|0);
     $167 = $166 & 7;
     $168 = ((454920 + (($ifd$0142*44)|0)|0) + 28|0);
     HEAP32[$168>>2] = $167;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 61448) | (($11|0) == 514) | (($11|0) == 279)) {
     $169 = (_get4()|0);
     $170 = ((454920 + (($ifd$0142*44)|0)|0) + 32|0);
     HEAP32[$170>>2] = $169;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 34853)) {
     $432 = HEAP32[864>>2]|0;
     $433 = (_get4()|0);
     $434 = (($433) + ($base))|0;
     (_fseek(($432|0),($434|0),0)|0);
     _parse_gps($base);
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 50831) | (($11|0) == 34675)) {
     $435 = HEAP32[864>>2]|0;
     $436 = (_ftell(($435|0))|0);
     HEAP32[456256>>2] = $436;
     $437 = HEAP32[$len>>2]|0;
     HEAP32[456264>>2] = $437;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 37122)) {
     $438 = (_get4()|0);
     HEAP32[159760>>2] = $438;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 37386)) {
     $439 = HEAP32[$type>>2]|0;
     $440 = (+_getreal($439));
     $441 = $440;
     HEAPF32[455472>>2] = $441;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 37393)) {
     $442 = HEAP32[$type>>2]|0;
     $443 = (_getint($442)|0);
     HEAP32[454768>>2] = $443;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else if ((($11|0) == 37400)) {
     HEAP32[132264>>2] = 0;
     $845 = HEAP32[$type>>2]|0;
     (+_getreal($845));
     $846 = HEAP32[$type>>2]|0;
     $847 = (+_getreal($846));
     $848 = $847;
     HEAPF32[132280>>2] = $848;
     $849 = HEAP32[$type>>2]|0;
     $850 = (+_getreal($849));
     $851 = $850;
     HEAPF32[((132280 + 4|0))>>2] = $851;
     $852 = HEAP32[$type>>2]|0;
     $853 = (+_getreal($852));
     $854 = $853;
     HEAPF32[((132280 + 8|0))>>2] = $854;
     $855 = HEAP32[$type>>2]|0;
     (+_getreal($855));
     $856 = HEAP32[$type>>2]|0;
     $857 = (+_getreal($856));
     $858 = $857;
     HEAPF32[((132280 + 16|0))>>2] = $858;
     $859 = HEAP32[$type>>2]|0;
     $860 = (+_getreal($859));
     $861 = $860;
     HEAPF32[((132280 + 20|0))>>2] = $861;
     $862 = HEAP32[$type>>2]|0;
     $863 = (+_getreal($862));
     $864 = $863;
     HEAPF32[((132280 + 24|0))>>2] = $864;
     $865 = HEAP32[$type>>2]|0;
     (+_getreal($865));
     $866 = HEAP32[$type>>2]|0;
     $867 = (+_getreal($866));
     $868 = $867;
     HEAPF32[((132280 + 32|0))>>2] = $868;
     $869 = HEAP32[$type>>2]|0;
     $870 = (+_getreal($869));
     $871 = $870;
     HEAPF32[((132280 + 36|0))>>2] = $871;
     $872 = HEAP32[$type>>2]|0;
     $873 = (+_getreal($872));
     $874 = $873;
     HEAPF32[((132280 + 40|0))>>2] = $874;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    } else {
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    }
   } while(0);
   do {
    if ((label|0) == 41) {
     label = 0;
     $117 = (_get4()|0);
     $118 = (($117) + ($base))|0;
     $119 = ((454920 + (($ifd$0142*44)|0)|0) + 20|0);
     HEAP32[$119>>2] = $118;
     $120 = ((454920 + (($ifd$0142*44)|0)|0) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(0);
     $123 = ($118|0)>(0);
     $or$cond7 = $122 & $123;
     if ($or$cond7) {
      $124 = HEAP32[864>>2]|0;
      (_fseek(($124|0),($118|0),0)|0);
      $125 = (_ljpeg_start($jh,1)|0);
      $126 = ($125|0)==(0);
      if ($126) {
       $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      } else {
       $127 = ((454920 + (($ifd$0142*44)|0)|0) + 12|0);
       HEAP32[$127>>2] = 6;
       $128 = HEAP32[$4>>2]|0;
       $129 = (454920 + (($ifd$0142*44)|0)|0);
       HEAP32[$129>>2] = $128;
       $130 = HEAP32[$5>>2]|0;
       $131 = ((454920 + (($ifd$0142*44)|0)|0) + 4|0);
       HEAP32[$131>>2] = $130;
       $132 = HEAP32[$jh>>2]|0;
       HEAP32[$120>>2] = $132;
       $133 = HEAP32[$6>>2]|0;
       $134 = ((454920 + (($ifd$0142*44)|0)|0) + 28|0);
       HEAP32[$134>>2] = $133;
       $135 = HEAP32[$7>>2]|0;
       $136 = ($135|0)==(0);
       if ($136) {
        $137 = HEAP32[$6>>2]|0;
        $138 = $137 & 1;
        $139 = ($138|0)==(0);
        if ($139) {
         $140 = HEAP32[$129>>2]|0;
         $141 = Math_imul($140, $137)|0;
         HEAP32[$129>>2] = $141;
        }
       }
       $142 = HEAP32[$129>>2]|0;
       $143 = HEAP32[$131>>2]|0;
       $144 = $143 << 2;
       $145 = ($142|0)>($144|0);
       $146 = $145&1;
       $147 = HEAP32[$6>>2]|0;
       $148 = $147 ^ -1;
       $149 = $146 & $148;
       $150 = ($149|0)==(0);
       if (!($150)) {
        $151 = (($142|0) / 2)&-1;
        HEAP32[$129>>2] = $151;
        $152 = HEAP32[$131>>2]|0;
        $153 = $152 << 1;
        HEAP32[$131>>2] = $153;
       }
       $154 = HEAP16[928>>1]|0;
       $155 = HEAP32[$119>>2]|0;
       $156 = (($155) + 12)|0;
       (_parse_tiff($156)|0);
       HEAP16[928>>1] = $154;
       $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
      }
     } else {
      $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
     }
    }
    else if ((label|0) == 96) {
     label = 0;
     $328 = HEAP32[$len>>2]|0;
     $329 = ($328>>>0)>(16);
     $$ = $329 ? 16 : $328;
     $330 = HEAP32[864>>2]|0;
     (_fread(($cfa_pat|0),1,($$|0),($330|0))|0);
     HEAP32[132272>>2] = 0;
     $331 = ($$|0)==(0);
     if ($331) {
      $plen$1$ph = 0;
      label = 153;
     } else {
      $340 = 0;$cfa$0115 = 0;$i$2116 = 0;
      while(1) {
       $332 = (($cfa_pat) + ($i$2116)|0);
       $333 = HEAP8[$332>>0]|0;
       $334 = $333&255;
       $335 = 1 << $334;
       $336 = $335 & $cfa$0115;
       $337 = ($336|0)==(0);
       $338 = $337&1;
       $339 = (($338) + ($340))|0;
       $341 = HEAP8[$332>>0]|0;
       $342 = $341&255;
       $343 = 1 << $342;
       $344 = $343 | $cfa$0115;
       $345 = (($i$2116) + 1)|0;
       $346 = ($345>>>0)<($$>>>0);
       $347 = ($339>>>0)<(4);
       $or$cond10 = $346 & $347;
       if ($or$cond10) {
        $340 = $339;$cfa$0115 = $344;$i$2116 = $345;
       } else {
        $$lcssa232 = $339;$$lcssa233 = $344;
        break;
       }
      }
      HEAP32[132272>>2] = $$lcssa232;
      if ((($$lcssa233|0) == 56)) {
       ;HEAP8[$cfa_pc+0>>0]=HEAP8[457280+0>>0]|0;HEAP8[$cfa_pc+1>>0]=HEAP8[457280+1>>0]|0;HEAP8[$cfa_pc+2>>0]=HEAP8[457280+2>>0]|0;
       $plen$1$ph = $$;
       label = 153;
       break;
      } else if ((($$lcssa233|0) == 58)) {
       HEAP32[$cfa_pc>>2] = 17040133;
       $plen$1$ph = $$;
       label = 153;
       break;
      } else {
       $568 = $$lcssa232;$plen$1 = $$;
       label = 154;
       break;
      }
     }
    }
    else if ((label|0) == 111) {
     label = 0;
     ;HEAP8[133624+0>>0]=HEAP8[457296+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[457296+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[457296+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[457296+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[457296+4>>0]|0;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    }
    else if ((label|0) == 125) {
     label = 0;
     $452 = HEAP32[864>>2]|0;
     (_fseek(($452|0),40,1)|0);
     $453 = (_get4()|0);
     $454 = $453&65535;
     HEAP16[132336>>1] = $454;
     $455 = (_get4()|0);
     $456 = $455&65535;
     HEAP16[133064>>1] = $456;
     $457 = (_get4()|0);
     $458 = $457 & 7;
     $459 = $458&65535;
     HEAP16[592>>1] = $459;
     $460 = HEAP16[132336>>1]|0;
     $461 = $460&65535;
     $462 = (($461) - ($458))|0;
     $463 = (_get4()|0);
     $464 = $463 & 7;
     $465 = (($462) - ($464))|0;
     $466 = $465&65535;
     HEAP16[132088>>1] = $466;
     $467 = (_get4()|0);
     $468 = $467 & 7;
     $469 = $468&65535;
     HEAP16[600>>1] = $469;
     $470 = HEAP16[133064>>1]|0;
     $471 = $470&65535;
     $472 = (($471) - ($468))|0;
     $473 = (_get4()|0);
     $474 = $473 & 7;
     $475 = (($472) - ($474))|0;
     $476 = $475&65535;
     HEAP16[132080>>1] = $476;
     $477 = HEAP16[132336>>1]|0;
     $478 = ($477<<16>>16)==(7262);
     if ($478) {
      HEAP16[132080>>1] = 5444;
      HEAP16[132088>>1] = 7244;
      HEAP16[592>>1] = 7;
     }
     $479 = HEAP32[864>>2]|0;
     (_fseek(($479|0),52,1)|0);
     $480 = (+_getreal(11));
     $481 = $480;
     HEAPF32[133480>>2] = $481;
     $482 = (+_getreal(11));
     $483 = $482;
     HEAPF32[((133480 + 4|0))>>2] = $483;
     $484 = (+_getreal(11));
     $485 = $484;
     HEAPF32[((133480 + 8|0))>>2] = $485;
     $486 = HEAP32[864>>2]|0;
     (_fseek(($486|0),114,1)|0);
     $487 = (_get2()|0);
     $488 = $487&65535;
     $489 = $488 >>> 7;
     $490 = ($489*90)|0;
     HEAP32[454784>>2] = $490;
     $491 = HEAP16[132088>>1]|0;
     $492 = $491&65535;
     $493 = HEAP16[132080>>1]|0;
     $494 = $493&65535;
     $495 = ($492*6)|0;
     $496 = Math_imul($495, $494)|0;
     $497 = ($496|0)==($ima_len$0144|0);
     if ($497) {
      $498 = (($490>>>0) % 180)&-1;
      $499 = ($498|0)==(90);
      if ($499) {
       $500 = (($494) + ($492))|0;
       $501 = HEAP16[132080>>1]|0;
       $502 = $501&65535;
       $503 = (($500) - ($502))|0;
       $504 = $503&65535;
       HEAP16[132080>>1] = $504;
       HEAP16[132088>>1] = $501;
      }
      $505 = HEAP16[132088>>1]|0;
      HEAP16[132336>>1] = $505;
      $506 = HEAP16[132080>>1]|0;
      HEAP16[133064>>1] = $506;
      HEAP32[454784>>2] = 0;
      HEAP32[584>>2] = 0;
      HEAP16[600>>1] = 0;
      HEAP16[592>>1] = 0;
     }
     $507 = HEAP16[132080>>1]|0;
     $508 = $507&65535;
     $509 = HEAP16[132088>>1]|0;
     $510 = $509&65535;
     $511 = Math_imul($510, $508)|0;
     $512 = (($511>>>0) / 1000000)&-1;
     HEAP32[$vararg_buffer10>>2] = $512;
     (_sprintf(133688,457312,$vararg_buffer10)|0);
     HEAP32[189952>>2] = 17;
     $513 = HEAP32[584>>2]|0;
     $514 = ($513|0)==(0);
     if (!($514)) {
      $515 = HEAP16[592>>1]|0;
      $516 = $515 & 1;
      $517 = ($516<<16>>16)==(0);
      if (!($517)) {
       HEAP32[584>>2] = 1633771873;
      }
      HEAP32[189952>>2] = 18;
     }
     HEAP32[132368>>2] = 65535;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    }
    else if ((label|0) == 167) {
     label = 0;
     $613 = HEAP16[((134176 + 8|0))>>1]|0;
     $614 = $613&65535;
     $615 = HEAP16[((134176 + 10|0))>>1]|0;
     $616 = $615&65535;
     $617 = Math_imul($616, $614)|0;
     $618 = ($617|0)==(0);
     if ($618) {
      HEAP16[((134176 + 10|0))>>1] = 1;
      HEAP16[((134176 + 8|0))>>1] = 1;
     }
     $619 = HEAP16[((134176 + 8|0))>>1]|0;
     $620 = $619&65535;
     $621 = HEAP16[((134176 + 10|0))>>1]|0;
     $622 = $621&65535;
     $623 = Math_imul($622, $620)|0;
     $624 = ($623|0)==(0);
     if (!($624)) {
      $c$1496 = 0;
      while(1) {
       $625 = HEAP32[$type>>2]|0;
       $626 = (+_getreal($625));
       $627 = (~~(($626))&65535);
       $628 = (($c$1496) + 6)|0;
       $629 = (134176 + ($628<<1)|0);
       HEAP16[$629>>1] = $627;
       $630 = (($c$1496) + 1)|0;
       $631 = HEAP16[((134176 + 8|0))>>1]|0;
       $632 = $631&65535;
       $633 = HEAP16[((134176 + 10|0))>>1]|0;
       $634 = $633&65535;
       $635 = Math_imul($634, $632)|0;
       $636 = ($630|0)<($635|0);
       if ($636) {
        $c$1496 = $630;
       } else {
        break;
       }
      }
     }
     HEAP32[132360>>2] = 0;
     $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$0145;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
    }
   } while(0);
   if ((label|0) == 153) {
    label = 0;
    $$pr200 = HEAP32[132272>>2]|0;
    $568 = $$pr200;$plen$1 = $plen$1$ph;
    label = 154;
   }
   if ((label|0) == 154) {
    label = 0;
    $569 = ($568|0)==(0);
    if ($569) {
     $c$13$lcssa = 0;
    } else {
     $570 = HEAP32[132272>>2]|0;
     $571 = ($570>>>0)>(1);
     $c$13121 = 0;
     while(1) {
      $572 = $c$13121&255;
      $573 = (($cfa_pc) + ($c$13121)|0);
      $574 = HEAP8[$573>>0]|0;
      $575 = $574&255;
      $576 = (($tab) + ($575)|0);
      HEAP8[$576>>0] = $572;
      $577 = (($c$13121) + 1)|0;
      $578 = ($577>>>0)<($570>>>0);
      if ($578) {
       $c$13121 = $577;
      } else {
       break;
      }
     }
     $umax = $571 ? $570 : 1;
     $c$13$lcssa = $umax;
    }
    $579 = (457376 + ($c$13$lcssa)|0);
    HEAP8[$579>>0] = 0;
    $580 = HEAP32[584>>2]|0;
    $582 = $580;$584 = 15;
    while(1) {
     $581 = $582 << 2;
     $583 = (($584>>>0) % ($plen$1>>>0))&-1;
     $585 = (($cfa_pat) + ($583)|0);
     $586 = HEAP8[$585>>0]|0;
     $587 = $586&255;
     $588 = (($tab) + ($587)|0);
     $589 = HEAP8[$588>>0]|0;
     $590 = $589&255;
     $591 = $590 | $581;
     $592 = (($584) + -1)|0;
     $593 = ($584|0)==(0);
     if ($593) {
      $$lcssa234 = $591;
      break;
     } else {
      $582 = $591;$584 = $592;
     }
    }
    $594 = ($$lcssa234|0)==(0);
    $595 = $594&1;
    $596 = (($$lcssa234) - ($595))|0;
    HEAP32[584>>2] = $596;
    $ifd$1 = $ifd$0142;$ima_len$1 = $ima_len$0144;$plen$2 = $plen$1;$sony_key$1 = $sony_key$0148;$sony_length$1 = $sony_length$0147;$sony_offset$1 = $sony_offset$0146;$use_cm$1 = $use_cm$0143;
   }
   $748 = HEAP32[864>>2]|0;
   $749 = HEAP32[$save>>2]|0;
   (_fseek(($748|0),($749|0),0)|0);
   $750 = ($10|0)==(0);
   if ($750) {
    $sony_key$1$lcssa = $sony_key$1;$sony_length$1$lcssa = $sony_length$1;$sony_offset$1$lcssa = $sony_offset$1;$use_cm$1$lcssa = $use_cm$1;
    break;
   } else {
    $$in = $10;$ifd$0142 = $ifd$1;$ima_len$0144 = $ima_len$1;$plen$0145 = $plen$2;$sony_key$0148 = $sony_key$1;$sony_length$0147 = $sony_length$1;$sony_offset$0146 = $sony_offset$1;$use_cm$0143 = $use_cm$1;
   }
  }
  $751 = ($sony_length$1$lcssa|0)==(0);
  if ($751) {
   $use_cm$0$lcssa201 = $use_cm$1$lcssa;
  } else {
   $752 = (_malloc($sony_length$1$lcssa)|0);
   $753 = ($752|0)==(0|0);
   if ($753) {
    $use_cm$0$lcssa201 = $use_cm$1$lcssa;
   } else {
    $754 = HEAP32[864>>2]|0;
    (_fseek(($754|0),($sony_offset$1$lcssa|0),0)|0);
    $755 = HEAP32[864>>2]|0;
    (_fread(($752|0),($sony_length$1$lcssa|0),1,($755|0))|0);
    $756 = $sony_length$1$lcssa >>> 2;
    _sony_decrypt($752,$756,1,$sony_key$1$lcssa);
    $757 = HEAP32[864>>2]|0;
    $758 = (_tmpfile()|0);
    HEAP32[864>>2] = $758;
    $759 = ($758|0)==(0|0);
    if (!($759)) {
     (_fwrite(($752|0),($sony_length$1$lcssa|0),1,($758|0))|0);
     $760 = HEAP32[864>>2]|0;
     (_fseek(($760|0),0,0)|0);
     $761 = (0 - ($sony_offset$1$lcssa))|0;
     (_parse_tiff_ifd($761)|0);
     $762 = HEAP32[864>>2]|0;
     (_fclose(($762|0))|0);
    }
    HEAP32[864>>2] = $757;
    _free($752);
    $use_cm$0$lcssa201 = $use_cm$1$lcssa;
   }
  }
 }
 $763 = HEAP32[132272>>2]|0;
 $764 = ($763|0)==(0);
 if (!($764)) {
  $765 = HEAP32[132272>>2]|0;
  $766 = ($765|0)==(0);
  $767 = (($765) + -1)|0;
  $i$973 = 0;
  while(1) {
   if (!($766)) {
    $768 = (($ab) + ($i$973<<3)|0);
    $769 = +HEAPF64[$768>>3];
    $c$2070 = 0;
    while(1) {
     $770 = ((($cc) + ($i$973<<5)|0) + ($c$2070<<3)|0);
     $771 = +HEAPF64[$770>>3];
     $772 = $769 * $771;
     HEAPF64[$770>>3] = $772;
     $773 = (($c$2070) + 1)|0;
     $exitcond167 = ($c$2070|0)==($767|0);
     if ($exitcond167) {
      break;
     } else {
      $c$2070 = $773;
     }
    }
   }
   $774 = (($i$973) + 1)|0;
   $775 = ($774>>>0)<($765>>>0);
   if ($775) {
    $i$973 = $774;
   } else {
    break;
   }
  }
 }
 $776 = ($use_cm$0$lcssa201|0)!=(0);
 if ($776) {
  $777 = HEAP32[132272>>2]|0;
  $778 = ($777|0)==(0);
  if (!($778)) {
   $779 = HEAP32[132272>>2]|0;
   $780 = ($779|0)==(0);
   $781 = (($779) + -1)|0;
   $c$2168 = 0;
   while(1) {
    $782 = (($cam_xyz) + (($c$2168*24)|0)|0);
    HEAPF64[$782>>3] = 0.0;
    if ($780) {
     $783 = ((($cam_xyz) + (($c$2168*24)|0)|0) + 8|0);
     HEAPF64[$783>>3] = 0.0;
     label = 225;
    } else {
     $784 = +HEAPF64[$xyz>>3];
     $$promoted = +HEAPF64[$782>>3];
     $792 = $$promoted;$j$363 = 0;
     while(1) {
      $785 = ((($cc) + ($c$2168<<5)|0) + ($j$363<<3)|0);
      $786 = +HEAPF64[$785>>3];
      $787 = (($cm) + (($j$363*24)|0)|0);
      $788 = +HEAPF64[$787>>3];
      $789 = $786 * $788;
      $790 = $789 * $784;
      $791 = $792 + $790;
      $793 = (($j$363) + 1)|0;
      $exitcond = ($j$363|0)==($781|0);
      if ($exitcond) {
       $$lcssa227 = $791;
       break;
      } else {
       $792 = $791;$j$363 = $793;
      }
     }
     HEAPF64[$782>>3] = $$lcssa227;
     $794 = ((($cam_xyz) + (($c$2168*24)|0)|0) + 8|0);
     HEAPF64[$794>>3] = 0.0;
     if ($780) {
      label = 225;
     } else {
      $819 = (($xyz) + 8|0);
      $820 = +HEAPF64[$819>>3];
      $$promoted$1 = +HEAPF64[$794>>3];
      $828 = $$promoted$1;$j$363$1 = 0;
      while(1) {
       $821 = ((($cc) + ($c$2168<<5)|0) + ($j$363$1<<3)|0);
       $822 = +HEAPF64[$821>>3];
       $823 = ((($cm) + (($j$363$1*24)|0)|0) + 8|0);
       $824 = +HEAPF64[$823>>3];
       $825 = $822 * $824;
       $826 = $825 * $820;
       $827 = $828 + $826;
       $829 = (($j$363$1) + 1)|0;
       $exitcond$1 = ($j$363$1|0)==($781|0);
       if ($exitcond$1) {
        $$lcssa228 = $827;
        break;
       } else {
        $828 = $827;$j$363$1 = $829;
       }
      }
      HEAPF64[$794>>3] = $$lcssa228;
      $831 = ((($cam_xyz) + (($c$2168*24)|0)|0) + 16|0);
      HEAPF64[$831>>3] = 0.0;
      if (!($780)) {
       $832 = (($xyz) + 16|0);
       $833 = +HEAPF64[$832>>3];
       $$promoted$2 = +HEAPF64[$831>>3];
       $841 = $$promoted$2;$j$363$2 = 0;
       while(1) {
        $834 = ((($cc) + ($c$2168<<5)|0) + ($j$363$2<<3)|0);
        $835 = +HEAPF64[$834>>3];
        $836 = ((($cm) + (($j$363$2*24)|0)|0) + 16|0);
        $837 = +HEAPF64[$836>>3];
        $838 = $835 * $837;
        $839 = $838 * $833;
        $840 = $841 + $839;
        $842 = (($j$363$2) + 1)|0;
        $exitcond$2 = ($j$363$2|0)==($781|0);
        if ($exitcond$2) {
         $$lcssa229 = $840;
         break;
        } else {
         $841 = $840;$j$363$2 = $842;
        }
       }
       HEAPF64[$831>>3] = $$lcssa229;
      }
     }
    }
    if ((label|0) == 225) {
     label = 0;
     $830 = ((($cam_xyz) + (($c$2168*24)|0)|0) + 16|0);
     HEAPF64[$830>>3] = 0.0;
    }
    $843 = (($c$2168) + 1)|0;
    $844 = ($843>>>0)<($779>>>0);
    if ($844) {
     $c$2168 = $843;
    } else {
     break;
    }
   }
  }
  _cam_xyz_coeff(455384,$cam_xyz);
 }
 $795 = +HEAPF64[$asn>>3];
 $796 = $795 != 0.0;
 if ($796) {
  HEAPF32[((133480 + 12|0))>>2] = 0.0;
  $797 = HEAP32[132272>>2]|0;
  $798 = ($797|0)==(0);
  if (!($798)) {
   $799 = HEAP32[132272>>2]|0;
   $c$2261 = 0;
   while(1) {
    $800 = (($asn) + ($c$2261<<3)|0);
    $801 = +HEAPF64[$800>>3];
    $802 = 1.0 / $801;
    $803 = $802;
    $804 = (133480 + ($c$2261<<2)|0);
    HEAPF32[$804>>2] = $803;
    $805 = (($c$2261) + 1)|0;
    $806 = ($805>>>0)<($799>>>0);
    if ($806) {
     $c$2261 = $805;
    } else {
     break;
    }
   }
  }
 }
 $807 = HEAP32[132272>>2]|0;
 $808 = ($807|0)==(0);
 $or$cond204 = $776 | $808;
 if ($or$cond204) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $809 = HEAP32[132272>>2]|0;
 $c$2360 = 0;
 while(1) {
  $810 = ((($cc) + ($c$2360<<5)|0) + ($c$2360<<3)|0);
  $811 = +HEAPF64[$810>>3];
  $812 = (132048 + ($c$2360<<2)|0);
  $813 = +HEAPF32[$812>>2];
  $814 = $813;
  $815 = $814 / $811;
  $816 = $815;
  HEAPF32[$812>>2] = $816;
  $817 = (($c$2360) + 1)|0;
  $818 = ($817>>>0)<($809>>>0);
  if ($818) {
   $c$2360 = $817;
  } else {
   $$0 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _get_timestamp($reversed) {
 $reversed = $reversed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, $t = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $t = sp + 24|0;
 $str = sp + 68|0;
 $0 = (($str) + 19|0);
 HEAP8[$0>>0] = 0;
 $1 = ($reversed|0)==(0);
 if ($1) {
  $9 = HEAP32[864>>2]|0;
  (_fread(($str|0),19,1,($9|0))|0);
 } else {
  $6 = 18;
  while(1) {
   $2 = HEAP32[864>>2]|0;
   $3 = (_getc_unlocked(($2|0))|0);
   $4 = $3&255;
   $5 = (($str) + ($6)|0);
   HEAP8[$5>>0] = $4;
   $7 = (($6) + -1)|0;
   $8 = ($6|0)==(0);
   if ($8) {
    break;
   } else {
    $6 = $7;
   }
  }
 }
 dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = (($t) + 20|0);
 $11 = (($t) + 16|0);
 $12 = (($t) + 12|0);
 $13 = (($t) + 8|0);
 $14 = (($t) + 4|0);
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $12;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $13;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $14;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $t;
 $15 = (_sscanf($str,455432,$vararg_buffer)|0);
 $16 = ($15|0)==(6);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$10>>2]|0;
 $18 = (($17) + -1900)|0;
 HEAP32[$10>>2] = $18;
 $19 = HEAP32[$11>>2]|0;
 $20 = (($19) + -1)|0;
 HEAP32[$11>>2] = $20;
 $21 = (($t) + 32|0);
 HEAP32[$21>>2] = -1;
 $22 = (_mktime(($t|0))|0);
 $23 = ($22|0)>(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = (_mktime(($t|0))|0);
 HEAP32[190152>>2] = $24;
 STACKTOP = sp;return;
}
function _parse_exif($base) {
 $base = $base|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exp2 = 0.0, $exp21 = 0.0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tag = sp + 12|0;
 $type = sp + 8|0;
 $len = sp + 4|0;
 $save = sp;
 $0 = (_strncmp(133624,455456,7)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[455464>>2]|0;
  $3 = ($2>>>0)<(3);
  $58 = $3;
 } else {
  $58 = 0;
 }
 $4 = (_get2()|0);
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $4&65535;
 $$in = $6;
 while(1) {
  $7 = (($$in) + -1)|0;
  _tiff_get($base,$tag,$type,$len,$save);
  $8 = HEAP32[$tag>>2]|0;
  do {
   switch ($8|0) {
   case 33434:  {
    $9 = HEAP32[$type>>2]|0;
    $10 = (+_getreal($9));
    $11 = $10;
    HEAPF32[454760>>2] = $11;
    break;
   }
   case 37377:  {
    $17 = HEAP32[$type>>2]|0;
    $18 = (+_getreal($17));
    $19 = $18 > -128.0;
    if ($19) {
     $20 = -$18;
     $exp21 = (+_exp2($20));
     $21 = $exp21;
     HEAPF32[454760>>2] = $21;
    }
    break;
   }
   case 40963:  {
    if ($58) {
     $31 = (_get4()|0);
     $32 = $31&65535;
     HEAP16[133064>>1] = $32;
    }
    break;
   }
   case 37378:  {
    $22 = HEAP32[$type>>2]|0;
    $23 = (+_getreal($22));
    $24 = $23 * 0.5;
    $exp2 = (+_exp2($24));
    $25 = $exp2;
    HEAPF32[454752>>2] = $25;
    break;
   }
   case 34855:  {
    $15 = (_get2()|0);
    $16 = (+($15&65535));
    HEAPF32[454744>>2] = $16;
    break;
   }
   case 41730:  {
    $33 = (_get4()|0);
    $34 = ($33|0)==(131074);
    if ($34) {
     HEAP32[455480>>2] = 0;
     $35 = HEAP32[864>>2]|0;
     $36 = (_getc_unlocked(($35|0))|0);
     $37 = Math_imul($36, 16843009)|0;
     $38 = HEAP32[455480>>2]|0;
     $39 = $37 | $38;
     HEAP32[455480>>2] = $39;
     $40 = HEAP32[864>>2]|0;
     $41 = (_getc_unlocked(($40|0))|0);
     $42 = Math_imul($41, 67372036)|0;
     $43 = HEAP32[455480>>2]|0;
     $44 = $42 | $43;
     HEAP32[455480>>2] = $44;
     $45 = HEAP32[864>>2]|0;
     $46 = (_getc_unlocked(($45|0))|0);
     $47 = Math_imul($46, 269488144)|0;
     $48 = HEAP32[455480>>2]|0;
     $49 = $47 | $48;
     HEAP32[455480>>2] = $49;
     $50 = HEAP32[864>>2]|0;
     $51 = (_getc_unlocked(($50|0))|0);
     $52 = Math_imul($51, 1077952576)|0;
     $53 = HEAP32[455480>>2]|0;
     $54 = $52 | $53;
     HEAP32[455480>>2] = $54;
    }
    break;
   }
   case 36868: case 36867:  {
    _get_timestamp(0);
    break;
   }
   case 33437:  {
    $12 = HEAP32[$type>>2]|0;
    $13 = (+_getreal($12));
    $14 = $13;
    HEAPF32[454752>>2] = $14;
    break;
   }
   case 37386:  {
    $26 = HEAP32[$type>>2]|0;
    $27 = (+_getreal($26));
    $28 = $27;
    HEAPF32[455472>>2] = $28;
    break;
   }
   case 40962:  {
    if ($58) {
     $29 = (_get4()|0);
     $30 = $29&65535;
     HEAP16[132336>>1] = $30;
    }
    break;
   }
   case 37500:  {
    _parse_makernote($base,0);
    break;
   }
   default: {
   }
   }
  } while(0);
  $55 = HEAP32[864>>2]|0;
  $56 = HEAP32[$save>>2]|0;
  (_fseek(($55|0),($56|0),0)|0);
  $57 = ($7|0)==(0);
  if ($57) {
   break;
  } else {
   $$in = $7;
  }
 }
 STACKTOP = sp;return;
}
function _parse_gps($base) {
 $base = $base|0;
 var $$in = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $save = 0, $tag = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tag = sp + 12|0;
 $type = sp + 8|0;
 $len = sp + 4|0;
 $save = sp;
 $0 = (_get2()|0);
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $0&65535;
 $$in = $2;
 while(1) {
  $3 = (($$in) + -1)|0;
  _tiff_get($base,$tag,$type,$len,$save);
  $4 = HEAP32[$tag>>2]|0;
  switch ($4|0) {
  case 6:  {
   $31 = (_get4()|0);
   HEAP32[((455488 + 72|0))>>2] = $31;
   $32 = (_get4()|0);
   HEAP32[((455488 + 76|0))>>2] = $32;
   break;
  }
  case 5: case 3: case 1:  {
   $5 = HEAP32[864>>2]|0;
   $6 = (_getc(($5|0))|0);
   $7 = HEAP32[$tag>>2]|0;
   $8 = $7 >>> 1;
   $9 = (($8) + 29)|0;
   $10 = (455488 + ($9<<2)|0);
   HEAP32[$10>>2] = $6;
   break;
  }
  case 29: case 18:  {
   $33 = HEAP32[$tag>>2]|0;
   $34 = (($33>>>0) / 3)&-1;
   $$sum = (($34) + 14)|0;
   $35 = (455488 + ($$sum<<2)|0);
   $36 = HEAP32[$len>>2]|0;
   $37 = ($36>>>0)<(12);
   $38 = $37 ? $36 : 12;
   $39 = HEAP32[864>>2]|0;
   (_fgets(($35|0),($38|0),($39|0))|0);
   break;
  }
  case 7: case 4: case 2:  {
   $11 = HEAP32[$tag>>2]|0;
   $12 = (($11>>>0) / 3)&-1;
   $13 = ($12*6)|0;
   $14 = (_get4()|0);
   $15 = (455488 + ($13<<2)|0);
   HEAP32[$15>>2] = $14;
   $16 = (_get4()|0);
   $17 = $13 | 1;
   $18 = (455488 + ($17<<2)|0);
   HEAP32[$18>>2] = $16;
   $19 = (_get4()|0);
   $20 = (($13) + 2)|0;
   $21 = (455488 + ($20<<2)|0);
   HEAP32[$21>>2] = $19;
   $22 = (_get4()|0);
   $23 = (($13) + 3)|0;
   $24 = (455488 + ($23<<2)|0);
   HEAP32[$24>>2] = $22;
   $25 = (_get4()|0);
   $26 = (($13) + 4)|0;
   $27 = (455488 + ($26<<2)|0);
   HEAP32[$27>>2] = $25;
   $28 = (_get4()|0);
   $29 = (($13) + 5)|0;
   $30 = (455488 + ($29<<2)|0);
   HEAP32[$30>>2] = $28;
   break;
  }
  default: {
  }
  }
  $40 = HEAP32[864>>2]|0;
  $41 = HEAP32[$save>>2]|0;
  (_fseek(($40|0),($41|0),0)|0);
  $42 = ($3|0)==(0);
  if ($42) {
   break;
  } else {
   $$in = $3;
  }
 }
 STACKTOP = sp;return;
}
function _romm_coeff($romm_cam) {
 $romm_cam = $romm_cam|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $exitcond6 = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $0 = (455616 + (($i$03*12)|0)|0);
  $1 = (455384 + ($i$03<<4)|0);
  HEAPF32[$1>>2] = 0.0;
  $2 = +HEAPF32[$0>>2];
  $3 = +HEAPF32[$romm_cam>>2];
  $4 = $2 * $3;
  $5 = $4 + 0.0;
  HEAPF32[$1>>2] = $5;
  $6 = ((455616 + (($i$03*12)|0)|0) + 4|0);
  $7 = +HEAPF32[$6>>2];
  $8 = (($romm_cam) + 12|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $7 * $9;
  $11 = $5 + $10;
  HEAPF32[$1>>2] = $11;
  $12 = ((455616 + (($i$03*12)|0)|0) + 8|0);
  $13 = +HEAPF32[$12>>2];
  $14 = (($romm_cam) + 24|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $13 * $15;
  $17 = $11 + $16;
  HEAPF32[$1>>2] = $17;
  $18 = ((455384 + ($i$03<<4)|0) + 4|0);
  HEAPF32[$18>>2] = 0.0;
  $19 = +HEAPF32[$0>>2];
  $20 = (($romm_cam) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $19 * $21;
  $23 = $22 + 0.0;
  HEAPF32[$18>>2] = $23;
  $24 = ((455616 + (($i$03*12)|0)|0) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = (($romm_cam) + 16|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $25 * $27;
  $29 = $23 + $28;
  HEAPF32[$18>>2] = $29;
  $30 = ((455616 + (($i$03*12)|0)|0) + 8|0);
  $31 = +HEAPF32[$30>>2];
  $32 = (($romm_cam) + 28|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $31 * $33;
  $35 = $29 + $34;
  HEAPF32[$18>>2] = $35;
  $36 = ((455384 + ($i$03<<4)|0) + 8|0);
  HEAPF32[$36>>2] = 0.0;
  $37 = +HEAPF32[$0>>2];
  $38 = (($romm_cam) + 8|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $37 * $39;
  $41 = $40 + 0.0;
  HEAPF32[$36>>2] = $41;
  $42 = ((455616 + (($i$03*12)|0)|0) + 4|0);
  $43 = +HEAPF32[$42>>2];
  $44 = (($romm_cam) + 20|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $43 * $45;
  $47 = $41 + $46;
  HEAPF32[$36>>2] = $47;
  $48 = ((455616 + (($i$03*12)|0)|0) + 8|0);
  $49 = +HEAPF32[$48>>2];
  $50 = (($romm_cam) + 32|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $49 * $51;
  $53 = $47 + $52;
  HEAPF32[$36>>2] = $53;
  $54 = (($i$03) + 1)|0;
  $exitcond6 = ($54|0)==(3);
  if ($exitcond6) {
   break;
  } else {
   $i$03 = $54;
  }
 }
 return;
}
function _parse_mos($offset) {
 $offset = $offset|0;
 var $$$frot$2$1 = 0, $$frot$013 = 0, $$frot$2$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $frot$0$lcssa = 0, $frot$013 = 0, $frot$2$1 = 0, $frot$3 = 0, $i = 0, $neut = 0, $or$cond = 0, $planes = 0, $romm_cam = 0, $storemerge28 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $data = sp + 168|0;
 $i = sp + 160|0;
 $neut = sp + 144|0;
 $planes = sp + 136|0;
 $romm_cam = sp + 100|0;
 HEAP32[$planes>>2] = 0;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),($offset|0),0)|0);
 $1 = (_get4()|0);
 $2 = ($1|0)==(1347114067);
 if ($2) {
  $frot$013 = 0;
  while(1) {
   (_get4()|0);
   $3 = HEAP32[864>>2]|0;
   (_fread(($data|0),1,40,($3|0))|0);
   $4 = (_get4()|0);
   $5 = HEAP32[864>>2]|0;
   $6 = (_ftell(($5|0))|0);
   $7 = (_strcmp($data,456208)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    HEAP32[454040>>2] = $6;
    HEAP32[133768>>2] = $4;
   }
   $9 = (_strcmp($data,456232)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    HEAP32[456256>>2] = $6;
    HEAP32[456264>>2] = $4;
   }
   $11 = (_strcmp($data,456272)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer>>2] = $i;
    (_fscanf(($13|0),(456296|0),($vararg_buffer|0))|0);
    $14 = HEAP32[$i>>2]|0;
    $15 = ($14>>>0)<(39);
    if ($15) {
     $16 = (455656 + ($14<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     (_strcpy((133688|0),($17|0))|0);
    }
   }
   $18 = (_strcmp($data,456304)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP32[$i>>2] = 0;
    while(1) {
     $20 = (_get4()|0);
     $21 = (+_int_to_float($20));
     $22 = HEAP32[$i>>2]|0;
     $23 = (($romm_cam) + ($22<<2)|0);
     HEAPF32[$23>>2] = $21;
     $24 = HEAP32[$i>>2]|0;
     $25 = (($24) + 1)|0;
     HEAP32[$i>>2] = $25;
     $26 = ($25|0)<(9);
     if (!($26)) {
      break;
     }
    }
    _romm_coeff($romm_cam);
   }
   $27 = (_strcmp($data,456336)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP32[$i>>2] = 0;
    $storemerge28 = 0;
    while(1) {
     $29 = HEAP32[864>>2]|0;
     $30 = (($romm_cam) + ($storemerge28<<2)|0);
     HEAP32[$vararg_buffer1>>2] = $30;
     (_fscanf(($29|0),(456360|0),($vararg_buffer1|0))|0);
     $31 = HEAP32[$i>>2]|0;
     $32 = (($31) + 1)|0;
     HEAP32[$i>>2] = $32;
     $33 = ($32|0)<(9);
     if ($33) {
      $storemerge28 = $32;
     } else {
      break;
     }
    }
    _romm_coeff($romm_cam);
   }
   $34 = (_strcmp($data,456368)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $planes;
    (_fscanf(($36|0),(456296|0),($vararg_buffer4|0))|0);
   }
   $37 = (_strcmp($data,456400)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer7>>2] = 454784;
    (_fscanf(($39|0),(456296|0),($vararg_buffer7|0))|0);
   }
   $40 = (_strcmp($data,456432)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer10>>2] = $i;
    (_fscanf(($42|0),(456296|0),($vararg_buffer10|0))|0);
    $43 = HEAP32[$i>>2]|0;
    $44 = ($43|0)==(1);
    $$frot$013 = $44 ? 0 : $frot$013;
    $45 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer13>>2] = $i;
    (_fscanf(($45|0),(456296|0),($vararg_buffer13|0))|0);
    $46 = HEAP32[$i>>2]|0;
    $47 = ($46|0)==(1);
    $frot$2$1 = $47 ? 1 : $$frot$013;
    $48 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $i;
    (_fscanf(($48|0),(456296|0),($vararg_buffer16|0))|0);
    $49 = HEAP32[$i>>2]|0;
    $50 = ($49|0)==(1);
    $$frot$2$1 = $50 ? 3 : $frot$2$1;
    $51 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer19>>2] = $i;
    (_fscanf(($51|0),(456296|0),($vararg_buffer19|0))|0);
    $52 = HEAP32[$i>>2]|0;
    $53 = ($52|0)==(1);
    $$$frot$2$1 = $53 ? 2 : $$frot$2$1;
    $frot$3 = $$$frot$2$1;
   } else {
    $frot$3 = $frot$013;
   }
   $54 = (_strcmp($data,456456)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer22>>2] = $i;
    (_fscanf(($56|0),(456296|0),($vararg_buffer22|0))|0);
    $57 = HEAP32[$i>>2]|0;
    $58 = HEAP32[454784>>2]|0;
    $59 = (($57) - ($58))|0;
    HEAP32[454784>>2] = $59;
   }
   $60 = (_strcmp($data,456480)|0);
   $61 = ($60|0)!=(0);
   $62 = +HEAPF32[133480>>2];
   $63 = $62 != 0.0;
   $or$cond = $61 | $63;
   if (!($or$cond)) {
    $64 = HEAP32[864>>2]|0;
    HEAP32[$vararg_buffer25>>2] = $neut;
    (_fscanf(($64|0),(456296|0),($vararg_buffer25|0))|0);
    $65 = HEAP32[864>>2]|0;
    $66 = (($neut) + 4|0);
    HEAP32[$vararg_buffer28>>2] = $66;
    (_fscanf(($65|0),(456296|0),($vararg_buffer28|0))|0);
    $67 = HEAP32[864>>2]|0;
    $68 = (($neut) + 8|0);
    HEAP32[$vararg_buffer31>>2] = $68;
    (_fscanf(($67|0),(456296|0),($vararg_buffer31|0))|0);
    $69 = HEAP32[864>>2]|0;
    $70 = (($neut) + 12|0);
    HEAP32[$vararg_buffer34>>2] = $70;
    (_fscanf(($69|0),(456296|0),($vararg_buffer34|0))|0);
    $71 = HEAP32[$neut>>2]|0;
    $72 = (+($71|0));
    $73 = (($neut) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (+($74|0));
    $76 = $72 / $75;
    HEAPF32[133480>>2] = $76;
    $77 = (($neut) + 8|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (+($78|0));
    $80 = $72 / $79;
    HEAPF32[((133480 + 4|0))>>2] = $80;
    $81 = (($neut) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (+($82|0));
    $84 = $72 / $83;
    HEAPF32[((133480 + 8|0))>>2] = $84;
   }
   $85 = (_strcmp($data,456504)|0);
   $86 = ($85|0)==(0);
   if ($86) {
    $87 = (_get4()|0);
    HEAP32[133096>>2] = $87;
   }
   _parse_mos($6);
   $88 = HEAP32[864>>2]|0;
   $89 = (($6) + ($4))|0;
   (_fseek(($88|0),($89|0),0)|0);
   $90 = (_get4()|0);
   $91 = ($90|0)==(1347114067);
   if ($91) {
    $frot$013 = $frot$3;
   } else {
    $frot$0$lcssa = $frot$3;
    break;
   }
  }
 } else {
  $frot$0$lcssa = 0;
 }
 $92 = HEAP32[$planes>>2]|0;
 $93 = ($92|0)==(0);
 if ($93) {
  STACKTOP = sp;return;
 }
 $94 = ($92|0)==(1);
 $95 = $94 ? 16843009 : 0;
 $96 = HEAP32[454784>>2]|0;
 $97 = (($96>>>0) / 90)&-1;
 $98 = (($97) + ($frot$0$lcssa))|0;
 $99 = $98 & 3;
 $100 = (456520 + ($99)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = Math_imul($102, $95)|0;
 HEAP32[584>>2] = $103;
 STACKTOP = sp;return;
}
function _linear_table($len) {
 $len = $len|0;
 var $$len = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len>>>0)>(4096);
 $$len = $0 ? 4096 : $len;
 _read_shorts(936,$$len);
 $1 = ($$len|0)<(4096);
 if ($1) {
  $i$01 = $$len;
  while(1) {
   $2 = (($i$01) + -1)|0;
   $3 = (936 + ($2<<1)|0);
   $4 = HEAP16[$3>>1]|0;
   $5 = (936 + ($i$01<<1)|0);
   HEAP16[$5>>1] = $4;
   $6 = (($i$01) + 1)|0;
   $7 = ($6|0)<(4096);
   if ($7) {
    $i$01 = $6;
   } else {
    break;
   }
  }
 }
 $8 = HEAP16[((936 + 8190|0))>>1]|0;
 $9 = $8&65535;
 HEAP32[132368>>2] = $9;
 return;
}
function _parse_kodak_ifd($base) {
 $base = $base|0;
 var $$in = 0, $$pr = 0, $$pr10 = 0, $$pr7 = 0, $$pr8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0;
 var $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $len = 0, $mul = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $pow2 = 0.0, $pow239 = 0.0, $pow240 = 0.0, $save = 0, $tag = 0, $type = 0, $wbi$025 = 0, $wbi$1 = 0, $wbi$2 = 0, $wbi$3 = 0, $wbtemp$026 = 0, $wbtemp$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tag = sp + 24|0;
 $type = sp + 20|0;
 $len = sp + 16|0;
 $save = sp + 12|0;
 $mul = sp;
 ;HEAP32[$mul+0>>2]=HEAP32[456528+0>>2]|0;HEAP32[$mul+4>>2]=HEAP32[456528+4>>2]|0;HEAP32[$mul+8>>2]=HEAP32[456528+8>>2]|0;
 $0 = (_get2()|0);
 $1 = (($0) + -1)<<16>>16;
 $2 = ($1&65535)>(1023);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = $0&65535;
 $$in = $3;$wbi$025 = -2;$wbtemp$026 = 6500;
 while(1) {
  $4 = (($$in) + -1)|0;
  _tiff_get($base,$tag,$type,$len,$save);
  $5 = HEAP32[$tag>>2]|0;
  $6 = ($5|0)==(1020);
  if ($6) {
   $7 = HEAP32[$type>>2]|0;
   $8 = (_getint($7)|0);
   $wbi$1 = $8;
  } else {
   $wbi$1 = $wbi$025;
  }
  $9 = HEAP32[$tag>>2]|0;
  $10 = ($9|0)==(1021);
  $11 = HEAP32[$len>>2]|0;
  $12 = ($11|0)==(72);
  $or$cond = $10 & $12;
  if ($or$cond) {
   $13 = HEAP32[864>>2]|0;
   (_fseek(($13|0),40,1)|0);
   $14 = (_get2()|0);
   $15 = $14&65535;
   $16 = (+($15|0));
   $17 = 2048.0 / $16;
   $18 = $17;
   HEAPF32[133480>>2] = $18;
   $19 = (_get2()|0);
   $20 = $19&65535;
   $21 = (+($20|0));
   $22 = 2048.0 / $21;
   $23 = $22;
   HEAPF32[((133480 + 4|0))>>2] = $23;
   $24 = (_get2()|0);
   $25 = $24&65535;
   $26 = (+($25|0));
   $27 = 2048.0 / $26;
   $28 = $27;
   HEAPF32[((133480 + 8|0))>>2] = $28;
   $$pr = HEAP32[$tag>>2]|0;
   $29 = $$pr;$wbi$2 = -2;
  } else {
   $29 = $9;$wbi$2 = $wbi$1;
  }
  $30 = ($29|0)==(2118);
  if ($30) {
   $31 = HEAP32[$type>>2]|0;
   $32 = (_getint($31)|0);
   $wbtemp$1 = $32;
  } else {
   $wbtemp$1 = $wbtemp$026;
  }
  $33 = HEAP32[$tag>>2]|0;
  $34 = (($wbi$2) + 2120)|0;
  $35 = ($33|0)==($34|0);
  $36 = ($wbi$2|0)>(-1);
  $or$cond3 = $36 & $35;
  if ($or$cond3) {
   $37 = HEAP32[$type>>2]|0;
   $38 = (+_getreal($37));
   $39 = 2048.0 / $38;
   $40 = $39;
   HEAPF32[133480>>2] = $40;
   $41 = (+_getreal($37));
   $42 = 2048.0 / $41;
   $43 = $42;
   HEAPF32[((133480 + 4|0))>>2] = $43;
   $44 = (+_getreal($37));
   $45 = 2048.0 / $44;
   $46 = $45;
   HEAPF32[((133480 + 8|0))>>2] = $46;
  }
  $47 = HEAP32[$tag>>2]|0;
  $48 = (($wbi$2) + 2130)|0;
  $49 = ($47|0)==($48|0);
  if ($49) {
   $50 = HEAP32[$type>>2]|0;
   $51 = (+_getreal($50));
   $52 = $51;
   HEAPF32[$mul>>2] = $52;
   $53 = (+_getreal($50));
   $54 = $53;
   $55 = (($mul) + 4|0);
   HEAPF32[$55>>2] = $54;
   $56 = (+_getreal($50));
   $57 = $56;
   $58 = (($mul) + 8|0);
   HEAPF32[$58>>2] = $57;
  }
  $59 = HEAP32[$tag>>2]|0;
  $60 = (($wbi$2) + 2140)|0;
  $61 = ($59|0)==($60|0);
  $or$cond5 = $36 & $61;
  if ($or$cond5) {
   $100 = HEAP32[$type>>2]|0;
   $101 = (+($wbtemp$1|0));
   $102 = $101 / 100.0;
   $103 = (+_getreal($100));
   $104 = $103 + 0.0;
   $105 = $104;
   $106 = (+_getreal($100));
   $107 = $106 * $102;
   $108 = $105;
   $109 = $108 + $107;
   $110 = $109;
   $111 = (+_getreal($100));
   $pow2 = $102 * $102;
   $112 = $111 * $pow2;
   $113 = $110;
   $114 = $113 + $112;
   $115 = $114;
   $116 = (+_getreal($100));
   $117 = (+Math_pow((+$102),3.0));
   $118 = $116 * $117;
   $119 = $115;
   $120 = $119 + $118;
   $121 = $120;
   $122 = +HEAPF32[$mul>>2];
   $123 = $121 * $122;
   $124 = 2048.0 / $123;
   HEAPF32[133480>>2] = $124;
   $125 = (+_getreal($100));
   $126 = $125 + 0.0;
   $127 = $126;
   $128 = (+_getreal($100));
   $129 = $128 * $102;
   $130 = $127;
   $131 = $130 + $129;
   $132 = $131;
   $133 = (+_getreal($100));
   $pow239 = $102 * $102;
   $134 = $133 * $pow239;
   $135 = $132;
   $136 = $135 + $134;
   $137 = $136;
   $138 = (+_getreal($100));
   $139 = (+Math_pow((+$102),3.0));
   $140 = $138 * $139;
   $141 = $137;
   $142 = $141 + $140;
   $143 = $142;
   $144 = (($mul) + 4|0);
   $145 = +HEAPF32[$144>>2];
   $146 = $143 * $145;
   $147 = 2048.0 / $146;
   HEAPF32[((133480 + 4|0))>>2] = $147;
   $148 = (+_getreal($100));
   $149 = $148 + 0.0;
   $150 = $149;
   $151 = (+_getreal($100));
   $152 = $151 * $102;
   $153 = $150;
   $154 = $153 + $152;
   $155 = $154;
   $156 = (+_getreal($100));
   $pow240 = $102 * $102;
   $157 = $156 * $pow240;
   $158 = $155;
   $159 = $158 + $157;
   $160 = $159;
   $161 = (+_getreal($100));
   $162 = (+Math_pow((+$102),3.0));
   $163 = $161 * $162;
   $164 = $160;
   $165 = $164 + $163;
   $166 = $165;
   $167 = (($mul) + 8|0);
   $168 = +HEAPF32[$167>>2];
   $169 = $166 * $168;
   $170 = 2048.0 / $169;
   HEAPF32[((133480 + 8|0))>>2] = $170;
   $$pr7 = HEAP32[$tag>>2]|0;
   $62 = $$pr7;
  } else {
   $62 = $59;
  }
  $63 = ($62|0)==(2317);
  if ($63) {
   $64 = HEAP32[$len>>2]|0;
   _linear_table($64);
  }
  $65 = HEAP32[$tag>>2]|0;
  $66 = ($65|0)==(6020);
  if ($66) {
   $67 = HEAP32[$type>>2]|0;
   $68 = (_getint($67)|0);
   $69 = (+($68>>>0));
   HEAPF32[454744>>2] = $69;
   $$pr8 = HEAP32[$tag>>2]|0;
   $70 = $$pr8;
  } else {
   $70 = $65;
  }
  $71 = ($70|0)==(64013);
  if ($71) {
   $72 = HEAP32[864>>2]|0;
   $73 = (_getc_unlocked(($72|0))|0);
   $wbi$3 = $73;
  } else {
   $wbi$3 = $wbi$2;
  }
  $74 = ($wbi$3>>>0)<(7);
  if ($74) {
   $75 = HEAP32[$tag>>2]|0;
   $76 = (456544 + ($wbi$3<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ($75|0)==($77|0);
   if ($78) {
    $79 = (_get4()|0);
    $80 = (+($79>>>0));
    HEAPF32[133480>>2] = $80;
    $81 = (_get4()|0);
    $82 = (+($81>>>0));
    HEAPF32[((133480 + 4|0))>>2] = $82;
    $83 = (_get4()|0);
    $84 = (+($83>>>0));
    HEAPF32[((133480 + 8|0))>>2] = $84;
    label = 23;
   } else {
    $85 = $75;
   }
  } else {
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   $$pr10 = HEAP32[$tag>>2]|0;
   $85 = $$pr10;
  }
  $86 = ($85|0)==(64019);
  if ($86) {
   $87 = HEAP32[$type>>2]|0;
   $88 = (_getint($87)|0);
   $89 = $88&65535;
   HEAP16[132088>>1] = $89;
  }
  $90 = HEAP32[$tag>>2]|0;
  $91 = ($90|0)==(64020);
  if ($91) {
   $92 = HEAP32[$type>>2]|0;
   $93 = (_getint($92)|0);
   $94 = (($93) + 1)|0;
   $95 = $94 & 65534;
   $96 = $95&65535;
   HEAP16[132080>>1] = $96;
  }
  $97 = HEAP32[864>>2]|0;
  $98 = HEAP32[$save>>2]|0;
  (_fseek(($97|0),($98|0),0)|0);
  $99 = ($4|0)==(0);
  if ($99) {
   break;
  } else {
   $$in = $4;$wbi$025 = $wbi$3;$wbtemp$026 = $wbtemp$1;
  }
 }
 STACKTOP = sp;return;
}
function _parse_tiff($base) {
 $base = $base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),($base|0),0)|0);
 $1 = (_get2()|0);
 HEAP16[928>>1] = $1;
 if (!((($1<<16>>16) == 19789) | (($1<<16>>16) == 18761))) {
  $$0 = 0;
  return ($$0|0);
 }
 (_get2()|0);
 while(1) {
  $2 = (_get4()|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 1;
   label = 5;
   break;
  }
  $4 = HEAP32[864>>2]|0;
  $5 = (($2) + ($base))|0;
  (_fseek(($4|0),($5|0),0)|0);
  $6 = (_parse_tiff_ifd($base)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _parse_minolta($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $high$0$lcssa = 0, $high$04 = 0, $high$1 = 0, $wide$0$lcssa = 0, $wide$05 = 0, $wide$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[928>>1]|0;
 $1 = HEAP32[864>>2]|0;
 (_fseek(($1|0),($base|0),0)|0);
 $2 = HEAP32[864>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  return;
 }
 $5 = HEAP32[864>>2]|0;
 $6 = (_getc_unlocked(($5|0))|0);
 $7 = ($6|0)==(77);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[864>>2]|0;
 $9 = (_getc_unlocked(($8|0))|0);
 $10 = ($9|0)==(82);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[864>>2]|0;
 $12 = (_getc_unlocked(($11|0))|0);
 $13 = ($12*257)|0;
 $14 = $13&65535;
 HEAP16[928>>1] = $14;
 $15 = (_get4()|0);
 $16 = (($base) + 8)|0;
 $17 = (($16) + ($15))|0;
 $18 = HEAP32[864>>2]|0;
 $19 = (_ftell(($18|0))|0);
 $20 = ($19|0)<($17|0);
 if ($20) {
  $63 = $19;$high$04 = 0;$wide$05 = 0;
  while(1) {
   $21 = HEAP32[864>>2]|0;
   $22 = (_getc_unlocked(($21|0))|0);
   $23 = $22 << 8;
   $24 = HEAP32[864>>2]|0;
   $25 = (_getc_unlocked(($24|0))|0);
   $26 = $25 | $23;
   $27 = $26 << 8;
   $28 = HEAP32[864>>2]|0;
   $29 = (_getc_unlocked(($28|0))|0);
   $30 = $29 | $27;
   $31 = $30 << 8;
   $32 = HEAP32[864>>2]|0;
   $33 = (_getc_unlocked(($32|0))|0);
   $34 = $33 | $31;
   $35 = (_get4()|0);
   if ((($34|0) == 5526615)) {
    $59 = HEAP32[864>>2]|0;
    $60 = (_ftell(($59|0))|0);
    (_parse_tiff($60)|0);
    HEAP32[133280>>2] = $17;
    $high$1 = $high$04;$wide$1 = $wide$05;
   } else if ((($34|0) == 5263940)) {
    $36 = HEAP32[864>>2]|0;
    (_fseek(($36|0),8,1)|0);
    $37 = (_get2()|0);
    $38 = $37&65535;
    $39 = (_get2()|0);
    $40 = $39&65535;
    $high$1 = $38;$wide$1 = $40;
   } else if ((($34|0) == 5718599)) {
    (_get4()|0);
    $41 = (_strcmp(133688,457440)|0);
    $42 = ($41|0)!=(0);
    $43 = $42 ? 0 : 3;
    $44 = (_get2()|0);
    $45 = (+($44&65535));
    $46 = (133480 + ($43<<2)|0);
    HEAPF32[$46>>2] = $45;
    $47 = (_get2()|0);
    $48 = (+($47&65535));
    $49 = $43 ^ 1;
    $50 = (133480 + ($49<<2)|0);
    HEAPF32[$50>>2] = $48;
    $51 = (_get2()|0);
    $52 = (+($51&65535));
    $53 = $43 ^ 3;
    $54 = (133480 + ($53<<2)|0);
    HEAPF32[$54>>2] = $52;
    $55 = (_get2()|0);
    $56 = (+($55&65535));
    $57 = $43 ^ 2;
    $58 = (133480 + ($57<<2)|0);
    HEAPF32[$58>>2] = $56;
    $high$1 = $high$04;$wide$1 = $wide$05;
   } else {
    $high$1 = $high$04;$wide$1 = $wide$05;
   }
   $61 = HEAP32[864>>2]|0;
   $62 = (($63) + 8)|0;
   $64 = (($62) + ($35))|0;
   (_fseek(($61|0),($64|0),0)|0);
   $65 = HEAP32[864>>2]|0;
   $66 = (_ftell(($65|0))|0);
   $67 = ($66|0)<($17|0);
   if ($67) {
    $63 = $66;$high$04 = $high$1;$wide$05 = $wide$1;
   } else {
    $high$0$lcssa = $high$1;$wide$0$lcssa = $wide$1;
    break;
   }
  }
 } else {
  $high$0$lcssa = 0;$wide$0$lcssa = 0;
 }
 $68 = $high$0$lcssa&65535;
 HEAP16[133064>>1] = $68;
 $69 = $wide$0$lcssa&65535;
 HEAP16[132336>>1] = $69;
 HEAP16[928>>1] = $0;
 return;
}
function _apply_tiff() {
 var $$in = 0, $$max_samp$0 = 0, $$pr = 0, $$pr4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$015 = 0, $i$29 = 0, $jh = 0, $max_samp$0$lcssa = 0, $max_samp$013 = 0, $max_samp$2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $raw$0$lcssa = 0, $raw$014 = 0, $raw$1 = 0, $thm$08 = 0, $thm$1 = 0, $thm$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $jh = sp;
 HEAP32[133840>>2] = 16;
 $0 = HEAP32[454040>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[864>>2]|0;
  (_fseek(($2|0),($0|0),0)|0);
  $3 = (_ljpeg_start($jh,1)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[$jh>>2]|0;
   HEAP32[133840>>2] = $5;
   $6 = (($jh) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7&65535;
   HEAP16[133752>>1] = $8;
   $9 = (($jh) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&65535;
   HEAP16[133760>>1] = $11;
  }
 }
 $12 = HEAP32[455464>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $max_samp$0$lcssa = 0;$raw$0$lcssa = -1;
 } else {
  $14 = HEAP32[455464>>2]|0;
  $i$015 = 0;$max_samp$013 = 0;$raw$014 = -1;
  while(1) {
   $15 = ((454920 + (($i$015*44)|0)|0) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($max_samp$013|0)<($16|0);
   $$max_samp$0 = $17 ? $16 : $max_samp$013;
   $18 = ($$max_samp$0|0)>(3);
   $max_samp$2 = $18 ? 3 : $$max_samp$0;
   $19 = ((454920 + (($i$015*44)|0)|0) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(6);
   $22 = ($16|0)==(3);
   $or$cond5 = $22 & $21;
   if ($or$cond5) {
    $raw$1 = $raw$014;
   } else {
    $23 = (454920 + (($i$015*44)|0)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((454920 + (($i$015*44)|0)|0) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26 | $24;
    $28 = ($27|0)<(65536);
    if ($28) {
     $29 = Math_imul($26, $24)|0;
     $30 = HEAP16[132336>>1]|0;
     $31 = $30&65535;
     $32 = HEAP16[133064>>1]|0;
     $33 = $32&65535;
     $34 = Math_imul($33, $31)|0;
     $35 = ($29|0)>($34|0);
     if ($35) {
      $36 = $24&65535;
      HEAP16[132336>>1] = $36;
      $37 = HEAP32[$25>>2]|0;
      $38 = $37&65535;
      HEAP16[133064>>1] = $38;
      $39 = ((454920 + (($i$015*44)|0)|0) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      HEAP32[133264>>2] = $40;
      $41 = HEAP32[$19>>2]|0;
      HEAP32[133056>>2] = $41;
      $42 = ((454920 + (($i$015*44)|0)|0) + 20|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP32[133280>>2] = $43;
      $44 = ((454920 + (($i$015*44)|0)|0) + 24|0);
      $45 = HEAP32[$44>>2]|0;
      HEAP32[457392>>2] = $45;
      $46 = HEAP32[$15>>2]|0;
      HEAP32[133216>>2] = $46;
      $47 = ((454920 + (($i$015*44)|0)|0) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      HEAP32[133232>>2] = $48;
      $49 = ((454920 + (($i$015*44)|0)|0) + 40|0);
      $50 = HEAP32[$49>>2]|0;
      HEAP32[133224>>2] = $50;
      $raw$1 = $i$015;
     } else {
      $raw$1 = $raw$014;
     }
    } else {
     $raw$1 = $raw$014;
    }
   }
   $51 = (($i$015) + 1)|0;
   $52 = ($51>>>0)<($14>>>0);
   if ($52) {
    $i$015 = $51;$max_samp$013 = $max_samp$2;$raw$014 = $raw$1;
   } else {
    $max_samp$0$lcssa = $max_samp$2;$raw$0$lcssa = $raw$1;
    break;
   }
  }
 }
 $53 = HEAP32[133232>>2]|0;
 $54 = ($53|0)==(0);
 if ($54) {
  HEAP32[133232>>2] = 2147483647;
 }
 $55 = HEAP32[133224>>2]|0;
 $56 = ($55|0)==(0);
 if ($56) {
  HEAP32[133224>>2] = 2147483647;
 }
 $57 = HEAP32[455464>>2]|0;
 $58 = ($57|0)==(0);
 if (!($58)) {
  $$in = $57;
  while(1) {
   $59 = (($$in) + -1)|0;
   $60 = ((454920 + (($59*44)|0)|0) + 24|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0);
   if (!($62)) {
    HEAP32[457392>>2] = $61;
   }
   $63 = ($59|0)==(0);
   if ($63) {
    break;
   } else {
    $$in = $59;
   }
  }
 }
 $64 = ($raw$0$lcssa|0)<(0);
 $65 = HEAP32[189952>>2]|0;
 $66 = ($65|0)!=(0|0);
 $or$cond = $64 | $66;
 L28: do {
  if (!($or$cond)) {
   $67 = HEAP32[133056>>2]|0;
   do {
    if ((($67|0) == 1) | (($67|0) == 0)) {
     $84 = (_strncmp(133624,454624,7)|0);
     $85 = ($84|0)==(0);
     if ($85) {
      $86 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 32|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $87 << 1;
      $89 = HEAP16[132336>>1]|0;
      $90 = $89&65535;
      $91 = HEAP16[133064>>1]|0;
      $92 = $91&65535;
      $93 = ($90*3)|0;
      $94 = Math_imul($93, $92)|0;
      $95 = ($88|0)==($94|0);
      if ($95) {
       HEAP32[133096>>2] = 24;
      }
     }
     $96 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 32|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97*5)|0;
     $99 = HEAP16[132336>>1]|0;
     $100 = $99&65535;
     $101 = HEAP16[133064>>1]|0;
     $102 = $101&65535;
     $103 = $100 << 3;
     $104 = Math_imul($103, $102)|0;
     $105 = ($98|0)==($104|0);
     if ($105) {
      HEAP32[133096>>2] = 81;
      HEAP32[133264>>2] = 12;
     } else {
      label = 32;
     }
    } else if ((($67|0) == 32773) | (($67|0) == 32770)) {
     label = 32;
    } else if ((($67|0) == 32769)) {
     label = 26;
    } else if ((($67|0) == 65535)) {
     HEAP32[189952>>2] = 23;
     break L28;
    } else if ((($67|0) == 34892) | (($67|0) == 32867)) {
     break L28;
    } else if ((($67|0) == 32767)) {
     $68 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 32|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = HEAP16[132336>>1]|0;
     $71 = $70&65535;
     $72 = HEAP16[133064>>1]|0;
     $73 = $72&65535;
     $74 = Math_imul($73, $71)|0;
     $75 = ($69|0)==($74|0);
     if ($75) {
      HEAP32[133264>>2] = 12;
      HEAP32[189952>>2] = 19;
      break L28;
     }
     $76 = $69 << 3;
     $77 = HEAP32[133264>>2]|0;
     $78 = Math_imul($77, $74)|0;
     $79 = ($76|0)==($78|0);
     if ($79) {
      HEAP32[133096>>2] = 79;
      label = 26;
      break;
     } else {
      $80 = (($73) + 8)|0;
      $81 = $80&65535;
      HEAP16[133064>>1] = $81;
      HEAP32[189952>>2] = 13;
      break L28;
     }
    } else if ((($67|0) == 262)) {
     HEAP32[189952>>2] = 8;
     break L28;
    } else if ((($67|0) == 65000)) {
     $140 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 16|0);
     $141 = HEAP32[$140>>2]|0;
     if ((($141|0) == 6)) {
      HEAP32[189952>>2] = 25;
      HEAP32[584>>2] = 0;
      break L28;
     } else if ((($141|0) == 32803)) {
      HEAP32[189952>>2] = 26;
      break L28;
     } else if ((($141|0) == 2)) {
      HEAP32[189952>>2] = 24;
      HEAP32[584>>2] = 0;
      break L28;
     } else {
      break L28;
     }
    } else if ((($67|0) == 34713)) {
     $120 = HEAP16[132336>>1]|0;
     $121 = $120&65535;
     $122 = (($121) + 9)|0;
     $123 = (($122>>>0) / 10)&-1;
     $124 = $123 << 4;
     $125 = HEAP16[133064>>1]|0;
     $126 = $125&65535;
     $127 = Math_imul($124, $126)|0;
     $128 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 32|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      HEAP32[189952>>2] = 9;
      HEAP32[133096>>2] = 1;
      break L28;
     }
     $131 = Math_imul($126, $121)|0;
     $132 = ($131*3)|0;
     $133 = $129 << 1;
     $134 = ($132|0)==($133|0);
     if ($134) {
      HEAP32[189952>>2] = 9;
      $135 = HEAP8[133688>>0]|0;
      $136 = ($135<<24>>24)==(78);
      if (!($136)) {
       break L28;
      }
      HEAP32[133096>>2] = 80;
      break L28;
     }
     $137 = ($132|0)==($129|0);
     if ($137) {
      HEAP32[189952>>2] = 21;
      _gamma_curve(0.41666666666666669,12.92,1,4095);
      _memset((134176|0),0,8204)|0;
      HEAP32[584>>2] = 0;
      break L28;
     }
     $138 = $131 << 1;
     $139 = ($138|0)==($129|0);
     if ($139) {
      HEAP32[189952>>2] = 18;
      HEAP32[133096>>2] = 4;
      HEAP16[928>>1] = 19789;
      break L28;
     } else {
      HEAP32[189952>>2] = 22;
      break L28;
     }
    } else if ((($67|0) == 99) | (($67|0) == 7) | (($67|0) == 6)) {
     HEAP32[189952>>2] = 4;
     break L28;
    } else {
     HEAP32[133208>>2] = 0;
     break L28;
    }
   } while(0);
   if ((label|0) == 26) {
    $82 = HEAP32[133096>>2]|0;
    $83 = (($82) + 1)|0;
    HEAP32[133096>>2] = $83;
    label = 32;
   }
   do {
    if ((label|0) == 32) {
     $$pr = HEAP32[133264>>2]|0;
     if ((($$pr|0) == 8)) {
      HEAP32[189952>>2] = 7;
      break L28;
     } else if ((($$pr|0) == 12)) {
      break;
     } else if ((($$pr|0) == 14)) {
      HEAP32[133096>>2] = 0;
     } else if (!((($$pr|0) == 16))) {
      break L28;
     }
     HEAP32[189952>>2] = 18;
     $109 = (_strncmp(133624,454624,7)|0);
     $110 = ($109|0)==(0);
     if (!($110)) {
      break L28;
     }
     $111 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 32|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112*7)|0;
     $114 = HEAP16[132336>>1]|0;
     $115 = $114&65535;
     $116 = HEAP16[133064>>1]|0;
     $117 = $116&65535;
     $118 = Math_imul($117, $115)|0;
     $119 = ($113|0)>($118|0);
     if (!($119)) {
      break L28;
     }
     HEAP32[189952>>2] = 20;
     break L28;
    }
   } while(0);
   $106 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(2);
   if ($108) {
    HEAP32[133096>>2] = 6;
   }
   HEAP32[189952>>2] = 9;
  }
 } while(0);
 $142 = HEAP32[133072>>2]|0;
 $143 = ($142|0)==(0);
 do {
  if ($143) {
   $144 = HEAP32[133216>>2]|0;
   $145 = ($144|0)==(3);
   if ($145) {
    $146 = ((454920 + (($raw$0$lcssa*44)|0)|0) + 32|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ($147|0)!=(0);
    $149 = HEAP32[133264>>2]|0;
    $150 = ($149|0)!=(14);
    $or$cond3 = $148 & $150;
    if ($or$cond3) {
     $151 = HEAP32[133056>>2]|0;
     $152 = $151 & -16;
     $153 = ($152|0)==(32768);
     if ($153) {
      label = 63;
     }
    } else {
     $154 = $149;
     label = 64;
    }
   } else {
    label = 63;
   }
   if ((label|0) == 63) {
    $$pr4 = HEAP32[133264>>2]|0;
    $154 = $$pr4;
    label = 64;
   }
   if ((label|0) == 64) {
    $155 = ($154|0)==(8);
    if (!($155)) {
     break;
    }
    $156 = (_my_strcasestr(133624,457400)|0);
    $157 = ($156|0)==(0|0);
    if (!($157)) {
     break;
    }
    $158 = (_strstr(133112,457408)|0);
    $159 = ($158|0)==(0|0);
    if (!($159)) {
     break;
    }
   }
   HEAP32[133208>>2] = 0;
  }
 } while(0);
 $160 = HEAP32[455464>>2]|0;
 $161 = ($160|0)==(0);
 if ($161) {
  STACKTOP = sp;return;
 }
 $162 = HEAP32[455464>>2]|0;
 $i$29 = 0;$thm$08 = -1;
 while(1) {
  $163 = ($i$29|0)==($raw$0$lcssa|0);
  if ($163) {
   $thm$1 = $thm$08;
  } else {
   $164 = ((454920 + (($i$29*44)|0)|0) + 28|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ($165|0)==($max_samp$0$lcssa|0);
   if ($166) {
    $167 = (454920 + (($i$29*44)|0)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ((454920 + (($i$29*44)|0)|0) + 4|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = Math_imul($170, $168)|0;
    $172 = ((454920 + (($i$29*44)|0)|0) + 8|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = Math_imul($173, $173)|0;
    $175 = (($174) + 1)|0;
    $176 = (($171|0) / ($175|0))&-1;
    $177 = HEAP16[133752>>1]|0;
    $178 = $177&65535;
    $179 = HEAP16[133760>>1]|0;
    $180 = $179&65535;
    $181 = Math_imul($180, $178)|0;
    $182 = HEAP32[133840>>2]|0;
    $183 = Math_imul($182, $182)|0;
    $184 = (($183) + 1)|0;
    $185 = (($181>>>0) / ($184>>>0))&-1;
    $186 = ($176>>>0)>($185>>>0);
    if ($186) {
     $187 = ((454920 + (($i$29*44)|0)|0) + 12|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)==(34892);
     if ($189) {
      $thm$1 = $thm$08;
     } else {
      $190 = $168&65535;
      HEAP16[133752>>1] = $190;
      $191 = HEAP32[$169>>2]|0;
      $192 = $191&65535;
      HEAP16[133760>>1] = $192;
      $193 = ((454920 + (($i$29*44)|0)|0) + 20|0);
      $194 = HEAP32[$193>>2]|0;
      HEAP32[454040>>2] = $194;
      $195 = ((454920 + (($i$29*44)|0)|0) + 32|0);
      $196 = HEAP32[$195>>2]|0;
      HEAP32[133768>>2] = $196;
      $197 = HEAP32[$172>>2]|0;
      HEAP32[133840>>2] = $197;
      $thm$1 = $i$29;
     }
    } else {
     $thm$1 = $thm$08;
    }
   } else {
    $thm$1 = $thm$08;
   }
  }
  $198 = (($i$29) + 1)|0;
  $199 = ($198>>>0)<($162>>>0);
  if ($199) {
   $i$29 = $198;$thm$08 = $thm$1;
  } else {
   $thm$1$lcssa = $thm$1;
   break;
  }
 }
 $200 = ($thm$1$lcssa|0)>(-1);
 if (!($200)) {
  STACKTOP = sp;return;
 }
 $201 = ((454920 + (($thm$1$lcssa*44)|0)|0) + 28|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = $202 << 5;
 $204 = HEAP32[133840>>2]|0;
 $205 = $204 | $203;
 HEAP32[133840>>2] = $205;
 $206 = ((454920 + (($thm$1$lcssa*44)|0)|0) + 12|0);
 $207 = HEAP32[$206>>2]|0;
 if ((($207|0) == 0)) {
  HEAP32[457424>>2] = 27;
  STACKTOP = sp;return;
 } else if ((($207|0) == 65000)) {
  $213 = ((454920 + (($thm$1$lcssa*44)|0)|0) + 16|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)==(6);
  $216 = $215 ? 25 : 24;
  HEAP32[457432>>2] = $216;
  STACKTOP = sp;return;
 } else if ((($207|0) == 1)) {
  $208 = ((454920 + (($thm$1$lcssa*44)|0)|0) + 8|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = ($209|0)<(9);
  if ($210) {
   HEAP32[457424>>2] = 28;
   STACKTOP = sp;return;
  }
  $211 = (_strcmp(133624,457304)|0);
  $212 = ($211|0)==(0);
  if ($212) {
   HEAP32[457424>>2] = 29;
   STACKTOP = sp;return;
  } else {
   HEAP32[457432>>2] = 30;
   STACKTOP = sp;return;
  }
 } else {
  STACKTOP = sp;return;
 }
}
function _parse_external_jpeg() {
 var $$lcssa = 0, $$lcssa15 = 0, $$sum = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $file$1 = 0, $isdigit = 0, $isdigit2 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[864>>2]|0;
 $1 = HEAP32[680>>2]|0;
 $2 = (_strrchr($1,46)|0);
 $3 = (_strrchr($1,47)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_strrchr($1,92)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = HEAP32[680>>2]|0;
   $8 = (($7) + -1|0);
   $file$1 = $8;
  } else {
   $file$1 = $5;
  }
 } else {
  $file$1 = $3;
 }
 $9 = (($file$1) + 1|0);
 $10 = ($2|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (_strlen(($2|0))|0);
 $12 = ($11|0)==(4);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = $9;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)==(8);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = HEAP32[680>>2]|0;
 $18 = (_strlen(($17|0))|0);
 $19 = (($18) + 1)|0;
 $20 = (_malloc($19)|0);
 _merror($20,457456);
 $21 = HEAP32[680>>2]|0;
 (_strcpy(($20|0),($21|0))|0);
 $22 = HEAP32[680>>2]|0;
 $23 = $22;
 $24 = (($14) - ($23))|0;
 $25 = (($20) + ($24)|0);
 $26 = (($13) - ($23))|0;
 $27 = (_strcasecmp($2,457480)|0);
 $28 = ($27|0)==(0);
 L14: do {
  if ($28) {
   $$sum7 = (($26) + -1)|0;
   $29 = (($20) + ($$sum7)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30 << 24 >> 24;
   $isdigittmp5 = (($31) + -48)|0;
   $isdigit6 = ($isdigittmp5>>>0)<(10);
   if ($isdigit6) {
    $45 = $30;$48 = $29;
    while(1) {
     $46 = ($45<<24>>24)==(57);
     if (!($46)) {
      $$lcssa = $45;$$lcssa15 = $48;
      break;
     }
     HEAP8[$48>>0] = 48;
     $49 = (($48) + -1|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50 << 24 >> 24;
     $isdigittmp = (($51) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if ($isdigit) {
      $45 = $50;$48 = $49;
     } else {
      break L14;
     }
    }
    $47 = (($$lcssa) + 1)<<24>>24;
    HEAP8[$$lcssa15>>0] = $47;
   }
  } else {
   $32 = (($20) + ($26)|0);
   $33 = (($2) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = (_isupper($35)|0);
   $37 = ($36|0)!=(0);
   $38 = $37 ? 457488 : 457480;
   ;HEAP8[$32+0>>0]=HEAP8[$38+0>>0]|0;HEAP8[$32+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$38+3>>0]|0;HEAP8[$32+4>>0]=HEAP8[$38+4>>0]|0;
   $39 = HEAP8[$9>>0]|0;
   $40 = $39 << 24 >> 24;
   $isdigittmp1 = (($40) + -48)|0;
   $isdigit2 = ($isdigittmp1>>>0)<(10);
   if ($isdigit2) {
    $41 = (($file$1) + 5|0);
    $42 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8)|(HEAPU8[$41+2>>0]<<16)|(HEAPU8[$41+3>>0]<<24);
    HEAP8[$25>>0]=$42&255;HEAP8[$25+1>>0]=($42>>8)&255;HEAP8[$25+2>>0]=($42>>16)&255;HEAP8[$25+3>>0]=$42>>24;
    $$sum = (($24) + 4)|0;
    $43 = (($20) + ($$sum)|0);
    $44 = HEAPU8[$9>>0]|(HEAPU8[$9+1>>0]<<8)|(HEAPU8[$9+2>>0]<<16)|(HEAPU8[$9+3>>0]<<24);
    HEAP8[$43>>0]=$44&255;HEAP8[$43+1>>0]=($44>>8)&255;HEAP8[$43+2>>0]=($44>>16)&255;HEAP8[$43+3>>0]=$44>>24;
   }
  }
 } while(0);
 $52 = HEAP32[680>>2]|0;
 $53 = (_strcmp($20,$52)|0);
 $54 = ($53|0)==(0);
 if (!($54)) {
  $55 = (_fopen(($20|0),(190192|0))|0);
  HEAP32[864>>2] = $55;
  $56 = ($55|0)==(0|0);
  if (!($56)) {
   $57 = HEAP32[168>>2]|0;
   $58 = ($57|0)==(0);
   if (!($58)) {
    $59 = HEAP32[_stderr>>2]|0;
    HEAP32[$vararg_buffer>>2] = $20;
    (_fprintf(($59|0),(457496|0),($vararg_buffer|0))|0);
   }
   (_parse_tiff(12)|0);
   HEAP32[454040>>2] = 0;
   HEAP32[133208>>2] = 1;
   $60 = HEAP32[864>>2]|0;
   (_fclose(($60|0))|0);
  }
 }
 $61 = HEAP32[190152>>2]|0;
 $62 = ($61|0)==(0);
 if ($62) {
  $63 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $20;
  (_fprintf(($63|0),(457528|0),($vararg_buffer1|0))|0);
 }
 _free($20);
 HEAP32[864>>2] = $0;
 STACKTOP = sp;return;
}
function _ciff_block_1030() {
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bitbuf$010 = 0, $bitbuf$16 = 0, $bitbuf$2 = 0, $bitbuf$2$lcssa = 0, $col$04 = 0, $exitcond = 0, $exitcond11 = 0, $i$07 = 0, $i$13 = 0, $i$2 = 0, $i$2$lcssa = 0, $row$08 = 0, $vbits$09 = 0;
 var $vbits$15 = 0, $vbits$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_get2()|0);
 $0 = (_get4()|0);
 $1 = ($0|0)==(524296);
 if (!($1)) {
  return;
 }
 $2 = (_get4()|0);
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = (_get2()|0);
 $5 = $4&65535;
 if (!((($4<<16>>16) == 10) | (($4<<16>>16) == 12))) {
  return;
 }
 $6 = (32 - ($5))|0;
 $bitbuf$010 = 0;$i$07 = 0;$row$08 = 0;$vbits$09 = 0;
 while(1) {
  $bitbuf$16 = $bitbuf$010;$col$04 = 0;$i$13 = $i$07;$vbits$15 = $vbits$09;
  while(1) {
   $7 = ($vbits$15|0)<($5|0);
   if ($7) {
    $8 = $bitbuf$16 << 16;
    $9 = (_get2()|0);
    $10 = (($i$13) + 1)|0;
    $11 = $i$13 & 1;
    $12 = (457568 + ($11<<1)|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13 ^ $9;
    $15 = $14&65535;
    $16 = $15 | $8;
    $17 = (($vbits$15) + 16)|0;
    $bitbuf$2 = $16;$i$2 = $10;$vbits$2 = $17;
   } else {
    $bitbuf$2 = $bitbuf$16;$i$2 = $i$13;$vbits$2 = $vbits$15;
   }
   $18 = (32 - ($vbits$2))|0;
   $19 = $bitbuf$2 << $18;
   $20 = $19 >>> $6;
   $21 = $20&65535;
   $22 = ((190368 + ($row$08<<4)|0) + ($col$04<<1)|0);
   HEAP16[$22>>1] = $21;
   $23 = (($vbits$2) - ($5))|0;
   $24 = (($col$04) + 1)|0;
   $exitcond = ($24|0)==(8);
   if ($exitcond) {
    $$lcssa = $23;$bitbuf$2$lcssa = $bitbuf$2;$i$2$lcssa = $i$2;
    break;
   } else {
    $bitbuf$16 = $bitbuf$2;$col$04 = $24;$i$13 = $i$2;$vbits$15 = $23;
   }
  }
  $25 = (($row$08) + 1)|0;
  $exitcond11 = ($25|0)==(8);
  if ($exitcond11) {
   break;
  } else {
   $bitbuf$010 = $bitbuf$2$lcssa;$i$07 = $i$2$lcssa;$row$08 = $25;$vbits$09 = $$lcssa;
  }
 }
 return;
}
function _parse_ciff($offset,$length,$depth) {
 $offset = $offset|0;
 $length = $length|0;
 $depth = $depth|0;
 var $$ = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0;
 var $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0;
 var $99 = 0, $c$3 = 0, $exp2 = 0.0, $exp21 = 0.0, $exp22 = 0.0, $exp23 = 0.0, $exp24 = 0.0, $key = 0, $or$cond = 0, $wbi$029 = 0, $wbi$2 = 0, $wbi$3 = 0, $wbi$39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $key = sp;
 HEAP32[$key>>2] = 1173554192;
 $0 = HEAP32[864>>2]|0;
 $1 = (($offset) + -4)|0;
 $2 = (($1) + ($length))|0;
 (_fseek(($0|0),($2|0),0)|0);
 $3 = (_get4()|0);
 $4 = (($3) + ($offset))|0;
 $5 = HEAP32[864>>2]|0;
 (_fseek(($5|0),($4|0),0)|0);
 $6 = (_get2()|0);
 $7 = $6&65535;
 $8 = $7 | $depth;
 $9 = ($8|0)>(127);
 $10 = ($6<<16>>16)==(0);
 $or$cond = $9 | $10;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $11 = (($depth) + 1)|0;
 $12 = (($key) + 2|0);
 $$in = $7;$wbi$029 = -1;
 while(1) {
  $13 = (($$in) + -1)|0;
  $14 = (_get2()|0);
  $15 = $14&65535;
  $16 = (_get4()|0);
  $17 = HEAP32[864>>2]|0;
  $18 = (_ftell(($17|0))|0);
  $19 = (($18) + 4)|0;
  $20 = HEAP32[864>>2]|0;
  $21 = (_get4()|0);
  $22 = (($21) + ($offset))|0;
  (_fseek(($20|0),($22|0),0)|0);
  $23 = $15 >>> 8;
  $24 = (($23) + 8)|0;
  $25 = $24 | 8;
  $26 = ($25|0)==(56);
  if ($26) {
   $27 = HEAP32[864>>2]|0;
   $28 = (_ftell(($27|0))|0);
   _parse_ciff($28,$16,$11);
  }
  L9: do {
   switch ($14<<16>>16) {
   case 2064:  {
    $29 = HEAP32[864>>2]|0;
    (_fread((454800|0),64,1,($29|0))|0);
    $wbi$39 = $wbi$029;
    break;
   }
   case 2058:  {
    $30 = HEAP32[864>>2]|0;
    (_fread((133624|0),64,1,($30|0))|0);
    $31 = HEAP32[864>>2]|0;
    $32 = (_strlen((133624|0))|0);
    $33 = (($32) + -63)|0;
    (_fseek(($31|0),($33|0),1)|0);
    $34 = HEAP32[864>>2]|0;
    (_fread((133688|0),64,1,($34|0))|0);
    $wbi$39 = $wbi$029;
    break;
   }
   case 8199:  {
    $44 = HEAP32[864>>2]|0;
    $45 = (_ftell(($44|0))|0);
    HEAP32[454040>>2] = $45;
    HEAP32[133768>>2] = $16;
    $wbi$39 = $wbi$029;
    break;
   }
   case 4265:  {
    $168 = ($16|0)>(66);
    if ($168) {
     $169 = (457656 + ($wbi$029)|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = $170 << 24 >> 24;
     $172 = (($171) + -48)|0;
     $wbi$2 = $172;
    } else {
     $wbi$2 = $wbi$029;
    }
    $173 = HEAP32[864>>2]|0;
    $174 = $wbi$2 << 3;
    $175 = $174 | 2;
    (_fseek(($173|0),($175|0),1)|0);
    $176 = (_get2()|0);
    $177 = (+($176&65535));
    HEAPF32[133480>>2] = $177;
    $178 = (_get2()|0);
    $179 = (+($178&65535));
    HEAPF32[((133480 + 4|0))>>2] = $179;
    $180 = (_get2()|0);
    $181 = (+($180&65535));
    HEAPF32[((133480 + 12|0))>>2] = $181;
    $182 = (_get2()|0);
    $183 = (+($182&65535));
    HEAPF32[((133480 + 8|0))>>2] = $183;
    $wbi$3 = $wbi$2;
    label = 29;
    break;
   }
   case 6197:  {
    $43 = (_get4()|0);
    HEAP32[133056>>2] = $43;
    $wbi$39 = $wbi$029;
    break;
   }
   case 6168:  {
    (_get4()|0);
    $46 = (_get4()|0);
    $47 = (+_int_to_float($46));
    $48 = -$47;
    $49 = $48;
    $exp23 = (+_exp2($49));
    $50 = $exp23;
    HEAPF32[454760>>2] = $50;
    $51 = (_get4()|0);
    $52 = (+_int_to_float($51));
    $53 = $52 * 0.5;
    $54 = $53;
    $exp24 = (+_exp2($54));
    $55 = $exp24;
    HEAPF32[454752>>2] = $55;
    $wbi$39 = $wbi$029;
    break;
   }
   case 6160:  {
    $35 = (_get4()|0);
    $36 = $35&65535;
    HEAP16[132088>>1] = $36;
    $37 = (_get4()|0);
    $38 = $37&65535;
    HEAP16[132080>>1] = $38;
    $39 = (_get4()|0);
    $40 = (+_int_to_float($39));
    $41 = $40;
    HEAPF64[457384>>3] = $41;
    $42 = (_get4()|0);
    HEAP32[454784>>2] = $42;
    $wbi$39 = $wbi$029;
    break;
   }
   case 4140:  {
    $84 = (_get2()|0);
    $85 = ($84&65535)>(512);
    $86 = HEAP32[864>>2]|0;
    if ($85) {
     (_fseek(($86|0),118,1)|0);
     $87 = (_get2()|0);
     $88 = (+($87&65535));
     HEAPF32[((133480 + 8|0))>>2] = $88;
     $89 = (_get2()|0);
     $90 = (+($89&65535));
     HEAPF32[((133480 + 12|0))>>2] = $90;
     $91 = (_get2()|0);
     $92 = (+($91&65535));
     HEAPF32[133480>>2] = $92;
     $93 = (_get2()|0);
     $94 = (+($93&65535));
     HEAPF32[((133480 + 4|0))>>2] = $94;
     $wbi$39 = $wbi$029;
     break L9;
    } else {
     (_fseek(($86|0),98,1)|0);
     $95 = (_get2()|0);
     $96 = (+($95&65535));
     HEAPF32[((133480 + 4|0))>>2] = $96;
     $97 = (_get2()|0);
     $98 = (+($97&65535));
     HEAPF32[133480>>2] = $98;
     $99 = (_get2()|0);
     $100 = (+($99&65535));
     HEAPF32[((133480 + 8|0))>>2] = $100;
     $101 = (_get2()|0);
     $102 = (+($101&65535));
     HEAPF32[((133480 + 12|0))>>2] = $102;
     $wbi$39 = $wbi$029;
     break L9;
    }
    break;
   }
   case 4138:  {
    (_get4()|0);
    $56 = (_get2()|0);
    $57 = $56&65535;
    $58 = (+($57|0));
    $59 = $58 * 0.03125;
    $60 = $59 + -4.0;
    $exp2 = (+_exp2($60));
    $61 = $exp2 * 50.0;
    $62 = $61;
    HEAPF32[454744>>2] = $62;
    (_get2()|0);
    $63 = (_get2()|0);
    $64 = (+($63<<16>>16));
    $65 = $64 * 0.015625;
    $exp21 = (+_exp2($65));
    $66 = $exp21;
    HEAPF32[454752>>2] = $66;
    $67 = (_get2()|0);
    $68 = $67 << 16 >> 16;
    $69 = (0 - ($68))|0;
    $70 = (+($69|0));
    $71 = $70 * 0.03125;
    $exp22 = (+_exp2($71));
    $72 = $exp22;
    HEAPF32[454760>>2] = $72;
    (_get2()|0);
    $73 = (_get2()|0);
    $74 = $73&65535;
    $75 = ($73&65535)>(17);
    $$ = $75 ? 0 : $74;
    $76 = HEAP32[864>>2]|0;
    (_fseek(($76|0),32,1)|0);
    $77 = +HEAPF32[454760>>2];
    $78 = $77 > 1.0E+6;
    if ($78) {
     $79 = (_get2()|0);
     $80 = $79&65535;
     $81 = (+($80|0));
     $82 = $81 / 10.0;
     $83 = $82;
     HEAPF32[454760>>2] = $83;
     $wbi$39 = $$;
    } else {
     $wbi$39 = $$;
    }
    break;
   }
   case 50:  {
    $103 = ($16|0)==(768);
    if ($103) {
     $104 = HEAP32[864>>2]|0;
     (_fseek(($104|0),72,1)|0);
     $105 = (_get2()|0);
     $106 = $105&65535;
     $107 = (+($106|0));
     $108 = 1024.0 / $107;
     $109 = $108;
     HEAPF32[133480>>2] = $109;
     $110 = (_get2()|0);
     $111 = $110&65535;
     $112 = (+($111|0));
     $113 = 1024.0 / $112;
     $114 = $113;
     HEAPF32[((133480 + 4|0))>>2] = $114;
     $115 = (_get2()|0);
     $116 = $115&65535;
     $117 = (+($116|0));
     $118 = 1024.0 / $117;
     $119 = $118;
     HEAPF32[((133480 + 12|0))>>2] = $119;
     $120 = (_get2()|0);
     $121 = $120&65535;
     $122 = (+($121|0));
     $123 = 1024.0 / $122;
     $124 = $123;
     HEAPF32[((133480 + 8|0))>>2] = $124;
     $125 = ($wbi$029|0)==(0);
     if (!($125)) {
      $wbi$39 = $wbi$029;
      break L9;
     }
     HEAPF32[133480>>2] = -1.0;
     $wbi$39 = 0;
     break L9;
    }
    $126 = +HEAPF32[133480>>2];
    $127 = $126 != 0.0;
    if ($127) {
     $wbi$39 = $wbi$029;
    } else {
     $128 = (_get2()|0);
     $129 = HEAP16[$key>>1]|0;
     $130 = ($128<<16>>16)==($129<<16>>16);
     if ($130) {
      $131 = (_strstr(133688,457576)|0);
      $132 = ($131|0)!=(0|0);
      $133 = $132 ? 457584 : 457608;
      $134 = (($133) + ($wbi$029)|0);
      $135 = HEAP8[$134>>0]|0;
      $136 = $135 << 24 >> 24;
      $137 = (($136) + -46)|0;
      $c$3 = $137;
     } else {
      $138 = (457632 + ($wbi$029)|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = $139 << 24 >> 24;
      $141 = (($140) + -48)|0;
      HEAP16[$12>>1] = 0;
      HEAP16[$key>>1] = 0;
      $c$3 = $141;
     }
     $142 = HEAP32[864>>2]|0;
     $143 = $c$3 << 3;
     $144 = (($143) + 78)|0;
     (_fseek(($142|0),($144|0),1)|0);
     $145 = (_get2()|0);
     $146 = HEAP16[$key>>1]|0;
     $147 = $146 ^ $145;
     $148 = $147&65535;
     $149 = (+($148|0));
     HEAPF32[((133480 + 4|0))>>2] = $149;
     $150 = (_get2()|0);
     $151 = (($key) + 2|0);
     $152 = HEAP16[$151>>1]|0;
     $153 = $152 ^ $150;
     $154 = $153&65535;
     $155 = (+($154|0));
     HEAPF32[133480>>2] = $155;
     $156 = (_get2()|0);
     $157 = HEAP16[$key>>1]|0;
     $158 = $157 ^ $156;
     $159 = $158&65535;
     $160 = (+($159|0));
     HEAPF32[((133480 + 8|0))>>2] = $160;
     $161 = (_get2()|0);
     $162 = (($key) + 2|0);
     $163 = HEAP16[$162>>1]|0;
     $164 = $163 ^ $161;
     $165 = $164&65535;
     $166 = (+($165|0));
     HEAPF32[((133480 + 12|0))>>2] = $166;
     $167 = ($wbi$029|0)==(0);
     if ($167) {
      HEAPF32[133480>>2] = -1.0;
      $wbi$39 = 0;
     } else {
      $wbi$39 = $wbi$029;
     }
    }
    break;
   }
   default: {
    $wbi$3 = $wbi$029;
    label = 29;
   }
   }
  } while(0);
  do {
   if ((label|0) == 29) {
    label = 0;
    if ((($14<<16>>16) == 22547)) {
     $194 = (+_int_to_float($16));
     HEAPF32[132064>>2] = $194;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 22548)) {
     $195 = (+_int_to_float($16));
     HEAPF32[132072>>2] = $195;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 20521)) {
     $189 = $16 >> 16;
     $190 = (+($189|0));
     HEAPF32[455472>>2] = $190;
     $191 = $16 & 65535;
     $192 = ($191|0)==(2);
     if (!($192)) {
      $wbi$39 = $wbi$3;
      break;
     }
     $193 = $190 * 0.03125;
     HEAPF32[455472>>2] = $193;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 4145)) {
     (_get2()|0);
     $187 = (_get2()|0);
     HEAP16[132336>>1] = $187;
     $188 = (_get2()|0);
     HEAP16[133064>>1] = $188;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 22551)) {
     HEAP32[454768>>2] = $16;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 22580)) {
     HEAP32[133192>>2] = $16;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 22542)) {
     HEAP32[190152>>2] = $16;
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 4144)) {
     $184 = 98368 >>> $wbi$3;
     $185 = $184 & 1;
     $186 = ($185|0)==(0);
     if ($186) {
      $wbi$39 = $wbi$3;
      break;
     }
     _ciff_block_1030();
     $wbi$39 = $wbi$3;
     break;
    } else if ((($14<<16>>16) == 6158)) {
     $196 = (_get4()|0);
     HEAP32[190152>>2] = $196;
     $wbi$39 = $wbi$3;
     break;
    } else {
     $wbi$39 = $wbi$3;
     break;
    }
   }
  } while(0);
  $197 = HEAP32[864>>2]|0;
  (_fseek(($197|0),($19|0),0)|0);
  $198 = ($13|0)==(0);
  if ($198) {
   break;
  } else {
   $$in = $13;$wbi$029 = $wbi$39;
  }
 }
 STACKTOP = sp;return;
}
function _parse_rollei() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $line = 0, $t = 0, $val$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $line = sp + 72|0;
 $t = sp + 28|0;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),0,0)|0);
 dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $1 = (($t) + 12|0);
 $2 = (($t) + 16|0);
 $3 = (($t) + 20|0);
 $4 = (($t) + 8|0);
 $5 = (($t) + 4|0);
 while(1) {
  $6 = HEAP32[864>>2]|0;
  (_fgets(($line|0),128,($6|0))|0);
  $7 = (_strchr($line,61)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $10 = (_strlen(($line|0))|0);
   $11 = (($line) + ($10)|0);
   $val$0 = $11;
  } else {
   $9 = (($7) + 1|0);
   HEAP8[$7>>0] = 0;
   $val$0 = $9;
  }
  $12 = (_strcmp($line,457672)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   HEAP32[$vararg_buffer>>2] = $1;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $2;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $3;
   (_sscanf($val$0,133176,$vararg_buffer)|0);
  }
  $14 = (_strcmp($line,457680)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP32[$vararg_buffer3>>2] = $4;
   $vararg_ptr6 = (($vararg_buffer3) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $5;
   $vararg_ptr7 = (($vararg_buffer3) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $t;
   (_sscanf($val$0,457688,$vararg_buffer3)|0);
  }
  $16 = (_strcmp($line,457704)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = (_atoi($val$0)|0);
   HEAP32[454040>>2] = $18;
  }
  $19 = (_strcmp($line,457712)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = (_atoi($val$0)|0);
   $22 = $21&65535;
   HEAP16[132336>>1] = $22;
  }
  $23 = (_strcmp($line,457720)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = (_atoi($val$0)|0);
   $26 = $25&65535;
   HEAP16[133064>>1] = $26;
  }
  $27 = (_strcmp($line,457728)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $29 = (_atoi($val$0)|0);
   $30 = $29&65535;
   HEAP16[133752>>1] = $30;
  }
  $31 = (_strcmp($line,457736)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = (_atoi($val$0)|0);
   $34 = $33&65535;
   HEAP16[133760>>1] = $34;
  }
  $35 = (_strncmp($line,457744,4)|0);
  $36 = ($35|0)==(0);
  if ($36) {
   break;
  }
 }
 $37 = HEAP32[454040>>2]|0;
 $38 = HEAP16[133752>>1]|0;
 $39 = $38&65535;
 $40 = HEAP16[133760>>1]|0;
 $41 = $40&65535;
 $42 = $39 << 1;
 $43 = Math_imul($42, $41)|0;
 $44 = (($43) + ($37))|0;
 HEAP32[133280>>2] = $44;
 $45 = (($t) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + -1900)|0;
 HEAP32[$45>>2] = $47;
 $48 = (($t) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + -1)|0;
 HEAP32[$48>>2] = $50;
 $51 = (_mktime(($t|0))|0);
 $52 = ($51|0)>(0);
 if (!($52)) {
  ;HEAP8[133624+0>>0]=HEAP8[457752+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[457752+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[457752+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[457752+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[457752+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[457752+5>>0]|0;HEAP8[133624+6>>0]=HEAP8[457752+6>>0]|0;
  dest=133688+0|0; src=457760+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  HEAP32[457424>>2] = 31;
  STACKTOP = sp;return;
 }
 $53 = (_mktime(($t|0))|0);
 HEAP32[190152>>2] = $53;
 ;HEAP8[133624+0>>0]=HEAP8[457752+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[457752+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[457752+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[457752+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[457752+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[457752+5>>0]|0;HEAP8[133624+6>>0]=HEAP8[457752+6>>0]|0;
 dest=133688+0|0; src=457760+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[457424>>2] = 31;
 STACKTOP = sp;return;
}
function _parse_sinar_ia() {
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $str = sp;
 HEAP16[928>>1] = 18761;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),4,0)|0);
 $1 = (_get4()|0);
 $2 = HEAP32[864>>2]|0;
 $3 = (_get4()|0);
 (_fseek(($2|0),($3|0),0)|0);
 $4 = ($1|0)==(0);
 if (!($4)) {
  $$in = $1;
  while(1) {
   $5 = (($$in) + -1)|0;
   $6 = (_get4()|0);
   (_get4()|0);
   $7 = HEAP32[864>>2]|0;
   (_fread(($str|0),8,1,($7|0))|0);
   $8 = (_strcmp($str,457776)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[133272>>2] = $6;
   }
   $10 = (_strcmp($str,457784)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    HEAP32[454040>>2] = $6;
   }
   $12 = (_strcmp($str,457792)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP32[133280>>2] = $6;
   }
   $14 = ($5|0)==(0);
   if ($14) {
    break;
   } else {
    $$in = $5;
   }
  }
 }
 $15 = HEAP32[864>>2]|0;
 $16 = HEAP32[133272>>2]|0;
 $17 = (($16) + 20)|0;
 (_fseek(($15|0),($17|0),0)|0);
 $18 = HEAP32[864>>2]|0;
 (_fread((133624|0),64,1,($18|0))|0);
 HEAP8[((133624 + 63|0))>>0] = 0;
 $19 = (_strchr(133624,32)|0);
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = (($19) + 1|0);
  (_strcpy((133688|0),($21|0))|0);
  HEAP8[$19>>0] = 0;
 }
 $22 = (_get2()|0);
 HEAP16[132336>>1] = $22;
 $23 = (_get2()|0);
 HEAP16[133064>>1] = $23;
 HEAP32[189952>>2] = 18;
 (_get4()|0);
 $24 = (_get2()|0);
 HEAP16[133752>>1] = $24;
 $25 = (_get2()|0);
 HEAP16[133760>>1] = $25;
 HEAP32[457424>>2] = 28;
 HEAP32[132368>>2] = 16383;
 STACKTOP = sp;return;
}
function _parse_phase_one($base) {
 $base = $base|0;
 var $$in = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $romm_cam = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $romm_cam = sp;
 dest=133984+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),($base|0),0)|0);
 $1 = (_get4()|0);
 $2 = $1&65535;
 HEAP16[928>>1] = $2;
 $3 = (_get4()|0);
 $$mask = $3 & -256;
 $4 = ($$mask|0)==(1382119168);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[864>>2]|0;
 $6 = (_get4()|0);
 $7 = (($6) + ($base))|0;
 (_fseek(($5|0),($7|0),0)|0);
 $8 = (_get4()|0);
 (_get4()|0);
 $9 = ($8|0)==(0);
 L4: do {
  if (!($9)) {
   $$in = $8;
   while(1) {
    $10 = (($$in) + -1)|0;
    $11 = (_get4()|0);
    (_get4()|0);
    $12 = (_get4()|0);
    $13 = (_get4()|0);
    $14 = HEAP32[864>>2]|0;
    $15 = (_ftell(($14|0))|0);
    $16 = HEAP32[864>>2]|0;
    $17 = (($13) + ($base))|0;
    (_fseek(($16|0),($17|0),0)|0);
    do {
     switch ($11|0) {
     case 266:  {
      $57 = $13&65535;
      HEAP16[592>>1] = $57;
      break;
     }
     case 267:  {
      $58 = $13&65535;
      HEAP16[600>>1] = $58;
      break;
     }
     case 541:  {
      HEAP32[((133984 + 12|0))>>2] = $13;
      break;
     }
     case 262:  {
      $23 = (+_getreal(11));
      $24 = $23;
      HEAPF32[$romm_cam>>2] = $24;
      $25 = (+_getreal(11));
      $26 = $25;
      $27 = (($romm_cam) + 4|0);
      HEAPF32[$27>>2] = $26;
      $28 = (+_getreal(11));
      $29 = $28;
      $30 = (($romm_cam) + 8|0);
      HEAPF32[$30>>2] = $29;
      $31 = (+_getreal(11));
      $32 = $31;
      $33 = (($romm_cam) + 12|0);
      HEAPF32[$33>>2] = $32;
      $34 = (+_getreal(11));
      $35 = $34;
      $36 = (($romm_cam) + 16|0);
      HEAPF32[$36>>2] = $35;
      $37 = (+_getreal(11));
      $38 = $37;
      $39 = (($romm_cam) + 20|0);
      HEAPF32[$39>>2] = $38;
      $40 = (+_getreal(11));
      $41 = $40;
      $42 = (($romm_cam) + 24|0);
      HEAPF32[$42>>2] = $41;
      $43 = (+_getreal(11));
      $44 = $43;
      $45 = (($romm_cam) + 28|0);
      HEAPF32[$45>>2] = $44;
      $46 = (+_getreal(11));
      $47 = $46;
      $48 = (($romm_cam) + 32|0);
      HEAPF32[$48>>2] = $47;
      _romm_coeff($romm_cam);
      break;
     }
     case 547:  {
      HEAP32[((133984 + 20|0))>>2] = $17;
      break;
     }
     case 263:  {
      $49 = (+_getreal(11));
      $50 = $49;
      HEAPF32[133480>>2] = $50;
      $51 = (+_getreal(11));
      $52 = $51;
      HEAPF32[((133480 + 4|0))>>2] = $52;
      $53 = (+_getreal(11));
      $54 = $53;
      HEAPF32[((133480 + 8|0))>>2] = $54;
      break;
     }
     case 548:  {
      HEAP32[((133984 + 24|0))>>2] = $13;
      break;
     }
     case 269:  {
      $60 = $13&65535;
      HEAP16[132080>>1] = $60;
      break;
     }
     case 265:  {
      $56 = $13&65535;
      HEAP16[133064>>1] = $56;
      break;
     }
     case 264:  {
      $55 = $13&65535;
      HEAP16[132336>>1] = $55;
      break;
     }
     case 274:  {
      $61 = (($15) + -4)|0;
      HEAP32[((133984 + 4|0))>>2] = $61;
      break;
     }
     case 546:  {
      HEAP32[((133984 + 16|0))>>2] = $13;
      break;
     }
     case 272:  {
      HEAP32[133272>>2] = $17;
      HEAP32[133944>>2] = $12;
      break;
     }
     case 769:  {
      HEAP8[((133688 + 63|0))>>0] = 0;
      $63 = HEAP32[864>>2]|0;
      (_fread((133688|0),1,63,($63|0))|0);
      $64 = (_strstr(133688,457808)|0);
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       HEAP8[$64>>0] = 0;
      }
      break;
     }
     case 549:  {
      HEAP32[((133984 + 28|0))>>2] = $17;
      break;
     }
     case 256:  {
      $18 = $13 & 3;
      $19 = (457800 + ($18)|0);
      $20 = HEAP8[$19>>0]|0;
      $21 = $20 << 24 >> 24;
      $22 = (($21) + -48)|0;
      HEAP32[454784>>2] = $22;
      break;
     }
     case 270:  {
      HEAP32[133984>>2] = $13;
      break;
     }
     case 528:  {
      $62 = (+_int_to_float($13));
      HEAPF32[((133984 + 32|0))>>2] = $62;
      break;
     }
     case 271:  {
      HEAP32[133280>>2] = $17;
      break;
     }
     case 268:  {
      $59 = $13&65535;
      HEAP16[132088>>1] = $59;
      break;
     }
     case 538:  {
      HEAP32[((133984 + 8|0))>>2] = $13;
      break;
     }
     case 540:  {
      HEAP32[134144>>2] = $17;
      break;
     }
     default: {
     }
     }
    } while(0);
    $66 = HEAP32[864>>2]|0;
    (_fseek(($66|0),($15|0),0)|0);
    $67 = ($10|0)==(0);
    if ($67) {
     break L4;
    } else {
     $$in = $10;
    }
   }
  }
 } while(0);
 $68 = HEAP32[133984>>2]|0;
 $69 = ($68|0)<(3);
 $70 = $69 ? 1 : 2;
 HEAP32[189952>>2] = $70;
 HEAP32[132368>>2] = 65535;
 dest=133624+0|0; src=457816+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $71 = HEAP8[133688>>0]|0;
 $72 = ($71<<24>>24)==(0);
 if (!($72)) {
  STACKTOP = sp;return;
 }
 $73 = HEAP16[133064>>1]|0;
 $74 = $73&65535;
 if ((($74|0) == 2682)) {
  ;HEAP8[133688+0>>0]=HEAP8[457848+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[457848+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[457848+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[457848+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[457848+4>>0]|0;
  STACKTOP = sp;return;
 } else if ((($74|0) == 4128)) {
  ;HEAP8[133688+0>>0]=HEAP8[457856+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[457856+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[457856+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[457856+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[457856+4>>0]|0;
  STACKTOP = sp;return;
 } else if ((($74|0) == 2060)) {
  dest=133688+0|0; src=457832+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else if ((($74|0) == 5488)) {
  ;HEAP8[133688+0>>0]=HEAP8[457864+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[457864+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[457864+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[457864+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[457864+4>>0]|0;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _parse_fuji($offset) {
 $offset = $offset|0;
 var $$in = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c$04 = 0, $exitcond5 = 0, $tag$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),($offset|0),0)|0);
 $1 = (_get4()|0);
 $2 = ($1>>>0)>(255);
 if ($2) {
  return;
 }
 $3 = ($1|0)==(0);
 if (!($3)) {
  $$in = $1;
  while(1) {
   $4 = (($$in) + -1)|0;
   $5 = (_get2()|0);
   $6 = (_get2()|0);
   $7 = $6&65535;
   $8 = HEAP32[864>>2]|0;
   $9 = (_ftell(($8|0))|0);
   if ((($5<<16>>16) == -16384)) {
    $41 = HEAP16[928>>1]|0;
    HEAP16[928>>1] = 18761;
    $42 = (_get4()|0);
    $43 = ($42>>>0)>(10000);
    if ($43) {
     $44 = (_get4()|0);
     $tag$0 = $44;
    } else {
     $tag$0 = $42;
    }
    $45 = $tag$0&65535;
    HEAP16[132088>>1] = $45;
    $46 = (_get4()|0);
    $47 = $46&65535;
    HEAP16[132080>>1] = $47;
    HEAP16[928>>1] = $41;
   } else if ((($5<<16>>16) == 304)) {
    $18 = HEAP32[864>>2]|0;
    $19 = (_getc_unlocked(($18|0))|0);
    $20 = $19 >> 7;
    HEAP32[189968>>2] = $20;
    $21 = HEAP32[864>>2]|0;
    $22 = (_getc_unlocked(($21|0))|0);
    $23 = $22 >>> 3;
    $$lobit = $23 & 1;
    $24 = $$lobit ^ 1;
    $25 = $24&65535;
    HEAP16[189960>>1] = $25;
   } else if ((($5<<16>>16) == 305)) {
    HEAP32[584>>2] = 9;
    $c$04 = 0;
    while(1) {
     $26 = HEAP32[864>>2]|0;
     $27 = (_getc_unlocked(($26|0))|0);
     $28 = $27 & 3;
     $29 = $28&255;
     $30 = (35 - ($c$04))|0;
     $31 = (457872 + ($30)|0);
     HEAP8[$31>>0] = $29;
     $32 = (($c$04) + 1)|0;
     $exitcond5 = ($32|0)==(36);
     if ($exitcond5) {
      break;
     } else {
      $c$04 = $32;
     }
    }
   } else if ((($5<<16>>16) == 12272)) {
    $33 = (_get2()|0);
    $34 = (+($33&65535));
    HEAPF32[((133480 + 4|0))>>2] = $34;
    $35 = (_get2()|0);
    $36 = (+($35&65535));
    HEAPF32[133480>>2] = $36;
    $37 = (_get2()|0);
    $38 = (+($37&65535));
    HEAPF32[((133480 + 12|0))>>2] = $38;
    $39 = (_get2()|0);
    $40 = (+($39&65535));
    HEAPF32[((133480 + 8|0))>>2] = $40;
   } else if ((($5<<16>>16) == 256)) {
    $10 = (_get2()|0);
    HEAP16[133064>>1] = $10;
    $11 = (_get2()|0);
    HEAP16[132336>>1] = $11;
   } else if ((($5<<16>>16) == 289)) {
    $12 = (_get2()|0);
    HEAP16[132080>>1] = $12;
    $13 = (_get2()|0);
    HEAP16[132088>>1] = $13;
    $14 = ($13<<16>>16)==(4284);
    if ($14) {
     $15 = $13&65535;
     $16 = (($15) + 3)|0;
     $17 = $16&65535;
     HEAP16[132088>>1] = $17;
    }
   }
   $48 = HEAP32[864>>2]|0;
   $49 = (($9) + ($7))|0;
   (_fseek(($48|0),($49|0),0)|0);
   $50 = ($4|0)==(0);
   if ($50) {
    break;
   } else {
    $$in = $4;
   }
  }
 }
 $51 = HEAP32[189968>>2]|0;
 $52 = HEAP16[132080>>1]|0;
 $53 = $52&65535;
 $54 = $53 << $51;
 $55 = $54&65535;
 HEAP16[132080>>1] = $55;
 $56 = HEAP16[132088>>1]|0;
 $57 = $56&65535;
 $58 = $57 >>> $51;
 $59 = $58&65535;
 HEAP16[132088>>1] = $59;
 return;
}
function _parse_jpeg($offset) {
 $offset = $offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),($offset|0),0)|0);
 $1 = HEAP32[864>>2]|0;
 $2 = (_getc_unlocked(($1|0))|0);
 $3 = ($2|0)==(255);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[864>>2]|0;
 $5 = (_getc_unlocked(($4|0))|0);
 $6 = ($5|0)==(216);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[864>>2]|0;
 $8 = (_getc_unlocked(($7|0))|0);
 $9 = ($8|0)==(255);
 if (!($9)) {
  $$0 = 1;
  return ($$0|0);
 }
 while(1) {
  $10 = HEAP32[864>>2]|0;
  $11 = (_getc_unlocked(($10|0))|0);
  $12 = ($11|0)==(218);
  if ($12) {
   $$0 = 1;
   label = 12;
   break;
  }
  HEAP16[928>>1] = 19789;
  $13 = (_get2()|0);
  $14 = $13&65535;
  $15 = (($14) + -2)|0;
  $16 = HEAP32[864>>2]|0;
  $17 = (_ftell(($16|0))|0);
  if ((($11|0) == 192) | (($11|0) == 195)) {
   $18 = HEAP32[864>>2]|0;
   (_getc_unlocked(($18|0))|0);
   $19 = (_get2()|0);
   HEAP16[133064>>1] = $19;
   $20 = (_get2()|0);
   HEAP16[132336>>1] = $20;
  }
  $21 = (_get2()|0);
  HEAP16[928>>1] = $21;
  $22 = (_get4()|0);
  $23 = (_get4()|0);
  $24 = ($23|0)==(1212498256);
  if ($24) {
   $25 = (($22) + ($17))|0;
   $26 = (($15) - ($22))|0;
   _parse_ciff($25,$26,0);
  }
  $27 = (($17) + 6)|0;
  $28 = (_parse_tiff($27)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   _apply_tiff();
  }
  $30 = HEAP32[864>>2]|0;
  $31 = (($17) + ($15))|0;
  (_fseek(($30|0),($31|0),0)|0);
  $32 = HEAP32[864>>2]|0;
  $33 = (_getc_unlocked(($32|0))|0);
  $34 = ($33|0)==(255);
  if (!($34)) {
   $$0 = 1;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function _parse_riff() {
 var $$ = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0;
 var $9 = 0, $date = 0, $i$0$lcssa = 0, $month = 0, $or$cond = 0, $or$cond3 = 0, $t = 0, $tag = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer = sp;
 $tag = sp + 200|0;
 $date = sp + 136|0;
 $month = sp + 72|0;
 $t = sp + 24|0;
 HEAP16[928>>1] = 18761;
 $0 = HEAP32[864>>2]|0;
 (_fread(($tag|0),4,1,($0|0))|0);
 $1 = (_get4()|0);
 $2 = HEAP32[864>>2]|0;
 $3 = (_ftell(($2|0))|0);
 $4 = (($3) + ($1))|0;
 $5 = (_memcmp($tag,457960,4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = (_memcmp($tag,457968,4)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $20 = (_memcmp($tag,457976,4)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = HEAP32[864>>2]|0;
    $23 = (_ftell(($22|0))|0);
    $24 = (($23) + 7)|0;
    $25 = ($24>>>0)<($4>>>0);
    if (!($25)) {
     STACKTOP = sp;return;
    }
    while(1) {
     $26 = (_get2()|0);
     $27 = $26&65535;
     $28 = (_get2()|0);
     $29 = (($27) + 1)|0;
     $$mask = $29 & 131070;
     $30 = ($$mask|0)==(20);
     $31 = ($28<<16>>16)==(20);
     $or$cond = $31 & $30;
     if ($or$cond) {
      _get_timestamp(0);
     } else {
      $32 = $28&65535;
      $33 = HEAP32[864>>2]|0;
      (_fseek(($33|0),($32|0),1)|0);
     }
     $34 = HEAP32[864>>2]|0;
     $35 = (_ftell(($34|0))|0);
     $36 = (($35) + 7)|0;
     $37 = ($36>>>0)<($4>>>0);
     if (!($37)) {
      break;
     }
    }
    STACKTOP = sp;return;
   }
   $38 = (_memcmp($tag,457984,4)|0);
   $39 = ($38|0)==(0);
   $40 = ($1>>>0)<(64);
   $or$cond3 = $40 & $39;
   $41 = HEAP32[864>>2]|0;
   if (!($or$cond3)) {
    (_fseek(($41|0),($1|0),1)|0);
    STACKTOP = sp;return;
   }
   (_fread(($date|0),64,1,($41|0))|0);
   $42 = (($date) + ($1)|0);
   HEAP8[$42>>0] = 0;
   dest=$t+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $43 = (($t) + 12|0);
   $44 = (($t) + 8|0);
   $45 = (($t) + 4|0);
   $46 = (($t) + 20|0);
   HEAP32[$vararg_buffer>>2] = $month;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $43;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $44;
   $vararg_ptr3 = (($vararg_buffer) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $45;
   $vararg_ptr4 = (($vararg_buffer) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $t;
   $vararg_ptr5 = (($vararg_buffer) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $46;
   $47 = (_sscanf($date,457992,$vararg_buffer)|0);
   $48 = ($47|0)==(6);
   if (!($48)) {
    STACKTOP = sp;return;
   }
   $49 = (_strcasecmp(457912,$month)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $i$0$lcssa = 0;
   } else {
    $51 = (_strcasecmp(((457912 + 4|0)),$month)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $i$0$lcssa = 1;
    } else {
     $59 = (_strcasecmp(((457912 + 8|0)),$month)|0);
     $60 = ($59|0)==(0);
     if ($60) {
      $i$0$lcssa = 2;
     } else {
      $61 = (_strcasecmp(((457912 + 12|0)),$month)|0);
      $62 = ($61|0)==(0);
      if ($62) {
       $i$0$lcssa = 3;
      } else {
       $63 = (_strcasecmp(((457912 + 16|0)),$month)|0);
       $64 = ($63|0)==(0);
       if ($64) {
        $i$0$lcssa = 4;
       } else {
        $65 = (_strcasecmp(((457912 + 20|0)),$month)|0);
        $66 = ($65|0)==(0);
        if ($66) {
         $i$0$lcssa = 5;
        } else {
         $67 = (_strcasecmp(((457912 + 24|0)),$month)|0);
         $68 = ($67|0)==(0);
         if ($68) {
          $i$0$lcssa = 6;
         } else {
          $69 = (_strcasecmp(((457912 + 28|0)),$month)|0);
          $70 = ($69|0)==(0);
          if ($70) {
           $i$0$lcssa = 7;
          } else {
           $71 = (_strcasecmp(((457912 + 32|0)),$month)|0);
           $72 = ($71|0)==(0);
           if ($72) {
            $i$0$lcssa = 8;
           } else {
            $73 = (_strcasecmp(((457912 + 36|0)),$month)|0);
            $74 = ($73|0)==(0);
            if ($74) {
             $i$0$lcssa = 9;
            } else {
             $75 = (_strcasecmp(((457912 + 40|0)),$month)|0);
             $76 = ($75|0)==(0);
             if ($76) {
              $i$0$lcssa = 10;
             } else {
              $77 = (_strcasecmp(((457912 + 44|0)),$month)|0);
              $78 = ($77|0)==(0);
              $$ = $78 ? 11 : 12;
              $i$0$lcssa = $$;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $53 = (($t) + 16|0);
   HEAP32[$53>>2] = $i$0$lcssa;
   $54 = HEAP32[$46>>2]|0;
   $55 = (($54) + -1900)|0;
   HEAP32[$46>>2] = $55;
   $56 = (_mktime(($t|0))|0);
   $57 = ($56|0)>(0);
   if (!($57)) {
    STACKTOP = sp;return;
   }
   $58 = (_mktime(($t|0))|0);
   HEAP32[190152>>2] = $58;
   STACKTOP = sp;return;
  }
 }
 (_get4()|0);
 $9 = HEAP32[864>>2]|0;
 $10 = (_ftell(($9|0))|0);
 $11 = (($10) + 7)|0;
 $12 = ($11>>>0)<($4>>>0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $13 = HEAP32[864>>2]|0;
  $14 = (_feof(($13|0))|0);
  $15 = ($14|0)==(0);
  if (!($15)) {
   label = 19;
   break;
  }
  _parse_riff();
  $16 = HEAP32[864>>2]|0;
  $17 = (_ftell(($16|0))|0);
  $18 = (($17) + 7)|0;
  $19 = ($18>>>0)<($4>>>0);
  if (!($19)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
}
function _parse_qt($end) {
 $end = $end|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tag = sp;
 HEAP16[928>>1] = 19789;
 $0 = HEAP32[864>>2]|0;
 $1 = (_ftell(($0|0))|0);
 $2 = (($1) + 7)|0;
 $3 = ($2|0)<($end|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $4 = HEAP32[864>>2]|0;
  $5 = (_ftell(($4|0))|0);
  $6 = (_get4()|0);
  $7 = ($6>>>0)<(8);
  if ($7) {
   label = 11;
   break;
  }
  $8 = HEAP32[864>>2]|0;
  (_fread(($tag|0),4,1,($8|0))|0);
  $9 = (_memcmp($tag,458016,4)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   label = 7;
  } else {
   $11 = (_memcmp($tag,458024,4)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    label = 7;
   } else {
    $13 = (_memcmp($tag,458032,4)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     label = 7;
    }
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $15 = (($6) + ($5))|0;
   _parse_qt($15);
  }
  $16 = (_memcmp($tag,458040,4)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = HEAP32[864>>2]|0;
   $19 = (_ftell(($18|0))|0);
   (_parse_jpeg($19)|0);
  }
  $20 = HEAP32[864>>2]|0;
  $21 = (($6) + ($5))|0;
  (_fseek(($20|0),($21|0),0)|0);
  $22 = HEAP32[864>>2]|0;
  $23 = (_ftell(($22|0))|0);
  $24 = (($23) + 7)|0;
  $25 = ($24|0)<($end|0);
  if (!($25)) {
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _parse_smal($offset,$fsize) {
 $offset = $offset|0;
 $fsize = $fsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[864>>2]|0;
 $1 = (($offset) + 2)|0;
 (_fseek(($0|0),($1|0),0)|0);
 HEAP16[928>>1] = 18761;
 $2 = HEAP32[864>>2]|0;
 $3 = (_getc_unlocked(($2|0))|0);
 $4 = ($3|0)==(6);
 if ($4) {
  $5 = HEAP32[864>>2]|0;
  (_fseek(($5|0),5,1)|0);
 }
 $6 = (_get4()|0);
 $7 = ($6|0)==($fsize|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ($3|0)>(6);
 if ($8) {
  $9 = (_get4()|0);
  HEAP32[133280>>2] = $9;
 }
 $10 = (_get2()|0);
 HEAP16[132080>>1] = $10;
 HEAP16[133064>>1] = $10;
 $11 = (_get2()|0);
 HEAP16[132088>>1] = $11;
 HEAP16[132336>>1] = $11;
 ;HEAP8[133624+0>>0]=HEAP8[458048+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[458048+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[458048+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[458048+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[458048+4>>0]|0;
 $12 = HEAP16[132088>>1]|0;
 $13 = $12&65535;
 $14 = HEAP16[132080>>1]|0;
 $15 = $14&65535;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $15;
 (_sprintf(133688,458056,$vararg_buffer)|0);
 if ($4) {
  HEAP32[189952>>2] = 32;
  STACKTOP = sp;return;
 }
 $16 = ($3|0)==(9);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 HEAP32[189952>>2] = 33;
 STACKTOP = sp;return;
}
function _parse_cine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP16[928>>1] = 18761;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),4,0)|0);
 $1 = (_get2()|0);
 $2 = ($1<<16>>16)==(2);
 $3 = $2&1;
 HEAP32[133208>>2] = $3;
 $4 = HEAP32[864>>2]|0;
 (_fseek(($4|0),14,1)|0);
 $5 = (_get4()|0);
 $6 = HEAP32[133208>>2]|0;
 $7 = Math_imul($6, $5)|0;
 HEAP32[133208>>2] = $7;
 $8 = (_get4()|0);
 $9 = (_get4()|0);
 $10 = (_get4()|0);
 $11 = (_get4()|0);
 HEAP32[190152>>2] = $11;
 $12 = (_get4()|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  HEAP32[190152>>2] = $12;
 }
 $14 = HEAP32[864>>2]|0;
 $15 = (($8) + 4)|0;
 (_fseek(($14|0),($15|0),0)|0);
 $16 = (_get4()|0);
 $17 = $16&65535;
 HEAP16[132336>>1] = $17;
 $18 = (_get4()|0);
 $19 = $18&65535;
 HEAP16[133064>>1] = $19;
 (_get2()|0);
 $20 = (_get2()|0);
 $21 = $20&65535;
 if ((($21|0) == 8)) {
  HEAP32[189952>>2] = 7;
 } else if ((($21|0) == 16)) {
  HEAP32[189952>>2] = 18;
 }
 $22 = HEAP32[864>>2]|0;
 $23 = (($9) + 792)|0;
 (_fseek(($22|0),($23|0),0)|0);
 ;HEAP8[133624+0>>0]=HEAP8[458072+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[458072+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[458072+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[458072+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[458072+4>>0]|0;
 $24 = (_get4()|0);
 HEAP32[$vararg_buffer>>2] = $24;
 (_sprintf(133688,456296,$vararg_buffer)|0);
 $25 = HEAP32[864>>2]|0;
 (_fseek(($25|0),12,1)|0);
 $26 = (_get4()|0);
 $27 = $26 & 16777215;
 if ((($27|0) == 3)) {
  HEAP32[584>>2] = -1802201964;
 } else if ((($27|0) == 4)) {
  HEAP32[584>>2] = 1229539657;
 } else {
  HEAP32[133208>>2] = 0;
 }
 $28 = HEAP32[864>>2]|0;
 (_fseek(($28|0),72,1)|0);
 $29 = (_get4()|0);
 $30 = (($29) + 3600)|0;
 $31 = (($30>>>0) % 360)&-1;
 if ((($31|0) == 180)) {
  HEAP32[454784>>2] = 1;
 } else if ((($31|0) == 90)) {
  HEAP32[454784>>2] = 7;
 } else if ((($31|0) == 270)) {
  HEAP32[454784>>2] = 4;
 } else if ((($31|0) == 0)) {
  HEAP32[454784>>2] = 2;
 }
 $32 = (+_getreal(11));
 $33 = $32;
 HEAPF32[133480>>2] = $33;
 $34 = (+_getreal(11));
 $35 = $34;
 HEAPF32[((133480 + 8|0))>>2] = $35;
 $36 = (_get4()|0);
 $37 = -1 << $36;
 $38 = $37 ^ -1;
 HEAP32[132368>>2] = $38;
 $39 = HEAP32[864>>2]|0;
 (_fseek(($39|0),668,1)|0);
 $40 = (_get4()|0);
 $41 = (+($40>>>0));
 $42 = $41 / 1.0E+9;
 $43 = $42;
 HEAPF32[454760>>2] = $43;
 $44 = HEAP32[864>>2]|0;
 (_fseek(($44|0),($10|0),0)|0);
 $45 = HEAP32[8>>2]|0;
 $46 = HEAP32[133208>>2]|0;
 $47 = ($45>>>0)<($46>>>0);
 if (!($47)) {
  $50 = (_get4()|0);
  $51 = (($50) + 8)|0;
  HEAP32[133280>>2] = $51;
  (_get4()|0);
  STACKTOP = sp;return;
 }
 $48 = HEAP32[864>>2]|0;
 $49 = $45 << 3;
 (_fseek(($48|0),($49|0),1)|0);
 $50 = (_get4()|0);
 $51 = (($50) + 8)|0;
 HEAP32[133280>>2] = $51;
 (_get4()|0);
 STACKTOP = sp;return;
}
function _parse_redcine() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP16[928>>1] = 19789;
 HEAP32[133208>>2] = 0;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),52,0)|0);
 $1 = (_get4()|0);
 $2 = $1&65535;
 HEAP16[132088>>1] = $2;
 $3 = (_get4()|0);
 $4 = $3&65535;
 HEAP16[132080>>1] = $4;
 $5 = HEAP32[864>>2]|0;
 (_fseek(($5|0),0,2)|0);
 $6 = HEAP32[864>>2]|0;
 $7 = (_ftello(($6|0))|0);
 $8 = $7 & 511;
 $9 = (0 - ($8))|0;
 (_fseek(($6|0),($9|0),1)|0);
 $10 = (_get4()|0);
 $11 = ($10|0)==($8|0);
 if ($11) {
  $12 = (_get4()|0);
  $13 = ($12|0)==(1380273986);
  if ($13) {
   $33 = (_get4()|0);
   $34 = HEAP32[864>>2]|0;
   (_fseek(($34|0),12,1)|0);
   $35 = (_get4()|0);
   HEAP32[133208>>2] = $35;
   $36 = HEAP32[864>>2]|0;
   $37 = (($33) + 8)|0;
   $38 = HEAP32[8>>2]|0;
   $39 = $38 << 2;
   $40 = (($37) + ($39))|0;
   (_fseeko(($36|0),($40|0),0)|0);
   $41 = (_get4()|0);
   HEAP32[133280>>2] = $41;
   STACKTOP = sp;return;
  }
 }
 $14 = HEAP32[_stderr>>2]|0;
 $15 = HEAP32[680>>2]|0;
 HEAP32[$vararg_buffer>>2] = $15;
 (_fprintf(($14|0),(458080|0),($vararg_buffer|0))|0);
 $16 = HEAP32[864>>2]|0;
 (_fseek(($16|0),0,0)|0);
 $17 = (_get4()|0);
 $18 = ($17|0)==(-1);
 if ($18) {
  STACKTOP = sp;return;
 } else {
  $30 = $17;
 }
 while(1) {
  $19 = (_get4()|0);
  $20 = ($19|0)==(1380271190);
  if ($20) {
   $21 = HEAP32[133208>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[133208>>2] = $22;
   $23 = HEAP32[8>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = HEAP32[864>>2]|0;
    $26 = (_ftello(($25|0))|0);
    $27 = (($26) + -8)|0;
    HEAP32[133280>>2] = $27;
   }
  }
  $28 = HEAP32[864>>2]|0;
  $29 = (($30) + -8)|0;
  (_fseek(($28|0),($29|0),1)|0);
  $31 = (_get4()|0);
  $32 = ($31|0)==(-1);
  if ($32) {
   break;
  } else {
   $30 = $31;
  }
 }
 STACKTOP = sp;return;
}
function _foveon_gets($offset,$str,$len) {
 $offset = $offset|0;
 $str = $str|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),($offset|0),0)|0);
 $1 = (($len) + -1)|0;
 $2 = ($len|0)>(1);
 L1: do {
  if ($2) {
   $i$01 = 0;
   while(1) {
    $3 = (_get2()|0);
    $4 = $3&255;
    $5 = (($str) + ($i$01)|0);
    HEAP8[$5>>0] = $4;
    $6 = ($4<<24>>24)==(0);
    if ($6) {
     $i$0$lcssa = $i$01;
     break L1;
    }
    $7 = (($i$01) + 1)|0;
    $8 = ($7|0)<($1|0);
    if ($8) {
     $i$01 = $7;
    } else {
     $i$0$lcssa = $7;
     break;
    }
   }
  } else {
   $i$0$lcssa = 0;
  }
 } while(0);
 $9 = (($str) + ($i$0$lcssa)|0);
 HEAP8[$9>>0] = 0;
 return ($str|0);
}
function _parse_foveon() {
 var $$ = 0, $$in = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $exitcond = 0, $i$03 = 0, $i$14 = 0, $img$06 = 0, $img$1 = 0, $name = 0, $or$cond = 0, $poff = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2176|0;
 $poff = sp;
 $name = sp + 2112|0;
 $value = sp + 2048|0;
 HEAP16[928>>1] = 18761;
 $0 = HEAP32[864>>2]|0;
 (_fseek(($0|0),36,0)|0);
 $1 = (_get4()|0);
 HEAP32[454784>>2] = $1;
 $2 = HEAP32[864>>2]|0;
 (_fseek(($2|0),-4,2)|0);
 $3 = HEAP32[864>>2]|0;
 $4 = (_get4()|0);
 (_fseek(($3|0),($4|0),0)|0);
 $5 = (_get4()|0);
 $6 = ($5|0)==(1682130259);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 (_get4()|0);
 $7 = (_get4()|0);
 $8 = ($7|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 } else {
  $$in = $7;$img$06 = 0;
 }
 while(1) {
  $9 = (($$in) + -1)|0;
  $10 = (_get4()|0);
  $11 = (_get4()|0);
  $12 = (_get4()|0);
  $13 = HEAP32[864>>2]|0;
  $14 = (_ftell(($13|0))|0);
  $15 = HEAP32[864>>2]|0;
  (_fseek(($15|0),($10|0),0)|0);
  $16 = (_get4()|0);
  $17 = $12 << 24;
  $18 = $17 | 541279571;
  $19 = ($16|0)==($18|0);
  if (!($19)) {
   label = 43;
   break;
  }
  if ((($12|0) == 843140425) | (($12|0) == 1195461961)) {
   $20 = HEAP32[864>>2]|0;
   (_fseek(($20|0),8,1)|0);
   $21 = (_get4()|0);
   $22 = (_get4()|0);
   $23 = (_get4()|0);
   $24 = HEAP16[132336>>1]|0;
   $25 = $24&65535;
   $26 = ($22|0)>($25|0);
   if ($26) {
    $27 = HEAP16[133064>>1]|0;
    $28 = $27&65535;
    $29 = ($23|0)>($28|0);
    if ($29) {
     if ((($21|0) == 5)) {
      HEAP32[133096>>2] = 1;
      label = 9;
     } else if ((($21|0) == 6)) {
      label = 9;
     } else if ((($21|0) == 30)) {
      HEAP32[189952>>2] = 35;
     } else {
      HEAP32[189952>>2] = 0;
     }
     if ((label|0) == 9) {
      label = 0;
      HEAP32[189952>>2] = 34;
     }
     $30 = $22&65535;
     HEAP16[132336>>1] = $30;
     $31 = $23&65535;
     HEAP16[133064>>1] = $31;
     $32 = (($10) + 28)|0;
     HEAP32[133280>>2] = $32;
     HEAP32[458128>>2] = 1;
    }
   }
   $33 = HEAP32[864>>2]|0;
   $34 = (($10) + 28)|0;
   (_fseek(($33|0),($34|0),0)|0);
   $35 = HEAP32[864>>2]|0;
   $36 = (_getc_unlocked(($35|0))|0);
   $37 = ($36|0)==(255);
   if ($37) {
    $38 = HEAP32[864>>2]|0;
    $39 = (_getc_unlocked(($38|0))|0);
    $40 = ($39|0)==(216);
    if ($40) {
     $41 = HEAP32[133768>>2]|0;
     $42 = (($11) + -28)|0;
     $43 = ($41>>>0)<($42>>>0);
     if ($43) {
      HEAP32[454040>>2] = $34;
      HEAP32[133768>>2] = $42;
      HEAP32[457424>>2] = 36;
     }
    }
   }
   $44 = (($img$06) + 1)|0;
   $45 = ($44|0)!=(2);
   $46 = HEAP32[133768>>2]|0;
   $47 = ($46|0)!=(0);
   $or$cond = $45 | $47;
   if ($or$cond) {
    $img$1 = $44;
   } else {
    $48 = (($10) + 24)|0;
    HEAP32[454040>>2] = $48;
    $49 = $22&65535;
    HEAP16[133752>>1] = $49;
    $50 = $23&65535;
    HEAP16[133760>>1] = $50;
    HEAP32[457424>>2] = 37;
    $img$1 = $44;
   }
  } else if ((($12|0) == 1179468099)) {
   $51 = (($10) + 8)|0;
   HEAP32[133272>>2] = $51;
   $52 = (($11) + -28)|0;
   HEAP32[133944>>2] = $52;
   $img$1 = $img$06;
  } else if ((($12|0) == 1347375696)) {
   (_get4()|0);
   $53 = (_get4()|0);
   $54 = HEAP32[864>>2]|0;
   (_fseek(($54|0),12,1)|0);
   $55 = ($53>>>0)>(256);
   $$ = $55 ? 256 : $53;
   $56 = $$ << 1;
   $57 = ($$|0)>(0);
   if ($57) {
    $58 = $53 << 3;
    $59 = (($10) + 24)|0;
    $60 = (($59) + ($58))|0;
    $i$03 = 0;
    while(1) {
     $64 = (_get4()|0);
     $65 = $64 << 1;
     $66 = (($60) + ($65))|0;
     $67 = (($poff) + ($i$03<<2)|0);
     HEAP32[$67>>2] = $66;
     $68 = (($i$03) + 1)|0;
     $69 = ($68|0)<($56|0);
     if ($69) {
      $i$03 = $68;
     } else {
      break;
     }
    }
    $61 = ($$|0)>(0);
    if ($61) {
     $62 = ($53>>>0)<(256);
     $$op = (($53) + -1)|0;
     $63 = $62 ? $$op : 255;
     $i$14 = 0;
     while(1) {
      $70 = (($poff) + ($i$14<<3)|0);
      $71 = HEAP32[$70>>2]|0;
      (_foveon_gets($71,$name,64)|0);
      $72 = ((($poff) + ($i$14<<3)|0) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      (_foveon_gets($73,$value,64)|0);
      $74 = (_strcmp($name,458136)|0);
      $75 = ($74|0)==(0);
      if ($75) {
       $76 = (_atoi($value)|0);
       $77 = (+($76|0));
       HEAPF32[454744>>2] = $77;
      }
      $78 = (_strcmp($name,458144)|0);
      $79 = ($78|0)==(0);
      if ($79) {
       (_strcpy((133624|0),($value|0))|0);
      }
      $80 = (_strcmp($name,458160)|0);
      $81 = ($80|0)==(0);
      if ($81) {
       (_strcpy((133688|0),($value|0))|0);
      }
      $82 = (_strcmp($name,458176)|0);
      $83 = ($82|0)==(0);
      if ($83) {
       (_strcpy((133112|0),($value|0))|0);
      }
      $84 = (_strcmp($name,458184)|0);
      $85 = ($84|0)==(0);
      if ($85) {
       $86 = (_atoi($value)|0);
       HEAP32[190152>>2] = $86;
      }
      $87 = (_strcmp($name,458192)|0);
      $88 = ($87|0)==(0);
      if ($88) {
       $89 = (_atoi($value)|0);
       $90 = (+($89|0));
       $91 = $90 / 1.0E+6;
       $92 = $91;
       HEAPF32[454760>>2] = $92;
      }
      $93 = (_strcmp($name,458200)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       $95 = (+_atof($value));
       $96 = $95;
       HEAPF32[454752>>2] = $96;
      }
      $97 = (_strcmp($name,458216)|0);
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = (+_atof($value));
       $100 = $99;
       HEAPF32[455472>>2] = $100;
      }
      $101 = (($i$14) + 1)|0;
      $exitcond = ($i$14|0)==($63|0);
      if ($exitcond) {
       $img$1 = $img$06;
       break;
      } else {
       $i$14 = $101;
      }
     }
    } else {
     $img$1 = $img$06;
    }
   } else {
    $img$1 = $img$06;
   }
  } else {
   $img$1 = $img$06;
  }
  $102 = HEAP32[864>>2]|0;
  (_fseek(($102|0),($14|0),0)|0);
  $103 = ($9|0)==(0);
  if ($103) {
   label = 43;
   break;
  } else {
   $$in = $9;$img$06 = $img$1;
  }
 }
 if ((label|0) == 43) {
  STACKTOP = sp;return;
 }
}
function _adobe_coeff($make,$model) {
 $make = $make|0;
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $cam_xyz = 0, $i$03 = 0, $i$03$lcssa = 0, $name = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer = sp + 96|0;
 $cam_xyz = sp;
 $name = sp + 104|0;
 HEAP32[$vararg_buffer>>2] = $make;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $model;
 (_sprintf($name,481760,$vararg_buffer)|0);
 $i$03 = 0;
 while(1) {
  $0 = (458224 + ($i$03<<5)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (_strlen(($1|0))|0);
  $3 = (_strncmp($name,$1,$2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $i$03$lcssa = $i$03;
   break;
  }
  $73 = (($i$03) + 1)|0;
  $74 = ($73>>>0)<(470);
  if ($74) {
   $i$03 = $73;
  } else {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $5 = ((458224 + ($i$03$lcssa<<5)|0) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ($6<<16>>16)==(0);
 if (!($7)) {
  $8 = $6&65535;
  HEAP32[132360>>2] = $8;
 }
 $9 = ((458224 + ($i$03$lcssa<<5)|0) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if (!($11)) {
  $12 = $10&65535;
  HEAP32[132368>>2] = $12;
 }
 $13 = ($i$03$lcssa|0)==(46);
 if ($13) {
  STACKTOP = sp;return;
 }
 HEAP32[132264>>2] = 0;
 $14 = ((458224 + ($i$03$lcssa<<5)|0) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = (+($15<<16>>16));
 $17 = $16 / 1.0E+4;
 HEAPF64[$cam_xyz>>3] = $17;
 $18 = ((458224 + ($i$03$lcssa<<5)|0) + 10|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (+($19<<16>>16));
 $21 = $20 / 1.0E+4;
 $22 = (($cam_xyz) + 8|0);
 HEAPF64[$22>>3] = $21;
 $23 = ((458224 + ($i$03$lcssa<<5)|0) + 12|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (+($24<<16>>16));
 $26 = $25 / 1.0E+4;
 $27 = (($cam_xyz) + 16|0);
 HEAPF64[$27>>3] = $26;
 $28 = ((458224 + ($i$03$lcssa<<5)|0) + 14|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = (+($29<<16>>16));
 $31 = $30 / 1.0E+4;
 $32 = (($cam_xyz) + 24|0);
 HEAPF64[$32>>3] = $31;
 $33 = ((458224 + ($i$03$lcssa<<5)|0) + 16|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = (+($34<<16>>16));
 $36 = $35 / 1.0E+4;
 $37 = (($cam_xyz) + 32|0);
 HEAPF64[$37>>3] = $36;
 $38 = ((458224 + ($i$03$lcssa<<5)|0) + 18|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = (+($39<<16>>16));
 $41 = $40 / 1.0E+4;
 $42 = (($cam_xyz) + 40|0);
 HEAPF64[$42>>3] = $41;
 $43 = ((458224 + ($i$03$lcssa<<5)|0) + 20|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = (+($44<<16>>16));
 $46 = $45 / 1.0E+4;
 $47 = (($cam_xyz) + 48|0);
 HEAPF64[$47>>3] = $46;
 $48 = ((458224 + ($i$03$lcssa<<5)|0) + 22|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = (+($49<<16>>16));
 $51 = $50 / 1.0E+4;
 $52 = (($cam_xyz) + 56|0);
 HEAPF64[$52>>3] = $51;
 $53 = ((458224 + ($i$03$lcssa<<5)|0) + 24|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = (+($54<<16>>16));
 $56 = $55 / 1.0E+4;
 $57 = (($cam_xyz) + 64|0);
 HEAPF64[$57>>3] = $56;
 $58 = ((458224 + ($i$03$lcssa<<5)|0) + 26|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = (+($59<<16>>16));
 $61 = $60 / 1.0E+4;
 $62 = (($cam_xyz) + 72|0);
 HEAPF64[$62>>3] = $61;
 $63 = ((458224 + ($i$03$lcssa<<5)|0) + 28|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = (+($64<<16>>16));
 $66 = $65 / 1.0E+4;
 $67 = (($cam_xyz) + 80|0);
 HEAPF64[$67>>3] = $66;
 $68 = ((458224 + ($i$03$lcssa<<5)|0) + 30|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = (+($69<<16>>16));
 $71 = $70 / 1.0E+4;
 $72 = (($cam_xyz) + 88|0);
 HEAPF64[$72>>3] = $71;
 _cam_xyz_coeff(132280,$cam_xyz);
 STACKTOP = sp;return;
}
function _simple_coeff($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $scevgep5 = 0, $scevgep5$1 = 0, $scevgep5$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[132264>>2] = 0;
 $0 = HEAP32[132272>>2]|0;
 $1 = ($0|0)==(0);
 $2 = $0 << 2;
 if ($1) {
  return;
 }
 $scevgep5 = (481768 + (($index*48)|0)|0);
 _memcpy((132280|0),($scevgep5|0),($2|0))|0;
 $scevgep5$1 = ((481768 + (($index*48)|0)|0) + ($0<<2)|0);
 _memcpy((((132280 + 16|0))|0),($scevgep5$1|0),($2|0))|0;
 $3 = $0 << 1;
 $scevgep5$2 = ((481768 + (($index*48)|0)|0) + ($3<<2)|0);
 _memcpy((((132280 + 32|0))|0),($scevgep5$2|0),($2|0))|0;
 return;
}
function _guess_byte_order($words) {
 $words = $words|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sum = 0;
 var $t$02 = 0, $test = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $test = sp + 16|0;
 $sum = sp;
 ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $0 = HEAP32[864>>2]|0;
 (_fread(($test|0),2,2,($0|0))|0);
 $1 = ($words|0)==(2);
 if ($1) {
  $54 = +HEAPF64[$sum>>3];
  $55 = (($sum) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $54 < $56;
  $58 = $57 ? 19789 : 18761;
  STACKTOP = sp;return ($58|0);
 }
 $2 = (($words) + -3)|0;
 $52 = $2;$t$02 = 2;
 while(1) {
  $3 = (($test) + ($t$02<<1)|0);
  $4 = HEAP32[864>>2]|0;
  (_fread(($3|0),2,1,($4|0))|0);
  $5 = $t$02 ^ 2;
  $6 = (($test) + ($5<<1)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 << 8;
  $10 = ((($test) + ($5<<1)|0) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $9 | $12;
  $14 = (($test) + ($t$02<<1)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 << 8;
  $18 = ((($test) + ($t$02<<1)|0) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $17 | $20;
  $22 = (($13) - ($21))|0;
  $23 = (+($22|0));
  $24 = $23 * $23;
  $25 = +HEAPF64[$sum>>3];
  $26 = $25 + $24;
  HEAPF64[$sum>>3] = $26;
  $27 = ((($test) + ($5<<1)|0) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 8;
  $31 = (($test) + ($5<<1)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $30 | $33;
  $35 = ((($test) + ($t$02<<1)|0) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $37 << 8;
  $39 = (($test) + ($t$02<<1)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $38 | $41;
  $43 = (($34) - ($42))|0;
  $44 = (+($43|0));
  $45 = $44 * $44;
  $46 = (($sum) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $47 + $45;
  HEAPF64[$46>>3] = $48;
  $49 = (($t$02) + 1)|0;
  $50 = $49 & 3;
  $51 = (($52) + -1)|0;
  $53 = ($52|0)==(0);
  if ($53) {
   break;
  } else {
   $52 = $51;$t$02 = $50;
  }
 }
 $54 = +HEAPF64[$sum>>3];
 $55 = (($sum) + 8|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $54 < $56;
 $58 = $57 ? 19789 : 18761;
 STACKTOP = sp;return ($58|0);
}
function _find_green($bps,$bite,$off0,$off1) {
 $bps = $bps|0;
 $bite = $bite|0;
 $off0 = $off0|0;
 $off1 = $off1|0;
 var $$lcssa31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $111$phi = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $116$phi = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$11 = 0, $col$015 = 0, $col$015$1 = 0, $i$02 = 0, $i$02$1 = 0, $img = 0, $sum = 0, $vbits$014 = 0, $vbits$014$1 = 0, $vbits$1$lcssa = 0, $vbits$1$lcssa$1 = 0, $vbits$17 = 0, $vbits$17$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8272|0;
 $img = sp + 16|0;
 $sum = sp;
 ;HEAP32[$sum+0>>2]=0|0;HEAP32[$sum+4>>2]=0|0;HEAP32[$sum+8>>2]=0|0;HEAP32[$sum+12>>2]=0|0;
 $0 = (64 - ($bps))|0;
 $1 = ($bite|0)>(0);
 $2 = HEAP32[864>>2]|0;
 (_fseek(($2|0),($off0|0),0)|0);
 $3 = HEAP16[132088>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $107 = 0;$108 = 0;
 } else {
  $109 = 0;$110 = 0;$col$015 = 0;$vbits$014 = 0;
  while(1) {
   $8 = (($vbits$014) - ($bps))|0;
   $9 = ($8|0)<(0);
   if ($9) {
    $10 = $109;$11 = $110;$vbits$17 = $8;
    while(1) {
     $12 = (_bitshift64Shl(($10|0),($11|0),($bite|0))|0);
     $13 = tempRet0;
     if ($1) {
      $111 = $13;$18 = $12;$i$02 = 0;
      while(1) {
       $14 = HEAP32[864>>2]|0;
       $15 = (_getc_unlocked(($14|0))|0);
       $16 = $15 << $i$02;
       $17 = $16 | $18;
       $19 = (($i$02) + 8)|0;
       $20 = ($19|0)<($bite|0);
       if ($20) {
        $111$phi = $111;$18 = $17;$i$02 = $19;$111 = $111$phi;
       } else {
        $112 = $17;$113 = $111;
        break;
       }
      }
     } else {
      $112 = $12;$113 = $13;
     }
     $21 = (($vbits$17) + ($bite))|0;
     $22 = ($21|0)<(0);
     if ($22) {
      $10 = $112;$11 = $113;$vbits$17 = $21;
     } else {
      $24 = $112;$25 = $113;$vbits$1$lcssa = $21;
      break;
     }
    }
   } else {
    $24 = $109;$25 = $110;$vbits$1$lcssa = $8;
   }
   $23 = (($0) - ($vbits$1$lcssa))|0;
   $26 = (_bitshift64Shl(($24|0),($25|0),($23|0))|0);
   $27 = tempRet0;
   $28 = (_bitshift64Lshr(($26|0),($27|0),($0|0))|0);
   $29 = tempRet0;
   $30 = $28&65535;
   $31 = (($img) + ($col$015<<1)|0);
   HEAP16[$31>>1] = $30;
   $32 = (($col$015) + 1)|0;
   $33 = HEAP16[132088>>1]|0;
   $34 = $33&65535;
   $35 = ($32|0)<($34|0);
   if ($35) {
    $109 = $24;$110 = $25;$col$015 = $32;$vbits$014 = $vbits$1$lcssa;
   } else {
    $107 = $24;$108 = $25;
    break;
   }
  }
 }
 $36 = HEAP32[864>>2]|0;
 (_fseek(($36|0),($off1|0),0)|0);
 $37 = HEAP16[132088>>1]|0;
 $38 = ($37<<16>>16)==(0);
 if ($38) {
  $71 = +HEAPF64[$sum>>3];
  $72 = (($sum) + 8|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $71 / $73;
  $75 = (+Math_log((+$74)));
  $76 = $75 * 100.0;
  $77 = $76;
  STACKTOP = sp;return (+$77);
 } else {
  $114 = $107;$115 = $108;$col$015$1 = 0;$vbits$014$1 = 0;
 }
 while(1) {
  $78 = (($vbits$014$1) - ($bps))|0;
  $79 = ($78|0)<(0);
  if ($79) {
   $80 = $114;$81 = $115;$vbits$17$1 = $78;
   while(1) {
    $82 = (_bitshift64Shl(($80|0),($81|0),($bite|0))|0);
    $83 = tempRet0;
    if ($1) {
     $116 = $83;$88 = $82;$i$02$1 = 0;
     while(1) {
      $84 = HEAP32[864>>2]|0;
      $85 = (_getc_unlocked(($84|0))|0);
      $86 = $85 << $i$02$1;
      $87 = $86 | $88;
      $89 = (($i$02$1) + 8)|0;
      $90 = ($89|0)<($bite|0);
      if ($90) {
       $116$phi = $116;$88 = $87;$i$02$1 = $89;$116 = $116$phi;
      } else {
       $117 = $87;$118 = $116;
       break;
      }
     }
    } else {
     $117 = $82;$118 = $83;
    }
    $91 = (($vbits$17$1) + ($bite))|0;
    $92 = ($91|0)<(0);
    if ($92) {
     $80 = $117;$81 = $118;$vbits$17$1 = $91;
    } else {
     $94 = $117;$95 = $118;$vbits$1$lcssa$1 = $91;
     break;
    }
   }
  } else {
   $94 = $114;$95 = $115;$vbits$1$lcssa$1 = $78;
  }
  $93 = (($0) - ($vbits$1$lcssa$1))|0;
  $96 = (_bitshift64Shl(($94|0),($95|0),($93|0))|0);
  $97 = tempRet0;
  $98 = (_bitshift64Lshr(($96|0),($97|0),($0|0))|0);
  $99 = tempRet0;
  $100 = $98&65535;
  $101 = ((($img) + ($col$015$1<<1)|0) + 4128|0);
  HEAP16[$101>>1] = $100;
  $102 = (($col$015$1) + 1)|0;
  $103 = HEAP16[132088>>1]|0;
  $104 = $103&65535;
  $105 = ($102|0)<($104|0);
  if ($105) {
   $114 = $94;$115 = $95;$col$015$1 = $102;$vbits$014$1 = $vbits$1$lcssa$1;
  } else {
   $$lcssa31 = $103;
   break;
  }
 }
 $106 = ($$lcssa31&65535)>(1);
 if (!($106)) {
  $71 = +HEAPF64[$sum>>3];
  $72 = (($sum) + 8|0);
  $73 = +HEAPF64[$72>>3];
  $74 = $71 / $73;
  $75 = (+Math_log((+$74)));
  $76 = $75 * 100.0;
  $77 = $76;
  STACKTOP = sp;return (+$77);
 }
 $5 = HEAP16[132088>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + -1)|0;
 $c$11 = 0;
 while(1) {
  $39 = (($img) + ($c$11<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40&65535;
  $42 = (($c$11) + 1)|0;
  $43 = ((($img) + ($42<<1)|0) + 4128|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44&65535;
  $46 = (($41) - ($45))|0;
  $47 = $46 >> 31;
  $48 = $47 ^ $46;
  $49 = (($48) - ($47))|0;
  $50 = (+($49|0));
  $51 = $c$11 & 1;
  $52 = (($sum) + ($51<<3)|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $53 + $50;
  HEAPF64[$52>>3] = $54;
  $55 = ((($img) + ($c$11<<1)|0) + 4128|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56&65535;
  $58 = (($img) + ($42<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59&65535;
  $61 = (($57) - ($60))|0;
  $62 = $61 >> 31;
  $63 = $62 ^ $61;
  $64 = (($63) - ($62))|0;
  $65 = (+($64|0));
  $66 = $51 ^ 1;
  $67 = (($sum) + ($66<<3)|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $68 + $65;
  HEAPF64[$67>>3] = $69;
  $70 = ($42|0)<($7|0);
  if ($70) {
   $c$11 = $42;
  } else {
   break;
  }
 }
 $71 = +HEAPF64[$sum>>3];
 $72 = (($sum) + 8|0);
 $73 = +HEAPF64[$72>>3];
 $74 = $71 / $73;
 $75 = (+Math_log((+$74)));
 $76 = $75 * 100.0;
 $77 = $76;
 STACKTOP = sp;return (+$77);
}
function _identify() {
 var $$117 = 0, $$58 = 0, $$pr = 0, $$pr100 = 0, $$pr103 = 0, $$pr76$pr$pr = 0, $$pr78 = 0, $$pr81$pr$pr$pr = 0, $$pr84 = 0, $$pr87 = 0, $$pr90 = 0, $$pr93 = 0, $$pr97$pr = 0, $$sum = 0, $$sum144 = 0, $$sum34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0;
 var $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0;
 var $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0;
 var $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0;
 var $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0;
 var $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0;
 var $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0;
 var $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0;
 var $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0.0, $1269 = 0.0, $127 = 0, $1270 = 0.0;
 var $1271 = 0, $1272 = 0, $1273 = 0.0, $1274 = 0.0, $1275 = 0.0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0;
 var $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0;
 var $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0;
 var $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0;
 var $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0.0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0;
 var $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0;
 var $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0;
 var $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0;
 var $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0;
 var $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0.0, $659 = 0.0;
 var $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0.0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $c$3128 = 0, $cp$0 = 0, $cp$1 = 0;
 var $exitcond = 0, $exitcond145 = 0, $exitcond146 = 0, $exitcond147 = 0, $exitcond148 = 0, $exitcond149 = 0, $exitcond151 = 0, $exitcond152 = 0, $head = 0, $i$1140 = 0, $i$2138 = 0, $i$3136 = 0, $i$4132 = 0, $i$5131 = 0, $i$6130 = 0, $i$7 = 0, $i$8129 = 0, $ispos = 0, $ispos36 = 0, $jh = 0;
 var $neg = 0, $neg37 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3$not = 0, $or$cond31 = 0, $or$cond33 = 0, $or$cond39 = 0, $or$cond41 = 0, $or$cond43 = 0, $or$cond45 = 0, $or$cond47 = 0, $or$cond49 = 0, $or$cond5 = 0;
 var $or$cond51 = 0, $or$cond53 = 0, $or$cond55 = 0, $or$cond57 = 0, $or$cond60 = 0, $or$cond62 = 0, $or$cond64 = 0, $or$cond66 = 0, $or$cond68 = 0, $or$cond7 = 0, $or$cond70 = 0, $or$cond72 = 0, $or$cond74 = 0, $or$cond9 = 0, $storemerge = 0, $storemerge35 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $zero_fsize$0 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $head = sp + 128|0;
 $jh = sp + 32|0;
 HEAP32[584>>2] = -1;
 HEAP32[454784>>2] = -1;
 HEAP32[457392>>2] = -1;
 HEAP16[133104>>1] = 0;
 HEAP32[189968>>2] = 0;
 HEAP16[189960>>1] = 0;
 HEAP16[132336>>1] = 0;
 HEAP16[133064>>1] = 0;
 HEAP16[592>>1] = 0;
 HEAP16[600>>1] = 0;
 HEAP16[132088>>1] = 0;
 HEAP16[132080>>1] = 0;
 HEAP32[132368>>2] = 0;
 HEAP8[133112>>0] = 0;
 HEAP8[133688>>0] = 0;
 HEAP8[133624>>0] = 0;
 HEAP8[454800>>0] = 0;
 HEAP8[456656>>0] = 0;
 HEAP8[457376>>0] = 0;
 HEAP32[133192>>2] = 0;
 HEAPF32[455472>>2] = 0.0;
 HEAPF32[454752>>2] = 0.0;
 HEAPF32[454760>>2] = 0.0;
 HEAPF32[454744>>2] = 0.0;
 HEAP32[455464>>2] = 0;
 _memset((454920|0),0,440)|0;
 dest=455488+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _memset((134176|0),0,8204)|0;
 dest=190368+0|0; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=189976+0|0; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP16[133760>>1] = 0;
 HEAP16[133752>>1] = 0;
 HEAP32[133768>>2] = 0;
 HEAP32[454040>>2] = 0;
 HEAP32[457432>>2] = 0;
 HEAP32[189952>>2] = 0;
 HEAP32[457424>>2] = 36;
 HEAP32[133056>>2] = 0;
 HEAP32[133264>>2] = 0;
 HEAP32[133944>>2] = 0;
 HEAP32[133272>>2] = 0;
 HEAP32[133280>>2] = 0;
 HEAP32[133096>>2] = 0;
 HEAP32[133072>>2] = 0;
 HEAP32[132400>>2] = 0;
 HEAP32[159760>>2] = 0;
 HEAP32[458128>>2] = 0;
 HEAP32[132360>>2] = 0;
 HEAP32[133216>>2] = 0;
 HEAP32[454768>>2] = 0;
 HEAP32[190152>>2] = 0;
 HEAP32[489976>>2] = 0;
 HEAP32[848>>2] = 0;
 HEAP32[456264>>2] = 0;
 HEAP32[142384>>2] = 0;
 HEAP32[132264>>2] = 1;
 HEAP32[133208>>2] = 1;
 HEAPF64[457384>>3] = 1.0;
 HEAP32[133224>>2] = 0;
 HEAP32[133232>>2] = 0;
 HEAPF32[133480>>2] = 0.0;
 HEAPF32[132048>>2] = 1.0;
 HEAPF32[455384>>2] = 0.0;
 HEAPF32[((455384 + 16|0))>>2] = 0.0;
 HEAPF32[((455384 + 32|0))>>2] = 0.0;
 HEAPF32[132280>>2] = 1.0;
 HEAPF32[((132280 + 16|0))>>2] = 0.0;
 HEAPF32[((132280 + 32|0))>>2] = 0.0;
 HEAPF32[((133480 + 4|0))>>2] = 1.0;
 HEAPF32[((132048 + 4|0))>>2] = 1.0;
 HEAPF32[((455384 + 4|0))>>2] = 0.0;
 HEAPF32[((455384 + 20|0))>>2] = 0.0;
 HEAPF32[((455384 + 36|0))>>2] = 0.0;
 HEAPF32[((132280 + 4|0))>>2] = 0.0;
 HEAPF32[((132280 + 20|0))>>2] = 1.0;
 HEAPF32[((132280 + 36|0))>>2] = 0.0;
 HEAPF32[((133480 + 8|0))>>2] = 0.0;
 HEAPF32[((132048 + 8|0))>>2] = 1.0;
 HEAPF32[((455384 + 8|0))>>2] = 0.0;
 HEAPF32[((455384 + 24|0))>>2] = 0.0;
 HEAPF32[((455384 + 40|0))>>2] = 0.0;
 HEAPF32[((132280 + 8|0))>>2] = 0.0;
 HEAPF32[((132280 + 24|0))>>2] = 0.0;
 HEAPF32[((132280 + 40|0))>>2] = 1.0;
 HEAPF32[((133480 + 12|0))>>2] = 0.0;
 HEAPF32[((132048 + 12|0))>>2] = 0.0;
 HEAPF32[((455384 + 12|0))>>2] = 0.0;
 HEAPF32[((455384 + 28|0))>>2] = 0.0;
 HEAPF32[((455384 + 44|0))>>2] = 0.0;
 HEAPF32[((132280 + 12|0))>>2] = 0.0;
 HEAPF32[((132280 + 28|0))>>2] = 0.0;
 HEAPF32[((132280 + 44|0))>>2] = 0.0;
 HEAP32[132272>>2] = 3;
 $i$1140 = 0;
 while(1) {
  $0 = $i$1140&65535;
  $1 = (936 + ($i$1140<<1)|0);
  HEAP16[$1>>1] = $0;
  $2 = (($i$1140) + 1)|0;
  $exitcond152 = ($2|0)==(65536);
  if ($exitcond152) {
   break;
  } else {
   $i$1140 = $2;
  }
 }
 $3 = (_get2()|0);
 HEAP16[928>>1] = $3;
 $4 = (_get4()|0);
 $5 = HEAP32[864>>2]|0;
 (_fseek(($5|0),0,0)|0);
 $6 = HEAP32[864>>2]|0;
 (_fread(($head|0),1,32,($6|0))|0);
 $7 = HEAP32[864>>2]|0;
 (_fseek(($7|0),0,2)|0);
 $8 = HEAP32[864>>2]|0;
 $9 = (_ftell(($8|0))|0);
 $10 = (_my_memmem($head,32,454592,4)|0);
 $11 = ($10|0)==(0|0);
 do {
  if ($11) {
   $12 = (_my_memmem($head,32,454584,4)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $20 = HEAP16[928>>1]|0;
    if ((($20<<16>>16) == 19789) | (($20<<16>>16) == 18761)) {
     $21 = (($head) + 6|0);
     $22 = (_memcmp($21,489984,8)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      HEAP32[133280>>2] = $4;
      $24 = (($9) - ($4))|0;
      _parse_ciff($4,$24,0);
      HEAP32[189952>>2] = 3;
      $zero_fsize$0 = 0;
      break;
     }
     $25 = (_parse_tiff(0)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      $zero_fsize$0 = 0;
      break;
     }
     _apply_tiff();
     $zero_fsize$0 = 0;
     break;
    }
    $27 = (_memcmp($head,490000,4)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     $29 = (($head) + 6|0);
     $30 = (_memcmp($29,490008,4)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      $32 = HEAP32[864>>2]|0;
      (_fseek(($32|0),4,0)|0);
      $33 = (_get2()|0);
      $34 = $33&65535;
      $35 = (($34) + 4)|0;
      HEAP32[133280>>2] = $35;
      $36 = HEAP32[864>>2]|0;
      (_fseek(($36|0),($35|0),0)|0);
      $37 = HEAP32[864>>2]|0;
      $38 = (_getc_unlocked(($37|0))|0);
      $39 = ($38|0)==(255);
      if (!($39)) {
       (_parse_tiff(12)|0);
      }
      HEAP32[454040>>2] = 0;
      $zero_fsize$0 = 0;
      break;
     }
    }
    $40 = (($head) + 25|0);
    $41 = (_memcmp($40,490016,7)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     ;HEAP8[133624+0>>0]=HEAP8[490024+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[490024+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[490024+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[490024+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[490024+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[490024+5>>0]|0;HEAP8[133624+6>>0]=HEAP8[490024+6>>0]|0;
     dest=133688+0|0; src=490032+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $43 = HEAP32[864>>2]|0;
     (_fseek(($43|0),33,0)|0);
     _get_timestamp(1);
     $44 = HEAP32[864>>2]|0;
     (_fseek(($44|0),60,0)|0);
     $45 = (_get4()|0);
     $46 = (+($45>>>0));
     HEAPF32[133480>>2] = $46;
     $47 = (_get4()|0);
     $48 = (+($47>>>0));
     HEAPF32[((133480 + 4|0))>>2] = $48;
     $49 = (_get4()|0);
     $50 = (+($49>>>0));
     HEAPF32[((133480 + 12|0))>>2] = $50;
     $51 = (_get4()|0);
     $52 = (+($51>>>0));
     HEAPF32[((133480 + 8|0))>>2] = $52;
     $zero_fsize$0 = 0;
     break;
    }
    $53 = (_strcmp($head,490048)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     dest=133624+0|0; src=490056+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     dest=133688+0|0; src=490072+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     $zero_fsize$0 = 0;
     break;
    }
    $55 = (_strcmp($head,490088)|0);
    $56 = ($55|0)==(0);
    if ($56) {
     ;HEAP8[133624+0>>0]=HEAP8[490096+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[490096+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[490096+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[490096+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[490096+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[490096+5>>0]|0;
     dest=133688+0|0; src=490104+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     HEAP32[189952>>2] = 38;
     $zero_fsize$0 = 0;
     break;
    }
    $57 = (_strcmp($head,490120)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     ;HEAP8[133624+0>>0]=HEAP8[490096+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[490096+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[490096+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[490096+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[490096+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[490096+5>>0]|0;
     dest=133688+0|0; src=490128+0|0; stop=dest+14|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
     HEAP32[189952>>2] = 39;
     $zero_fsize$0 = 0;
     break;
    }
    $59 = (_memcmp($head,454664,8)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = HEAP32[864>>2]|0;
     (_fseek(($61|0),84,0)|0);
     $62 = (_get4()|0);
     HEAP32[454040>>2] = $62;
     $63 = (_get4()|0);
     HEAP32[133768>>2] = $63;
     $64 = HEAP32[864>>2]|0;
     (_fseek(($64|0),92,0)|0);
     $65 = (_get4()|0);
     _parse_fuji($65);
     $66 = HEAP32[454040>>2]|0;
     $67 = ($66|0)>(120);
     if ($67) {
      $68 = HEAP32[864>>2]|0;
      (_fseek(($68|0),120,0)|0);
      $69 = (_get4()|0);
      $70 = ($69|0)!=(0);
      $71 = $70&1;
      $72 = HEAP32[133208>>2]|0;
      $73 = (($71) + ($72))|0;
      HEAP32[133208>>2] = $73;
      $74 = ($73|0)==(2);
      $75 = HEAP32[8>>2]|0;
      $76 = ($75|0)!=(0);
      $or$cond = $76 & $74;
      if ($or$cond) {
       _parse_fuji($69);
      }
     }
     HEAP32[189952>>2] = 18;
     $77 = HEAP32[864>>2]|0;
     $78 = HEAP32[8>>2]|0;
     $79 = ($78|0)!=(0);
     $80 = $79 ? 128 : 100;
     (_fseek(($77|0),($80|0),0)|0);
     $81 = (_get4()|0);
     HEAP32[133280>>2] = $81;
     (_parse_tiff($81)|0);
     $82 = HEAP32[454040>>2]|0;
     $83 = (($82) + 12)|0;
     (_parse_tiff($83)|0);
     _apply_tiff();
     $zero_fsize$0 = 0;
     break;
    }
    $84 = (_memcmp($head,457960,4)|0);
    $85 = ($84|0)==(0);
    if ($85) {
     $86 = HEAP32[864>>2]|0;
     (_fseek(($86|0),0,0)|0);
     _parse_riff();
     $zero_fsize$0 = 0;
     break;
    }
    $87 = (($head) + 4|0);
    $88 = (_memcmp($87,490144,9)|0);
    $89 = ($88|0)==(0);
    if ($89) {
     $90 = HEAP32[864>>2]|0;
     (_fseek(($90|0),0,0)|0);
     _parse_qt($9);
     HEAP32[133208>>2] = 0;
     $zero_fsize$0 = 0;
     break;
    }
    $91 = (_memcmp($head,490160,6)|0);
    $92 = ($91|0)==(0);
    if ($92) {
     $93 = HEAP32[864>>2]|0;
     (_fseek(($93|0),6,0)|0);
     $94 = HEAP32[864>>2]|0;
     (_fread((133624|0),1,8,($94|0))|0);
     $95 = HEAP32[864>>2]|0;
     (_fread((133688|0),1,8,($95|0))|0);
     $96 = HEAP32[864>>2]|0;
     (_fread((133112|0),1,16,($96|0))|0);
     $97 = (_get2()|0);
     $98 = $97&65535;
     HEAP32[133280>>2] = $98;
     (_get2()|0);
     $99 = (_get2()|0);
     HEAP16[132336>>1] = $99;
     $100 = (_get2()|0);
     HEAP16[133064>>1] = $100;
     HEAP32[189952>>2] = 10;
     HEAP32[584>>2] = 1633771873;
     $zero_fsize$0 = 0;
     break;
    }
    $101 = (_memcmp($head,490168,8)|0);
    $102 = ($101|0)==(0);
    if ($102) {
     ;HEAP8[133624+0>>0]=HEAP8[490184+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[490184+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[490184+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[490184+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[490184+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[490184+5>>0]|0;
     HEAP16[928>>1] = 18761;
     $103 = HEAP32[864>>2]|0;
     (_fseek(($103|0),300,0)|0);
     $104 = (_get4()|0);
     HEAP32[133280>>2] = $104;
     $105 = (_get4()|0);
     $106 = (_get2()|0);
     HEAP16[132088>>1] = $106;
     $107 = (_get2()|0);
     HEAP16[132080>>1] = $107;
     $108 = $105 << 3;
     $109 = HEAP16[132088>>1]|0;
     $110 = $109&65535;
     $111 = $107&65535;
     $112 = Math_imul($110, $111)|0;
     $113 = (($108|0) / ($112|0))&-1;
     HEAP32[133264>>2] = $113;
     if ((($113|0) == 8)) {
      HEAP32[189952>>2] = 7;
     } else if ((($113|0) == 10)) {
      HEAP32[189952>>2] = 10;
     }
     $114 = HEAP16[132080>>1]|0;
     $115 = $114&65535;
     $116 = HEAP16[132088>>1]|0;
     $117 = $116&65535;
     $118 = HEAP32[133264>>2]|0;
     $119 = Math_imul($117, $118)|0;
     $120 = $119 >>> 3;
     $121 = (($105>>>0) / ($120>>>0))&-1;
     $122 = (($121) - ($115))|0;
     $123 = $122&65535;
     HEAP16[600>>1] = $123;
     $124 = $121&65535;
     HEAP16[133064>>1] = $124;
     HEAP32[((189976 + 12|0))>>2] = 1;
     HEAP32[584>>2] = 1633771873;
     $zero_fsize$0 = 0;
     break;
    }
    $125 = (_memcmp($head,490192,4)|0);
    $126 = ($125|0)==(0);
    if ($126) {
     HEAP16[928>>1] = 18761;
     $127 = HEAP32[864>>2]|0;
     (_fseek(($127|0),20,0)|0);
     $128 = (_get4()|0);
     $129 = $128&65535;
     HEAP16[132088>>1] = $129;
     $130 = (_get4()|0);
     $131 = $130&65535;
     HEAP16[132080>>1] = $131;
     ;HEAP8[133624+0>>0]=HEAP8[490192+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[490192+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[490192+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[490192+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[490192+4>>0]|0;
     $132 = HEAP32[864>>2]|0;
     (_fseek(($132|0),668,0)|0);
     $133 = HEAP32[864>>2]|0;
     (_fread((133688|0),1,64,($133|0))|0);
     HEAP32[133280>>2] = 4096;
     HEAP32[189952>>2] = 9;
     HEAP32[133096>>2] = 88;
     HEAP32[584>>2] = 1633771873;
     $zero_fsize$0 = 0;
     break;
    }
    $134 = (_memcmp($head,490200,4)|0);
    $135 = ($134|0)==(0);
    if ($135) {
     HEAP16[928>>1] = 18761;
     $136 = HEAP32[864>>2]|0;
     (_fseek(($136|0),2048,0)|0);
     $137 = HEAP32[864>>2]|0;
     (_fread((133624|0),1,41,($137|0))|0);
     $138 = (_get2()|0);
     HEAP16[133064>>1] = $138;
     $139 = (_get2()|0);
     HEAP16[132336>>1] = $139;
     $140 = HEAP32[864>>2]|0;
     (_fseek(($140|0),56,1)|0);
     $141 = HEAP32[864>>2]|0;
     (_fread((133688|0),1,30,($141|0))|0);
     HEAP32[133280>>2] = 65536;
     HEAP32[189952>>2] = 40;
     _gamma_curve(0.0,12.25,1,1023);
     $zero_fsize$0 = 0;
     break;
    }
    $142 = (_memcmp($87,490208,4)|0);
    $143 = ($142|0)==(0);
    if ($143) {
     HEAP8[133624>>0]=6579538&255;HEAP8[133624+1>>0]=(6579538>>8)&255;HEAP8[133624+2>>0]=(6579538>>16)&255;HEAP8[133624+3>>0]=6579538>>24;
     HEAP8[133688>>0]=6647375&255;HEAP8[133688+1>>0]=(6647375>>8)&255;HEAP8[133688+2>>0]=(6647375>>16)&255;HEAP8[133688+3>>0]=6647375>>24;
     _parse_redcine();
     HEAP32[189952>>2] = 41;
     _gamma_curve(0.41666666666666669,12.92,1,4095);
     HEAP32[584>>2] = 1229539657;
     $zero_fsize$0 = 0;
     break;
    }
    $144 = (_memcmp($head,490216,9)|0);
    $145 = ($144|0)==(0);
    if ($145) {
     _parse_rollei();
     $zero_fsize$0 = 0;
     break;
    }
    $146 = (_memcmp($head,490232,4)|0);
    $147 = ($146|0)==(0);
    if ($147) {
     _parse_sinar_ia();
     $zero_fsize$0 = 0;
     break;
    }
    $148 = (_memcmp($head,490240,4)|0);
    $149 = ($148|0)==(0);
    if ($149) {
     _parse_minolta(0);
     $zero_fsize$0 = 0;
     break;
    }
    $150 = (_memcmp($head,490248,4)|0);
    $151 = ($150|0)==(0);
    if ($151) {
     _parse_foveon();
     $zero_fsize$0 = 0;
     break;
    }
    $152 = (_memcmp($head,490256,2)|0);
    $153 = ($152|0)==(0);
    if ($153) {
     _parse_cine();
     $zero_fsize$0 = 0;
     break;
    } else {
     $i$2138 = 0;
    }
    while(1) {
     $154 = (485048 + (($i$2138*48)|0)|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ($9|0)==($155|0);
     if ($156) {
      $157 = ((485048 + (($i$2138*48)|0)|0) + 16|0);
      (_strcpy((133624|0),($157|0))|0);
      $158 = ((485048 + (($i$2138*48)|0)|0) + 26|0);
      (_strcpy((133688|0),($158|0))|0);
      $159 = ((485048 + (($i$2138*48)|0)|0) + 15|0);
      $160 = HEAP8[$159>>0]|0;
      $161 = $160&255;
      $162 = $161 >>> 2;
      HEAP32[454784>>2] = $162;
      $163 = HEAP8[$159>>0]|0;
      $164 = $163&255;
      $165 = $164 & 2;
      HEAP32[489976>>2] = $165;
      $166 = HEAP8[$159>>0]|0;
      $167 = $166 & 1;
      $168 = ($167<<24>>24)==(0);
      if (!($168)) {
       _parse_external_jpeg();
      }
      $169 = ((485048 + (($i$2138*48)|0)|0) + 46|0);
      $170 = HEAP16[$169>>1]|0;
      $171 = $170&65535;
      HEAP32[133280>>2] = $171;
      $172 = ((485048 + (($i$2138*48)|0)|0) + 4|0);
      $173 = HEAP16[$172>>1]|0;
      HEAP16[132336>>1] = $173;
      $174 = ((485048 + (($i$2138*48)|0)|0) + 6|0);
      $175 = HEAP16[$174>>1]|0;
      HEAP16[133064>>1] = $175;
      $176 = ((485048 + (($i$2138*48)|0)|0) + 8|0);
      $177 = HEAP8[$176>>0]|0;
      $178 = $177&255;
      HEAP16[592>>1] = $178;
      $179 = ((485048 + (($i$2138*48)|0)|0) + 9|0);
      $180 = HEAP8[$179>>0]|0;
      $181 = $180&255;
      HEAP16[600>>1] = $181;
      $182 = HEAP16[132336>>1]|0;
      $183 = $182&65535;
      $184 = HEAP16[592>>1]|0;
      $185 = $184&65535;
      $186 = (($183) - ($185))|0;
      $187 = ((485048 + (($i$2138*48)|0)|0) + 10|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = $188&255;
      $190 = (($186) - ($189))|0;
      $191 = $190&65535;
      HEAP16[132088>>1] = $191;
      $192 = HEAP16[133064>>1]|0;
      $193 = $192&65535;
      $194 = HEAP16[600>>1]|0;
      $195 = $194&65535;
      $196 = (($193) - ($195))|0;
      $197 = ((485048 + (($i$2138*48)|0)|0) + 11|0);
      $198 = HEAP8[$197>>0]|0;
      $199 = $198&255;
      $200 = (($196) - ($199))|0;
      $201 = $200&65535;
      HEAP16[132080>>1] = $201;
      $202 = ((485048 + (($i$2138*48)|0)|0) + 13|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = $203&255;
      $205 = Math_imul($204, 16843009)|0;
      HEAP32[584>>2] = $205;
      $206 = $205 >>> 1;
      $207 = $205 & 21845;
      $208 = $207 & $206;
      $209 = ($208|0)==(0);
      $210 = $209&1;
      $211 = (4 - ($210))|0;
      HEAP32[132272>>2] = $211;
      $212 = ((485048 + (($i$2138*48)|0)|0) + 12|0);
      $213 = HEAP8[$212>>0]|0;
      $214 = $213&255;
      HEAP32[133096>>2] = $214;
      $215 = HEAP32[133280>>2]|0;
      $216 = (($9) - ($215))|0;
      $217 = $216 << 3;
      $218 = HEAP16[132336>>1]|0;
      $219 = $218&65535;
      $220 = HEAP16[133064>>1]|0;
      $221 = $220&65535;
      $222 = Math_imul($221, $219)|0;
      $223 = (($217|0) / ($222|0))&-1;
      HEAP32[133264>>2] = $223;
      switch ($223|0) {
      case 16:  {
       $226 = HEAP32[133096>>2]|0;
       $227 = $226 & 1;
       $228 = (0 - ($227))|0;
       $229 = $228 & 1028;
       $230 = $229 | 18761;
       $231 = $230&65535;
       HEAP16[928>>1] = $231;
       $232 = HEAP32[133096>>2]|0;
       $233 = $232 >>> 4;
       $234 = HEAP32[133264>>2]|0;
       $235 = (($234) - ($233))|0;
       $236 = $232 >>> 1;
       $237 = $236 & 7;
       HEAP32[133096>>2] = $237;
       $238 = (($235) - ($237))|0;
       HEAP32[133264>>2] = $238;
       HEAP32[189952>>2] = 18;
       break;
      }
      case 12: case 10:  {
       $224 = HEAP32[133096>>2]|0;
       $225 = $224 | 128;
       HEAP32[133096>>2] = $225;
       HEAP32[189952>>2] = 9;
       break;
      }
      case 6:  {
       HEAP32[189952>>2] = 42;
       break;
      }
      case 8:  {
       HEAP32[189952>>2] = 7;
       break;
      }
      default: {
      }
      }
      $239 = HEAP32[133264>>2]|0;
      $240 = 1 << $239;
      $241 = ((485048 + (($i$2138*48)|0)|0) + 14|0);
      $242 = HEAP8[$241>>0]|0;
      $243 = $242&255;
      $244 = 1 << $243;
      $245 = (($240) - ($244))|0;
      HEAP32[132368>>2] = $245;
     }
     $246 = (($i$2138) + 1)|0;
     $exitcond151 = ($246|0)==(98);
     if ($exitcond151) {
      $zero_fsize$0 = $9;
      break;
     } else {
      $i$2138 = $246;
     }
    }
   } else {
    $cp$0 = $12;
    label = 5;
   }
  } else {
   $cp$0 = $10;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  $14 = $cp$0;
  $15 = $head;
  $16 = (($14) - ($15))|0;
  _parse_phase_one($16);
  $17 = ($cp$0|0)==($head|0);
  if ($17) {
   $zero_fsize$0 = 0;
  } else {
   $18 = (_parse_tiff(0)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $zero_fsize$0 = 0;
   } else {
    _apply_tiff();
    $zero_fsize$0 = 0;
   }
  }
 }
 $247 = HEAP8[133624>>0]|0;
 $248 = ($247<<24>>24)==(0);
 do {
  if ($248) {
   _parse_smal(0,$9);
   $$pr = HEAP8[133624>>0]|0;
   $249 = ($$pr<<24>>24)==(0);
   if ($249) {
    (_parse_jpeg(0)|0);
    $250 = (_strncmp(133688,490264,2)|0);
    $251 = ($250|0)==(0);
    if ($251) {
     label = 72;
    } else {
     $252 = (_strncmp(133688,490272,5)|0);
     $253 = ($252|0)==(0);
     if ($253) {
      label = 72;
     }
    }
    if ((label|0) == 72) {
     $254 = HEAP32[864>>2]|0;
     $255 = (_fseek(($254|0),-6404096,2)|0);
     $256 = ($255|0)==(0);
     if ($256) {
      $257 = HEAP32[864>>2]|0;
      $258 = (_fread(($head|0),1,32,($257|0))|0);
      $259 = ($258|0)==(0);
      if (!($259)) {
       $260 = (_strcmp($head,490280)|0);
       $261 = ($260|0)==(0);
       if ($261) {
        dest=133624+0|0; src=142464+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
        $262 = HEAP32[864>>2]|0;
        $263 = (_ftell(($262|0))|0);
        $264 = (($263) + 32736)|0;
        HEAP32[133280>>2] = $264;
        $265 = HEAP16[132336>>1]|0;
        HEAP16[132088>>1] = $265;
        HEAP16[132336>>1] = 2611;
        HEAP32[189952>>2] = 10;
        HEAP32[584>>2] = 370546198;
        $i$3136 = 0;
        break;
       }
      }
     }
    }
    HEAP32[133208>>2] = 0;
    $i$3136 = 0;
   } else {
    $i$3136 = 0;
   }
  } else {
   $i$3136 = 0;
  }
 } while(0);
 while(1) {
  $266 = (489752 + ($i$3136<<2)|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = (_my_strcasestr(133624,$267)|0);
  $269 = ($268|0)==(0|0);
  if (!($269)) {
   (_strcpy((133624|0),($267|0))|0);
  }
  $270 = (($i$3136) + 1)|0;
  $exitcond149 = ($270|0)==(21);
  if ($exitcond149) {
   break;
  } else {
   $i$3136 = $270;
  }
 }
 $271 = (_strcmp(133624,457400)|0);
 $272 = ($271|0)==(0);
 if ($272) {
  label = 82;
 } else {
  $273 = (_strcmp(133624,489928)|0);
  $274 = ($273|0)==(0);
  if ($274) {
   label = 82;
  }
 }
 do {
  if ((label|0) == 82) {
   $275 = (_my_strcasestr(133688,490288)|0);
   $276 = ($275|0)==(0|0);
   if ($276) {
    $277 = (_strstr(133688,490304)|0);
    $278 = ($277|0)==(0|0);
    if ($278) {
     break;
    } else {
     $cp$1 = $277;
    }
   } else {
    $cp$1 = $275;
   }
   HEAP8[$cp$1>>0] = 0;
  }
 } while(0);
 $279 = (_strncasecmp(133688,454888,6)|0);
 $280 = ($279|0)==(0);
 if ($280) {
  ;HEAP8[133624+0>>0]=HEAP8[489944+0>>0]|0;HEAP8[133624+1>>0]=HEAP8[489944+1>>0]|0;HEAP8[133624+2>>0]=HEAP8[489944+2>>0]|0;HEAP8[133624+3>>0]=HEAP8[489944+3>>0]|0;HEAP8[133624+4>>0]=HEAP8[489944+4>>0]|0;HEAP8[133624+5>>0]=HEAP8[489944+5>>0]|0;HEAP8[133624+6>>0]=HEAP8[489944+6>>0]|0;
 }
 $281 = (_strlen((133624|0))|0);
 $$sum = (($281) + -1)|0;
 $282 = (133624 + ($$sum)|0);
 $283 = HEAP8[$282>>0]|0;
 $284 = ($283<<24>>24)==(32);
 if ($284) {
  $285 = $282;
  while(1) {
   HEAP8[$285>>0] = 0;
   $286 = (($285) + -1|0);
   $287 = HEAP8[$286>>0]|0;
   $288 = ($287<<24>>24)==(32);
   if ($288) {
    $285 = $286;
   } else {
    break;
   }
  }
 }
 $289 = (_strlen((133688|0))|0);
 $$sum144 = (($289) + -1)|0;
 $290 = (133688 + ($$sum144)|0);
 $291 = HEAP8[$290>>0]|0;
 $292 = ($291<<24>>24)==(32);
 if ($292) {
  $293 = $290;
  while(1) {
   HEAP8[$293>>0] = 0;
   $294 = (($293) + -1|0);
   $295 = HEAP8[$294>>0]|0;
   $296 = ($295<<24>>24)==(32);
   if ($296) {
    $293 = $294;
   } else {
    break;
   }
  }
 }
 $297 = (_strlen((133624|0))|0);
 $298 = (_strncasecmp(133688,133624,$297)|0);
 $299 = ($298|0)==(0);
 if ($299) {
  $300 = (133688 + ($297)|0);
  $301 = HEAP8[$300>>0]|0;
  $302 = ($301<<24>>24)==(32);
  if ($302) {
   $303 = (($297) + 1)|0;
   $304 = (133688 + ($303)|0);
   $305 = (63 - ($297))|0;
   _memmove((133688|0),($304|0),($305|0))|0;
  }
 }
 $306 = (_strncmp(133688,490320,8)|0);
 $307 = ($306|0)==(0);
 if ($307) {
  (_strcpy((133688|0),(((133688 + 8|0))|0))|0);
 }
 $308 = (_strncmp(133688,490336,15)|0);
 $309 = ($308|0)==(0);
 if ($309) {
  (_strcpy((133688|0),(((133688 + 15|0))|0))|0);
 }
 HEAP8[((133112 + 63|0))>>0] = 0;
 HEAP8[((133688 + 63|0))>>0] = 0;
 HEAP8[((133624 + 63|0))>>0] = 0;
 HEAP8[((454800 + 63|0))>>0] = 0;
 HEAP8[((456656 + 511|0))>>0] = 0;
 $310 = HEAP32[133208>>2]|0;
 $311 = ($310|0)==(0);
 do {
  if (!($311)) {
   $312 = HEAP16[132080>>1]|0;
   $313 = ($312<<16>>16)==(0);
   if ($313) {
    $314 = HEAP16[133064>>1]|0;
    HEAP16[132080>>1] = $314;
   }
   $315 = HEAP16[132088>>1]|0;
   $316 = ($315<<16>>16)==(0);
   if ($316) {
    $317 = HEAP16[132336>>1]|0;
    HEAP16[132088>>1] = $317;
   }
   $318 = HEAP16[132080>>1]|0;
   $319 = ($318<<16>>16)==(2624);
   $320 = HEAP16[132088>>1]|0;
   $321 = ($320<<16>>16)==(3936);
   $or$cond39 = $319 & $321;
   L152: do {
    if ($or$cond39) {
     HEAP16[132080>>1] = 2616;
     HEAP16[132088>>1] = 3896;
    } else {
     $322 = HEAP16[132080>>1]|0;
     $323 = ($322<<16>>16)==(3136);
     $324 = ($320<<16>>16)==(4864);
     $or$cond41 = $323 & $324;
     if ($or$cond41) {
      HEAP16[132080>>1] = 3124;
      HEAP16[132088>>1] = 4688;
      HEAP32[584>>2] = 370546198;
      break;
     }
     $325 = ($320<<16>>16)==(4352);
     do {
      if ($325) {
       $326 = (_strcmp(133688,490352)|0);
       $327 = ($326|0)==(0);
       if (!($327)) {
        $328 = (_strcmp(133688,490360)|0);
        $329 = ($328|0)==(0);
        if (!($329)) {
         label = 111;
         break;
        }
       }
       HEAP16[132088>>1] = 4309;
       HEAP32[584>>2] = 370546198;
       label = 114;
      } else {
       label = 111;
      }
     } while(0);
     if ((label|0) == 111) {
      $$pr76$pr$pr = HEAP16[132088>>1]|0;
      $330 = ($$pr76$pr$pr&65535)>(4959);
      if ($330) {
       $331 = (_strncmp(133688,490368,3)|0);
       $332 = ($331|0)==(0);
       if ($332) {
        HEAP16[592>>1] = 10;
        HEAP16[132088>>1] = 4950;
        HEAP32[584>>2] = 370546198;
        break;
       } else {
        label = 114;
       }
      } else {
       $333 = $$pr76$pr$pr;
      }
     }
     if ((label|0) == 114) {
      $$pr78 = HEAP16[132088>>1]|0;
      $333 = $$pr78;
     }
     $334 = ($333<<16>>16)==(4736);
     if ($334) {
      $335 = (_strcmp(133688,490376)|0);
      $336 = ($335|0)==(0);
      if ($336) {
       HEAP16[132080>>1] = 3122;
       HEAP16[132088>>1] = 4684;
       HEAP32[584>>2] = 370546198;
       HEAP16[600>>1] = 2;
       label = 121;
      } else {
       label = 118;
      }
     } else {
      label = 118;
     }
     do {
      if ((label|0) == 118) {
       $$pr81$pr$pr$pr = HEAP16[132088>>1]|0;
       $337 = ($$pr81$pr$pr$pr<<16>>16)==(6080);
       if ($337) {
        $338 = (_strcmp(133688,490384)|0);
        $339 = ($338|0)==(0);
        if (!($339)) {
         label = 121;
         break;
        }
        HEAP16[592>>1] = 4;
        HEAP16[132088>>1] = 6040;
        break L152;
       } else {
        $340 = $$pr81$pr$pr$pr;
       }
      }
     } while(0);
     if ((label|0) == 121) {
      $$pr84 = HEAP16[132088>>1]|0;
      $340 = $$pr84;
     }
     $341 = ($340<<16>>16)==(7424);
     if ($341) {
      $342 = (_strcmp(133688,490392)|0);
      $343 = ($342|0)==(0);
      if ($343) {
       HEAP16[132080>>1] = 5502;
       HEAP16[132088>>1] = 7328;
       HEAP32[584>>2] = 1633771873;
       HEAP16[600>>1] = 29;
       HEAP16[592>>1] = 48;
      }
     }
    }
   } while(0);
   $344 = HEAP16[132080>>1]|0;
   $345 = ($344<<16>>16)==(3014);
   $346 = HEAP16[132088>>1]|0;
   $347 = ($346<<16>>16)==(4096);
   $or$cond43 = $345 & $347;
   if ($or$cond43) {
    HEAP16[132088>>1] = 4014;
   }
   $348 = HEAP32[133072>>2]|0;
   $349 = ($348|0)==(0);
   do {
    if ($349) {
     $357 = (_strcmp(133624,454792)|0);
     $358 = $357 | $zero_fsize$0;
     $or$cond3$not = ($358|0)==(0);
     $359 = HEAP32[133264>>2]|0;
     $360 = ($359|0)!=(15);
     $or$cond5 = $or$cond3$not & $360;
     do {
      if ($or$cond5) {
       $361 = HEAP32[189952>>2]|0;
       $362 = ($361|0)==(0|0);
       if ($362) {
        HEAP32[189952>>2] = 4;
       }
       $363 = HEAP16[132336>>1]|0;
       $364 = $363&65535;
       $365 = HEAP16[133064>>1]|0;
       $366 = $365&65535;
       $i$4132 = 0;
       while(1) {
        $367 = (482240 + (($i$4132*22)|0)|0);
        $368 = HEAP16[$367>>1]|0;
        $369 = ($363<<16>>16)==($368<<16>>16);
        do {
         if ($369) {
          $370 = ((482240 + (($i$4132*22)|0)|0) + 2|0);
          $371 = HEAP16[$370>>1]|0;
          $372 = ($365<<16>>16)==($371<<16>>16);
          if (!($372)) {
           break;
          }
          $373 = ((482240 + (($i$4132*22)|0)|0) + 4|0);
          $374 = HEAP16[$373>>1]|0;
          HEAP16[592>>1] = $374;
          $375 = $374&65535;
          $376 = (($364) - ($375))|0;
          $377 = $376&65535;
          HEAP16[132088>>1] = $377;
          $378 = ((482240 + (($i$4132*22)|0)|0) + 6|0);
          $379 = HEAP16[$378>>1]|0;
          HEAP16[600>>1] = $379;
          $380 = $379&65535;
          $381 = (($366) - ($380))|0;
          $382 = $381&65535;
          HEAP16[132080>>1] = $382;
          $383 = ((482240 + (($i$4132*22)|0)|0) + 8|0);
          $384 = HEAP16[$383>>1]|0;
          $385 = $384&65535;
          $386 = HEAP16[132088>>1]|0;
          $387 = $386&65535;
          $388 = (($387) - ($385))|0;
          $389 = $388&65535;
          HEAP16[132088>>1] = $389;
          $390 = ((482240 + (($i$4132*22)|0)|0) + 10|0);
          $391 = HEAP16[$390>>1]|0;
          $392 = $391&65535;
          $393 = HEAP16[132080>>1]|0;
          $394 = $393&65535;
          $395 = (($394) - ($392))|0;
          $396 = $395&65535;
          HEAP16[132080>>1] = $396;
          $397 = ((482240 + (($i$4132*22)|0)|0) + 12|0);
          $398 = HEAP16[$397>>1]|0;
          $399 = $398&65535;
          HEAP32[((189976 + 4|0))>>2] = $399;
          $400 = ((482240 + (($i$4132*22)|0)|0) + 14|0);
          $401 = HEAP16[$400>>1]|0;
          $402 = $401&65535;
          $403 = (0 - ($402))|0;
          HEAP32[((189976 + 12|0))>>2] = $403;
          $404 = ((482240 + (($i$4132*22)|0)|0) + 16|0);
          $405 = HEAP16[$404>>1]|0;
          $406 = $405&65535;
          HEAP32[((189976 + 20|0))>>2] = $406;
          $407 = ((482240 + (($i$4132*22)|0)|0) + 18|0);
          $408 = HEAP16[$407>>1]|0;
          $409 = $408&65535;
          $410 = (0 - ($409))|0;
          HEAP32[((189976 + 28|0))>>2] = $410;
          $411 = ((482240 + (($i$4132*22)|0)|0) + 20|0);
          $412 = HEAP16[$411>>1]|0;
          $413 = ($412<<16>>16)==(0);
          if ($413) {
           break;
          }
          $414 = $412&65535;
          $415 = Math_imul($414, 16843009)|0;
          HEAP32[584>>2] = $415;
         }
        } while(0);
        $416 = (($i$4132) + 1)|0;
        $exitcond148 = ($416|0)==(41);
        if ($exitcond148) {
         break;
        } else {
         $i$4132 = $416;
        }
       }
       $417 = HEAP32[133192>>2]|0;
       $418 = $417 | 131072;
       $419 = ($418|0)==(41025536);
       if (!($419)) {
        $i$5131 = 0;
        break;
       }
       HEAP16[592>>1] = 8;
       HEAP16[600>>1] = 16;
       $i$5131 = 0;
      } else {
       $i$5131 = 0;
      }
     } while(0);
     while(1) {
      $420 = HEAP32[133192>>2]|0;
      $421 = (483144 + (($i$5131*22)|0)|0);
      $422 = HEAP16[$421>>1]|0;
      $423 = $422&65535;
      $424 = $423 | -2147483648;
      $425 = ($420|0)==($424|0);
      do {
       if ($425) {
        $426 = ((483144 + (($i$5131*22)|0)|0) + 2|0);
        _adobe_coeff(454792,$426);
        $427 = HEAP8[((133688 + 4|0))>>0]|0;
        $428 = ($427<<24>>24)==(75);
        if (!($428)) {
         break;
        }
        $429 = (_strlen((133688|0))|0);
        $430 = ($429|0)==(8);
        if (!($430)) {
         break;
        }
        (_strcpy((133688|0),($426|0))|0);
       }
      } while(0);
      $431 = (($i$5131) + 1)|0;
      $exitcond147 = ($431|0)==(35);
      if ($exitcond147) {
       $i$6130 = 0;
       break;
      } else {
       $i$5131 = $431;
      }
     }
     while(1) {
      $432 = HEAP32[133192>>2]|0;
      $433 = (483920 + (($i$6130*22)|0)|0);
      $434 = HEAP16[$433>>1]|0;
      $435 = $434&65535;
      $436 = ($432|0)==($435|0);
      if ($436) {
       $437 = ((483920 + (($i$6130*22)|0)|0) + 2|0);
       (_strcpy((133688|0),($437|0))|0);
      }
      $438 = (($i$6130) + 1)|0;
      $exitcond146 = ($438|0)==(51);
      if ($exitcond146) {
       break;
      } else {
       $i$6130 = $438;
      }
     }
     $439 = (_strcmp(133624,454616)|0);
     $440 = ($439|0)==(0);
     do {
      if ($440) {
       $441 = HEAP32[189952>>2]|0;
       $442 = ($441|0)==(0|0);
       if ($442) {
        HEAP32[189952>>2] = 9;
       }
       $443 = HEAP8[133688>>0]|0;
       $444 = ($443<<24>>24)==(69);
       if (!($444)) {
        break;
       }
       $445 = HEAP32[133280>>2]|0;
       $446 = ($445|0)==(0);
       $447 = $446&1;
       $448 = $447 << 2;
       $449 = HEAP32[133096>>2]|0;
       $450 = $449 | $448;
       $451 = $450 | 2;
       HEAP32[133096>>2] = $451;
      }
     } while(0);
     $452 = (_strcmp(133688,490400)|0);
     $453 = ($452|0)==(0);
     do {
      if ($453) {
       $454 = (+_find_green(16,16,3840,5120));
       $455 = $454 < 25.0;
       if (!($455)) {
        break;
       }
       HEAP16[132080>>1] = 480;
       HEAP32[584>>2] = 0;
       HEAP16[600>>1] = 0;
       ;HEAP8[133688+0>>0]=HEAP8[490416+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[490416+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[490416+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[490416+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[490416+4>>0]|0;
      }
     } while(0);
     $456 = HEAP32[458128>>2]|0;
     $457 = ($456|0)==(0);
     L226: do {
      if ($457) {
       $467 = (_strcmp(133624,454792)|0);
       $468 = ($467|0)==(0);
       $469 = HEAP32[133264>>2]|0;
       $470 = ($469|0)==(15);
       $or$cond7 = $468 & $470;
       if ($or$cond7) {
        $471 = HEAP16[132088>>1]|0;
        $472 = $471&65535;
        if ((($472|0) == 3872)) {
         label = 174;
        } else if ((($472|0) == 3344)) {
         $473 = (($472) + 65470)|0;
         $474 = $473&65535;
         HEAP16[132088>>1] = $474;
         label = 174;
        }
        if ((label|0) == 174) {
         $475 = HEAP16[132088>>1]|0;
         $476 = $475&65535;
         $477 = (($476) + 65530)|0;
         $478 = $477&65535;
         HEAP16[132088>>1] = $478;
        }
        $479 = HEAP16[132080>>1]|0;
        $480 = HEAP16[132088>>1]|0;
        $481 = ($479&65535)>($480&65535);
        if ($481) {
         $482 = $479&65535;
         $483 = $480&65535;
         $484 = (($483) + ($482))|0;
         $485 = HEAP16[132088>>1]|0;
         $486 = $485&65535;
         $487 = (($484) - ($486))|0;
         $488 = $487&65535;
         HEAP16[132088>>1] = $488;
         HEAP16[132080>>1] = $485;
         $489 = HEAP16[133064>>1]|0;
         $490 = HEAP16[132336>>1]|0;
         HEAP16[132336>>1] = $489;
         HEAP16[133064>>1] = $490;
        }
        HEAP32[584>>2] = 0;
        HEAP32[132272>>2] = 3;
        HEAP32[133216>>2] = 3;
        HEAP32[189952>>2] = 46;
        label = 514;
        break;
       }
       $491 = (_strcmp(133688,490424)|0);
       $492 = ($491|0)==(0);
       if ($492) {
        HEAP16[132080>>1] = 613;
        HEAP16[132088>>1] = 854;
        HEAP16[132336>>1] = 896;
        HEAP32[132272>>2] = 4;
        HEAP32[584>>2] = -505093660;
        HEAP32[189952>>2] = 5;
        label = 514;
        break;
       }
       $493 = (_strcmp(133688,490440)|0);
       $494 = ($493|0)==(0);
       do {
        if ($494) {
         label = 182;
        } else {
         $495 = (_strcmp(133688,490456)|0);
         $496 = ($495|0)==(0);
         if ($496) {
          label = 182;
          break;
         }
         $497 = (_strcmp(133688,490480)|0);
         $498 = ($497|0)==(0);
         if ($498) {
          HEAP16[132080>>1] = 968;
          HEAP16[132088>>1] = 1290;
          HEAP16[132336>>1] = 1320;
          HEAP32[584>>2] = 458115870;
          break;
         }
         $499 = (_strcmp(133688,490496)|0);
         $500 = ($499|0)==(0);
         if ($500) {
          HEAP16[132080>>1] = 1024;
          HEAP16[132088>>1] = 1552;
          HEAP32[584>>2] = 508251675;
          break;
         }
         $501 = (_strcmp(133688,490512)|0);
         $502 = ($501|0)==(0);
         do {
          if (!($502)) {
           $503 = (_strcmp(133688,490536)|0);
           $504 = ($503|0)==(0);
           if ($504) {
            break;
           }
           $505 = (_strcmp(133688,490552)|0);
           $506 = ($505|0)==(0);
           if ($506) {
            $507 = (_canon_s2is()|0);
            $508 = ($507|0)==(0);
            if ($508) {
             label = 514;
             break L226;
            }
            ;HEAP8[((133688 + 10|0))+0>>0]=HEAP8[490568+0>>0]|0;HEAP8[((133688 + 10|0))+1>>0]=HEAP8[490568+1>>0]|0;HEAP8[((133688 + 10|0))+2>>0]=HEAP8[490568+2>>0]|0;HEAP8[((133688 + 10|0))+3>>0]=HEAP8[490568+3>>0]|0;HEAP8[((133688 + 10|0))+4>>0]=HEAP8[490568+4>>0]|0;HEAP8[((133688 + 10|0))+5>>0]=HEAP8[490568+5>>0]|0;
            label = 514;
            break L226;
           }
           $509 = (_strcmp(133688,490576)|0);
           $510 = ($509|0)==(0);
           if ($510) {
            HEAP32[((189976 + 28|0))>>2] = -4;
            label = 514;
            break L226;
           }
           $511 = (_strcmp(133688,490600)|0);
           $512 = ($511|0)==(0);
           if ($512) {
            HEAP32[584>>2] = 1633771873;
            $513 = HEAP16[((936 + 400|0))>>1]|0;
            $514 = $513&65535;
            HEAP32[132360>>2] = $514;
            label = 514;
            break L226;
           }
           $515 = (_strcmp(133688,490616)|0);
           $516 = ($515|0)==(0);
           if ($516) {
            $517 = +HEAPF32[133480>>2];
            $518 = $517;
            $519 = $518 * 0.48576850094876661;
            $520 = $519;
            HEAPF32[133480>>2] = $520;
            $521 = +HEAPF32[((133480 + 8|0))>>2];
            $522 = $521;
            $523 = $522 * 0.80757097791798105;
            $524 = $523;
            HEAPF32[((133480 + 8|0))>>2] = $524;
            label = 514;
            break L226;
           }
           $525 = (_strcmp(133688,490624)|0);
           $526 = ($525|0)==(0);
           if ($526) {
            $527 = HEAP16[132088>>1]|0;
            $528 = $527&65535;
            $529 = (($528) + 65532)|0;
            $530 = $529&65535;
            HEAP16[132088>>1] = $530;
            HEAPF64[457384>>3] = 0.5;
            label = 514;
            break L226;
           }
           $531 = (_strcmp(133688,490632)|0);
           $532 = ($531|0)==(0);
           do {
            if (!($532)) {
             $533 = (_strcmp(133688,490640)|0);
             $534 = ($533|0)==(0);
             if ($534) {
              break;
             }
             $535 = (_strcmp(133688,490648)|0);
             $536 = ($535|0)==(0);
             if ($536) {
              break;
             }
             $537 = (_strcmp(133688,490656)|0);
             $538 = ($537|0)==(0);
             if ($538) {
              break;
             }
             $547 = (_strcmp(133688,490664)|0);
             $548 = ($547|0)==(0);
             do {
              if (!($548)) {
               $549 = (_strcmp(133688,490672)|0);
               $550 = ($549|0)==(0);
               if ($550) {
                break;
               }
               $551 = (_strcmp(133688,490680)|0);
               $552 = ($551|0)==(0);
               if ($552) {
                break;
               }
               $557 = (_strcmp(133688,490688)|0);
               $558 = ($557|0)==(0);
               if ($558) {
                $559 = HEAP16[132088>>1]|0;
                $560 = $559&65535;
                $561 = (($560) + 65508)|0;
                $562 = $561&65535;
                HEAP16[132088>>1] = $562;
                HEAP16[592>>1] = 6;
                label = 514;
                break L226;
               }
               $563 = (_strcmp(133688,490696)|0);
               $564 = ($563|0)==(0);
               do {
                if (!($564)) {
                 $565 = (_strcmp(133688,490704)|0);
                 $566 = ($565|0)==(0);
                 if ($566) {
                  break;
                 }
                 $571 = (_strcmp(133688,490712)|0);
                 $572 = ($571|0)==(0);
                 do {
                  if (!($572)) {
                   $573 = (_strcmp(133688,490720)|0);
                   $574 = ($573|0)==(0);
                   if ($574) {
                    break;
                   }
                   $575 = (_strcmp(133688,490728)|0);
                   $576 = ($575|0)==(0);
                   if ($576) {
                    break;
                   }
                   $581 = (_strcmp(133688,490744)|0);
                   $582 = ($581|0)==(0);
                   do {
                    if (!($582)) {
                     $583 = (_strncmp(133688,490752,2)|0);
                     $584 = ($583|0)==(0);
                     if ($584) {
                      break;
                     }
                     $585 = (_strncmp(133688,490760,4)|0);
                     $586 = ($585|0)==(0);
                     if ($586) {
                      break;
                     }
                     $591 = (_strcmp(133688,490768)|0);
                     $592 = ($591|0)==(0);
                     do {
                      if (!($592)) {
                       $593 = (_strcmp(133688,490776)|0);
                       $594 = ($593|0)==(0);
                       if ($594) {
                        break;
                       }
                       $599 = (_strncmp(133688,490784,3)|0);
                       $600 = ($599|0)==(0);
                       do {
                        if (!($600)) {
                         $601 = (_strncmp(133688,490792,3)|0);
                         $602 = ($601|0)==(0);
                         if ($602) {
                          break;
                         }
                         $603 = (_strncmp(133688,490800,3)|0);
                         $604 = ($603|0)==(0);
                         if ($604) {
                          break;
                         }
                         $607 = (_strcmp(133688,490808)|0);
                         $608 = ($607|0)==(0);
                         if ($608) {
                          $609 = HEAP32[133096>>2]|0;
                          $610 = ($609|0)==(0);
                          if ($610) {
                           label = 514;
                           break L226;
                          }
                          $611 = HEAP16[132088>>1]|0;
                          $612 = $611&65535;
                          $613 = (($612) + 3)|0;
                          $614 = $613&65535;
                          HEAP16[132088>>1] = $614;
                          $615 = (($612) + 6)|0;
                          $616 = $615&65535;
                          HEAP16[132336>>1] = $616;
                          label = 514;
                          break L226;
                         }
                         $617 = (_strcmp(133688,490816)|0);
                         $618 = ($617|0)==(0);
                         if ($618) {
                          HEAP16[592>>1] = 1;
                          $619 = HEAP16[132088>>1]|0;
                          $620 = $619&65535;
                          $621 = (($620) + 65532)|0;
                          $622 = $621&65535;
                          HEAP16[132088>>1] = $622;
                          HEAP32[584>>2] = -1802201964;
                          label = 514;
                          break L226;
                         }
                         $623 = (_strncmp(133688,490824,3)|0);
                         $624 = ($623|0)==(0);
                         if ($624) {
                          HEAP16[592>>1] = 6;
                          $625 = HEAP16[132088>>1]|0;
                          $626 = $625&65535;
                          $627 = (($626) + 65522)|0;
                          $628 = $627&65535;
                          HEAP16[132088>>1] = $628;
                          label = 514;
                          break L226;
                         }
                         $629 = (_strncmp(133688,490832,3)|0);
                         $630 = ($629|0)==(0);
                         if ($630) {
                          $631 = HEAP16[132088>>1]|0;
                          $632 = $631&65535;
                          $633 = ($631<<16>>16)==(3264);
                          if ($633) {
                           $634 = (($632) + 65504)|0;
                           $635 = $634&65535;
                           HEAP16[132088>>1] = $635;
                           label = 514;
                           break L226;
                          } else {
                           $636 = (($632) + 65528)|0;
                           $637 = $636&65535;
                           HEAP16[132088>>1] = $637;
                           label = 514;
                           break L226;
                          }
                         }
                         $638 = (_strncmp(133688,490840,4)|0);
                         $639 = ($638|0)==(0);
                         if ($639) {
                          $640 = HEAP16[132088>>1]|0;
                          $641 = $640&65535;
                          $642 = (($641) + 65504)|0;
                          $643 = $642&65535;
                          HEAP16[132088>>1] = $643;
                          label = 514;
                          break L226;
                         }
                         $644 = (_strncmp(133688,490848,9)|0);
                         $645 = ($644|0)!=(0);
                         $646 = HEAP16[132336>>1]|0;
                         $647 = ($646<<16>>16)==(4032);
                         $or$cond45 = $645 | $647;
                         if (!($or$cond45)) {
                          HEAP32[133096>>2] = 24;
                          HEAP32[584>>2] = -1802201964;
                          $648 = HEAP8[((133688 + 9|0))>>0]|0;
                          $649 = ($648<<24>>24)==(55);
                          $650 = +HEAPF32[454744>>2];
                          $651 = $650 >= 400.0;
                          $or$cond9 = $649 & $651;
                          if (!($or$cond9)) {
                           label = 514;
                           break L226;
                          }
                          HEAP32[132360>>2] = 255;
                          label = 514;
                          break L226;
                         }
                         $652 = (_strncmp(133688,490864,2)|0);
                         $653 = ($652|0)==(0);
                         if ($653) {
                          $654 = HEAP16[132080>>1]|0;
                          $655 = $654&65535;
                          $656 = (($655) + 65534)|0;
                          $657 = $656&65535;
                          HEAP16[132080>>1] = $657;
                          label = 514;
                          break L226;
                         }
                         if ((($zero_fsize$0|0) == 1581060)) {
                          _simple_coeff(3);
                          HEAPF32[132048>>2] = 1.2085000276565552;
                          HEAPF32[((132048 + 4|0))>>2] = 1.0943000316619873;
                          HEAPF32[((132048 + 12|0))>>2] = 1.1102999448776245;
                          label = 514;
                          break L226;
                         } else if ((($zero_fsize$0|0) == 3178560)) {
                          $658 = +HEAPF32[133480>>2];
                          $659 = $658 * 4.0;
                          HEAPF32[133480>>2] = $659;
                          $660 = +HEAPF32[((133480 + 8|0))>>2];
                          $661 = $660 * 4.0;
                          HEAPF32[((133480 + 8|0))>>2] = $661;
                          label = 514;
                          break L226;
                         } else if ((($zero_fsize$0|0) == 4771840)) {
                          $662 = HEAP32[190152>>2]|0;
                          $663 = ($662|0)==(0);
                          do {
                           if ($663) {
                            $664 = (_nikon_e995()|0);
                            $665 = ($664|0)==(0);
                            if ($665) {
                             break;
                            }
                            ;HEAP8[133688+0>>0]=HEAP8[490872+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[490872+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[490872+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[490872+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[490872+4>>0]|0;
                           }
                          } while(0);
                          $666 = (_strcmp(133688,490872)|0);
                          $667 = ($666|0)==(0);
                          if ($667) {
                           label = 514;
                           break L226;
                          }
                          HEAP32[584>>2] = -1263225676;
                          _simple_coeff(3);
                          HEAPF32[132048>>2] = 1.1959999799728394;
                          HEAPF32[((132048 + 4|0))>>2] = 1.2460000514984131;
                          HEAPF32[((132048 + 8|0))>>2] = 1.0180000066757202;
                          label = 514;
                          break L226;
                         } else if ((($zero_fsize$0|0) == 2940928)) {
                          $668 = HEAP32[190152>>2]|0;
                          $669 = ($668|0)==(0);
                          do {
                           if ($669) {
                            $670 = (_nikon_e2100()|0);
                            $671 = ($670|0)==(0);
                            if (!($671)) {
                             break;
                            }
                            ;HEAP8[133688+0>>0]=HEAP8[490880+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[490880+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[490880+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[490880+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[490880+4>>0]|0;HEAP8[133688+5>>0]=HEAP8[490880+5>>0]|0;
                           }
                          } while(0);
                          $672 = (_strcmp(133688,490880)|0);
                          $673 = ($672|0)==(0);
                          if (!($673)) {
                           label = 514;
                           break L226;
                          }
                          $674 = HEAP16[132080>>1]|0;
                          $675 = $674&65535;
                          $676 = (($675) + 65534)|0;
                          $677 = $676&65535;
                          HEAP16[132080>>1] = $677;
                          HEAP32[133096>>2] = 6;
                          HEAP32[132272>>2] = 4;
                          HEAP32[584>>2] = 1263225675;
                          label = 514;
                          break L226;
                         } else if ((($zero_fsize$0|0) == 5869568)) {
                          $696 = HEAP32[190152>>2]|0;
                          $697 = ($696|0)==(0);
                          do {
                           if ($697) {
                            $698 = (_minolta_z2()|0);
                            $699 = ($698|0)==(0);
                            if ($699) {
                             break;
                            }
                            $700 = 133624;
                            $701 = $700;
                            HEAP8[$701>>0]=1869506893&255;HEAP8[$701+1>>0]=(1869506893>>8)&255;HEAP8[$701+2>>0]=(1869506893>>16)&255;HEAP8[$701+3>>0]=1869506893>>24;
                            $702 = (($700) + 4)|0;
                            $703 = $702;
                            HEAP8[$703>>0]=6386796&255;HEAP8[$703+1>>0]=(6386796>>8)&255;HEAP8[$703+2>>0]=(6386796>>16)&255;HEAP8[$703+3>>0]=6386796>>24;
                            dest=133688+0|0; src=490904+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
                           }
                          } while(0);
                          $704 = HEAP8[133624>>0]|0;
                          $705 = ($704<<24>>24)==(77);
                          $706 = $705 ? 30 : 6;
                          HEAP32[133096>>2] = $706;
                          label = 514;
                          break L226;
                         } else if ((($zero_fsize$0|0) == 6291456)) {
                          $707 = HEAP32[864>>2]|0;
                          (_fseek(($707|0),3145728,0)|0);
                          $708 = (_guess_byte_order(65536)|0);
                          HEAP16[928>>1] = $708;
                          $709 = ($708<<16>>16)==(19789);
                          if (!($709)) {
                           label = 514;
                           break L226;
                          }
                          HEAP16[600>>1] = 16;
                          $710 = HEAP16[132080>>1]|0;
                          $711 = $710&65535;
                          $712 = (($711) + 65520)|0;
                          $713 = $712&65535;
                          HEAP16[132080>>1] = $713;
                          HEAP16[592>>1] = 28;
                          $714 = HEAP16[132088>>1]|0;
                          $715 = $714&65535;
                          $716 = (($715) + 65508)|0;
                          $717 = $716&65535;
                          HEAP16[132088>>1] = $717;
                          HEAP32[132368>>2] = 62912;
                          HEAP8[133624>>0]=4674377&255;HEAP8[133624+1>>0]=(4674377>>8)&255;HEAP8[133624+2>>0]=(4674377>>16)&255;HEAP8[133624+3>>0]=4674377>>24;
                          HEAP8[133688>>0] = 0;
                          label = 515;
                          break L226;
                         } else if ((($zero_fsize$0|0) == 4775936)) {
                          $678 = HEAP32[190152>>2]|0;
                          $679 = ($678|0)==(0);
                          if ($679) {
                           _nikon_3700();
                          }
                          $680 = HEAP8[133688>>0]|0;
                          $681 = ($680<<24>>24)==(69);
                          do {
                           if ($681) {
                            $682 = (_atoi(((133688 + 1|0)))|0);
                            $683 = ($682|0)<(3700);
                            if (!($683)) {
                             break;
                            }
                            HEAP32[584>>2] = 1229539657;
                           }
                          } while(0);
                          $684 = (_strcmp(133688,490888)|0);
                          $685 = ($684|0)==(0);
                          if ($685) {
                           HEAP32[454784>>2] = 1;
                           HEAP32[584>>2] = 370546198;
                          }
                          $686 = HEAP8[133624>>0]|0;
                          $687 = ($686<<24>>24)==(79);
                          if (!($687)) {
                           label = 514;
                           break L226;
                          }
                          $688 = (+_find_green(12,32,1188864,3576832));
                          $689 = (~~(($688)));
                          $690 = (+_find_green(12,32,2383920,2387016));
                          $691 = (~~(($690)));
                          $ispos = ($689|0)>(-1);
                          $neg = (0 - ($689))|0;
                          $692 = $ispos ? $689 : $neg;
                          $ispos36 = ($691|0)>(-1);
                          $neg37 = (0 - ($691))|0;
                          $693 = $ispos36 ? $691 : $neg37;
                          $694 = ($692|0)<($693|0);
                          if ($694) {
                           HEAP32[133096>>2] = 24;
                           $i$7 = $691;
                          } else {
                           $i$7 = $689;
                          }
                          $695 = ($i$7|0)<(0);
                          if (!($695)) {
                           label = 514;
                           break L226;
                          }
                          HEAP32[584>>2] = 1633771873;
                          label = 514;
                          break L226;
                         } else {
                          $718 = (_strcmp(133624,489872)|0);
                          $719 = ($718|0)==(0);
                          if ($719) {
                           $720 = (_strcmp(((133688 + 7|0)),490920)|0);
                           $721 = ($720|0)==(0);
                           do {
                            if ($721) {
                             ;HEAP8[133688+0>>0]=HEAP8[490920+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[490920+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[490920+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[490920+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[490920+4>>0]|0;HEAP8[133688+5>>0]=HEAP8[490920+5>>0]|0;
                             HEAP16[132080>>1] = 2144;
                             HEAP16[132088>>1] = 2880;
                             HEAP32[454784>>2] = 6;
                            } else {
                             $722 = HEAP32[189952>>2]|0;
                             $723 = ($722|0)==(9|0);
                             if ($723) {
                              break;
                             }
                             $724 = HEAP32[133208>>2]|0;
                             $725 = ($724|0)==(2);
                             if ($725) {
                              $726 = HEAP32[8>>2]|0;
                              $727 = ($726|0)!=(0);
                              $728 = $727;
                             } else {
                              $728 = 0;
                             }
                             $729 = $728 ? 12032 : 15872;
                             HEAP32[132368>>2] = $729;
                            }
                           } while(0);
                           $730 = HEAP16[133064>>1]|0;
                           $731 = $730&65535;
                           $732 = HEAP16[132080>>1]|0;
                           $733 = $732&65535;
                           $734 = (($731) - ($733))|0;
                           $735 = $734 >> 2;
                           $736 = $735 << 1;
                           $737 = $736&65535;
                           HEAP16[600>>1] = $737;
                           $738 = HEAP16[132336>>1]|0;
                           $739 = $738&65535;
                           $740 = HEAP16[132088>>1]|0;
                           $741 = $740&65535;
                           $742 = (($739) - ($741))|0;
                           $743 = $742 >> 2;
                           $744 = $743 << 1;
                           $745 = $744&65535;
                           HEAP16[592>>1] = $745;
                           $746 = HEAP16[132088>>1]|0;
                           if ((($746<<16>>16) == 3664) | (($746<<16>>16) == 2848)) {
                            HEAP32[584>>2] = 370546198;
                            $$pr87 = HEAP16[132088>>1]|0;
                            $1440 = $$pr87;
                           } else {
                            $1440 = $746;
                           }
                           if ((($1440<<16>>16) == 4952) | (($1440<<16>>16) == 4032)) {
                            HEAP16[592>>1] = 0;
                           }
                           $747 = HEAP16[132088>>1]|0;
                           if ((($747<<16>>16) == 3328)) {
                            $748 = $747&65535;
                            $749 = (($748) + 65470)|0;
                            $750 = $749&65535;
                            HEAP16[132088>>1] = $750;
                            HEAP16[592>>1] = 34;
                           } else if ((($747<<16>>16) == 4936)) {
                            HEAP16[592>>1] = 4;
                           }
                           $751 = (_strcmp(133688,490928)|0);
                           $752 = ($751|0)==(0);
                           if ($752) {
                            label = 296;
                           } else {
                            $753 = (_strcmp(133688,490936)|0);
                            $754 = ($753|0)==(0);
                            if ($754) {
                             label = 296;
                            }
                           }
                           if ((label|0) == 296) {
                            $755 = HEAP16[132088>>1]|0;
                            $756 = $755&65535;
                            $757 = (($756) + 2)|0;
                            $758 = $757&65535;
                            HEAP16[132088>>1] = $758;
                            HEAP16[592>>1] = 0;
                            HEAP32[584>>2] = 370546198;
                           }
                           $759 = HEAP32[189968>>2]|0;
                           $760 = ($759|0)==(0);
                           if (!($760)) {
                            $761 = HEAP32[133208>>2]|0;
                            $762 = HEAP16[132336>>1]|0;
                            $763 = $762&65535;
                            $764 = Math_imul($763, $761)|0;
                            $765 = $764&65535;
                            HEAP16[132336>>1] = $765;
                           }
                           $766 = HEAP32[584>>2]|0;
                           $767 = ($766|0)==(9);
                           if (!($767)) {
                            label = 514;
                            break L226;
                           }
                           $768 = HEAP16[592>>1]|0;
                           $769 = $768&65535;
                           $770 = HEAP16[600>>1]|0;
                           $771 = $770&65535;
                           $c$3128 = 0;
                           while(1) {
                            $772 = (($769) + ($c$3128))|0;
                            $773 = (($772|0) % 6)&-1;
                            $774 = (($c$3128|0) / 6)&-1;
                            $775 = (($771) + ($774))|0;
                            $776 = (($775|0) % 6)&-1;
                            $777 = ((457872 + (($776*6)|0)|0) + ($773)|0);
                            $778 = HEAP8[$777>>0]|0;
                            $779 = (608 + ($c$3128)|0);
                            HEAP8[$779>>0] = $778;
                            $780 = (($c$3128) + 1)|0;
                            $exitcond = ($780|0)==(36);
                            if ($exitcond) {
                             label = 514;
                             break L226;
                            } else {
                             $c$3128 = $780;
                            }
                           }
                          }
                          $781 = (_strcmp(133688,490944)|0);
                          $782 = ($781|0)==(0);
                          if ($782) {
                           HEAP16[132080>>1] = 1712;
                           HEAP16[132088>>1] = 2312;
                           HEAP16[132336>>1] = 2336;
                          } else {
                           $783 = (_strcmp(133688,490952)|0);
                           $784 = ($783|0)==(0);
                           L369: do {
                            if ($784) {
                             label = 319;
                            } else {
                             $785 = (_strcasecmp(133624,489896)|0);
                             $786 = ($785|0)==(0);
                             if ($786) {
                              $787 = HEAP32[189952>>2]|0;
                              $788 = ($787|0)==(0|0);
                              if ($788) {
                               HEAP32[132368>>2] = 4095;
                               HEAP32[189952>>2] = 18;
                              }
                              $789 = (_strncmp(133688,490960,8)|0);
                              $790 = ($789|0)==(0);
                              if ($790) {
                               $791 = (_strcmp(133688,457440)|0);
                               $792 = ($791|0)==(0);
                               if ($792) {
                                HEAP32[584>>2] = 1229539657;
                               }
                               HEAP32[133264>>2] = 12;
                               HEAP32[189952>>2] = 9;
                               label = 514;
                               break L226;
                              }
                              $793 = (_strncmp(133688,490976,5)|0);
                              $794 = ($793|0)==(0);
                              do {
                               if (!($794)) {
                                $795 = (_strncmp(133688,490984,5)|0);
                                $796 = ($795|0)==(0);
                                if ($796) {
                                 break;
                                }
                                $797 = (_strncmp(133688,490992,6)|0);
                                $798 = ($797|0)==(0);
                                if ($798) {
                                 break;
                                }
                                $803 = (_strncmp(133688,491016,8)|0);
                                $804 = ($803|0)==(0);
                                if (!($804)) {
                                 label = 514;
                                 break L226;
                                }
                                $805 = HEAP8[((133688 + 8|0))>>0]|0;
                                if ((($805<<24>>24) == 52)) {
                                 HEAP16[132080>>1] = 1716;
                                 HEAP16[132088>>1] = 2304;
                                 break L369;
                                } else if ((($805<<24>>24) == 53)) {
                                 label = 319;
                                 break L369;
                                } else if ((($805<<24>>24) == 54)) {
                                 HEAP16[132080>>1] = 2136;
                                 HEAP16[132088>>1] = 2848;
                                 break L369;
                                } else {
                                 break L369;
                                }
                               }
                              } while(0);
                              $799 = HEAP8[133688>>0]|0;
                              $800 = ($799<<24>>24)==(77);
                              $801 = $800&1;
                              $$sum34 = $801 | 6;
                              $802 = (133688 + ($$sum34)|0);
                              HEAP32[$vararg_buffer>>2] = $802;
                              (_sprintf(((133688 + 20|0)),491000,$vararg_buffer)|0);
                              _adobe_coeff(133624,((133688 + 20|0)));
                              HEAP32[189952>>2] = 9;
                              label = 514;
                              break L226;
                             }
                             $808 = (_strcmp(133688,491032)|0);
                             $809 = ($808|0)==(0);
                             if ($809) {
                              HEAP32[189952>>2] = 18;
                              HEAP32[848>>2] = -1;
                              label = 514;
                              break L226;
                             }
                             $810 = (_strcmp(133688,491040)|0);
                             $811 = ($810|0)==(0);
                             if ($811) {
                              $812 = HEAP16[132080>>1]|0;
                              $813 = $812&65535;
                              $814 = (($813) + 65534)|0;
                              $815 = $814&65535;
                              HEAP16[132080>>1] = $815;
                              label = 514;
                              break L226;
                             }
                             $816 = (_strcmp(133624,489952)|0);
                             $817 = ($816|0)==(0);
                             $818 = ($646<<16>>16)==(4704);
                             $or$cond47 = $818 & $817;
                             if ($or$cond47) {
                              HEAP16[600>>1] = 8;
                              $819 = HEAP16[132080>>1]|0;
                              $820 = $819&65535;
                              $821 = (($820) + 65528)|0;
                              $822 = $821&65535;
                              HEAP16[132080>>1] = $822;
                              HEAP16[592>>1] = 8;
                              $823 = HEAP16[132088>>1]|0;
                              $824 = $823&65535;
                              $825 = (($824) + 65520)|0;
                              $826 = $825&65535;
                              HEAP16[132088>>1] = $826;
                              HEAP32[133096>>2] = 32;
                              label = 514;
                              break L226;
                             }
                             $827 = HEAP16[133064>>1]|0;
                             $828 = ($827<<16>>16)==(3714);
                             $or$cond49 = $817 & $828;
                             if ($or$cond49) {
                              HEAP16[600>>1] = 18;
                              $829 = HEAP16[132080>>1]|0;
                              $830 = $829&65535;
                              $831 = (($830) + 65518)|0;
                              $832 = $831&65535;
                              HEAP16[132080>>1] = $832;
                              $833 = HEAP16[132336>>1]|0;
                              $834 = $833&65535;
                              HEAP16[132088>>1] = 5536;
                              $835 = (($834) + 60000)|0;
                              $836 = $835&65535;
                              HEAP16[592>>1] = $836;
                              $837 = ($833<<16>>16)==(5600);
                              if (!($837)) {
                               HEAP16[600>>1] = 0;
                               HEAP16[592>>1] = 0;
                              }
                              HEAP32[584>>2] = 1633771873;
                              HEAP32[132272>>2] = 3;
                              label = 514;
                              break L226;
                             }
                             $838 = ($646<<16>>16)==(5632);
                             $or$cond51 = $838 & $817;
                             if ($or$cond51) {
                              HEAP16[928>>1] = 18761;
                              HEAP16[132080>>1] = 3694;
                              HEAP16[600>>1] = 2;
                              $839 = HEAP32[133264>>2]|0;
                              $840 = (($839) + 32)|0;
                              $841 = $840&65535;
                              HEAP16[592>>1] = $841;
                              $842 = (5542 - ($839))|0;
                              $843 = $842&65535;
                              HEAP16[132088>>1] = $843;
                              $844 = HEAP32[133264>>2]|0;
                              $845 = ($844|0)==(12);
                              if (!($845)) {
                               label = 514;
                               break L226;
                              }
                              HEAP32[133096>>2] = 80;
                              label = 514;
                              break L226;
                             }
                             $846 = ($646<<16>>16)==(5664);
                             $or$cond53 = $846 & $817;
                             if ($or$cond53) {
                              HEAP16[600>>1] = 17;
                              $847 = HEAP16[132080>>1]|0;
                              $848 = $847&65535;
                              $849 = (($848) + 65519)|0;
                              $850 = $849&65535;
                              HEAP16[132080>>1] = $850;
                              HEAP16[592>>1] = 96;
                              HEAP16[132088>>1] = 5544;
                              HEAP32[584>>2] = 1229539657;
                              label = 514;
                              break L226;
                             }
                             $851 = ($646<<16>>16)==(6496);
                             $or$cond55 = $851 & $817;
                             if ($or$cond55) {
                              HEAP32[584>>2] = 1633771873;
                              $852 = HEAP32[133264>>2]|0;
                              $853 = (($852) + -7)|0;
                              $854 = 1 << $853;
                              HEAP32[132360>>2] = $854;
                              label = 514;
                              break L226;
                             }
                             $855 = (_strcmp(133688,491048)|0);
                             $856 = ($855|0)==(0);
                             if ($856) {
                              HEAP16[928>>1] = 18761;
                              $857 = HEAP16[132080>>1]|0;
                              $858 = $857&65535;
                              $859 = (($858) + 65516)|0;
                              $860 = $859&65535;
                              HEAP16[132080>>1] = $860;
                              HEAP16[600>>1] = 2;
                              $861 = HEAP16[132088>>1]|0;
                              $862 = $861&65535;
                              $863 = (($862) + 65530)|0;
                              $864 = $863&65535;
                              HEAP16[132088>>1] = $864;
                              $865 = $863 & 65535;
                              $866 = ($865>>>0)>(3682);
                              if (!($866)) {
                               label = 514;
                               break L226;
                              }
                              $867 = HEAP16[132080>>1]|0;
                              $868 = $867&65535;
                              $869 = (($868) + 65526)|0;
                              $870 = $869&65535;
                              HEAP16[132080>>1] = $870;
                              $871 = HEAP16[132088>>1]|0;
                              $872 = $871&65535;
                              $873 = (($872) + 65490)|0;
                              $874 = $873&65535;
                              HEAP16[132088>>1] = $874;
                              HEAP16[600>>1] = 8;
                              label = 514;
                              break L226;
                             }
                             $875 = (_strcmp(133688,491056)|0);
                             $876 = ($875|0)==(0);
                             if ($876) {
                              HEAP16[928>>1] = 18761;
                              $877 = HEAP16[132080>>1]|0;
                              $878 = $877&65535;
                              $879 = (($878) + 65533)|0;
                              $880 = $879&65535;
                              HEAP16[132080>>1] = $880;
                              HEAP16[600>>1] = 2;
                              $881 = HEAP16[132088>>1]|0;
                              $882 = $881&65535;
                              $883 = (($882) + 65526)|0;
                              $884 = $883&65535;
                              HEAP16[132088>>1] = $884;
                              $885 = $883 & 65535;
                              $886 = ($885>>>0)>(3718);
                              if (!($886)) {
                               label = 514;
                               break L226;
                              }
                              $887 = HEAP16[132080>>1]|0;
                              $888 = $887&65535;
                              $889 = (($888) + 65508)|0;
                              $890 = $889&65535;
                              HEAP16[132080>>1] = $890;
                              $891 = HEAP16[132088>>1]|0;
                              $892 = $891&65535;
                              $893 = (($892) + 65480)|0;
                              $894 = $893&65535;
                              HEAP16[132088>>1] = $894;
                              HEAP16[600>>1] = 8;
                              label = 514;
                              break L226;
                             }
                             $895 = (_strstr(133688,491064)|0);
                             $896 = ($895|0)==(0|0);
                             if (!($896)) {
                              ;HEAP8[133688+0>>0]=HEAP8[491064+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[491064+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[491064+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[491064+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[491064+4>>0]|0;HEAP8[133688+5>>0]=HEAP8[491064+5>>0]|0;
                              label = 514;
                              break L226;
                             }
                             $897 = (_strcmp(133688,491072)|0);
                             $898 = ($897|0)==(0);
                             if ($898) {
                              HEAP16[132080>>1] = 3045;
                              HEAP16[132088>>1] = 4070;
                              HEAP16[600>>1] = 3;
                              HEAP16[928>>1] = 18761;
                              HEAP32[584>>2] = 1229539657;
                              HEAP32[189952>>2] = 18;
                              label = 514;
                              break L226;
                             }
                             $899 = (_strcmp(133688,491080)|0);
                             $900 = ($899|0)==(0);
                             if ($900) {
                              HEAP32[132360>>2] = 16;
                              label = 514;
                              break L226;
                             }
                             $901 = (_strcmp(133688,491096)|0);
                             $902 = ($901|0)==(0);
                             if ($902) {
                              $903 = $827&65535;
                              HEAP16[600>>1] = 2;
                              $904 = (($903) + 65534)|0;
                              $905 = $904&65535;
                              HEAP16[132080>>1] = $905;
                              label = 514;
                              break L226;
                             }
                             $906 = (_strcmp(133688,491104)|0);
                             $907 = ($906|0)==(0);
                             if ($907) {
                              _gamma_curve(0.45000000000000001,4.5,1,255);
                              label = 514;
                              break L226;
                             }
                             $908 = (_strcmp(133624,457360)|0);
                             $909 = ($908|0)==(0);
                             if ($909) {
                              $910 = HEAP32[189952>>2]|0;
                              $911 = ($910|0)==(4|0);
                              if ($911) {
                               HEAP32[189952>>2] = 47;
                              }
                              $912 = HEAP16[132336>>1]|0;
                              switch ($912<<16>>16) {
                              case 7262:  {
                               HEAP16[132080>>1] = 5444;
                               HEAP16[132088>>1] = 7248;
                               HEAP16[600>>1] = 4;
                               HEAP16[592>>1] = 7;
                               HEAP32[584>>2] = 1633771873;
                               break;
                              }
                              case 8282: case 7410:  {
                               $913 = HEAP16[132080>>1]|0;
                               $914 = $913&65535;
                               $915 = (($914) + 65452)|0;
                               $916 = $915&65535;
                               HEAP16[132080>>1] = $916;
                               $917 = HEAP16[132088>>1]|0;
                               $918 = $917&65535;
                               $919 = (($918) + 65454)|0;
                               $920 = $919&65535;
                               HEAP16[132088>>1] = $920;
                               HEAP16[600>>1] = 4;
                               HEAP16[592>>1] = 41;
                               HEAP32[584>>2] = 1633771873;
                               break;
                              }
                              case 9044:  {
                               HEAP16[132080>>1] = 6716;
                               HEAP16[132088>>1] = 8964;
                               HEAP16[600>>1] = 8;
                               HEAP16[592>>1] = 40;
                               HEAP32[133096>>2] = 256;
                               $921 = HEAP32[132360>>2]|0;
                               $922 = (($921) + 256)|0;
                               HEAP32[132360>>2] = $922;
                               HEAP32[132368>>2] = 33025;
                               break;
                              }
                              case 4090:  {
                               ;HEAP8[133688+0>>0]=HEAP8[491112+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[491112+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[491112+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[491112+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[491112+4>>0]|0;
                               HEAP16[600>>1] = 6;
                               $923 = HEAP16[132080>>1]|0;
                               $924 = $923&65535;
                               $925 = (($924) + 65530)|0;
                               $926 = $925&65535;
                               HEAP16[132080>>1] = $926;
                               HEAP16[592>>1] = 3;
                               $927 = HEAP16[132088>>1]|0;
                               $928 = $927&65535;
                               $929 = (($928) + 65526)|0;
                               $930 = $929&65535;
                               HEAP16[132088>>1] = $930;
                               HEAP32[584>>2] = 1633771873;
                               break;
                              }
                              default: {
                              }
                              }
                              $931 = HEAP32[133216>>2]|0;
                              $932 = ($931>>>0)>(1);
                              if (!($932)) {
                               label = 514;
                               break L226;
                              }
                              $933 = (($931) + 1)|0;
                              HEAP32[133208>>2] = $933;
                              $934 = HEAP32[8>>2]|0;
                              $935 = HEAP32[136>>2]|0;
                              $936 = $935 | $934;
                              $937 = ($936|0)==(0);
                              if (!($937)) {
                               label = 514;
                               break L226;
                              }
                              HEAP32[584>>2] = 0;
                              label = 514;
                              break L226;
                             }
                             $938 = (_strcmp(133624,481016)|0);
                             $939 = ($938|0)==(0);
                             if ($939) {
                              $940 = HEAP32[189952>>2]|0;
                              $941 = ($940|0)==(0|0);
                              if ($941) {
                               HEAP32[189952>>2] = 18;
                              }
                              $942 = HEAP32[133208>>2]|0;
                              $943 = ($942>>>0)<(2);
                              $944 = HEAP32[8>>2]|0;
                              $945 = HEAP32[136>>2]|0;
                              $946 = $945 | $944;
                              $947 = ($946|0)!=(0);
                              $948 = $943 | $947;
                              if (!($948)) {
                               HEAP32[584>>2] = 0;
                              }
                              HEAP32[132368>>2] = 16383;
                              label = 514;
                              break L226;
                             }
                             $949 = (_strcmp(133624,457296)|0);
                             $950 = ($949|0)==(0);
                             if ($950) {
                              HEAP32[132368>>2] = 16383;
                              $951 = HEAP32[864>>2]|0;
                              $952 = HEAP32[133280>>2]|0;
                              (_fseek(($951|0),($952|0),0)|0);
                              $953 = (_ljpeg_start($jh,1)|0);
                              $954 = ($953|0)==(0);
                              do {
                               if (!($954)) {
                                $955 = HEAP32[$jh>>2]|0;
                                $956 = ($955|0)==(15);
                                if (!($956)) {
                                 break;
                                }
                                HEAP32[132368>>2] = 8191;
                               }
                              } while(0);
                              $957 = HEAP32[133216>>2]|0;
                              $958 = ($957>>>0)>(1);
                              if ($958) {
                               HEAP32[584>>2] = 0;
                               $$pr90 = HEAP32[133216>>2]|0;
                               $959 = ($$pr90>>>0)>(1);
                               if ($959) {
                                label = 380;
                               } else {
                                label = 379;
                               }
                              } else {
                               label = 379;
                              }
                              if ((label|0) == 379) {
                               $960 = HEAP32[133224>>2]|0;
                               $961 = HEAP16[133064>>1]|0;
                               $962 = $961&65535;
                               $963 = ($960>>>0)<($962>>>0);
                               if ($963) {
                                label = 380;
                               }
                              }
                              if ((label|0) == 380) {
                               HEAP32[189952>>2] = 48;
                               $964 = HEAP32[133232>>2]|0;
                               $965 = $964&65535;
                               HEAP16[132336>>1] = $965;
                              }
                              $966 = HEAP16[132088>>1]|0;
                              $967 = HEAP16[132080>>1]|0;
                              $968 = $967 | $966;
                              $969 = ($968<<16>>16)==(2048);
                              if ($969) {
                               $970 = HEAP32[133216>>2]|0;
                               $971 = ($970|0)==(1);
                               if ($971) {
                                HEAP32[584>>2] = 1;
                                ;HEAP8[457376+0>>0]=HEAP8[491120+0>>0]|0;HEAP8[457376+1>>0]=HEAP8[491120+1>>0]|0;HEAP8[457376+2>>0]=HEAP8[491120+2>>0]|0;HEAP8[457376+3>>0]=HEAP8[491120+3>>0]|0;HEAP8[457376+4>>0]=HEAP8[491120+4>>0]|0;
                                dest=133688+0|0; src=491128+0|0; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
                                HEAP16[600>>1] = 8;
                                HEAP16[592>>1] = 18;
                                HEAP16[132080>>1] = 2032;
                                HEAP16[132088>>1] = 2016;
                                label = 514;
                                break L226;
                               } else {
                                ;HEAP8[133688+0>>0]=HEAP8[455824+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[455824+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[455824+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[455824+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[455824+4>>0]|0;
                                HEAP16[600>>1] = 10;
                                HEAP16[592>>1] = 16;
                                HEAP16[132080>>1] = 2028;
                                HEAP16[132088>>1] = 2022;
                                label = 514;
                                break L226;
                               }
                              }
                              $972 = $966&65535;
                              $973 = $967&65535;
                              $974 = (($973) + ($972))|0;
                              $975 = ($974|0)==(5204);
                              if (!($975)) {
                               if ((($966<<16>>16) == 2116)) {
                                $990 = 133688;
                                $991 = $990;
                                HEAP8[$991>>0]=1701601622&255;HEAP8[$991+1>>0]=(1701601622>>8)&255;HEAP8[$991+2>>0]=(1701601622>>16)&255;HEAP8[$991+3>>0]=1701601622>>24;
                                $992 = (($990) + 4)|0;
                                $993 = $992;
                                HEAP8[$993>>0]=3547247&255;HEAP8[$993+1>>0]=(3547247>>8)&255;HEAP8[$993+2>>0]=(3547247>>16)&255;HEAP8[$993+3>>0]=3547247>>24;
                                HEAP16[600>>1] = 30;
                                $994 = HEAP16[132080>>1]|0;
                                $995 = $994&65535;
                                $996 = (($995) + 65476)|0;
                                $997 = $996&65535;
                                HEAP16[132080>>1] = $997;
                                HEAP16[592>>1] = 55;
                                $998 = HEAP16[132088>>1]|0;
                                $999 = $998&65535;
                                $1000 = (($999) + 65426)|0;
                                $1001 = $1000&65535;
                                HEAP16[132088>>1] = $1001;
                                HEAP32[584>>2] = 1229539657;
                                label = 514;
                                break L226;
                               } else if ((($966<<16>>16) == 3171)) {
                                $1002 = 133688;
                                $1003 = $1002;
                                HEAP8[$1003>>0]=1701601622&255;HEAP8[$1003+1>>0]=(1701601622>>8)&255;HEAP8[$1003+2>>0]=(1701601622>>16)&255;HEAP8[$1003+3>>0]=1701601622>>24;
                                $1004 = (($1002) + 4)|0;
                                $1005 = $1004;
                                HEAP8[$1005>>0]=3547247&255;HEAP8[$1005+1>>0]=(3547247>>8)&255;HEAP8[$1005+2>>0]=(3547247>>16)&255;HEAP8[$1005+3>>0]=3547247>>24;
                                HEAP16[600>>1] = 24;
                                $1006 = HEAP16[132080>>1]|0;
                                $1007 = $1006&65535;
                                $1008 = (($1007) + 65488)|0;
                                $1009 = $1008&65535;
                                HEAP16[132080>>1] = $1009;
                                HEAP16[592>>1] = 24;
                                $1010 = HEAP16[132088>>1]|0;
                                $1011 = $1010&65535;
                                $1012 = (($1011) + 65488)|0;
                                $1013 = $1012&65535;
                                HEAP16[132088>>1] = $1013;
                                HEAP32[584>>2] = 370546198;
                                label = 514;
                                break L226;
                               } else {
                                label = 514;
                                break L226;
                               }
                              }
                              $976 = HEAP8[133688>>0]|0;
                              $977 = ($976<<24>>24)==(0);
                              if ($977) {
                               $978 = 133688;
                               $979 = $978;
                               HEAP8[$979>>0]=1953390915&255;HEAP8[$979+1>>0]=(1953390915>>8)&255;HEAP8[$979+2>>0]=(1953390915>>16)&255;HEAP8[$979+3>>0]=1953390915>>24;
                               $980 = (($978) + 4)|0;
                               $981 = $980;
                               HEAP8[$981>>0]=6648417&255;HEAP8[$981+1>>0]=(6648417>>8)&255;HEAP8[$981+2>>0]=(6648417>>16)&255;HEAP8[$981+3>>0]=6648417>>24;
                              }
                              $982 = HEAP16[132088>>1]|0;
                              $983 = HEAP16[132080>>1]|0;
                              $984 = ($982&65535)>($983&65535);
                              if ($984) {
                               HEAP16[600>>1] = 6;
                               HEAP16[592>>1] = 32;
                               HEAP16[132080>>1] = 2048;
                               HEAP16[132088>>1] = 3072;
                               $storemerge = 1633771873;
                              } else {
                               HEAP16[592>>1] = 6;
                               HEAP16[600>>1] = 32;
                               HEAP16[132088>>1] = 2048;
                               HEAP16[132080>>1] = 3072;
                               $storemerge = 370546198;
                              }
                              HEAP32[584>>2] = $storemerge;
                              $985 = +HEAPF32[133480>>2];
                              $986 = $985 == 0.0;
                              $987 = HEAP8[133688>>0]|0;
                              $988 = ($987<<24>>24)==(86);
                              $or$cond57 = $986 | $988;
                              if ($or$cond57) {
                               HEAP32[584>>2] = 0;
                               label = 514;
                               break L226;
                              } else {
                               $989 = HEAP32[133216>>2]|0;
                               HEAP32[133208>>2] = $989;
                               label = 514;
                               break L226;
                              }
                             }
                             $1014 = (_strcmp(133624,489928)|0);
                             $1015 = ($1014|0)==(0);
                             do {
                              if (!($1015)) {
                               $1016 = (_strcmp(133624,454648)|0);
                               $1017 = ($1016|0)==(0);
                               if ($1017) {
                                break;
                               }
                               $1083 = (_strcmp(133688,491152)|0);
                               $1084 = ($1083|0)==(0);
                               if ($1084) {
                                HEAP16[132080>>1] = 1718;
                                HEAP16[132088>>1] = 2304;
                                HEAP32[584>>2] = 370546198;
                                HEAP32[189952>>2] = 9;
                                HEAP32[133096>>2] = 30;
                                label = 514;
                                break L226;
                               }
                               $1085 = (_strcmp(133624,489936)|0);
                               $1086 = ($1085|0)==(0);
                               if ($1086) {
                                $1087 = HEAP16[132080>>1]|0;
                                $1088 = $1087&65535;
                                $1089 = $1088 & 1;
                                $1090 = (($1089) + ($1088))|0;
                                $1091 = $1090&65535;
                                HEAP16[132080>>1] = $1091;
                                $1092 = HEAP32[455480>>2]|0;
                                $1093 = ($1092|0)==(0);
                                if (!($1093)) {
                                 HEAP32[584>>2] = $1092;
                                }
                                $1094 = HEAP16[132088>>1]|0;
                                do {
                                 if ((($1094<<16>>16) == 4100)) {
                                  $1095 = $1094&65535;
                                  $1096 = (($1095) + 65532)|0;
                                  $1097 = $1096&65535;
                                  HEAP16[132088>>1] = $1097;
                                 } else if ((($1094<<16>>16) == 4080)) {
                                  $1098 = $1094&65535;
                                  $1099 = (($1098) + 65512)|0;
                                  $1100 = $1099&65535;
                                  HEAP16[132088>>1] = $1100;
                                 } else {
                                  $$pr97$pr = HEAP16[132088>>1]|0;
                                  $1101 = ($$pr97$pr<<16>>16)==(9280);
                                  if (!($1101)) {
                                   break;
                                  }
                                  $1102 = $$pr97$pr&65535;
                                  $1103 = (($1102) + 65530)|0;
                                  $1104 = $1103&65535;
                                  HEAP16[132088>>1] = $1104;
                                  $1105 = HEAP16[132080>>1]|0;
                                  $1106 = $1105&65535;
                                  $1107 = (($1106) + 65530)|0;
                                  $1108 = $1107&65535;
                                  HEAP16[132080>>1] = $1108;
                                 }
                                } while(0);
                                $1109 = HEAP32[189952>>2]|0;
                                $1110 = ($1109|0)==(18|0);
                                if ($1110) {
                                 HEAP32[133096>>2] = 4;
                                }
                                HEAP32[133264>>2] = 12;
                                $1111 = (_strcmp(133688,491160)|0);
                                $1112 = ($1111|0)==(0);
                                do {
                                 if (!($1112)) {
                                  $1113 = (_strcmp(133688,491168)|0);
                                  $1114 = ($1113|0)==(0);
                                  if ($1114) {
                                   break;
                                  }
                                  $1121 = (_strcmp(133688,491176)|0);
                                  $1122 = ($1121|0)==(0);
                                  if ($1122) {
                                   $1123 = HEAP16[132088>>1]|0;
                                   $1124 = $1123&65535;
                                   $1125 = (($1124) + 65506)|0;
                                   $1126 = $1125&65535;
                                   HEAP16[132088>>1] = $1126;
                                   $1127 = HEAP32[189952>>2]|0;
                                   $1128 = ($1127|0)==(18|0);
                                   if (!($1128)) {
                                    label = 514;
                                    break L226;
                                   }
                                   HEAP32[132368>>2] = 3961;
                                   label = 514;
                                   break L226;
                                  } else {
                                   $1129 = (_strcmp(133688,491184)|0);
                                   $1130 = ($1129|0)==(0);
                                   if (!($1130)) {
                                    label = 514;
                                    break L226;
                                   }
                                   HEAP32[454040>>2] = 10721280;
                                   $1131 = (($9) + -10721280)|0;
                                   HEAP32[133768>>2] = $1131;
                                   HEAP16[133760>>1] = 480;
                                   HEAP16[133752>>1] = 640;
                                   label = 514;
                                   break L226;
                                  }
                                 }
                                } while(0);
                                $1115 = HEAP16[132088>>1]|0;
                                $1116 = $1115&65535;
                                $1117 = (($1116) + 65516)|0;
                                $1118 = $1117&65535;
                                HEAP16[132088>>1] = $1118;
                                $1119 = HEAP32[189952>>2]|0;
                                $1120 = ($1119|0)==(18|0);
                                if (!($1120)) {
                                 label = 514;
                                 break L226;
                                }
                                HEAP32[132368>>2] = 4035;
                                _memset((134176|0),0,8204)|0;
                                label = 514;
                                break L226;
                               }
                               $1132 = (_strcmp(133688,490032)|0);
                               $1133 = ($1132|0)==(0);
                               if ($1133) {
                                HEAP16[132080>>1] = 2047;
                                HEAP16[132088>>1] = 3072;
                                HEAP32[584>>2] = 1633771873;
                                HEAP32[133280>>2] = 6656;
                                HEAP32[189952>>2] = 9;
                                label = 514;
                                break L226;
                               }
                               $1134 = (_strcmp(133688,491192)|0);
                               $1135 = ($1134|0)==(0);
                               if ($1135) {
                                HEAP16[132088>>1] = 3288;
                                HEAP16[592>>1] = 5;
                                HEAP32[((189976 + 28|0))>>2] = -17;
                                HEAP32[133280>>2] = 862144;
                                HEAP32[189952>>2] = 6;
                                HEAP32[584>>2] = -1667457892;
                                HEAP32[132272>>2] = 4;
                                ;HEAP8[457376+0>>0]=HEAP8[491208+0>>0]|0;HEAP8[457376+1>>0]=HEAP8[491208+1>>0]|0;HEAP8[457376+2>>0]=HEAP8[491208+2>>0]|0;HEAP8[457376+3>>0]=HEAP8[491208+3>>0]|0;HEAP8[457376+4>>0]=HEAP8[491208+4>>0]|0;
                                label = 514;
                                break L226;
                               }
                               $1136 = (_strcmp(133688,491216)|0);
                               $1137 = ($1136|0)==(0);
                               if ($1137) {
                                HEAP16[132088>>1] = 3109;
                                HEAP16[592>>1] = 59;
                                HEAP32[((189976 + 4|0))>>2] = 9;
                                HEAP32[133280>>2] = 787392;
                                HEAP32[189952>>2] = 6;
                                label = 514;
                                break L226;
                               }
                               $1138 = (_strcmp(133624,489968)|0);
                               $1139 = ($1138|0)==(0);
                               $1140 = ($646<<16>>16)==(3984);
                               $or$cond60 = $1140 & $1139;
                               if ($or$cond60) {
                                HEAP16[132088>>1] = 3925;
                                HEAP16[928>>1] = 19789;
                                label = 514;
                                break L226;
                               }
                               $1141 = ($646<<16>>16)==(4288);
                               $or$cond62 = $1141 & $1139;
                               if ($or$cond62) {
                                $1142 = HEAP16[132088>>1]|0;
                                $1143 = $1142&65535;
                                $1144 = (($1143) + 65504)|0;
                                $1145 = $1144&65535;
                                HEAP16[132088>>1] = $1145;
                                label = 514;
                                break L226;
                               }
                               $1146 = ($646<<16>>16)==(4928);
                               $or$cond64 = $1146 & $1139;
                               if ($or$cond64) {
                                $1147 = HEAP16[132080>>1]|0;
                                $1148 = ($1147&65535)<(3280);
                                if (!($1148)) {
                                 label = 514;
                                 break L226;
                                }
                                $1149 = HEAP16[132088>>1]|0;
                                $1150 = $1149&65535;
                                $1151 = (($1150) + 65528)|0;
                                $1152 = $1151&65535;
                                HEAP16[132088>>1] = $1152;
                                label = 514;
                                break L226;
                               }
                               $1153 = ($646<<16>>16)==(5504);
                               $or$cond66 = $1153 & $1139;
                               if ($or$cond66) {
                                $1154 = HEAP16[132080>>1]|0;
                                $1155 = ($1154&65535)>(3664);
                                $1156 = $1155 ? 8 : 32;
                                $1157 = HEAP16[132088>>1]|0;
                                $1158 = $1157&65535;
                                $1159 = (($1158) - ($1156))|0;
                                $1160 = $1159&65535;
                                HEAP16[132088>>1] = $1160;
                                label = 514;
                                break L226;
                               }
                               $1161 = ($646<<16>>16)==(6048);
                               $or$cond68 = $1161 & $1139;
                               if ($or$cond68) {
                                $1162 = HEAP16[132088>>1]|0;
                                $1163 = $1162&65535;
                                $1164 = (($1163) + 65512)|0;
                                $1165 = $1164&65535;
                                HEAP16[132088>>1] = $1165;
                                $1166 = (_strstr(133688,491224)|0);
                                $1167 = ($1166|0)==(0|0);
                                if ($1167) {
                                 $1168 = (_strstr(133688,491232)|0);
                                 $1169 = ($1168|0)==(0|0);
                                 if ($1169) {
                                  label = 514;
                                  break L226;
                                 }
                                }
                                $1170 = HEAP16[132088>>1]|0;
                                $1171 = $1170&65535;
                                $1172 = (($1171) + 65530)|0;
                                $1173 = $1172&65535;
                                HEAP16[132088>>1] = $1173;
                                label = 514;
                                break L226;
                               }
                               $1174 = ($646<<16>>16)==(7392);
                               $or$cond70 = $1174 & $1139;
                               if ($or$cond70) {
                                $1175 = HEAP16[132088>>1]|0;
                                $1176 = $1175&65535;
                                $1177 = (($1176) + 65506)|0;
                                $1178 = $1177&65535;
                                HEAP16[132088>>1] = $1178;
                                label = 514;
                                break L226;
                               }
                               $1179 = (_strcmp(133688,457264)|0);
                               $1180 = ($1179|0)==(0);
                               if ($1180) {
                                $1181 = HEAP16[132088>>1]|0;
                                $1182 = ($1181<<16>>16)==(3880);
                                $1183 = HEAP16[132080>>1]|0;
                                if ($1182) {
                                 $1184 = (($1183) + -1)<<16>>16;
                                 HEAP16[132080>>1] = $1184;
                                 $1185 = HEAP16[132336>>1]|0;
                                 $1186 = (($1185) + 1)<<16>>16;
                                 HEAP16[132336>>1] = $1186;
                                 HEAP16[132088>>1] = $1186;
                                } else {
                                 $1187 = $1183&65535;
                                 $1188 = (($1187) + 65532)|0;
                                 $1189 = $1188&65535;
                                 HEAP16[132080>>1] = $1189;
                                 $1190 = HEAP16[132088>>1]|0;
                                 $1191 = $1190&65535;
                                 $1192 = (($1191) + 65532)|0;
                                 $1193 = $1192&65535;
                                 HEAP16[132088>>1] = $1193;
                                 HEAP16[928>>1] = 19789;
                                 HEAP32[133096>>2] = 2;
                                }
                                HEAP32[584>>2] = 1633771873;
                                label = 514;
                                break L226;
                               }
                               $1194 = (_strcmp(133688,491240)|0);
                               $1195 = ($1194|0)==(0);
                               if ($1195) {
                                $1196 = HEAP16[132080>>1]|0;
                                $1197 = $1196&65535;
                                $1198 = (($1197) + 65532)|0;
                                $1199 = $1198&65535;
                                HEAP16[132080>>1] = $1199;
                                label = 514;
                                break L226;
                               }
                               $1200 = (_strcmp(133688,491256)|0);
                               $1201 = ($1200|0)==(0);
                               if ($1201) {
                                HEAP16[600>>1] = 4;
                                $1202 = HEAP16[132080>>1]|0;
                                $1203 = $1202&65535;
                                $1204 = (($1203) + 65532)|0;
                                $1205 = $1204&65535;
                                HEAP16[132080>>1] = $1205;
                                HEAP16[592>>1] = 32;
                                $1206 = HEAP16[132088>>1]|0;
                                $1207 = $1206&65535;
                                $1208 = (($1207) + 65504)|0;
                                $1209 = $1208&65535;
                                HEAP16[132088>>1] = $1209;
                                _gamma_curve(0.0,7.0,1,255);
                                label = 514;
                                break L226;
                               }
                               $1210 = (_strcmp(133688,490416)|0);
                               $1211 = ($1210|0)==(0);
                               do {
                                if (!($1211)) {
                                 $1212 = (_strcmp(133688,491264)|0);
                                 $1213 = ($1212|0)==(0);
                                 if ($1213) {
                                  break;
                                 }
                                 $1214 = (_strcmp(133688,491272)|0);
                                 $1215 = ($1214|0)==(0);
                                 if ($1215) {
                                  break;
                                 }
                                 $1232 = (_strncasecmp(133688,491280,9)|0);
                                 $1233 = ($1232|0)==(0);
                                 if ($1233) {
                                  $1234 = HEAP32[133280>>2]|0;
                                  $1235 = ($1234|0)<(86016);
                                  $1236 = $1235 ? 86016 : 94208;
                                  HEAP32[133280>>2] = $1236;
                                  HEAP32[189952>>2] = 9;
                                  label = 514;
                                  break L226;
                                 }
                                 $1237 = (_strcasecmp(133624,457400)|0);
                                 $1238 = ($1237|0)==(0);
                                 if (!($1238)) {
                                  $1287 = (_strcmp(133688,490072)|0);
                                  $1288 = ($1287|0)==(0);
                                  if ($1288) {
                                   HEAP16[132080>>1] = 512;
                                   HEAP16[132088>>1] = 768;
                                   HEAP32[133280>>2] = 3632;
                                   HEAP32[189952>>2] = 39;
                                   HEAP32[584>>2] = 1633771873;
                                   _simple_coeff(2);
                                   label = 514;
                                   break L226;
                                  }
                                  $1289 = (_strncmp(133688,491408,9)|0);
                                  $1290 = ($1289|0)==(0);
                                  if ($1290) {
                                   $1291 = (($head) + 5|0);
                                   $1292 = HEAP8[$1291>>0]|0;
                                   $1293 = ($1292<<24>>24)==(0);
                                   if (!($1293)) {
                                    HEAP8[((133688 + 10|0))>>0]=3158066&255;HEAP8[((133688 + 10|0))+1>>0]=(3158066>>8)&255;HEAP8[((133688 + 10|0))+2>>0]=(3158066>>16)&255;HEAP8[((133688 + 10|0))+3>>0]=3158066>>24;
                                   }
                                   $1294 = HEAP32[864>>2]|0;
                                   (_fseek(($1294|0),544,0)|0);
                                   $1295 = (_get2()|0);
                                   HEAP16[132080>>1] = $1295;
                                   $1296 = (_get2()|0);
                                   HEAP16[132088>>1] = $1296;
                                   (_get4()|0);
                                   $1297 = (_get2()|0);
                                   $1298 = ($1297<<16>>16)==(30);
                                   $1299 = $1298 ? 738 : 736;
                                   HEAP32[133280>>2] = $1299;
                                   $1300 = HEAP16[132080>>1]|0;
                                   $1301 = HEAP16[132088>>1]|0;
                                   $1302 = ($1300&65535)>($1301&65535);
                                   if ($1302) {
                                    $1303 = $1300&65535;
                                    $1304 = $1301&65535;
                                    $1305 = (($1304) + ($1303))|0;
                                    $1306 = HEAP16[132088>>1]|0;
                                    $1307 = $1306&65535;
                                    $1308 = (($1305) - ($1307))|0;
                                    $1309 = $1308&65535;
                                    HEAP16[132088>>1] = $1309;
                                    HEAP16[132080>>1] = $1306;
                                    $1310 = HEAP32[864>>2]|0;
                                    $1311 = HEAP32[133280>>2]|0;
                                    $1312 = (($1311) + -6)|0;
                                    (_fseek(($1310|0),($1312|0),0)|0);
                                    $1313 = (_get2()|0);
                                    $1314 = $1313 & 3;
                                    $1315 = ($1314<<16>>16)!=(3);
                                    $1316 = $1315 ? 5 : 6;
                                    HEAP32[454784>>2] = $1316;
                                   }
                                   HEAP32[584>>2] = 1633771873;
                                   label = 514;
                                   break L226;
                                  } else {
                                   $1317 = (_strcmp(133624,457752)|0);
                                   $1318 = ($1317|0)!=(0);
                                   $1319 = HEAP32[189952>>2]|0;
                                   $1320 = ($1319|0)!=(0|0);
                                   $or$cond19 = $1318 | $1320;
                                   if ($or$cond19) {
                                    label = 514;
                                    break L226;
                                   }
                                   $1321 = $646&65535;
                                   if ((($1321|0) == 1316)) {
                                    HEAP16[132080>>1] = 1030;
                                    HEAP16[132088>>1] = 1300;
                                    HEAP16[600>>1] = 1;
                                    HEAP16[592>>1] = 6;
                                   } else if ((($1321|0) == 2568)) {
                                    HEAP16[132080>>1] = 1960;
                                    HEAP16[132088>>1] = 2560;
                                    HEAP16[600>>1] = 2;
                                    HEAP16[592>>1] = 8;
                                   }
                                   HEAP32[584>>2] = 370546198;
                                   HEAP32[189952>>2] = 53;
                                   label = 514;
                                   break L226;
                                  }
                                 }
                                 $1239 = HEAP32[584>>2]|0;
                                 $1240 = ($1239|0)==(-1);
                                 if ($1240) {
                                  HEAP32[584>>2] = 1633771873;
                                 }
                                 $1241 = (_strncmp(133688,491296,6)|0);
                                 $1242 = ($1241|0)==(0);
                                 do {
                                  if ($1242) {
                                   label = 477;
                                  } else {
                                   $1243 = (_strncmp(133688,491304,6)|0);
                                   $1244 = ($1243|0)==(0);
                                   if ($1244) {
                                    label = 477;
                                    break;
                                   }
                                   $1245 = (_strncmp(133688,491312,4)|0);
                                   $1246 = ($1245|0)==(0);
                                   if ($1246) {
                                    label = 477;
                                    break;
                                   }
                                   $1255 = (_strcmp(133688,491328)|0);
                                   $1256 = ($1255|0)==(0);
                                   if ($1256) {
                                    HEAP32[132360>>2] = 214;
                                    label = 483;
                                    break;
                                   } else {
                                    $1257 = (_strcmp(133688,491336)|0);
                                    $1258 = ($1257|0)==(0);
                                    if ($1258) {
                                     label = 483;
                                     break;
                                    } else {
                                     break;
                                    }
                                   }
                                  }
                                 } while(0);
                                 if ((label|0) == 477) {
                                  $1247 = HEAP16[132088>>1]|0;
                                  $1248 = $1247&65535;
                                  $1249 = (($1248) + 65532)|0;
                                  $1250 = $1249&65535;
                                  HEAP16[132088>>1] = $1250;
                                  HEAP16[592>>1] = 2;
                                  $1251 = HEAP8[((133688 + 6|0))>>0]|0;
                                  $1252 = ($1251<<24>>24)==(32);
                                  if ($1252) {
                                   HEAP8[((133688 + 6|0))>>0] = 0;
                                  }
                                  $1253 = (_strcmp(133688,491320)|0);
                                  $1254 = ($1253|0)==(0);
                                  if ($1254) {
                                   label = 483;
                                  }
                                 }
                                 if ((label|0) == 483) {
                                  HEAP32[132272>>2] = 1;
                                  HEAP32[584>>2] = 0;
                                 }
                                 $1259 = (_strcmp(((133688 + 4|0)),491344)|0);
                                 $1260 = ($1259|0)==(0);
                                 if ($1260) {
                                  ;HEAP8[457376+0>>0]=HEAP8[491352+0>>0]|0;HEAP8[457376+1>>0]=HEAP8[491352+1>>0]|0;HEAP8[457376+2>>0]=HEAP8[491352+2>>0]|0;HEAP8[457376+3>>0]=HEAP8[491352+3>>0]|0;HEAP8[457376+4>>0]=HEAP8[491352+4>>0]|0;
                                 }
                                 $1261 = (_strstr(133688,491360)|0);
                                 $1262 = ($1261|0)==(0|0);
                                 if (!($1262)) {
                                  ;HEAP8[133688+0>>0]=HEAP8[491360+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[491360+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[491360+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[491360+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[491360+4>>0]|0;
                                  HEAP32[133280>>2] = 15424;
                                 }
                                 $1263 = (_strncmp(133688,190104,3)|0);
                                 $1264 = ($1263|0)==(0);
                                 if ($1264) {
                                  HEAP16[132080>>1] = 242;
                                  HEAP16[133064>>1] = 244;
                                  $1265 = ($9|0)<(100000);
                                  if ($1265) {
                                   HEAP16[132336>>1] = 256;
                                   HEAP16[132088>>1] = 249;
                                   $1266 = HEAP16[132080>>1]|0;
                                   $1267 = $1266&65535;
                                   $1268 = (+($1267|0));
                                   $1269 = $1268 * 4.0;
                                   $1270 = $1269 / 747.0;
                                   $storemerge35 = $1270;
                                  } else {
                                   HEAP16[132336>>1] = 512;
                                   HEAP16[132088>>1] = 501;
                                   $1271 = HEAP16[132080>>1]|0;
                                   $1272 = $1271&65535;
                                   $1273 = (+($1272|0));
                                   $1274 = $1273 * 493.0;
                                   $1275 = $1274 / 186873.0;
                                   $storemerge35 = $1275;
                                  }
                                  HEAPF64[457384>>3] = $storemerge35;
                                  HEAP16[592>>1] = 1;
                                  HEAP16[600>>1] = 1;
                                  HEAP32[132272>>2] = 4;
                                  HEAP32[584>>2] = -1920103027;
                                  _simple_coeff(1);
                                  HEAPF32[((132048 + 4|0))>>2] = 1.1790000200271606;
                                  HEAPF32[((132048 + 8|0))>>2] = 1.2089999914169312;
                                  HEAPF32[((132048 + 12|0))>>2] = 1.0360000133514404;
                                  HEAP32[189952>>2] = 7;
                                  label = 514;
                                  break L226;
                                 }
                                 $1276 = (_strcmp(133688,491368)|0);
                                 $1277 = ($1276|0)==(0);
                                 if ($1277) {
                                  ;HEAP8[133688+0>>0]=HEAP8[491376+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[491376+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[491376+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[491376+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[491376+4>>0]|0;
                                  HEAP16[132080>>1] = 512;
                                  HEAP16[132088>>1] = 768;
                                  HEAP32[133280>>2] = 1152;
                                  HEAP32[189952>>2] = 39;
                                  label = 514;
                                  break L226;
                                 }
                                 $1278 = (_strstr(133688,491384)|0);
                                 $1279 = ($1278|0)==(0|0);
                                 if (!($1279)) {
                                  ;HEAP8[133688+0>>0]=HEAP8[491384+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[491384+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[491384+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[491384+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[491384+4>>0]|0;
                                  HEAP16[132080>>1] = 512;
                                  HEAP16[132088>>1] = 768;
                                  HEAP32[133280>>2] = 19712;
                                  HEAP32[189952>>2] = 39;
                                  label = 514;
                                  break L226;
                                 }
                                 $1280 = (_strstr(133688,491392)|0);
                                 $1281 = ($1280|0)==(0|0);
                                 if (!($1281)) {
                                  ;HEAP8[133688+0>>0]=HEAP8[491392+0>>0]|0;HEAP8[133688+1>>0]=HEAP8[491392+1>>0]|0;HEAP8[133688+2>>0]=HEAP8[491392+2>>0]|0;HEAP8[133688+3>>0]=HEAP8[491392+3>>0]|0;HEAP8[133688+4>>0]=HEAP8[491392+4>>0]|0;HEAP8[133688+5>>0]=HEAP8[491392+5>>0]|0;
                                  HEAP16[132080>>1] = 976;
                                  HEAP16[132088>>1] = 848;
                                  HEAPF64[457384>>3] = 1.5345911949685533;
                                  $1282 = HEAP32[133056>>2]|0;
                                  $1283 = ($1282|0)==(7);
                                  $1284 = $1283 ? 52 : 51;
                                  HEAP32[189952>>2] = $1284;
                                  label = 514;
                                  break L226;
                                 }
                                 $1285 = (_strcmp(133688,491400)|0);
                                 $1286 = ($1285|0)==(0);
                                 if (!($1286)) {
                                  label = 514;
                                  break L226;
                                 }
                                 HEAP16[133760>>1] = 128;
                                 HEAP16[133752>>1] = 192;
                                 HEAP32[454040>>2] = 6144;
                                 HEAP32[133840>>2] = 360;
                                 HEAP32[457424>>2] = 27;
                                 HEAP32[132360>>2] = 17;
                                 label = 514;
                                 break L226;
                                }
                               } while(0);
                               HEAP16[928>>1] = 18761;
                               $1216 = HEAP32[584>>2]|0;
                               $1217 = ($1216|0)!=(0);
                               $1218 = HEAP32[133280>>2]|0;
                               $1219 = ($1218|0)!=(0);
                               $or$cond17 = $1217 & $1219;
                               if ($or$cond17) {
                                $1220 = HEAP32[864>>2]|0;
                                $1221 = ($1218|0)<(4096);
                                $1222 = $1221 ? 168 : 5252;
                                (_fseek(($1220|0),($1222|0),0)|0);
                                _read_shorts(936,256);
                               } else {
                                _gamma_curve(0.0,3.875,1,255);
                               }
                               $1223 = HEAP32[584>>2]|0;
                               $1224 = ($1223|0)==(0);
                               if ($1224) {
                                $1225 = (_strcmp(133688,491264)|0);
                                $1226 = ($1225|0)!=(0);
                                $1227 = $1226 ? 50 : 49;
                                $1228 = $1227;
                               } else {
                                $1228 = 7;
                               }
                               HEAP32[189952>>2] = $1228;
                               $1229 = HEAP32[133264>>2]|0;
                               $1230 = ($1229>>>0)>(16);
                               $1231 = $1230&1;
                               HEAP32[133096>>2] = $1231;
                               HEAP32[133264>>2] = 8;
                               label = 514;
                               break L226;
                              }
                             } while(0);
                             $1018 = HEAP32[133280>>2]|0;
                             $1019 = (($9) - ($1018))|0;
                             $1020 = HEAP16[132336>>1]|0;
                             $1021 = $1020&65535;
                             $1022 = $1021 << 3;
                             $1023 = (($1022>>>0) / 7)&-1;
                             $1024 = (($1019|0) / ($1023|0))&-1;
                             $1025 = HEAP16[133064>>1]|0;
                             $1026 = $1025&65535;
                             $1027 = ($1024|0)==($1026|0);
                             do {
                              if ($1027) {
                               HEAP32[189952>>2] = 11;
                              } else {
                               $$pr93 = HEAP32[189952>>2]|0;
                               $1028 = ($$pr93|0)==(0|0);
                               if (!($1028)) {
                                break;
                               }
                               HEAP32[189952>>2] = 18;
                               HEAP32[133096>>2] = 4;
                              }
                             } while(0);
                             HEAP32[489976>>2] = 1;
                             $1029 = HEAP16[132080>>1]|0;
                             $1030 = $1029&65535;
                             $1031 = (($1030) + 12)|0;
                             $1032 = $1031&65535;
                             $1033 = $1031 & 65535;
                             $1034 = HEAP16[133064>>1]|0;
                             $1035 = $1034&65535;
                             $1036 = ($1033>>>0)>($1035>>>0);
                             $$58 = $1036 ? $1034 : $1032;
                             HEAP16[132080>>1] = $$58;
                             $1037 = HEAP16[132336>>1]|0;
                             $1038 = $1037&65535;
                             $1039 = HEAP16[133064>>1]|0;
                             $1040 = $1039&65535;
                             $i$8129 = 0;
                             while(1) {
                              $1041 = (481960 + (($i$8129*12)|0)|0);
                              $1042 = HEAP16[$1041>>1]|0;
                              $1043 = $1042 << 16 >> 16;
                              $1044 = ($1038|0)==($1043|0);
                              do {
                               if ($1044) {
                                $1045 = ((481960 + (($i$8129*12)|0)|0) + 2|0);
                                $1046 = HEAP16[$1045>>1]|0;
                                $1047 = $1046 << 16 >> 16;
                                $1048 = ($1040|0)==($1047|0);
                                if (!($1048)) {
                                 break;
                                }
                                $1049 = ((481960 + (($i$8129*12)|0)|0) + 4|0);
                                $1050 = HEAP16[$1049>>1]|0;
                                HEAP16[592>>1] = $1050;
                                $1051 = ((481960 + (($i$8129*12)|0)|0) + 6|0);
                                $1052 = HEAP16[$1051>>1]|0;
                                HEAP16[600>>1] = $1052;
                                $1053 = ((481960 + (($i$8129*12)|0)|0) + 8|0);
                                $1054 = HEAP16[$1053>>1]|0;
                                $1055 = $1054&65535;
                                $1056 = HEAP16[132088>>1]|0;
                                $1057 = $1056&65535;
                                $1058 = (($1057) + ($1055))|0;
                                $1059 = $1058&65535;
                                HEAP16[132088>>1] = $1059;
                                $1060 = ((481960 + (($i$8129*12)|0)|0) + 10|0);
                                $1061 = HEAP16[$1060>>1]|0;
                                $1062 = $1061&65535;
                                $1063 = HEAP16[132080>>1]|0;
                                $1064 = $1063&65535;
                                $1065 = (($1064) + ($1062))|0;
                                $1066 = $1065&65535;
                                HEAP16[132080>>1] = $1066;
                               }
                              } while(0);
                              $1067 = (($i$8129) + 1)|0;
                              $exitcond145 = ($1067|0)==(23);
                              if ($exitcond145) {
                               break;
                              } else {
                               $i$8129 = $1067;
                              }
                             }
                             $1068 = HEAP32[584>>2]|0;
                             $1069 = (($1068) + 3)|0;
                             $1070 = HEAP16[592>>1]|0;
                             $1071 = $1070&65535;
                             $1072 = $1071 & 1;
                             $1073 = $1072 ^ $1069;
                             $1074 = HEAP16[600>>1]|0;
                             $1075 = $1074&65535;
                             $1076 = $1075 << 1;
                             $1077 = $1073 ^ $1076;
                             $1078 = $1077 & 3;
                             $1079 = (491144 + ($1078)|0);
                             $1080 = HEAP8[$1079>>0]|0;
                             $1081 = $1080&255;
                             $1082 = Math_imul($1081, 16843009)|0;
                             HEAP32[584>>2] = $1082;
                             label = 514;
                             break L226;
                            }
                           } while(0);
                           if ((label|0) == 319) {
                            HEAP16[132080>>1] = 1956;
                            HEAP16[132088>>1] = 2607;
                            HEAP16[132336>>1] = 2624;
                           }
                           $806 = HEAP32[133280>>2]|0;
                           $807 = (($806) + 14)|0;
                           HEAP32[133280>>2] = $807;
                           HEAP32[584>>2] = 1633771873;
                          }
                          HEAP32[189952>>2] = 18;
                          HEAP32[132368>>2] = 991;
                          HEAP16[928>>1] = 19789;
                          label = 514;
                          break L226;
                         }
                        }
                       } while(0);
                       $605 = HEAP16[132088>>1]|0;
                       $606 = (($605) + -1)<<16>>16;
                       HEAP16[132088>>1] = $606;
                       label = 514;
                       break L226;
                      }
                     } while(0);
                     $595 = HEAP16[132088>>1]|0;
                     $596 = $595&65535;
                     $597 = (($596) + 65484)|0;
                     $598 = $597&65535;
                     HEAP16[132088>>1] = $598;
                     HEAP16[592>>1] = 2;
                     label = 514;
                     break L226;
                    }
                   } while(0);
                   $587 = HEAP16[132088>>1]|0;
                   $588 = $587&65535;
                   $589 = (($588) + 65490)|0;
                   $590 = $589&65535;
                   HEAP16[132088>>1] = $590;
                   label = 514;
                   break L226;
                  }
                 } while(0);
                 $577 = HEAP16[132088>>1]|0;
                 $578 = $577&65535;
                 $579 = (($578) + 65492)|0;
                 $580 = $579&65535;
                 HEAP16[132088>>1] = $580;
                 label = 514;
                 break L226;
                }
               } while(0);
               $567 = HEAP16[132088>>1]|0;
               $568 = $567&65535;
               $569 = (($568) + 65494)|0;
               $570 = $569&65535;
               HEAP16[132088>>1] = $570;
               label = 514;
               break L226;
              }
             } while(0);
             $553 = HEAP16[132088>>1]|0;
             $554 = $553&65535;
             $555 = (($554) + 65532)|0;
             $556 = $555&65535;
             HEAP16[132088>>1] = $556;
             HEAP16[592>>1] = 2;
             label = 514;
             break L226;
            }
           } while(0);
           $539 = HEAP16[132080>>1]|0;
           $540 = $539&65535;
           $541 = (($540) + 65533)|0;
           $542 = $541&65535;
           HEAP16[132080>>1] = $542;
           $543 = HEAP16[132088>>1]|0;
           $544 = $543&65535;
           $545 = (($544) + 65532)|0;
           $546 = $545&65535;
           HEAP16[132088>>1] = $546;
           label = 514;
           break L226;
          }
         } while(0);
         HEAP32[132272>>2] = 4;
         HEAP32[584>>2] = -1263225676;
         label = 514;
         break L226;
        }
       } while(0);
       if ((label|0) == 182) {
        HEAP16[132080>>1] = 773;
        HEAP16[132088>>1] = 960;
        HEAP16[132336>>1] = 992;
        HEAPF64[457384>>3] = 1.0893617021276596;
        HEAP32[584>>2] = 508436046;
       }
       HEAP32[132272>>2] = 4;
       HEAP32[133264>>2] = 10;
       HEAP32[189952>>2] = 9;
       HEAP32[133096>>2] = 40;
       label = 514;
      } else {
       $458 = HEAP16[132080>>1]|0;
       $459 = $458&65535;
       $460 = $459 << 1;
       $461 = HEAP16[132088>>1]|0;
       $462 = $461&65535;
       $463 = ($460>>>0)<($462>>>0);
       if ($463) {
        HEAPF64[457384>>3] = 0.5;
       }
       $464 = HEAP16[132080>>1]|0;
       $465 = HEAP16[132088>>1]|0;
       $466 = ($464&65535)>($465&65535);
       if ($466) {
        HEAPF64[457384>>3] = 2.0;
       }
       HEAP32[584>>2] = 0;
       _simple_coeff(0);
       label = 514;
      }
     } while(0);
     if ((label|0) == 514) {
      $$pr100 = HEAP8[133688>>0]|0;
      $1322 = ($$pr100<<24>>24)==(0);
      if ($1322) {
       label = 515;
      }
     }
     if ((label|0) == 515) {
      $1323 = HEAP16[132088>>1]|0;
      $1324 = $1323&65535;
      $1325 = HEAP16[132080>>1]|0;
      $1326 = $1325&65535;
      HEAP32[$vararg_buffer1>>2] = $1324;
      $vararg_ptr4 = (($vararg_buffer1) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $1326;
      (_sprintf(133688,491424,$vararg_buffer1)|0);
     }
     $1327 = HEAP32[584>>2]|0;
     $1328 = ($1327|0)==(-1);
     if ($1328) {
      HEAP32[584>>2] = -1802201964;
     }
     $1329 = HEAP32[454040>>2]|0;
     $1330 = ($1329|0)==(0);
     $1331 = HEAP16[133760>>1]|0;
     $1332 = ($1331<<16>>16)!=(0);
     $or$cond21 = $1330 | $1332;
     if ($or$cond21) {
      break;
     }
     $1333 = HEAP32[864>>2]|0;
     (_fseek(($1333|0),($1329|0),0)|0);
     $1334 = (_ljpeg_start($jh,1)|0);
     $1335 = ($1334|0)==(0);
     if ($1335) {
      break;
     }
     $1336 = (($jh) + 8|0);
     $1337 = HEAP32[$1336>>2]|0;
     $1338 = $1337&65535;
     HEAP16[133752>>1] = $1338;
     $1339 = (($jh) + 4|0);
     $1340 = HEAP32[$1339>>2]|0;
     $1341 = $1340&65535;
     HEAP16[133760>>1] = $1341;
    } else {
     $350 = HEAP32[584>>2]|0;
     $351 = ($350|0)==(-1);
     if ($351) {
      HEAP32[584>>2] = 0;
      $352 = HEAP32[133216>>2]|0;
      $355 = $352;
      label = 132;
     } else {
      $353 = ($350|0)==(0);
      $354 = HEAP32[133216>>2]|0;
      if ($353) {
       $355 = $354;
       label = 132;
      } else {
       HEAP32[133208>>2] = $354;
      }
     }
     if ((label|0) == 132) {
      HEAP32[132272>>2] = $355;
     }
     $356 = HEAP32[133056>>2]|0;
     if ((($356|0) == 1)) {
      HEAP32[189952>>2] = 43;
      break;
     } else if ((($356|0) == 7)) {
      HEAP32[189952>>2] = 44;
      break;
     } else if ((($356|0) == 34892)) {
      HEAP32[189952>>2] = 45;
      break;
     } else {
      HEAP32[189952>>2] = 0;
      break;
     }
    }
   } while(0);
   $1342 = HEAP32[192>>2]|0;
   $1343 = HEAP32[184>>2]|0;
   $1344 = ($1343|0)==(0);
   if ($1344) {
    $1345 = HEAP32[133072>>2]|0;
    $1346 = ($1345|0)!=(0);
    $1348 = $1346;
   } else {
    $1348 = 1;
   }
   $1347 = $1348&1;
   $1349 = $1347 & $1342;
   $1350 = ($1349|0)!=(0);
   $1351 = +HEAPF32[455384>>2];
   $1352 = $1351 > 0.125;
   $or$cond72 = $1352 & $1350;
   if ($or$cond72) {
    dest=132280+0|0; src=455384+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    HEAP32[132264>>2] = 0;
   } else {
    $$pr103 = HEAP32[132264>>2]|0;
    $1353 = ($$pr103|0)==(0);
    if (!($1353)) {
     _adobe_coeff(133624,133688);
    }
   }
   $1354 = HEAP32[189952>>2]|0;
   $1355 = ($1354|0)==(39|0);
   $1356 = HEAP32[132264>>2]|0;
   $1357 = ($1356|0)!=(0);
   $or$cond33 = $1355 & $1357;
   if ($or$cond33) {
    _adobe_coeff(490096,491432);
   }
   $1358 = HEAP16[189960>>1]|0;
   $1359 = ($1358<<16>>16)==(0);
   do {
    if ($1359) {
     $1379 = HEAP16[133064>>1]|0;
     $1380 = HEAP16[132080>>1]|0;
     $1381 = ($1379&65535)<($1380&65535);
     if ($1381) {
      HEAP16[133064>>1] = $1380;
     }
     $1382 = HEAP16[132336>>1]|0;
     $1383 = HEAP16[132088>>1]|0;
     $1384 = ($1382&65535)<($1383&65535);
     if (!($1384)) {
      break;
     }
     HEAP16[132336>>1] = $1383;
    } else {
     $1360 = HEAP16[132088>>1]|0;
     $1361 = $1360&65535;
     $1362 = HEAP32[189968>>2]|0;
     $1363 = ($1362|0)==(0);
     $1364 = $1363&1;
     $1365 = $1361 >>> $1364;
     $1366 = $1365&65535;
     HEAP16[189960>>1] = $1366;
     $1367 = $1365 & 1;
     $1368 = ($1367|0)==(0);
     if ($1368) {
      HEAP32[584>>2] = 1229539657;
     }
     $1369 = HEAP16[132080>>1]|0;
     $1370 = $1369&65535;
     $1371 = HEAP32[189968>>2]|0;
     $1372 = $1370 >>> $1371;
     $1373 = HEAP16[189960>>1]|0;
     $1374 = $1373&65535;
     $1375 = (($1374) + ($1372))|0;
     $1376 = $1375&65535;
     HEAP16[132088>>1] = $1376;
     $1377 = (($1375) + 65535)|0;
     $1378 = $1377&65535;
     HEAP16[132080>>1] = $1378;
     HEAPF64[457384>>3] = 1.0;
    }
   } while(0);
   $1385 = HEAP32[133264>>2]|0;
   $1386 = ($1385|0)==(0);
   if ($1386) {
    HEAP32[133264>>2] = 12;
   }
   $1387 = HEAP32[132368>>2]|0;
   $1388 = ($1387|0)==(0);
   if ($1388) {
    $1389 = HEAP32[133264>>2]|0;
    $1390 = 1 << $1389;
    $1391 = (($1390) + -1)|0;
    HEAP32[132368>>2] = $1391;
   }
   $1392 = HEAP32[189952>>2]|0;
   $1393 = ($1392|0)==(0|0);
   $1394 = HEAP16[132080>>1]|0;
   $1395 = ($1394&65535)<(22);
   $or$cond74 = $1393 | $1395;
   if ($or$cond74) {
    label = 543;
   } else {
    $1396 = HEAP16[132088>>1]|0;
    $1397 = ($1396&65535)<(22);
    $1398 = HEAP32[133264>>2]|0;
    $1399 = ($1398>>>0)>(16);
    $or$cond23 = $1397 | $1399;
    $1400 = HEAP32[133216>>2]|0;
    $1401 = ($1400>>>0)>(6);
    $or$cond25 = $or$cond23 | $1401;
    $1402 = HEAP32[132272>>2]|0;
    $1403 = ($1402>>>0)>(4);
    $or$cond27 = $or$cond25 | $1403;
    if ($or$cond27) {
     label = 543;
    }
   }
   if ((label|0) == 543) {
    HEAP32[133208>>2] = 0;
   }
   $1404 = HEAP32[189952>>2]|0;
   $1405 = ($1404|0)==(41|0);
   if ($1405) {
    $1406 = HEAP32[_stderr>>2]|0;
    $1407 = HEAP32[680>>2]|0;
    HEAP32[$vararg_buffer5>>2] = $1407;
    $vararg_ptr8 = (($vararg_buffer5) + 4|0);
    HEAP32[$vararg_ptr8>>2] = 491488;
    (_fprintf(($1406|0),(491448|0),($vararg_buffer5|0))|0);
    HEAP32[133208>>2] = 0;
   }
   $1408 = HEAP32[189952>>2]|0;
   $1409 = ($1408|0)==(52|0);
   $1410 = ($1408|0)==(45|0);
   $or$cond29 = $1409 | $1410;
   if ($or$cond29) {
    $1411 = HEAP32[_stderr>>2]|0;
    $1412 = HEAP32[680>>2]|0;
    HEAP32[$vararg_buffer9>>2] = $1412;
    $vararg_ptr12 = (($vararg_buffer9) + 4|0);
    HEAP32[$vararg_ptr12>>2] = 491504;
    (_fprintf(($1411|0),(491448|0),($vararg_buffer9|0))|0);
    HEAP32[133208>>2] = 0;
   }
   $1413 = HEAP8[457376>>0]|0;
   $1414 = ($1413<<24>>24)==(0);
   if ($1414) {
    $1415 = HEAP32[132272>>2]|0;
    $1416 = ($1415|0)==(3);
    $1417 = $1416 ? 491512 : 491520;
    ;HEAP8[457376+0>>0]=HEAP8[$1417+0>>0]|0;HEAP8[457376+1>>0]=HEAP8[$1417+1>>0]|0;HEAP8[457376+2>>0]=HEAP8[$1417+2>>0]|0;HEAP8[457376+3>>0]=HEAP8[$1417+3>>0]|0;HEAP8[457376+4>>0]=HEAP8[$1417+4>>0]|0;
   }
   $1418 = HEAP16[133064>>1]|0;
   $1419 = ($1418<<16>>16)==(0);
   if ($1419) {
    $1420 = HEAP16[132080>>1]|0;
    HEAP16[133064>>1] = $1420;
   }
   $1421 = HEAP16[132336>>1]|0;
   $1422 = ($1421<<16>>16)==(0);
   if ($1422) {
    $1423 = HEAP16[132088>>1]|0;
    HEAP16[132336>>1] = $1423;
   }
   $1424 = HEAP32[584>>2]|0;
   $1425 = ($1424>>>0)>(999);
   $1426 = HEAP32[132272>>2]|0;
   $1427 = ($1426|0)==(3);
   $or$cond31 = $1425 & $1427;
   if (!($or$cond31)) {
    break;
   }
   $1428 = $1424 >>> 2;
   $1429 = $1428 & 572662306;
   $1430 = $1424 << 2;
   $1431 = $1430 & -2004318072;
   $1432 = $1429 | $1431;
   $1433 = $1424 << 1;
   $1434 = $1432 & $1433;
   $1435 = $1434 | $1424;
   HEAP32[584>>2] = $1435;
  }
 } while(0);
 $1436 = HEAP32[454784>>2]|0;
 $1437 = ($1436|0)==(-1);
 if (!($1437)) {
  STACKTOP = sp;return;
 }
 $1438 = HEAP32[457392>>2]|0;
 $1439 = ($1438|0)==(-1);
 $$117 = $1439 ? 0 : $1438;
 HEAP32[454784>>2] = $$117;
 STACKTOP = sp;return;
}
function _convert_to_rgb() {
 var $$11 = 0, $$11$1 = 0, $$11$2 = 0, $$lcssa = 0.0, $$lcssa76 = 0.0, $$lcssa77 = 0.0, $$off = 0, $$promoted = 0.0, $$promoted20 = 0.0, $$promoted22 = 0.0, $$sum = 0, $$sum10 = 0, $$sum10$1 = 0, $$sum10$2 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0.0, $1 = 0.0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0, $119 = 0.0;
 var $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0.0, $137 = 0.0;
 var $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0;
 var $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0;
 var $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0;
 var $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0.0, $3 = 0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0.0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0;
 var $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0.0;
 var $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$019 = 0;
 var $c$225 = 0, $col$027 = 0, $exitcond59 = 0, $exitcond59$1 = 0, $exitcond59$2 = 0, $exitcond62 = 0, $exitcond65 = 0, $i$049 = 0, $i$247 = 0, $i$343 = 0, $img$033 = 0, $img$1$lcssa = 0, $img$128 = 0, $inverse = 0, $j$138 = 0, $j$138$1 = 0, $j$138$2 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $out = 0, $out_cam = 0, $pbody = 0, $row$032 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer = sp + 72|0;
 $out = sp + 248|0;
 $out_cam = sp + 200|0;
 $inverse = sp;
 $pbody = sp + 76|0;
 dest=$pbody+0|0; src=492088+0|0; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = +HEAPF64[56>>3];
 $1 = +HEAPF64[((56 + 8|0))>>3];
 _gamma_curve($0,$1,0,0);
 dest=$out_cam+0|0; src=132280+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = HEAP32[132272>>2]|0;
 $3 = ($2|0)==(1);
 $4 = HEAP32[152>>2]|0;
 $5 = ($4|0)!=(0);
 $or$cond = $3 | $5;
 $6 = HEAP32[200>>2]|0;
 $$off = (($6) + -1)|0;
 $7 = ($$off>>>0)>(4);
 $8 = $or$cond | $7;
 $9 = $8&1;
 $10 = HEAP32[132264>>2]|0;
 $11 = $9 | $10;
 HEAP32[132264>>2] = $11;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = (_calloc(1024,1)|0);
  HEAP32[492248>>2] = $13;
  _merror($13,492256);
  $14 = HEAP32[492248>>2]|0;
  dest=$14+0|0; src=492008+0|0; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $15 = HEAP32[200>>2]|0;
  $16 = ($15|0)==(5);
  if ($16) {
   $17 = HEAP32[492248>>2]|0;
   $18 = (($17) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 16|0);
   HEAP32[$20>>2] = $19;
  }
  $21 = HEAP32[$pbody>>2]|0;
  $22 = ($21*12)|0;
  $23 = (($22) + 132)|0;
  $24 = HEAP32[492248>>2]|0;
  HEAP32[$24>>2] = $23;
  $25 = HEAP32[$pbody>>2]|0;
  $26 = ($25|0)==(0);
  if (!($26)) {
   $27 = HEAP32[492248>>2]|0;
   $i$049 = 0;
   while(1) {
    $28 = ($i$049|0)==(0);
    if ($28) {
     $34 = 1952807028;
    } else {
     $29 = ($i$049|0)>(1);
     $30 = $29 ? 1482250784 : 1684370275;
     $34 = $30;
    }
    $31 = HEAP32[$27>>2]|0;
    $32 = $31 >>> 2;
    $33 = (($27) + ($32<<2)|0);
    HEAP32[$33>>2] = $34;
    $35 = HEAP32[$27>>2]|0;
    $36 = ($i$049*3)|0;
    $37 = (($36) + 2)|0;
    $38 = (($pbody) + ($37<<2)|0);
    HEAP32[$38>>2] = $35;
    $39 = (($36) + 3)|0;
    $40 = (($pbody) + ($39<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 3)|0;
    $43 = $42 & -4;
    $44 = HEAP32[$27>>2]|0;
    $45 = (($44) + ($43))|0;
    HEAP32[$27>>2] = $45;
    $46 = (($i$049) + 1)|0;
    $47 = HEAP32[$pbody>>2]|0;
    $48 = ($46>>>0)<($47>>>0);
    if ($48) {
     $i$049 = $46;
    } else {
     break;
    }
   }
  }
  $49 = HEAP32[492248>>2]|0;
  $50 = (($49) + 128|0);
  dest=$50+0|0; src=$pbody+0|0; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $51 = HEAP32[200>>2]|0;
  $52 = (($51) + -1)|0;
  $53 = (491912 + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_strlen(($54|0))|0);
  $56 = (($55) + 1)|0;
  $57 = (($pbody) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $58 >>> 2;
  $60 = (($59) + 2)|0;
  $61 = HEAP32[492248>>2]|0;
  $62 = (($61) + ($60<<2)|0);
  HEAP32[$62>>2] = $56;
  $63 = HEAP32[492248>>2]|0;
  $64 = (($pbody) + 32|0);
  $65 = HEAP32[$64>>2]|0;
  $$sum = (($65) + 8)|0;
  $66 = (($63) + ($$sum)|0);
  dest=$66+0|0; src=492216+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $67 = +HEAPF64[((56 + 40|0))>>3];
  $68 = 256.0 / $67;
  $69 = $68 + 0.5;
  $70 = (~~(($69)));
  $71 = $70&65535;
  $72 = $71 << 16;
  $73 = HEAP32[492248>>2]|0;
  $74 = (($pbody) + 56|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($73) + ($75)|0);
  dest=$76+0|0; src=492232+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum10 = (($75) + 12)|0;
  $77 = (($73) + ($$sum10)|0);
  HEAP8[$77>>0]=$72&255;HEAP8[$77+1>>0]=($72>>8)&255;HEAP8[$77+2>>0]=($72>>16)&255;HEAP8[$77+3>>0]=$72>>24;
  $78 = HEAP32[492248>>2]|0;
  $79 = (($pbody) + 68|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + ($80)|0);
  dest=$81+0|0; src=492232+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum10$1 = (($80) + 12)|0;
  $82 = (($78) + ($$sum10$1)|0);
  HEAP8[$82>>0]=$72&255;HEAP8[$82+1>>0]=($72>>8)&255;HEAP8[$82+2>>0]=($72>>16)&255;HEAP8[$82+3>>0]=$72>>24;
  $83 = HEAP32[492248>>2]|0;
  $84 = (($pbody) + 80|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + ($85)|0);
  dest=$86+0|0; src=492232+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$sum10$2 = (($85) + 12)|0;
  $87 = (($83) + ($$sum10$2)|0);
  HEAP8[$87>>0]=$72&255;HEAP8[$87+1>>0]=($72>>8)&255;HEAP8[$87+2>>0]=($72>>16)&255;HEAP8[$87+3>>0]=$72>>24;
  $88 = HEAP32[200>>2]|0;
  $89 = (($88) + -1)|0;
  $90 = (491888 + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  _pseudoinverse($91,$inverse,3);
  $92 = HEAP32[492248>>2]|0;
  $i$247 = 0;
  while(1) {
   $306 = (($i$247) + 2)|0;
   $307 = (491528 + (($i$247*24)|0)|0);
   $308 = +HEAPF64[$307>>3];
   $309 = +HEAPF64[$inverse>>3];
   $310 = $308 * $309;
   $311 = $310 + 0.0;
   $312 = ((491528 + (($i$247*24)|0)|0) + 8|0);
   $313 = +HEAPF64[$312>>3];
   $314 = (($inverse) + 8|0);
   $315 = +HEAPF64[$314>>3];
   $316 = $313 * $315;
   $317 = $311 + $316;
   $318 = ((491528 + (($i$247*24)|0)|0) + 16|0);
   $319 = +HEAPF64[$318>>3];
   $320 = (($inverse) + 16|0);
   $321 = +HEAPF64[$320>>3];
   $322 = $319 * $321;
   $323 = $317 + $322;
   $324 = $323 * 65536.0;
   $325 = $324 + 0.5;
   $326 = (~~(($325))>>>0);
   $327 = (($pbody) + 92|0);
   $328 = HEAP32[$327>>2]|0;
   $329 = $328 >>> 2;
   $330 = (($306) + ($329))|0;
   $331 = (($92) + ($330<<2)|0);
   HEAP32[$331>>2] = $326;
   $332 = +HEAPF64[$307>>3];
   $333 = (($inverse) + 24|0);
   $334 = +HEAPF64[$333>>3];
   $335 = $332 * $334;
   $336 = $335 + 0.0;
   $337 = ((491528 + (($i$247*24)|0)|0) + 8|0);
   $338 = +HEAPF64[$337>>3];
   $339 = (($inverse) + 32|0);
   $340 = +HEAPF64[$339>>3];
   $341 = $338 * $340;
   $342 = $336 + $341;
   $343 = ((491528 + (($i$247*24)|0)|0) + 16|0);
   $344 = +HEAPF64[$343>>3];
   $345 = (($inverse) + 40|0);
   $346 = +HEAPF64[$345>>3];
   $347 = $344 * $346;
   $348 = $342 + $347;
   $349 = $348 * 65536.0;
   $350 = $349 + 0.5;
   $351 = (~~(($350))>>>0);
   $352 = (($pbody) + 104|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = $353 >>> 2;
   $355 = (($306) + ($354))|0;
   $356 = (($92) + ($355<<2)|0);
   HEAP32[$356>>2] = $351;
   $357 = +HEAPF64[$307>>3];
   $358 = (($inverse) + 48|0);
   $359 = +HEAPF64[$358>>3];
   $360 = $357 * $359;
   $361 = $360 + 0.0;
   $362 = ((491528 + (($i$247*24)|0)|0) + 8|0);
   $363 = +HEAPF64[$362>>3];
   $364 = (($inverse) + 56|0);
   $365 = +HEAPF64[$364>>3];
   $366 = $363 * $365;
   $367 = $361 + $366;
   $368 = ((491528 + (($i$247*24)|0)|0) + 16|0);
   $369 = +HEAPF64[$368>>3];
   $370 = (($inverse) + 64|0);
   $371 = +HEAPF64[$370>>3];
   $372 = $369 * $371;
   $373 = $367 + $372;
   $374 = $373 * 65536.0;
   $375 = $374 + 0.5;
   $376 = (~~(($375))>>>0);
   $377 = (($pbody) + 116|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $378 >>> 2;
   $380 = (($306) + ($379))|0;
   $381 = (($92) + ($380<<2)|0);
   HEAP32[$381>>2] = $376;
   $382 = (($i$247) + 1)|0;
   $exitcond65 = ($382|0)==(3);
   if ($exitcond65) {
    break;
   } else {
    $i$247 = $382;
   }
  }
  $93 = HEAP32[492248>>2]|0;
  $i$343 = 0;
  while(1) {
   $94 = (($93) + ($i$343<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (_htonl(($95|0))|0);
   HEAP32[$94>>2] = $96;
   $97 = (($i$343) + 1)|0;
   $exitcond62 = ($97|0)==(256);
   if ($exitcond62) {
    break;
   } else {
    $i$343 = $97;
   }
  }
  $98 = HEAP32[492248>>2]|0;
  $99 = (($pbody) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $$sum8 = (($100) + 8)|0;
  $101 = (($98) + ($$sum8)|0);
  dest=$101+0|0; src=492280+0|0; stop=dest+24|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $102 = HEAP32[492248>>2]|0;
  $103 = HEAP32[$57>>2]|0;
  $$sum9 = (($103) + 12)|0;
  $104 = (($102) + ($$sum9)|0);
  $105 = HEAP32[200>>2]|0;
  $106 = (($105) + -1)|0;
  $107 = (491912 + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  (_strcpy(($104|0),($108|0))|0);
  $109 = HEAP32[132272>>2]|0;
  $110 = ($109|0)==(0);
  $111 = HEAP32[200>>2]|0;
  $112 = (($111) + -1)|0;
  $113 = (491888 + ($112<<2)|0);
  $114 = (($109) + -1)|0;
  if (!($110)) {
   $115 = HEAP32[$113>>2]|0;
   $j$138 = 0;
   while(1) {
    $116 = (($out_cam) + ($j$138<<2)|0);
    $117 = +HEAPF64[$115>>3];
    $118 = (132280 + ($j$138<<2)|0);
    $119 = +HEAPF32[$118>>2];
    $120 = $119;
    $121 = $117 * $120;
    $122 = $121 + 0.0;
    $123 = $122;
    $124 = (($115) + 8|0);
    $125 = +HEAPF64[$124>>3];
    $126 = ((132280 + ($j$138<<2)|0) + 16|0);
    $127 = +HEAPF32[$126>>2];
    $128 = $127;
    $129 = $125 * $128;
    $130 = $123;
    $131 = $130 + $129;
    $132 = $131;
    $133 = (($115) + 16|0);
    $134 = +HEAPF64[$133>>3];
    $135 = ((132280 + ($j$138<<2)|0) + 32|0);
    $136 = +HEAPF32[$135>>2];
    $137 = $136;
    $138 = $134 * $137;
    $139 = $132;
    $140 = $139 + $138;
    $141 = $140;
    HEAPF32[$116>>2] = $141;
    $142 = (($j$138) + 1)|0;
    $exitcond59 = ($j$138|0)==($114|0);
    if ($exitcond59) {
     break;
    } else {
     $j$138 = $142;
    }
   }
   if (!($110)) {
    $248 = HEAP32[$113>>2]|0;
    $249 = (($248) + 24|0);
    $j$138$1 = 0;
    while(1) {
     $250 = ((($out_cam) + ($j$138$1<<2)|0) + 16|0);
     $251 = +HEAPF64[$249>>3];
     $252 = (132280 + ($j$138$1<<2)|0);
     $253 = +HEAPF32[$252>>2];
     $254 = $253;
     $255 = $251 * $254;
     $256 = $255 + 0.0;
     $257 = $256;
     $258 = (($248) + 32|0);
     $259 = +HEAPF64[$258>>3];
     $260 = ((132280 + ($j$138$1<<2)|0) + 16|0);
     $261 = +HEAPF32[$260>>2];
     $262 = $261;
     $263 = $259 * $262;
     $264 = $257;
     $265 = $264 + $263;
     $266 = $265;
     $267 = (($248) + 40|0);
     $268 = +HEAPF64[$267>>3];
     $269 = ((132280 + ($j$138$1<<2)|0) + 32|0);
     $270 = +HEAPF32[$269>>2];
     $271 = $270;
     $272 = $268 * $271;
     $273 = $266;
     $274 = $273 + $272;
     $275 = $274;
     HEAPF32[$250>>2] = $275;
     $276 = (($j$138$1) + 1)|0;
     $exitcond59$1 = ($j$138$1|0)==($114|0);
     if ($exitcond59$1) {
      break;
     } else {
      $j$138$1 = $276;
     }
    }
    if (!($110)) {
     $277 = HEAP32[$113>>2]|0;
     $278 = (($277) + 48|0);
     $j$138$2 = 0;
     while(1) {
      $279 = ((($out_cam) + ($j$138$2<<2)|0) + 32|0);
      $280 = +HEAPF64[$278>>3];
      $281 = (132280 + ($j$138$2<<2)|0);
      $282 = +HEAPF32[$281>>2];
      $283 = $282;
      $284 = $280 * $283;
      $285 = $284 + 0.0;
      $286 = $285;
      $287 = (($277) + 56|0);
      $288 = +HEAPF64[$287>>3];
      $289 = ((132280 + ($j$138$2<<2)|0) + 16|0);
      $290 = +HEAPF32[$289>>2];
      $291 = $290;
      $292 = $288 * $291;
      $293 = $286;
      $294 = $293 + $292;
      $295 = $294;
      $296 = (($277) + 64|0);
      $297 = +HEAPF64[$296>>3];
      $298 = ((132280 + ($j$138$2<<2)|0) + 32|0);
      $299 = +HEAPF32[$298>>2];
      $300 = $299;
      $301 = $297 * $300;
      $302 = $295;
      $303 = $302 + $301;
      $304 = $303;
      HEAPF32[$279>>2] = $304;
      $305 = (($j$138$2) + 1)|0;
      $exitcond59$2 = ($j$138$2|0)==($114|0);
      if ($exitcond59$2) {
       break;
      } else {
       $j$138$2 = $305;
      }
     }
    }
   }
  }
 }
 $143 = HEAP32[168>>2]|0;
 $144 = ($143|0)==(0);
 if (!($144)) {
  $145 = HEAP32[_stderr>>2]|0;
  $146 = HEAP32[132264>>2]|0;
  $147 = ($146|0)!=(0);
  $148 = $147 ? 492304 : 492328;
  $149 = HEAP32[200>>2]|0;
  $150 = (($149) + -1)|0;
  $151 = (491912 + ($150<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  HEAP32[$vararg_buffer>>2] = $152;
  (_fprintf(($145|0),($148|0),($vararg_buffer|0))|0);
 }
 _memset((492360|0),0,131072)|0;
 $153 = HEAP16[132080>>1]|0;
 $154 = ($153<<16>>16)==(0);
 if (!($154)) {
  $155 = HEAP32[132112>>2]|0;
  $156 = (($out) + 8|0);
  $157 = (($out) + 4|0);
  $img$033 = $155;$row$032 = 0;
  while(1) {
   $158 = HEAP16[132088>>1]|0;
   $159 = ($158<<16>>16)==(0);
   if ($159) {
    $img$1$lcssa = $img$033;
   } else {
    $col$027 = 0;$img$128 = $img$033;
    while(1) {
     $160 = HEAP32[132264>>2]|0;
     $161 = ($160|0)==(0);
     if ($161) {
      HEAPF32[$156>>2] = 0.0;
      HEAPF32[$157>>2] = 0.0;
      HEAPF32[$out>>2] = 0.0;
      $162 = HEAP32[132272>>2]|0;
      $163 = ($162|0)==(0);
      if (!($163)) {
       $164 = HEAP32[132272>>2]|0;
       $$promoted = +HEAPF32[$out>>2];
       $$promoted20 = +HEAPF32[$157>>2];
       $$promoted22 = +HEAPF32[$156>>2];
       $173 = $$promoted;$181 = $$promoted20;$189 = $$promoted22;$c$019 = 0;
       while(1) {
        $165 = (($out_cam) + ($c$019<<2)|0);
        $166 = +HEAPF32[$165>>2];
        $167 = (($img$128) + ($c$019<<1)|0);
        $168 = HEAP16[$167>>1]|0;
        $169 = $168&65535;
        $170 = (+($169|0));
        $171 = $166 * $170;
        $172 = $173 + $171;
        $174 = ((($out_cam) + ($c$019<<2)|0) + 16|0);
        $175 = +HEAPF32[$174>>2];
        $176 = HEAP16[$167>>1]|0;
        $177 = $176&65535;
        $178 = (+($177|0));
        $179 = $175 * $178;
        $180 = $181 + $179;
        $182 = ((($out_cam) + ($c$019<<2)|0) + 32|0);
        $183 = +HEAPF32[$182>>2];
        $184 = HEAP16[$167>>1]|0;
        $185 = $184&65535;
        $186 = (+($185|0));
        $187 = $183 * $186;
        $188 = $189 + $187;
        $190 = (($c$019) + 1)|0;
        $191 = ($190>>>0)<($164>>>0);
        if ($191) {
         $173 = $172;$181 = $180;$189 = $188;$c$019 = $190;
        } else {
         $$lcssa = $172;$$lcssa76 = $180;$$lcssa77 = $188;
         break;
        }
       }
       HEAPF32[$out>>2] = $$lcssa;
       HEAPF32[$157>>2] = $$lcssa76;
       HEAPF32[$156>>2] = $$lcssa77;
      }
      $192 = +HEAPF32[$out>>2];
      $193 = (~~(($192)));
      $194 = ($193|0)<(65535);
      $$11 = $194 ? $193 : 65535;
      $195 = ($$11|0)<(0);
      $196 = $$11&65535;
      $197 = $195 ? 0 : $196;
      HEAP16[$img$128>>1] = $197;
      $198 = (($out) + 4|0);
      $199 = +HEAPF32[$198>>2];
      $200 = (~~(($199)));
      $201 = ($200|0)<(65535);
      $$11$1 = $201 ? $200 : 65535;
      $202 = ($$11$1|0)<(0);
      $203 = $$11$1&65535;
      $204 = $202 ? 0 : $203;
      $205 = (($img$128) + 2|0);
      HEAP16[$205>>1] = $204;
      $206 = (($out) + 8|0);
      $207 = +HEAPF32[$206>>2];
      $208 = (~~(($207)));
      $209 = ($208|0)<(65535);
      $$11$2 = $209 ? $208 : 65535;
      $210 = ($$11$2|0)<(0);
      $211 = $$11$2&65535;
      $212 = $210 ? 0 : $211;
      $213 = (($img$128) + 4|0);
      HEAP16[$213>>1] = $212;
     } else {
      $214 = HEAP32[152>>2]|0;
      $215 = ($214|0)==(0);
      if (!($215)) {
       $216 = (_fcol($row$032,$col$027)|0);
       $217 = (($img$128) + ($216<<1)|0);
       $218 = HEAP16[$217>>1]|0;
       HEAP16[$img$128>>1] = $218;
      }
     }
     $219 = HEAP32[132272>>2]|0;
     $220 = ($219|0)==(0);
     if (!($220)) {
      $221 = HEAP32[132272>>2]|0;
      $c$225 = 0;
      while(1) {
       $222 = (($img$128) + ($c$225<<1)|0);
       $223 = HEAP16[$222>>1]|0;
       $224 = $223&65535;
       $225 = $224 >>> 3;
       $226 = ((492360 + ($c$225<<15)|0) + ($225<<2)|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = (($227) + 1)|0;
       HEAP32[$226>>2] = $228;
       $229 = (($c$225) + 1)|0;
       $230 = ($229>>>0)<($221>>>0);
       if ($230) {
        $c$225 = $229;
       } else {
        break;
       }
      }
     }
     $231 = (($col$027) + 1)|0;
     $232 = (($img$128) + 8|0);
     $233 = HEAP16[132088>>1]|0;
     $234 = $233&65535;
     $235 = ($231|0)<($234|0);
     if ($235) {
      $col$027 = $231;$img$128 = $232;
     } else {
      $img$1$lcssa = $232;
      break;
     }
    }
   }
   $236 = (($row$032) + 1)|0;
   $237 = HEAP16[132080>>1]|0;
   $238 = $237&65535;
   $239 = ($236|0)<($238|0);
   if ($239) {
    $img$033 = $img$1$lcssa;$row$032 = $236;
   } else {
    break;
   }
  }
 }
 $240 = HEAP32[132272>>2]|0;
 $241 = ($240|0)==(4);
 $242 = HEAP32[200>>2]|0;
 $243 = ($242|0)!=(0);
 $or$cond5 = $241 & $243;
 if ($or$cond5) {
  HEAP32[132272>>2] = 3;
 }
 $244 = HEAP32[152>>2]|0;
 $245 = ($244|0)!=(0);
 $246 = HEAP32[584>>2]|0;
 $247 = ($246|0)!=(0);
 $or$cond7 = $245 & $247;
 if (!($or$cond7)) {
  STACKTOP = sp;return;
 }
 HEAP32[132272>>2] = 1;
 STACKTOP = sp;return;
}
function _fuji_rotate() {
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0;
 var $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col$05 = 0, $exitcond = 0, $exitcond10 = 0, $exitcond11 = 0, $i$04 = 0, $row$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[189960>>1]|0;
 $1 = ($0<<16>>16)==(0);
 if ($1) {
  return;
 }
 $2 = HEAP32[168>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[_stderr>>2]|0;
  (_fwrite((623432|0),29,1,($4|0))|0);
 }
 $5 = HEAP16[189960>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + -1)|0;
 $8 = HEAP16[132096>>1]|0;
 $9 = $8&65535;
 $10 = (($7) + ($9))|0;
 $11 = $10 >> $9;
 $12 = $11&65535;
 HEAP16[189960>>1] = $12;
 $13 = $11 & 65535;
 $14 = (+($13|0));
 $15 = $14 / 0.70710678118654757;
 $16 = (~~(($15))&65535);
 $17 = HEAP16[132080>>1]|0;
 $18 = $17&65535;
 $19 = (($18) - ($13))|0;
 $20 = (+($19|0));
 $21 = $20 / 0.70710678118654757;
 $22 = (~~(($21))&65535);
 $23 = $22&65535;
 $24 = $16&65535;
 $25 = $24 << 3;
 $26 = (_calloc($23,$25)|0);
 _merror($26,623464);
 $27 = ($22<<16>>16)==(0);
 if (!($27)) {
  $28 = ($16<<16>>16)==(0);
  $29 = HEAP32[132112>>2]|0;
  $30 = HEAP32[132272>>2]|0;
  $31 = ($30|0)==(0);
  $32 = (($30) + -1)|0;
  $33 = $16&65535;
  $34 = (($33) + -1)|0;
  $35 = $22&65535;
  $36 = (($35) + -1)|0;
  $row$07 = 0;
  while(1) {
   if (!($28)) {
    $37 = Math_imul($row$07, $24)|0;
    $col$05 = 0;
    while(1) {
     $38 = HEAP16[189960>>1]|0;
     $39 = $38&65535;
     $40 = (+($39|0));
     $41 = (($row$07) - ($col$05))|0;
     $42 = (+($41|0));
     $43 = $42 * 0.70710678118654757;
     $44 = $43 + $40;
     $45 = $44;
     $46 = (~~(($45))>>>0);
     $47 = (($col$05) + ($row$07))|0;
     $48 = (+($47|0));
     $49 = $48 * 0.70710678118654757;
     $50 = $49;
     $51 = (~~(($50))>>>0);
     $52 = HEAP16[132080>>1]|0;
     $53 = $52&65535;
     $54 = (($53) + -2)|0;
     $55 = ($46>>>0)>($54>>>0);
     if (!($55)) {
      $56 = HEAP16[132088>>1]|0;
      $57 = $56&65535;
      $58 = (($57) + -2)|0;
      $59 = ($51>>>0)>($58>>>0);
      if (!($59)) {
       $60 = (+($46>>>0));
       $61 = $45 - $60;
       $62 = (+($51>>>0));
       $63 = $50 - $62;
       $64 = Math_imul($57, $46)|0;
       $$sum = (($64) + ($51))|0;
       if (!($31)) {
        $65 = 1.0 - $63;
        $$sum1 = (($$sum) + 1)|0;
        $66 = 1.0 - $61;
        $67 = (($$sum) + 1)|0;
        $68 = (($col$05) + ($37))|0;
        $i$04 = 0;
        while(1) {
         $69 = ((($29) + ($$sum<<3)|0) + ($i$04<<1)|0);
         $70 = HEAP16[$69>>1]|0;
         $71 = $70&65535;
         $72 = (+($71|0));
         $73 = $65 * $72;
         $74 = ((($29) + ($$sum1<<3)|0) + ($i$04<<1)|0);
         $75 = HEAP16[$74>>1]|0;
         $76 = $75&65535;
         $77 = (+($76|0));
         $78 = $63 * $77;
         $79 = $73 + $78;
         $80 = $66 * $79;
         $81 = HEAP16[132088>>1]|0;
         $82 = $81&65535;
         $$sum2 = (($82) + ($$sum))|0;
         $83 = ((($29) + ($$sum2<<3)|0) + ($i$04<<1)|0);
         $84 = HEAP16[$83>>1]|0;
         $85 = $84&65535;
         $86 = (+($85|0));
         $87 = $65 * $86;
         $$sum3 = (($67) + ($82))|0;
         $88 = ((($29) + ($$sum3<<3)|0) + ($i$04<<1)|0);
         $89 = HEAP16[$88>>1]|0;
         $90 = $89&65535;
         $91 = (+($90|0));
         $92 = $63 * $91;
         $93 = $87 + $92;
         $94 = $61 * $93;
         $95 = $80 + $94;
         $96 = (~~(($95))&65535);
         $97 = ((($26) + ($68<<3)|0) + ($i$04<<1)|0);
         HEAP16[$97>>1] = $96;
         $98 = (($i$04) + 1)|0;
         $exitcond = ($i$04|0)==($32|0);
         if ($exitcond) {
          break;
         } else {
          $i$04 = $98;
         }
        }
       }
      }
     }
     $99 = (($col$05) + 1)|0;
     $exitcond10 = ($col$05|0)==($34|0);
     if ($exitcond10) {
      break;
     } else {
      $col$05 = $99;
     }
    }
   }
   $100 = (($row$07) + 1)|0;
   $exitcond11 = ($row$07|0)==($36|0);
   if ($exitcond11) {
    break;
   } else {
    $row$07 = $100;
   }
  }
 }
 $101 = HEAP32[132112>>2]|0;
 _free($101);
 HEAP16[132088>>1] = $16;
 HEAP16[132080>>1] = $22;
 HEAP32[132112>>2] = $26;
 HEAP16[189960>>1] = 0;
 return;
}
function _stretch() {
 var $0 = 0.0, $1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0;
 var $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$04 = 0, $c$116 = 0, $col$07 = 0, $col$123 = 0, $exitcond = 0, $exitcond29 = 0, $exitcond30 = 0, $exitcond31 = 0, $img$0 = 0, $pix0$05 = 0;
 var $pix0$119 = 0, $pix1$1$ph = 0, $pix1$16 = 0, $pix1$3$ph = 0, $pix1$320 = 0, $rc$012 = 0.0, $rc$125 = 0.0, $row$010 = 0, $row$121 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[457384>>3];
 $1 = $0 == 1.0;
 if ($1) {
  return;
 }
 $2 = HEAP32[168>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[_stderr>>2]|0;
  (_fwrite((623480|0),24,1,($4|0))|0);
 }
 $5 = +HEAPF64[457384>>3];
 $6 = $5 < 1.0;
 if ($6) {
  $7 = HEAP16[132080>>1]|0;
  $8 = $7&65535;
  $9 = (+($8|0));
  $10 = $9 / $5;
  $11 = $10 + 0.5;
  $12 = (~~(($11))&65535);
  $13 = HEAP16[132088>>1]|0;
  $14 = $13&65535;
  $15 = $12&65535;
  $16 = $15 << 3;
  $17 = (_calloc($14,$16)|0);
  _merror($17,623512);
  $18 = ($12<<16>>16)==(0);
  if (!($18)) {
   $19 = HEAP32[132112>>2]|0;
   $20 = +HEAPF64[457384>>3];
   $21 = HEAP32[132272>>2]|0;
   $22 = ($21|0)==(0);
   $23 = (($21) + -1)|0;
   $24 = $12&65535;
   $25 = (($24) + -1)|0;
   $rc$012 = 0.0;$row$010 = 0;
   while(1) {
    $26 = (~~(($rc$012)));
    $27 = (+($26|0));
    $28 = $rc$012 - $27;
    $29 = HEAP16[132088>>1]|0;
    $30 = $29&65535;
    $31 = Math_imul($30, $26)|0;
    $32 = (($19) + ($31<<3)|0);
    $33 = (($26) + 1)|0;
    $34 = HEAP16[132080>>1]|0;
    $35 = $34&65535;
    $36 = ($33|0)<($35|0);
    if ($36) {
     $37 = $30 << 2;
     $38 = ((($19) + ($31<<3)|0) + ($37<<1)|0);
     $pix1$1$ph = $38;
    } else {
     $pix1$1$ph = $32;
    }
    $39 = HEAP16[132088>>1]|0;
    $40 = ($39<<16>>16)==(0);
    if (!($40)) {
     $41 = 1.0 - $28;
     $col$07 = 0;$pix0$05 = $32;$pix1$16 = $pix1$1$ph;
     while(1) {
      if (!($22)) {
       $c$04 = 0;
       while(1) {
        $42 = (($pix0$05) + ($c$04<<1)|0);
        $43 = HEAP16[$42>>1]|0;
        $44 = $43&65535;
        $45 = (+($44|0));
        $46 = $41 * $45;
        $47 = (($pix1$16) + ($c$04<<1)|0);
        $48 = HEAP16[$47>>1]|0;
        $49 = $48&65535;
        $50 = (+($49|0));
        $51 = $28 * $50;
        $52 = $46 + $51;
        $53 = $52 + 0.5;
        $54 = (~~(($53))&65535);
        $55 = HEAP16[132088>>1]|0;
        $56 = $55&65535;
        $57 = Math_imul($56, $row$010)|0;
        $58 = (($57) + ($col$07))|0;
        $59 = ((($17) + ($58<<3)|0) + ($c$04<<1)|0);
        HEAP16[$59>>1] = $54;
        $60 = (($c$04) + 1)|0;
        $exitcond = ($c$04|0)==($23|0);
        if ($exitcond) {
         break;
        } else {
         $c$04 = $60;
        }
       }
      }
      $61 = (($col$07) + 1)|0;
      $62 = (($pix0$05) + 8|0);
      $63 = (($pix1$16) + 8|0);
      $64 = HEAP16[132088>>1]|0;
      $65 = $64&65535;
      $66 = ($61|0)<($65|0);
      if ($66) {
       $col$07 = $61;$pix0$05 = $62;$pix1$16 = $63;
      } else {
       break;
      }
     }
    }
    $67 = (($row$010) + 1)|0;
    $68 = $rc$012 + $20;
    $exitcond29 = ($row$010|0)==($25|0);
    if ($exitcond29) {
     break;
    } else {
     $rc$012 = $68;$row$010 = $67;
    }
   }
  }
  HEAP16[132080>>1] = $12;
  $img$0 = $17;
 } else {
  $69 = HEAP16[132088>>1]|0;
  $70 = $69&65535;
  $71 = (+($70|0));
  $72 = $5 * $71;
  $73 = $72 + 0.5;
  $74 = (~~(($73))&65535);
  $75 = HEAP16[132080>>1]|0;
  $76 = $75&65535;
  $77 = $74&65535;
  $78 = $77 << 3;
  $79 = (_calloc($76,$78)|0);
  _merror($79,623512);
  $80 = ($74<<16>>16)==(0);
  if (!($80)) {
   $81 = HEAP32[132112>>2]|0;
   $82 = +HEAPF64[457384>>3];
   $83 = 1.0 / $82;
   $84 = HEAP32[132272>>2]|0;
   $85 = ($84|0)==(0);
   $86 = (($84) + -1)|0;
   $87 = $74&65535;
   $88 = (($87) + -1)|0;
   $col$123 = 0;$rc$125 = 0.0;
   while(1) {
    $89 = (~~(($rc$125)));
    $90 = (+($89|0));
    $91 = $rc$125 - $90;
    $92 = (($81) + ($89<<3)|0);
    $93 = (($89) + 1)|0;
    $94 = HEAP16[132088>>1]|0;
    $95 = $94&65535;
    $96 = ($93|0)<($95|0);
    if ($96) {
     $97 = ((($81) + ($89<<3)|0) + 8|0);
     $pix1$3$ph = $97;
    } else {
     $pix1$3$ph = $92;
    }
    $98 = HEAP16[132080>>1]|0;
    $99 = ($98<<16>>16)==(0);
    if (!($99)) {
     $100 = 1.0 - $91;
     $pix0$119 = $92;$pix1$320 = $pix1$3$ph;$row$121 = 0;
     while(1) {
      if (!($85)) {
       $101 = Math_imul($row$121, $77)|0;
       $102 = (($101) + ($col$123))|0;
       $c$116 = 0;
       while(1) {
        $103 = (($pix0$119) + ($c$116<<1)|0);
        $104 = HEAP16[$103>>1]|0;
        $105 = $104&65535;
        $106 = (+($105|0));
        $107 = $100 * $106;
        $108 = (($pix1$320) + ($c$116<<1)|0);
        $109 = HEAP16[$108>>1]|0;
        $110 = $109&65535;
        $111 = (+($110|0));
        $112 = $91 * $111;
        $113 = $107 + $112;
        $114 = $113 + 0.5;
        $115 = (~~(($114))&65535);
        $116 = ((($79) + ($102<<3)|0) + ($c$116<<1)|0);
        HEAP16[$116>>1] = $115;
        $117 = (($c$116) + 1)|0;
        $exitcond30 = ($c$116|0)==($86|0);
        if ($exitcond30) {
         break;
        } else {
         $c$116 = $117;
        }
       }
      }
      $118 = (($row$121) + 1)|0;
      $119 = HEAP16[132088>>1]|0;
      $120 = $119&65535;
      $121 = $120 << 2;
      $122 = (($pix0$119) + ($121<<1)|0);
      $123 = (($pix1$320) + ($121<<1)|0);
      $124 = HEAP16[132080>>1]|0;
      $125 = $124&65535;
      $126 = ($118|0)<($125|0);
      if ($126) {
       $pix0$119 = $122;$pix1$320 = $123;$row$121 = $118;
      } else {
       break;
      }
     }
    }
    $127 = (($col$123) + 1)|0;
    $128 = $rc$125 + $83;
    $exitcond31 = ($col$123|0)==($88|0);
    if ($exitcond31) {
     break;
    } else {
     $col$123 = $127;$rc$125 = $128;
    }
   }
  }
  HEAP16[132088>>1] = $74;
  $img$0 = $79;
 }
 $129 = HEAP32[132112>>2]|0;
 _free($129);
 HEAP32[132112>>2] = $img$0;
 return;
}
function _flip_index($row,$col) {
 $row = $row|0;
 $col = $col|0;
 var $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $col$row = 0, $row$col = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[454784>>2]|0;
 $1 = $0 & 4;
 $2 = ($1|0)==(0);
 $row$col = $2 ? $row : $col;
 $col$row = $2 ? $col : $row;
 $3 = $0 & 2;
 $4 = ($3|0)==(0);
 if ($4) {
  $$12 = $row$col;
 } else {
  $5 = HEAP16[190336>>1]|0;
  $6 = $5&65535;
  $7 = $row$col ^ -1;
  $8 = (($6) + ($7))|0;
  $$12 = $8;
 }
 $9 = HEAP32[454784>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $$1 = $col$row;
 } else {
  $12 = HEAP16[132104>>1]|0;
  $13 = $12&65535;
  $14 = $col$row ^ -1;
  $15 = (($13) + ($14))|0;
  $$1 = $15;
 }
 $16 = HEAP16[132104>>1]|0;
 $17 = $16&65535;
 $18 = Math_imul($17, $$12)|0;
 $19 = (($18) + ($$1))|0;
 return ($19|0);
}
function _tiff_set($ntag,$tag,$type,$count,$val) {
 $ntag = $ntag|0;
 $tag = $tag|0;
 $type = $type|0;
 $count = $count|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ntag) + 2|0);
 $1 = HEAP16[$ntag>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$ntag>>1] = $2;
 $3 = $1&65535;
 $4 = (($0) + (($3*12)|0)|0);
 HEAP16[$4>>1] = $tag;
 $5 = ((($0) + (($3*12)|0)|0) + 2|0);
 HEAP16[$5>>1] = $type;
 $6 = ((($0) + (($3*12)|0)|0) + 4|0);
 HEAP32[$6>>2] = $count;
 $7 = ($type&65535)<(3);
 $8 = ($count|0)<(5);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = ((($0) + (($3*12)|0)|0) + 8|0);
  $10 = $val&255;
  HEAP8[$9>>0] = $10;
  $11 = $val >>> 8;
  $12 = $11&255;
  $13 = (($9) + 1|0);
  HEAP8[$13>>0] = $12;
  $14 = $val >>> 16;
  $15 = $14&255;
  $16 = (($9) + 2|0);
  HEAP8[$16>>0] = $15;
  $17 = $val >>> 24;
  $18 = $17&255;
  $19 = (($9) + 3|0);
  HEAP8[$19>>0] = $18;
  return;
 }
 $20 = ($type<<16>>16)==(3);
 $21 = ($count|0)<(3);
 $or$cond3 = $20 & $21;
 if ($or$cond3) {
  $22 = ((($0) + (($3*12)|0)|0) + 8|0);
  $23 = $val&65535;
  HEAP16[$22>>1] = $23;
  $24 = $val >>> 16;
  $25 = $24&65535;
  $26 = (($22) + 2|0);
  HEAP16[$26>>1] = $25;
  return;
 } else {
  $27 = ((($0) + (($3*12)|0)|0) + 8|0);
  HEAP32[$27>>2] = $val;
  return;
 }
}
function _tiff_head($th,$full) {
 $th = $th|0;
 $full = $full|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $psize$0 = 0, $psize$1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 _memset(($th|0),0,1376)|0;
 $0 = (_htonl(1296910665)|0);
 $1 = $0 >>> 16;
 $2 = $1&65535;
 HEAP16[$th>>1] = $2;
 $3 = (($th) + 2|0);
 HEAP16[$3>>1] = 42;
 $4 = (($th) + 4|0);
 HEAP32[$4>>2] = 10;
 $5 = ($full|0)!=(0);
 if ($5) {
  $6 = (($th) + 10|0);
  _tiff_set($6,254,4,1,0);
  $7 = HEAP16[132088>>1]|0;
  $8 = $7&65535;
  _tiff_set($6,256,4,1,$8);
  $9 = HEAP16[132080>>1]|0;
  $10 = $9&65535;
  _tiff_set($6,257,4,1,$10);
  $11 = HEAP32[132272>>2]|0;
  $12 = HEAP32[208>>2]|0;
  _tiff_set($6,258,3,$11,$12);
  $13 = HEAP32[132272>>2]|0;
  $14 = ($13>>>0)>(2);
  if ($14) {
   $15 = HEAP16[$6>>1]|0;
   $16 = $15&65535;
   $17 = (($16) + -1)|0;
   $18 = ((($th) + (($17*12)|0)|0) + 20|0);
   HEAP32[$18>>2] = 468;
  }
  $19 = HEAP32[208>>2]|0;
  $20 = $19&65535;
  $21 = (($th) + 468|0);
  HEAP16[$21>>1] = $20;
  $22 = (($th) + 470|0);
  HEAP16[$22>>1] = $20;
  $23 = (($th) + 472|0);
  HEAP16[$23>>1] = $20;
  $24 = (($th) + 474|0);
  HEAP16[$24>>1] = $20;
  _tiff_set($6,259,3,1,1);
  $25 = HEAP32[132272>>2]|0;
  $26 = ($25>>>0)>(1);
  $27 = $26 ? 2 : 1;
  _tiff_set($6,262,3,1,$27);
 }
 $28 = (($th) + 10|0);
 _tiff_set($28,270,2,512,620);
 _tiff_set($28,271,2,64,1132);
 _tiff_set($28,272,2,64,1196);
 if ($5) {
  $29 = HEAP32[492248>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $psize$0 = 0;
  } else {
   $31 = HEAP32[$29>>2]|0;
   $32 = (_ntohl(($31|0))|0);
   $psize$0 = $32;
  }
  $33 = (($psize$0) + 1376)|0;
  _tiff_set($28,273,4,1,$33);
  $34 = HEAP32[132272>>2]|0;
  _tiff_set($28,277,3,1,$34);
  $35 = HEAP16[132080>>1]|0;
  $36 = $35&65535;
  _tiff_set($28,278,4,1,$36);
  $37 = HEAP16[132080>>1]|0;
  $38 = $37&65535;
  $39 = HEAP16[132088>>1]|0;
  $40 = $39&65535;
  $41 = Math_imul($40, $38)|0;
  $42 = HEAP32[132272>>2]|0;
  $43 = Math_imul($41, $42)|0;
  $44 = HEAP32[208>>2]|0;
  $45 = Math_imul($43, $44)|0;
  $46 = $45 >>> 3;
  _tiff_set($28,279,4,1,$46);
  $psize$1 = $psize$0;
 } else {
  $47 = HEAP32[454784>>2]|0;
  $48 = (623528 + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = (($50) + -48)|0;
  _tiff_set($28,274,3,1,$51);
  $psize$1 = 0;
 }
 $52 = (($th) + 476|0);
 _tiff_set($28,282,5,1,476);
 $53 = (($th) + 484|0);
 _tiff_set($28,283,5,1,484);
 _tiff_set($28,284,3,1,1);
 _tiff_set($28,296,3,1,2);
 _tiff_set($28,305,2,32,1260);
 _tiff_set($28,306,2,20,1292);
 _tiff_set($28,315,2,64,1312);
 $54 = (($th) + 294|0);
 _tiff_set($28,-30871,4,1,294);
 $55 = ($psize$1|0)==(0);
 if (!($55)) {
  _tiff_set($28,-30861,7,$psize$1,1376);
 }
 $56 = (($th) + 492|0);
 _tiff_set($54,-32102,5,1,492);
 $57 = (($th) + 500|0);
 _tiff_set($54,-32099,5,1,500);
 $58 = +HEAPF32[454744>>2];
 $59 = (~~(($58)));
 _tiff_set($54,-30681,3,1,$59);
 $60 = (($th) + 508|0);
 _tiff_set($54,-28150,5,1,508);
 $61 = HEAP32[((455488 + 4|0))>>2]|0;
 $62 = ($61|0)==(0);
 if (!($62)) {
  $63 = (($th) + 346|0);
  _tiff_set($28,-30683,4,1,346);
  _tiff_set($63,0,1,4,514);
  $64 = HEAP32[((455488 + 116|0))>>2]|0;
  _tiff_set($63,1,2,2,$64);
  $65 = (($th) + 516|0);
  _tiff_set($63,2,5,3,516);
  $66 = HEAP32[((455488 + 120|0))>>2]|0;
  _tiff_set($63,3,2,2,$66);
  _tiff_set($63,4,5,3,540);
  $67 = HEAP32[((455488 + 124|0))>>2]|0;
  _tiff_set($63,5,1,1,$67);
  _tiff_set($63,6,5,1,588);
  _tiff_set($63,7,5,3,564);
  _tiff_set($63,18,2,12,596);
  _tiff_set($63,29,2,12,608);
  dest=$65+0|0; src=455488+0|0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 HEAP32[$53>>2] = 300;
 HEAP32[$52>>2] = 300;
 $68 = (($th) + 488|0);
 HEAP32[$68>>2] = 1;
 $69 = (($th) + 480|0);
 HEAP32[$69>>2] = 1;
 $70 = (($th) + 492|0);
 HEAP32[$70>>2] = 1000000;
 $71 = (($th) + 496|0);
 HEAP32[$71>>2] = 1000000;
 $72 = (($th) + 500|0);
 HEAP32[$72>>2] = 1000000;
 $73 = (($th) + 504|0);
 HEAP32[$73>>2] = 1000000;
 $74 = (($th) + 508|0);
 HEAP32[$74>>2] = 1000000;
 $75 = (($th) + 512|0);
 HEAP32[$75>>2] = 1000000;
 $76 = +HEAPF32[454760>>2];
 $77 = HEAP32[$56>>2]|0;
 $78 = (+($77|0));
 $79 = $76 * $78;
 $80 = (~~(($79)));
 HEAP32[$56>>2] = $80;
 $81 = +HEAPF32[454752>>2];
 $82 = HEAP32[$57>>2]|0;
 $83 = (+($82|0));
 $84 = $81 * $83;
 $85 = (~~(($84)));
 HEAP32[$57>>2] = $85;
 $86 = +HEAPF32[455472>>2];
 $87 = HEAP32[$60>>2]|0;
 $88 = (+($87|0));
 $89 = $86 * $88;
 $90 = (~~(($89)));
 HEAP32[$60>>2] = $90;
 $91 = (($th) + 620|0);
 (_strncpy(($91|0),(456656|0),512)|0);
 $92 = (($th) + 1132|0);
 (_strncpy(($92|0),(133624|0),64)|0);
 $93 = (($th) + 1196|0);
 (_strncpy(($93|0),(133688|0),64)|0);
 $94 = (($th) + 1260|0);
 dest=$94+0|0; src=623544+0|0; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $95 = (_localtime((190152|0))|0);
 $96 = (($th) + 1292|0);
 $97 = (($95) + 20|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98) + 1900)|0;
 $100 = (($95) + 16|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 1)|0;
 $103 = (($95) + 12|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($95) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($95) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$95>>2]|0;
 HEAP32[$vararg_buffer>>2] = $99;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $102;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $104;
 $vararg_ptr3 = (($vararg_buffer) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $106;
 $vararg_ptr4 = (($vararg_buffer) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $108;
 $vararg_ptr5 = (($vararg_buffer) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $109;
 (_sprintf($96,623560,$vararg_buffer)|0);
 $110 = (($th) + 1312|0);
 (_strncpy(($110|0),(454800|0),64)|0);
 STACKTOP = sp;return;
}
function _jpeg_thumb() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exif = 0, $th = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0;
 $exif = sp + 1376|0;
 $th = sp;
 $0 = HEAP32[133768>>2]|0;
 $1 = (_malloc($0)|0);
 _merror($1,623592);
 $2 = HEAP32[133768>>2]|0;
 $3 = HEAP32[864>>2]|0;
 (_fread(($1|0),1,($2|0),($3|0))|0);
 $4 = HEAP32[133792>>2]|0;
 (_fputc(255,($4|0))|0);
 $5 = HEAP32[133792>>2]|0;
 (_fputc(216,($5|0))|0);
 $6 = (($1) + 6|0);
 $7 = (_strcmp($6,490008)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $13 = (($1) + 2|0);
  $14 = HEAP32[133768>>2]|0;
  $15 = (($14) + -2)|0;
  $16 = HEAP32[133792>>2]|0;
  (_fwrite(($13|0),1,($15|0),($16|0))|0);
  _free($1);
  STACKTOP = sp;return;
 }
 dest=$exif+0|0; src=623608+0|0; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $9 = (_htons(1384)|0);
 $10 = (($exif) + 2|0);
 HEAP16[$10>>1] = $9;
 $11 = HEAP32[133792>>2]|0;
 (_fwrite(($exif|0),1,10,($11|0))|0);
 _tiff_head($th,0);
 $12 = HEAP32[133792>>2]|0;
 (_fwrite(($th|0),1,1376,($12|0))|0);
 $13 = (($1) + 2|0);
 $14 = HEAP32[133768>>2]|0;
 $15 = (($14) + -2)|0;
 $16 = HEAP32[133792>>2]|0;
 (_fwrite(($13|0),1,($15|0),($16|0))|0);
 _free($1);
 STACKTOP = sp;return;
}
function _write_ppm_tiff() {
 var $$lcssa = 0, $$lcssa11 = 0, $$lcssa42 = 0, $$white$0 = 0, $$white$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$027 = 0, $c$114 = 0, $c$213 = 0, $col$016 = 0, $exitcond = 0, $exitcond33 = 0, $or$cond3 = 0, $perc$0 = 0, $phitmp = 0, $phitmp38 = 0.0, $row$025 = 0, $soff$024 = 0, $soff$1$lcssa = 0, $soff$120 = 0;
 var $th = 0, $total$0 = 0, $val$0 = 0, $vararg_buffer = 0, $vararg_buffer5 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, $white$028 = 0, $white$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1424|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer = sp;
 $th = sp + 40|0;
 $0 = HEAP16[132088>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[132080>>1]|0;
 $3 = $2&65535;
 $4 = Math_imul($3, $1)|0;
 $5 = (+($4|0));
 $6 = $5 * 0.01;
 $7 = (~~(($6)));
 $8 = HEAP16[189960>>1]|0;
 $9 = ($8<<16>>16)==(0);
 if ($9) {
  $perc$0 = $7;
 } else {
  $10 = (($7|0) / 2)&-1;
  $perc$0 = $10;
 }
 $11 = HEAP32[160>>2]|0;
 $12 = $11 & -3;
 $13 = HEAP32[232>>2]|0;
 $14 = $12 | $13;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = HEAP32[132272>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   $white$2 = 0.0;
  } else {
   $18 = HEAP32[132272>>2]|0;
   $c$027 = 0;$white$028 = 0;
   while(1) {
    $total$0 = 0;$val$0 = 8192;
    while(1) {
     $19 = (($val$0) + -1)|0;
     $20 = ($19|0)>(32);
     if (!($20)) {
      $$lcssa42 = $19;
      break;
     }
     $21 = ((492360 + ($c$027<<15)|0) + ($19<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($22) + ($total$0))|0;
     $24 = ($23|0)>($perc$0|0);
     if ($24) {
      $$lcssa42 = $19;
      break;
     } else {
      $total$0 = $23;$val$0 = $19;
     }
    }
    $25 = ($white$028|0)<($$lcssa42|0);
    $$white$0 = $25 ? $$lcssa42 : $white$028;
    $26 = (($c$027) + 1)|0;
    $27 = ($26>>>0)<($18>>>0);
    if ($27) {
     $c$027 = $26;$white$028 = $$white$0;
    } else {
     $$white$0$lcssa = $$white$0;
     break;
    }
   }
   $phitmp = $$white$0$lcssa << 3;
   $phitmp38 = (+($phitmp|0));
   $white$2 = $phitmp38;
  }
 } else {
  $white$2 = 65536.0;
 }
 $28 = +HEAPF64[56>>3];
 $29 = +HEAPF64[((56 + 8|0))>>3];
 $30 = +HEAPF32[104>>2];
 $31 = $white$2 / $30;
 $32 = (~~(($31)));
 _gamma_curve($28,$29,2,$32);
 $33 = HEAP16[132080>>1]|0;
 HEAP16[190336>>1] = $33;
 $34 = HEAP16[132088>>1]|0;
 HEAP16[132104>>1] = $34;
 $35 = HEAP32[454784>>2]|0;
 $36 = $35 & 4;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $38 = HEAP16[132080>>1]|0;
  $39 = HEAP16[132088>>1]|0;
  HEAP16[132088>>1] = $38;
  HEAP16[132080>>1] = $39;
 }
 $40 = HEAP16[132088>>1]|0;
 $41 = $40&65535;
 $42 = HEAP32[132272>>2]|0;
 $43 = HEAP32[208>>2]|0;
 $44 = Math_imul($43, $42)|0;
 $45 = $44 >>> 3;
 $46 = (_calloc($41,$45)|0);
 _merror($46,623624);
 $47 = HEAP32[216>>2]|0;
 $48 = ($47|0)==(0);
 do {
  if ($48) {
   $55 = HEAP32[132272>>2]|0;
   $56 = ($55>>>0)>(3);
   $57 = HEAP32[133792>>2]|0;
   if ($56) {
    $58 = HEAP16[132088>>1]|0;
    $59 = $58&65535;
    $60 = HEAP16[132080>>1]|0;
    $61 = $60&65535;
    $62 = HEAP32[208>>2]|0;
    $63 = 1 << $62;
    $64 = (($63) + -1)|0;
    HEAP32[$vararg_buffer>>2] = $59;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $61;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $55;
    $vararg_ptr3 = (($vararg_buffer) + 12|0);
    HEAP32[$vararg_ptr3>>2] = $64;
    $vararg_ptr4 = (($vararg_buffer) + 16|0);
    HEAP32[$vararg_ptr4>>2] = 457376;
    (_fprintf(($57|0),(623648|0),($vararg_buffer|0))|0);
    break;
   } else {
    $65 = $55 >>> 1;
    $66 = (($65) + 5)|0;
    $67 = HEAP16[132088>>1]|0;
    $68 = $67&65535;
    $69 = HEAP16[132080>>1]|0;
    $70 = $69&65535;
    $71 = HEAP32[208>>2]|0;
    $72 = 1 << $71;
    $73 = (($72) + -1)|0;
    HEAP32[$vararg_buffer5>>2] = $66;
    $vararg_ptr8 = (($vararg_buffer5) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $68;
    $vararg_ptr9 = (($vararg_buffer5) + 8|0);
    HEAP32[$vararg_ptr9>>2] = $70;
    $vararg_ptr10 = (($vararg_buffer5) + 12|0);
    HEAP32[$vararg_ptr10>>2] = $73;
    (_fprintf(($57|0),(623712|0),($vararg_buffer5|0))|0);
    break;
   }
  } else {
   _tiff_head($th,1);
   $49 = HEAP32[133792>>2]|0;
   (_fwrite(($th|0),1376,1,($49|0))|0);
   $50 = HEAP32[492248>>2]|0;
   $51 = ($50|0)==(0|0);
   if (!($51)) {
    $52 = HEAP32[$50>>2]|0;
    $53 = (_ntohl(($52|0))|0);
    $54 = HEAP32[133792>>2]|0;
    (_fwrite(($50|0),($53|0),1,($54|0))|0);
   }
  }
 } while(0);
 $74 = (_flip_index(0,0)|0);
 $75 = (_flip_index(0,1)|0);
 $76 = (($75) - ($74))|0;
 $77 = (_flip_index(1,0)|0);
 $78 = HEAP16[132088>>1]|0;
 $79 = $78&65535;
 $80 = (_flip_index(0,$79)|0);
 $81 = (($77) - ($80))|0;
 $82 = HEAP16[132080>>1]|0;
 $83 = ($82<<16>>16)==(0);
 if ($83) {
  _free($46);
  STACKTOP = sp;return;
 } else {
  $row$025 = 0;$soff$024 = $74;
 }
 while(1) {
  $84 = HEAP16[132088>>1]|0;
  $85 = $84&65535;
  $86 = ($84<<16>>16)==(0);
  $87 = HEAP32[208>>2]|0;
  if ($86) {
   $$lcssa = $85;$$lcssa11 = $87;$soff$1$lcssa = $soff$024;
  } else {
   $88 = HEAP32[208>>2]|0;
   $89 = HEAP32[132272>>2]|0;
   $90 = ($89|0)==(0);
   $91 = HEAP32[132112>>2]|0;
   $92 = ($89|0)==(0);
   $93 = (($89) + -1)|0;
   $94 = $87;$col$016 = 0;$soff$120 = $soff$024;
   while(1) {
    $95 = ($94|0)==(8);
    if ($95) {
     if (!($90)) {
      $c$114 = 0;
      while(1) {
       $96 = ((($91) + ($soff$120<<3)|0) + ($c$114<<1)|0);
       $97 = HEAP16[$96>>1]|0;
       $98 = $97&65535;
       $99 = (936 + ($98<<1)|0);
       $100 = HEAP16[$99>>1]|0;
       $101 = ($100&65535) >>> 8;
       $102 = $101&255;
       $103 = Math_imul($89, $col$016)|0;
       $104 = (($103) + ($c$114))|0;
       $105 = (($46) + ($104)|0);
       HEAP8[$105>>0] = $102;
       $106 = (($c$114) + 1)|0;
       $exitcond33 = ($c$114|0)==($93|0);
       if ($exitcond33) {
        break;
       } else {
        $c$114 = $106;
       }
      }
     }
    } else {
     if (!($92)) {
      $c$213 = 0;
      while(1) {
       $107 = ((($91) + ($soff$120<<3)|0) + ($c$213<<1)|0);
       $108 = HEAP16[$107>>1]|0;
       $109 = $108&65535;
       $110 = (936 + ($109<<1)|0);
       $111 = HEAP16[$110>>1]|0;
       $112 = Math_imul($89, $col$016)|0;
       $113 = (($112) + ($c$213))|0;
       $114 = (($46) + ($113<<1)|0);
       HEAP16[$114>>1] = $111;
       $115 = (($c$213) + 1)|0;
       $exitcond = ($c$213|0)==($93|0);
       if ($exitcond) {
        break;
       } else {
        $c$213 = $115;
       }
      }
     }
    }
    $116 = (($col$016) + 1)|0;
    $117 = (($76) + ($soff$120))|0;
    $118 = HEAP16[132088>>1]|0;
    $119 = $118&65535;
    $120 = ($116|0)<($119|0);
    if ($120) {
     $94 = $88;$col$016 = $116;$soff$120 = $117;
    } else {
     $$lcssa = $119;$$lcssa11 = $88;$soff$1$lcssa = $117;
     break;
    }
   }
  }
  $121 = ($$lcssa11|0)!=(16);
  $122 = HEAP32[216>>2]|0;
  $123 = ($122|0)!=(0);
  $or$cond3 = $121 | $123;
  if (!($or$cond3)) {
   $124 = (_htons(21930)|0);
   $125 = ($124<<16>>16)==(21930);
   if (!($125)) {
    $126 = HEAP32[132272>>2]|0;
    $127 = $$lcssa << 1;
    $128 = Math_imul($127, $126)|0;
    _swab(($46|0),($46|0),($128|0));
   }
  }
  $129 = HEAP32[132272>>2]|0;
  $130 = HEAP32[208>>2]|0;
  $131 = Math_imul($130, $129)|0;
  $132 = $131 >>> 3;
  $133 = HEAP16[132088>>1]|0;
  $134 = $133&65535;
  $135 = HEAP32[133792>>2]|0;
  (_fwrite(($46|0),($132|0),($134|0),($135|0))|0);
  $136 = (($row$025) + 1)|0;
  $137 = (($81) + ($soff$1$lcssa))|0;
  $138 = HEAP16[132080>>1]|0;
  $139 = $138&65535;
  $140 = ($136|0)<($139|0);
  if ($140) {
   $row$025 = $136;$soff$024 = $137;
  } else {
   break;
  }
 }
 _free($46);
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $$ = 0, $$0$reg2mem$0 = 0, $$30 = 0, $$fhigh$1 = 0, $$i$3 = 0, $$i$3$1 = 0, $$i$3$2 = 0, $$i$5 = 0, $$masked = 0, $$not = 0, $$pr = 0, $$pr31 = 0.0, $$pr32 = 0, $$reg2mem1277$0 = 0, $$reg2mem1291$0 = 0.0, $$reg2mem1293$0 = 0, $$reg2mem1297$0 = 0, $$reg2mem1381$0 = 0, $$reg2mem1383$0 = 0, $$reg2mem493$0 = 0;
 var $$reg2mem493$1 = 0, $$reg2mem493$1$phi = 0, $$reg2mem495$0 = 0, $$reg2mem495$1 = 0, $$reg2mem495$1$phi = 0, $$reg2mem497$0 = 0, $$reg2mem497$1 = 0, $$reg2mem497$1$phi = 0, $$reg2mem499$0 = 0, $$reg2mem499$1 = 0, $$reg2mem499$1$phi = 0, $$reg2mem504$0 = 0, $$reg2mem504$1 = 0, $$reg2mem504$1$phi = 0, $$reg2mem506$0 = 0, $$reg2mem506$1 = 0, $$reg2mem506$1$phi = 0, $$reg2mem508$0 = 0, $$reg2mem508$1 = 0, $$reg2mem508$1$phi = 0;
 var $$reg2mem510$0 = 0, $$reg2mem510$1 = 0, $$reg2mem510$1$phi = 0, $$reg2mem512$0 = 0, $$reg2mem512$1 = 0, $$reg2mem512$1$phi = 0, $$reg2mem514$0 = 0, $$reg2mem514$1 = 0, $$reg2mem514$1$phi = 0, $$reg2mem516$0 = 0, $$reg2mem516$1 = 0, $$reg2mem516$1$phi = 0, $$reg2mem518$0 = 0, $$reg2mem518$1 = 0, $$reg2mem518$1$phi = 0, $$reg2mem520$0 = 0, $$reg2mem520$1 = 0, $$reg2mem520$1$phi = 0, $$reg2mem523$0 = 0, $$reg2mem523$1 = 0;
 var $$reg2mem523$1$phi = 0, $$reg2mem527$0 = 0, $$reg2mem527$1 = 0, $$reg2mem527$1$phi = 0, $$reg2mem530$0 = 0, $$reg2mem530$1 = 0, $$reg2mem530$1$phi = 0, $$reg2mem532$0 = 0, $$reg2mem532$1 = 0, $$reg2mem532$1$phi = 0, $$reg2mem534$0 = 0, $$reg2mem534$1 = 0, $$reg2mem534$1$phi = 0, $$reg2mem541$0 = 0, $$reg2mem541$1 = 0, $$reg2mem541$1$phi = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0;
 var $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0.0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0, $556 = 0.0, $557 = 0.0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0.0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0.0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0.0, $746 = 0.0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0.0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0.0, $759 = 0.0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0.0, $764 = 0.0, $765 = 0, $766 = 0, $767 = 0, $768 = 0.0, $769 = 0.0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0.0, $774 = 0.0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $arg$0$be$reg2mem1329$0 = 0, $arg$0$lcssa$reg2mem1325$0 = 0, $arg$0119$reg2mem1379$0 = 0, $arg$3$reg2mem1327$0 = 0, $arg$496$reg2mem$0 = 0, $arg$496$reg2mem$0$phi = 0, $arg$496$reg2mem1299$0 = 0, $arg$5$reg2mem$0 = 0, $bpfile$0$be$reg2mem1333$0 = 0, $bpfile$0$lcssa$reg2mem$0 = 0, $bpfile$0$lcssa$reg2mem$1 = 0, $bpfile$0$lcssa$reg2mem$1$phi = 0, $bpfile$0$lcssa$reg2mem1321$0 = 0, $bpfile$0117$reg2mem1375$0 = 0, $c$289$reg2mem1287$0 = 0, $c$391$reg2mem1285$0 = 0, $c$780$reg2mem$0 = 0, $c$881$reg2mem$0 = 0;
 var $cond = 0, $cond1 = 0, $cond10 = 0, $cond100 = 0, $cond101 = 0, $cond102 = 0, $cond103 = 0, $cond104 = 0, $cond105 = 0, $cond106 = 0, $cond107 = 0, $cond108 = 0, $cond109 = 0, $cond11 = 0, $cond110 = 0, $cond111 = 0, $cond112 = 0, $cond113 = 0, $cond114 = 0, $cond115 = 0;
 var $cond116 = 0, $cond117 = 0, $cond118 = 0, $cond119 = 0, $cond12 = 0, $cond120 = 0, $cond121 = 0, $cond122 = 0, $cond123 = 0, $cond124 = 0, $cond125 = 0, $cond126 = 0, $cond127 = 0, $cond128 = 0, $cond129 = 0, $cond13 = 0, $cond130 = 0, $cond131 = 0, $cond132 = 0, $cond133 = 0;
 var $cond134 = 0, $cond135 = 0, $cond136 = 0, $cond137 = 0, $cond138 = 0, $cond139 = 0, $cond14 = 0, $cond140 = 0, $cond141 = 0, $cond142 = 0, $cond143 = 0, $cond144 = 0, $cond145 = 0, $cond146 = 0, $cond147 = 0, $cond148 = 0, $cond149 = 0, $cond15 = 0, $cond150 = 0, $cond151 = 0;
 var $cond152 = 0, $cond153 = 0, $cond154 = 0, $cond155 = 0, $cond156 = 0, $cond157 = 0, $cond158 = 0, $cond159 = 0, $cond16 = 0, $cond160 = 0, $cond161 = 0, $cond162 = 0, $cond163 = 0, $cond164 = 0, $cond165 = 0, $cond166 = 0, $cond167 = 0, $cond168 = 0, $cond169 = 0, $cond17 = 0;
 var $cond170 = 0, $cond171 = 0, $cond172 = 0, $cond173 = 0, $cond18 = 0, $cond19 = 0, $cond2 = 0, $cond20 = 0, $cond21 = 0, $cond22 = 0, $cond23 = 0, $cond24 = 0, $cond25 = 0, $cond26 = 0, $cond27 = 0, $cond28 = 0, $cond29 = 0, $cond3 = 0, $cond30 = 0, $cond31 = 0;
 var $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0, $cond37 = 0, $cond38 = 0, $cond39 = 0, $cond4 = 0, $cond40 = 0, $cond41 = 0, $cond42 = 0, $cond43 = 0, $cond44 = 0, $cond45 = 0, $cond46 = 0, $cond47 = 0, $cond48 = 0, $cond49 = 0, $cond5 = 0;
 var $cond50 = 0, $cond51 = 0, $cond52 = 0, $cond53 = 0, $cond54 = 0, $cond55 = 0, $cond56 = 0, $cond57 = 0, $cond58 = 0, $cond59 = 0, $cond6 = 0, $cond60 = 0, $cond61 = 0, $cond62 = 0, $cond63 = 0, $cond64 = 0, $cond65 = 0, $cond66 = 0, $cond67 = 0, $cond68 = 0;
 var $cond69 = 0, $cond7 = 0, $cond70 = 0, $cond71 = 0, $cond72 = 0, $cond73 = 0, $cond74 = 0, $cond75 = 0, $cond76 = 0, $cond77 = 0, $cond78 = 0, $cond79 = 0, $cond8 = 0, $cond80 = 0, $cond81 = 0, $cond82 = 0, $cond83 = 0, $cond84 = 0, $cond85 = 0, $cond86 = 0;
 var $cond87 = 0, $cond88 = 0, $cond89 = 0, $cond9 = 0, $cond90 = 0, $cond91 = 0, $cond92 = 0, $cond93 = 0, $cond94 = 0, $cond95 = 0, $cond96 = 0, $cond97 = 0, $cond98 = 0, $cond99 = 0, $dark_frame$0$be$reg2mem1331$0 = 0, $dark_frame$0$lcssa$reg2mem$0 = 0, $dark_frame$0$lcssa$reg2mem$1 = 0, $dark_frame$0$lcssa$reg2mem$1$phi = 0, $dark_frame$0$lcssa$reg2mem1323$0 = 0, $dark_frame$0118$reg2mem1377$0 = 0;
 var $endptr = 0, $fhigh$1 = 0, $fhigh$3 = 0, $fwide$1 = 0, $i$0101$reg2mem$0 = 0, $i$290$reg2mem1289$0 = 0, $i$5$lcssa$reg2mem1281$0 = 0, $i$579$reg2mem$0 = 0, $i$784$reg2mem1279$0 = 0, $i$886$reg2mem$0 = 0, $identify_only$0$be$reg2mem1349$0 = 0, $identify_only$0$lcssa$reg2mem$0 = 0, $identify_only$0$lcssa$reg2mem$1 = 0, $identify_only$0$lcssa$reg2mem$1$phi = 0, $identify_only$0$lcssa$reg2mem1305$0 = 0, $identify_only$0109$reg2mem1359$0 = 0, $isdigit = 0, $isdigit27 = 0, $isdigittmp = 0, $isdigittmp26 = 0;
 var $ispos = 0, $memchr = 0, $neg = 0, $ofname$0$reg2mem1269$0 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $read_from_stdin$0$be$reg2mem1335$0 = 0;
 var $read_from_stdin$0$lcssa$reg2mem1319$0 = 0, $read_from_stdin$0116$reg2mem1373$0 = 0, $status$1$reg2mem1295$0 = 0, $status$2$reg2mem1283$0 = 0, $status$3$reg2mem1275$0 = 0, $status$4$reg2mem1271$0 = 0, $status$5$reg2mem1267$0 = 0, $strlen = 0, $thumbnail_only$0$be$reg2mem1351$0 = 0, $thumbnail_only$0$lcssa$reg2mem1303$0 = 0, $thumbnail_only$0108$reg2mem1357$0 = 0, $timestamp_only$0$be$reg2mem1353$0 = 0, $timestamp_only$0$lcssa$reg2mem1301$0 = 0, $timestamp_only$0107$reg2mem1355$0 = 0, $use_fuji_rotate$0$be$reg2mem1339$0 = 0, $use_fuji_rotate$0$lcssa$reg2mem1315$0 = 0, $use_fuji_rotate$0114$reg2mem1369$0 = 0, $user_black$0$ = 0, $user_black$0$be$reg2mem1345$0 = 0, $user_black$0$lcssa$reg2mem$0 = 0;
 var $user_black$0$lcssa$reg2mem$1 = 0, $user_black$0$lcssa$reg2mem$1$phi = 0, $user_black$0$lcssa$reg2mem1309$0 = 0, $user_black$0111$reg2mem1363$0 = 0, $user_flip$0$be$reg2mem1341$0 = 0, $user_flip$0$lcssa$reg2mem$0 = 0, $user_flip$0$lcssa$reg2mem$1 = 0, $user_flip$0$lcssa$reg2mem$1$phi = 0, $user_flip$0$lcssa$reg2mem1313$0 = 0, $user_flip$0113$reg2mem1367$0 = 0, $user_qual$0$ = 0, $user_qual$0$be$reg2mem1347$0 = 0, $user_qual$0$lcssa$reg2mem$0 = 0, $user_qual$0$lcssa$reg2mem$1 = 0, $user_qual$0$lcssa$reg2mem$1$phi = 0, $user_qual$0$lcssa$reg2mem1307$0 = 0, $user_qual$0110$reg2mem1361$0 = 0, $user_sat$0$be$reg2mem1343$0 = 0, $user_sat$0$lcssa$reg2mem$0 = 0, $user_sat$0$lcssa$reg2mem$1 = 0;
 var $user_sat$0$lcssa$reg2mem$1$phi = 0, $user_sat$0$lcssa$reg2mem1311$0 = 0, $user_sat$0112$reg2mem1365$0 = 0, $ut = 0, $vararg_buffer = 0, $vararg_buffer1385 = 0, $vararg_buffer1388 = 0, $vararg_buffer1391 = 0, $vararg_buffer1394 = 0, $vararg_buffer1397 = 0, $vararg_buffer1402 = 0, $vararg_buffer1406 = 0, $vararg_buffer1409 = 0, $vararg_buffer1412 = 0, $vararg_buffer1415 = 0, $vararg_buffer1419 = 0, $vararg_buffer1422 = 0, $vararg_buffer1424 = 0, $vararg_buffer1428 = 0, $vararg_buffer1432 = 0;
 var $vararg_buffer1436 = 0, $vararg_buffer1440 = 0, $vararg_buffer1443 = 0, $vararg_buffer1445 = 0, $vararg_buffer1447 = 0, $vararg_buffer1450 = 0, $vararg_buffer1453 = 0, $vararg_buffer1456 = 0, $vararg_buffer1459 = 0, $vararg_buffer1462 = 0, $vararg_buffer1465 = 0, $vararg_buffer1469 = 0, $vararg_buffer1473 = 0, $vararg_buffer1476 = 0, $vararg_buffer1480 = 0, $vararg_buffer1484 = 0, $vararg_buffer1487 = 0, $vararg_buffer1489 = 0, $vararg_buffer1491 = 0, $vararg_buffer1494 = 0;
 var $vararg_buffer1496 = 0, $vararg_buffer1499 = 0, $vararg_buffer1502 = 0, $vararg_buffer1505 = 0, $vararg_buffer1508 = 0, $vararg_buffer1513 = 0, $vararg_buffer1518 = 0, $vararg_buffer1522 = 0, $vararg_buffer1525 = 0, $vararg_buffer1529 = 0, $vararg_ptr1400 = 0, $vararg_ptr1401 = 0, $vararg_ptr1405 = 0, $vararg_ptr1418 = 0, $vararg_ptr1427 = 0, $vararg_ptr1431 = 0, $vararg_ptr1435 = 0, $vararg_ptr1439 = 0, $vararg_ptr1468 = 0, $vararg_ptr1472 = 0;
 var $vararg_ptr1479 = 0, $vararg_ptr1483 = 0, $vararg_ptr1511 = 0, $vararg_ptr1512 = 0, $vararg_ptr1516 = 0, $vararg_ptr1517 = 0, $vararg_ptr1521 = 0, $vararg_ptr1528 = 0, $write_ext$0$reg2mem1273$0 = 0, $write_to_stdout$0$be$reg2mem1337$0 = 0, $write_to_stdout$0$lcssa$reg2mem1317$0 = 0, $write_to_stdout$0115$reg2mem1371$0 = 0, _setjmpTable = 0, _setjmpTableSize = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $vararg_buffer1529 = sp + 384|0;
 $vararg_buffer1525 = sp + 376|0;
 $vararg_buffer1522 = sp + 368|0;
 $vararg_buffer1518 = sp + 360|0;
 $vararg_buffer1513 = sp + 344|0;
 $vararg_buffer1508 = sp + 328|0;
 $vararg_buffer1505 = sp + 320|0;
 $vararg_buffer1502 = sp + 312|0;
 $vararg_buffer1499 = sp + 304|0;
 $vararg_buffer1496 = sp + 296|0;
 $vararg_buffer1494 = sp + 288|0;
 $vararg_buffer1491 = sp + 280|0;
 $vararg_buffer1489 = sp + 272|0;
 $vararg_buffer1487 = sp + 264|0;
 $vararg_buffer1484 = sp + 256|0;
 $vararg_buffer1480 = sp + 248|0;
 $vararg_buffer1476 = sp + 240|0;
 $vararg_buffer1473 = sp + 232|0;
 $vararg_buffer1469 = sp + 224|0;
 $vararg_buffer1465 = sp + 216|0;
 $vararg_buffer1462 = sp + 208|0;
 $vararg_buffer1459 = sp + 200|0;
 $vararg_buffer1456 = sp + 192|0;
 $vararg_buffer1453 = sp + 184|0;
 $vararg_buffer1450 = sp + 176|0;
 $vararg_buffer1447 = sp + 168|0;
 $vararg_buffer1445 = sp + 160|0;
 $vararg_buffer1443 = sp + 152|0;
 $vararg_buffer1440 = sp + 144|0;
 $vararg_buffer1436 = sp + 136|0;
 $vararg_buffer1432 = sp + 128|0;
 $vararg_buffer1428 = sp + 120|0;
 $vararg_buffer1424 = sp + 112|0;
 $vararg_buffer1422 = sp + 104|0;
 $vararg_buffer1419 = sp + 96|0;
 $vararg_buffer1415 = sp + 88|0;
 $vararg_buffer1412 = sp + 80|0;
 $vararg_buffer1409 = sp + 72|0;
 $vararg_buffer1406 = sp + 64|0;
 $vararg_buffer1402 = sp + 56|0;
 $vararg_buffer1397 = sp + 40|0;
 $vararg_buffer1394 = sp + 32|0;
 $vararg_buffer1391 = sp + 24|0;
 $vararg_buffer1388 = sp + 16|0;
 $vararg_buffer1385 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $ut = sp + 392|0;
 __THREW__ = 0;
 (invoke_ii(1,(623728|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 if ((($0|0) != 0) & ((threwValue|0) != 0)) { $1 = _testSetjmp(HEAP32[$0>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1|0) == 0) { _longjmp($0|0, threwValue|0); } tempRet0 = threwValue; } else { $1 = -1; };
 $2 = tempRet0;
 $cond = ($1|0)==(1);
 L1: do {
  if ($cond) {
   $$reg2mem1297$0 = $2;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
  } else {
   $3 = ($argc|0)==(1);
   if ($3) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = 623768;
    (invoke_iii(1,(623736|0),($vararg_buffer|0))|0);
    $4 = __THREW__; __THREW__ = 0;
    if ((($4|0) != 0) & ((threwValue|0) != 0)) { $5 = _testSetjmp(HEAP32[$4>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($5|0) == 0) { _longjmp($4|0, threwValue|0); } tempRet0 = threwValue; } else { $5 = -1; };
    $6 = tempRet0;
    $cond31 = ($5|0)==(1);
    if ($cond31) {
     $$reg2mem1297$0 = $6;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(626528|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = threwValue; } else { $8 = -1; };
    $9 = tempRet0;
    $cond32 = ($8|0)==(1);
    if ($cond32) {
     $$reg2mem1297$0 = $9;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    $10 = HEAP32[$argv>>2]|0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer1385>>2] = $10;
    (invoke_iii(1,(623776|0),($vararg_buffer1385|0))|0);
    $11 = __THREW__; __THREW__ = 0;
    if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = threwValue; } else { $12 = -1; };
    $13 = tempRet0;
    $cond33 = ($12|0)==(1);
    if ($cond33) {
     $$reg2mem1297$0 = $13;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(623816|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = threwValue; } else { $15 = -1; };
    $16 = tempRet0;
    $cond34 = ($15|0)==(1);
    if ($cond34) {
     $$reg2mem1297$0 = $16;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(623856|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = threwValue; } else { $18 = -1; };
    $19 = tempRet0;
    $cond35 = ($18|0)==(1);
    if ($cond35) {
     $$reg2mem1297$0 = $19;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(623904|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    if ((($20|0) != 0) & ((threwValue|0) != 0)) { $21 = _testSetjmp(HEAP32[$20>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($21|0) == 0) { _longjmp($20|0, threwValue|0); } tempRet0 = threwValue; } else { $21 = -1; };
    $22 = tempRet0;
    $cond36 = ($21|0)==(1);
    if ($cond36) {
     $$reg2mem1297$0 = $22;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(623952|0))|0);
    $23 = __THREW__; __THREW__ = 0;
    if ((($23|0) != 0) & ((threwValue|0) != 0)) { $24 = _testSetjmp(HEAP32[$23>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($24|0) == 0) { _longjmp($23|0, threwValue|0); } tempRet0 = threwValue; } else { $24 = -1; };
    $25 = tempRet0;
    $cond37 = ($24|0)==(1);
    if ($cond37) {
     $$reg2mem1297$0 = $25;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624000|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = threwValue; } else { $27 = -1; };
    $28 = tempRet0;
    $cond38 = ($27|0)==(1);
    if ($cond38) {
     $$reg2mem1297$0 = $28;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624048|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = threwValue; } else { $30 = -1; };
    $31 = tempRet0;
    $cond39 = ($30|0)==(1);
    if ($cond39) {
     $$reg2mem1297$0 = $31;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624096|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = threwValue; } else { $33 = -1; };
    $34 = tempRet0;
    $cond40 = ($33|0)==(1);
    if ($cond40) {
     $$reg2mem1297$0 = $34;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624144|0))|0);
    $35 = __THREW__; __THREW__ = 0;
    if ((($35|0) != 0) & ((threwValue|0) != 0)) { $36 = _testSetjmp(HEAP32[$35>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($36|0) == 0) { _longjmp($35|0, threwValue|0); } tempRet0 = threwValue; } else { $36 = -1; };
    $37 = tempRet0;
    $cond41 = ($36|0)==(1);
    if ($cond41) {
     $$reg2mem1297$0 = $37;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624200|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
    $40 = tempRet0;
    $cond42 = ($39|0)==(1);
    if ($cond42) {
     $$reg2mem1297$0 = $40;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624256|0))|0);
    $41 = __THREW__; __THREW__ = 0;
    if ((($41|0) != 0) & ((threwValue|0) != 0)) { $42 = _testSetjmp(HEAP32[$41>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($42|0) == 0) { _longjmp($41|0, threwValue|0); } tempRet0 = threwValue; } else { $42 = -1; };
    $43 = tempRet0;
    $cond43 = ($42|0)==(1);
    if ($cond43) {
     $$reg2mem1297$0 = $43;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624296|0))|0);
    $44 = __THREW__; __THREW__ = 0;
    if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
    $46 = tempRet0;
    $cond44 = ($45|0)==(1);
    if ($cond44) {
     $$reg2mem1297$0 = $46;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624352|0))|0);
    $47 = __THREW__; __THREW__ = 0;
    if ((($47|0) != 0) & ((threwValue|0) != 0)) { $48 = _testSetjmp(HEAP32[$47>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($48|0) == 0) { _longjmp($47|0, threwValue|0); } tempRet0 = threwValue; } else { $48 = -1; };
    $49 = tempRet0;
    $cond45 = ($48|0)==(1);
    if ($cond45) {
     $$reg2mem1297$0 = $49;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624392|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    if ((($50|0) != 0) & ((threwValue|0) != 0)) { $51 = _testSetjmp(HEAP32[$50>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($51|0) == 0) { _longjmp($50|0, threwValue|0); } tempRet0 = threwValue; } else { $51 = -1; };
    $52 = tempRet0;
    $cond46 = ($51|0)==(1);
    if ($cond46) {
     $$reg2mem1297$0 = $52;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624448|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = threwValue; } else { $54 = -1; };
    $55 = tempRet0;
    $cond47 = ($54|0)==(1);
    if ($cond47) {
     $$reg2mem1297$0 = $55;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624496|0))|0);
    $56 = __THREW__; __THREW__ = 0;
    if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = threwValue; } else { $57 = -1; };
    $58 = tempRet0;
    $cond48 = ($57|0)==(1);
    if ($cond48) {
     $$reg2mem1297$0 = $58;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624536|0))|0);
    $59 = __THREW__; __THREW__ = 0;
    if ((($59|0) != 0) & ((threwValue|0) != 0)) { $60 = _testSetjmp(HEAP32[$59>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($60|0) == 0) { _longjmp($59|0, threwValue|0); } tempRet0 = threwValue; } else { $60 = -1; };
    $61 = tempRet0;
    $cond49 = ($60|0)==(1);
    if ($cond49) {
     $$reg2mem1297$0 = $61;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624576|0))|0);
    $62 = __THREW__; __THREW__ = 0;
    if ((($62|0) != 0) & ((threwValue|0) != 0)) { $63 = _testSetjmp(HEAP32[$62>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($63|0) == 0) { _longjmp($62|0, threwValue|0); } tempRet0 = threwValue; } else { $63 = -1; };
    $64 = tempRet0;
    $cond50 = ($63|0)==(1);
    if ($cond50) {
     $$reg2mem1297$0 = $64;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624624|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    if ((($65|0) != 0) & ((threwValue|0) != 0)) { $66 = _testSetjmp(HEAP32[$65>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($66|0) == 0) { _longjmp($65|0, threwValue|0); } tempRet0 = threwValue; } else { $66 = -1; };
    $67 = tempRet0;
    $cond51 = ($66|0)==(1);
    if ($cond51) {
     $$reg2mem1297$0 = $67;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624696|0))|0);
    $68 = __THREW__; __THREW__ = 0;
    if ((($68|0) != 0) & ((threwValue|0) != 0)) { $69 = _testSetjmp(HEAP32[$68>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($69|0) == 0) { _longjmp($68|0, threwValue|0); } tempRet0 = threwValue; } else { $69 = -1; };
    $70 = tempRet0;
    $cond52 = ($69|0)==(1);
    if ($cond52) {
     $$reg2mem1297$0 = $70;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624752|0))|0);
    $71 = __THREW__; __THREW__ = 0;
    if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = threwValue; } else { $72 = -1; };
    $73 = tempRet0;
    $cond53 = ($72|0)==(1);
    if ($cond53) {
     $$reg2mem1297$0 = $73;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624816|0))|0);
    $74 = __THREW__; __THREW__ = 0;
    if ((($74|0) != 0) & ((threwValue|0) != 0)) { $75 = _testSetjmp(HEAP32[$74>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($75|0) == 0) { _longjmp($74|0, threwValue|0); } tempRet0 = threwValue; } else { $75 = -1; };
    $76 = tempRet0;
    $cond54 = ($75|0)==(1);
    if ($cond54) {
     $$reg2mem1297$0 = $76;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624872|0))|0);
    $77 = __THREW__; __THREW__ = 0;
    if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = threwValue; } else { $78 = -1; };
    $79 = tempRet0;
    $cond55 = ($78|0)==(1);
    if ($cond55) {
     $$reg2mem1297$0 = $79;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624928|0))|0);
    $80 = __THREW__; __THREW__ = 0;
    if ((($80|0) != 0) & ((threwValue|0) != 0)) { $81 = _testSetjmp(HEAP32[$80>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($81|0) == 0) { _longjmp($80|0, threwValue|0); } tempRet0 = threwValue; } else { $81 = -1; };
    $82 = tempRet0;
    $cond56 = ($81|0)==(1);
    if ($cond56) {
     $$reg2mem1297$0 = $82;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(624976|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    if ((($83|0) != 0) & ((threwValue|0) != 0)) { $84 = _testSetjmp(HEAP32[$83>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($84|0) == 0) { _longjmp($83|0, threwValue|0); } tempRet0 = threwValue; } else { $84 = -1; };
    $85 = tempRet0;
    $cond57 = ($84|0)==(1);
    if ($cond57) {
     $$reg2mem1297$0 = $85;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625032|0))|0);
    $86 = __THREW__; __THREW__ = 0;
    if ((($86|0) != 0) & ((threwValue|0) != 0)) { $87 = _testSetjmp(HEAP32[$86>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($87|0) == 0) { _longjmp($86|0, threwValue|0); } tempRet0 = threwValue; } else { $87 = -1; };
    $88 = tempRet0;
    $cond58 = ($87|0)==(1);
    if ($cond58) {
     $$reg2mem1297$0 = $88;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625080|0))|0);
    $89 = __THREW__; __THREW__ = 0;
    if ((($89|0) != 0) & ((threwValue|0) != 0)) { $90 = _testSetjmp(HEAP32[$89>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($90|0) == 0) { _longjmp($89|0, threwValue|0); } tempRet0 = threwValue; } else { $90 = -1; };
    $91 = tempRet0;
    $cond59 = ($90|0)==(1);
    if ($cond59) {
     $$reg2mem1297$0 = $91;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625136|0))|0);
    $92 = __THREW__; __THREW__ = 0;
    if ((($92|0) != 0) & ((threwValue|0) != 0)) { $93 = _testSetjmp(HEAP32[$92>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($93|0) == 0) { _longjmp($92|0, threwValue|0); } tempRet0 = threwValue; } else { $93 = -1; };
    $94 = tempRet0;
    $cond60 = ($93|0)==(1);
    if ($cond60) {
     $$reg2mem1297$0 = $94;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625176|0))|0);
    $95 = __THREW__; __THREW__ = 0;
    if ((($95|0) != 0) & ((threwValue|0) != 0)) { $96 = _testSetjmp(HEAP32[$95>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($96|0) == 0) { _longjmp($95|0, threwValue|0); } tempRet0 = threwValue; } else { $96 = -1; };
    $97 = tempRet0;
    $cond61 = ($96|0)==(1);
    if ($cond61) {
     $$reg2mem1297$0 = $97;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625240|0))|0);
    $98 = __THREW__; __THREW__ = 0;
    if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = threwValue; } else { $99 = -1; };
    $100 = tempRet0;
    $cond62 = ($99|0)==(1);
    if ($cond62) {
     $$reg2mem1297$0 = $100;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625288|0))|0);
    $101 = __THREW__; __THREW__ = 0;
    if ((($101|0) != 0) & ((threwValue|0) != 0)) { $102 = _testSetjmp(HEAP32[$101>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($102|0) == 0) { _longjmp($101|0, threwValue|0); } tempRet0 = threwValue; } else { $102 = -1; };
    $103 = tempRet0;
    $cond63 = ($102|0)==(1);
    if ($cond63) {
     $$reg2mem1297$0 = $103;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625344|0))|0);
    $104 = __THREW__; __THREW__ = 0;
    if ((($104|0) != 0) & ((threwValue|0) != 0)) { $105 = _testSetjmp(HEAP32[$104>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($105|0) == 0) { _longjmp($104|0, threwValue|0); } tempRet0 = threwValue; } else { $105 = -1; };
    $106 = tempRet0;
    $cond64 = ($105|0)==(1);
    if ($cond64) {
     $$reg2mem1297$0 = $106;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625408|0))|0);
    $107 = __THREW__; __THREW__ = 0;
    if ((($107|0) != 0) & ((threwValue|0) != 0)) { $108 = _testSetjmp(HEAP32[$107>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($108|0) == 0) { _longjmp($107|0, threwValue|0); } tempRet0 = threwValue; } else { $108 = -1; };
    $109 = tempRet0;
    $cond65 = ($108|0)==(1);
    if ($cond65) {
     $$reg2mem1297$0 = $109;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625448|0))|0);
    $110 = __THREW__; __THREW__ = 0;
    if ((($110|0) != 0) & ((threwValue|0) != 0)) { $111 = _testSetjmp(HEAP32[$110>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($111|0) == 0) { _longjmp($110|0, threwValue|0); } tempRet0 = threwValue; } else { $111 = -1; };
    $112 = tempRet0;
    $cond66 = ($111|0)==(1);
    if ($cond66) {
     $$reg2mem1297$0 = $112;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(2,(625496|0))|0);
    $113 = __THREW__; __THREW__ = 0;
    if ((($113|0) != 0) & ((threwValue|0) != 0)) { $114 = _testSetjmp(HEAP32[$113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($114|0) == 0) { _longjmp($113|0, threwValue|0); } tempRet0 = threwValue; } else { $114 = -1; };
    $115 = tempRet0;
    $cond67 = ($114|0)==(1);
    if ($cond67) {
     $$reg2mem1297$0 = $115;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(3,10)|0);
    $116 = __THREW__; __THREW__ = 0;
    if ((($116|0) != 0) & ((threwValue|0) != 0)) { $117 = _testSetjmp(HEAP32[$116>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($117|0) == 0) { _longjmp($116|0, threwValue|0); } tempRet0 = threwValue; } else { $117 = -1; };
    $118 = tempRet0;
    $cond68 = ($117|0)==(1);
    if ($cond68) {
     $$reg2mem1297$0 = $118;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
     break;
    }
    $$0$reg2mem$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0$reg2mem$0|0);
   }
   $119 = (($argv) + ($argc<<2)|0);
   HEAP32[$119>>2] = 455816;
   $120 = (($argv) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = HEAP8[$121>>0]|0;
   $123 = $122 << 24 >> 24;
   $124 = (($123) + -2)|0;
   $125 = $124 | 2;
   $126 = ($125|0)==(43);
   L45: do {
    if ($126) {
     $$reg2mem1381$0 = $121;$$reg2mem1383$0 = $122;$arg$0119$reg2mem1379$0 = 1;$bpfile$0117$reg2mem1375$0 = 0;$dark_frame$0118$reg2mem1377$0 = 0;$identify_only$0109$reg2mem1359$0 = 0;$read_from_stdin$0116$reg2mem1373$0 = 0;$thumbnail_only$0108$reg2mem1357$0 = 0;$timestamp_only$0107$reg2mem1355$0 = 0;$use_fuji_rotate$0114$reg2mem1369$0 = 1;$user_black$0111$reg2mem1363$0 = -1;$user_flip$0113$reg2mem1367$0 = -1;$user_qual$0110$reg2mem1361$0 = -1;$user_sat$0112$reg2mem1365$0 = -1;$write_to_stdout$0115$reg2mem1371$0 = 0;
     L46: while(1) {
      $127 = (($arg$0119$reg2mem1379$0) + 1)|0;
      $128 = (($$reg2mem1381$0) + 1|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129 << 24 >> 24;
      __THREW__ = 0;
      $memchr = (invoke_iiii(2,(625536|0),($130|0),13)|0);
      $131 = __THREW__; __THREW__ = 0;
      if ((($131|0) != 0) & ((threwValue|0) != 0)) { $132 = _testSetjmp(HEAP32[$131>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($132|0) == 0) { _longjmp($131|0, threwValue|0); } tempRet0 = threwValue; } else { $132 = -1; };
      $133 = tempRet0;
      $cond5 = ($132|0)==(1);
      if ($cond5) {
       $$reg2mem1297$0 = $133;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
       break L1;
      }
      $134 = ($memchr|0)==(0|0);
      if (!($134)) {
       $135 = $memchr;
       $136 = (($135) - (625536))|0;
       $137 = (625552 + ($136)|0);
       $138 = ($136|0)==(12);
       if (!($138)) {
        $i$0101$reg2mem$0 = 0;
        while(1) {
         $144 = (($i$0101$reg2mem$0) + ($127))|0;
         $145 = (($argv) + ($144<<2)|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = HEAP8[$146>>0]|0;
         $148 = $147 << 24 >> 24;
         $isdigittmp26 = (($148) + -48)|0;
         $isdigit27 = ($isdigittmp26>>>0)<(10);
         $142 = (($i$0101$reg2mem$0) + 1)|0;
         if (!($isdigit27)) {
          label = 48;
          break L46;
         }
         $139 = HEAP8[$137>>0]|0;
         $140 = $139 << 24 >> 24;
         $141 = (($140) + -48)|0;
         $143 = ($142|0)<($141|0);
         if ($143) {
          $i$0101$reg2mem$0 = $142;
         } else {
          break;
         }
        }
       }
      }
      do {
       switch ($130|0) {
       case 98:  {
        $161 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $162 = (($argv) + ($127<<2)|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (+invoke_di(1,($163|0)));
        $165 = __THREW__; __THREW__ = 0;
        if ((($165|0) != 0) & ((threwValue|0) != 0)) { $166 = _testSetjmp(HEAP32[$165>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($166|0) == 0) { _longjmp($165|0, threwValue|0); } tempRet0 = threwValue; } else { $166 = -1; };
        $167 = tempRet0;
        $cond28 = ($166|0)==(1);
        if ($cond28) {
         $$reg2mem1297$0 = $167;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $168 = $164;
        HEAPF32[104>>2] = $168;
        $arg$0$be$reg2mem1329$0 = $161;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 114:  {
        $169 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $170 = (($argv) + ($127<<2)|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (+invoke_di(1,($171|0)));
        $173 = __THREW__; __THREW__ = 0;
        if ((($173|0) != 0) & ((threwValue|0) != 0)) { $174 = _testSetjmp(HEAP32[$173>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($174|0) == 0) { _longjmp($173|0, threwValue|0); } tempRet0 = threwValue; } else { $174 = -1; };
        $175 = tempRet0;
        $cond24 = ($174|0)==(1);
        if ($cond24) {
         $$reg2mem1297$0 = $175;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $176 = $172;
        HEAPF32[112>>2] = $176;
        $177 = (($arg$0119$reg2mem1379$0) + 3)|0;
        $178 = (($argv) + ($169<<2)|0);
        $179 = HEAP32[$178>>2]|0;
        __THREW__ = 0;
        $180 = (+invoke_di(1,($179|0)));
        $181 = __THREW__; __THREW__ = 0;
        if ((($181|0) != 0) & ((threwValue|0) != 0)) { $182 = _testSetjmp(HEAP32[$181>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($182|0) == 0) { _longjmp($181|0, threwValue|0); } tempRet0 = threwValue; } else { $182 = -1; };
        $183 = tempRet0;
        $cond25 = ($182|0)==(1);
        if ($cond25) {
         $$reg2mem1297$0 = $183;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $184 = $180;
        HEAPF32[((112 + 4|0))>>2] = $184;
        $185 = (($arg$0119$reg2mem1379$0) + 4)|0;
        $186 = (($argv) + ($177<<2)|0);
        $187 = HEAP32[$186>>2]|0;
        __THREW__ = 0;
        $188 = (+invoke_di(1,($187|0)));
        $189 = __THREW__; __THREW__ = 0;
        if ((($189|0) != 0) & ((threwValue|0) != 0)) { $190 = _testSetjmp(HEAP32[$189>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($190|0) == 0) { _longjmp($189|0, threwValue|0); } tempRet0 = threwValue; } else { $190 = -1; };
        $191 = tempRet0;
        $cond26 = ($190|0)==(1);
        if ($cond26) {
         $$reg2mem1297$0 = $191;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $192 = $188;
        HEAPF32[((112 + 8|0))>>2] = $192;
        $193 = (($argv) + ($185<<2)|0);
        $194 = HEAP32[$193>>2]|0;
        __THREW__ = 0;
        $195 = (+invoke_di(1,($194|0)));
        $196 = __THREW__; __THREW__ = 0;
        if ((($196|0) != 0) & ((threwValue|0) != 0)) { $197 = _testSetjmp(HEAP32[$196>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($197|0) == 0) { _longjmp($196|0, threwValue|0); } tempRet0 = threwValue; } else { $197 = -1; };
        $198 = tempRet0;
        $cond27 = ($197|0)==(1);
        if ($cond27) {
         $$reg2mem1297$0 = $198;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $199 = $195;
        HEAPF32[((112 + 12|0))>>2] = $199;
        $200 = (($arg$0119$reg2mem1379$0) + 5)|0;
        $arg$0$be$reg2mem1329$0 = $200;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 77:  {
        $344 = ($$reg2mem1383$0<<24>>24)==(43);
        $345 = $344 ? 3 : 0;
        HEAP32[192>>2] = $345;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 73:  {
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = 1;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 69:  {
        $346 = HEAP32[152>>2]|0;
        $347 = (($346) + 1)|0;
        HEAP32[152>>2] = $347;
        label = 105;
        break;
       }
       case 68:  {
        label = 105;
        break;
       }
       case 100:  {
        label = 106;
        break;
       }
       case 106:  {
        label = 107;
        break;
       }
       case 87:  {
        HEAP32[232>>2] = 1;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 84:  {
        HEAP32[216>>2] = 1;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 52:  {
        HEAP32[232>>2] = 1;
        HEAPF64[((56 + 8|0))>>3] = 1.0;
        HEAPF64[56>>3] = 1.0;
        label = 111;
        break;
       }
       case 54:  {
        label = 111;
        break;
       }
       case 83:  {
        $241 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $242 = (($argv) + ($127<<2)|0);
        $243 = HEAP32[$242>>2]|0;
        __THREW__ = 0;
        $244 = (invoke_ii(4,($243|0))|0);
        $245 = __THREW__; __THREW__ = 0;
        if ((($245|0) != 0) & ((threwValue|0) != 0)) { $246 = _testSetjmp(HEAP32[$245>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($246|0) == 0) { _longjmp($245|0, threwValue|0); } tempRet0 = threwValue; } else { $246 = -1; };
        $247 = tempRet0;
        $cond18 = ($246|0)==(1);
        if ($cond18) {
         $$reg2mem1297$0 = $247;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $arg$0$be$reg2mem1329$0 = $241;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $244;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 116:  {
        $248 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $249 = (($argv) + ($127<<2)|0);
        $250 = HEAP32[$249>>2]|0;
        __THREW__ = 0;
        $251 = (invoke_ii(4,($250|0))|0);
        $252 = __THREW__; __THREW__ = 0;
        if ((($252|0) != 0) & ((threwValue|0) != 0)) { $253 = _testSetjmp(HEAP32[$252>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($253|0) == 0) { _longjmp($252|0, threwValue|0); } tempRet0 = threwValue; } else { $253 = -1; };
        $254 = tempRet0;
        $cond17 = ($253|0)==(1);
        if ($cond17) {
         $$reg2mem1297$0 = $254;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $arg$0$be$reg2mem1329$0 = $248;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $251;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 97:  {
        $arg$3$reg2mem1327$0 = $127;
        label = 100;
        break;
       }
       case 103:  {
        $217 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $218 = (($argv) + ($127<<2)|0);
        $219 = HEAP32[$218>>2]|0;
        __THREW__ = 0;
        $220 = (+invoke_di(1,($219|0)));
        $221 = __THREW__; __THREW__ = 0;
        if ((($221|0) != 0) & ((threwValue|0) != 0)) { $222 = _testSetjmp(HEAP32[$221>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($222|0) == 0) { _longjmp($221|0, threwValue|0); } tempRet0 = threwValue; } else { $222 = -1; };
        $223 = tempRet0;
        $cond20 = ($222|0)==(1);
        if ($cond20) {
         $$reg2mem1297$0 = $223;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAPF64[56>>3] = $220;
        $224 = (($arg$0119$reg2mem1379$0) + 3)|0;
        $225 = (($argv) + ($217<<2)|0);
        $226 = HEAP32[$225>>2]|0;
        __THREW__ = 0;
        $227 = (+invoke_di(1,($226|0)));
        $228 = __THREW__; __THREW__ = 0;
        if ((($228|0) != 0) & ((threwValue|0) != 0)) { $229 = _testSetjmp(HEAP32[$228>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($229|0) == 0) { _longjmp($228|0, threwValue|0); } tempRet0 = threwValue; } else { $229 = -1; };
        $230 = tempRet0;
        $cond21 = ($229|0)==(1);
        if ($cond21) {
         $$reg2mem1297$0 = $230;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAPF64[((56 + 8|0))>>3] = $227;
        $231 = +HEAPF64[56>>3];
        $232 = $231 != 0.0;
        if ($232) {
         $233 = 1.0 / $231;
         HEAPF64[56>>3] = $233;
         $arg$0$be$reg2mem1329$0 = $224;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        } else {
         $arg$0$be$reg2mem1329$0 = $224;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        }
        break;
       }
       case 122:  {
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = 1;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 67:  {
        $201 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $202 = (($argv) + ($127<<2)|0);
        $203 = HEAP32[$202>>2]|0;
        __THREW__ = 0;
        $204 = (+invoke_di(1,($203|0)));
        $205 = __THREW__; __THREW__ = 0;
        if ((($205|0) != 0) & ((threwValue|0) != 0)) { $206 = _testSetjmp(HEAP32[$205>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($206|0) == 0) { _longjmp($205|0, threwValue|0); } tempRet0 = threwValue; } else { $206 = -1; };
        $207 = tempRet0;
        $cond22 = ($206|0)==(1);
        if ($cond22) {
         $$reg2mem1297$0 = $207;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $208 = 1.0 / $204;
        HEAPF64[24>>3] = $208;
        $209 = (($arg$0119$reg2mem1379$0) + 3)|0;
        $210 = (($argv) + ($201<<2)|0);
        $211 = HEAP32[$210>>2]|0;
        __THREW__ = 0;
        $212 = (+invoke_di(1,($211|0)));
        $213 = __THREW__; __THREW__ = 0;
        if ((($213|0) != 0) & ((threwValue|0) != 0)) { $214 = _testSetjmp(HEAP32[$213>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($214|0) == 0) { _longjmp($213|0, threwValue|0); } tempRet0 = threwValue; } else { $214 = -1; };
        $215 = tempRet0;
        $cond23 = ($214|0)==(1);
        if ($cond23) {
         $$reg2mem1297$0 = $215;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $216 = 1.0 / $212;
        HEAPF64[((24 + 16|0))>>3] = $216;
        $arg$0$be$reg2mem1329$0 = $209;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 113:  {
        $255 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $256 = (($argv) + ($127<<2)|0);
        $257 = HEAP32[$256>>2]|0;
        __THREW__ = 0;
        $258 = (invoke_ii(4,($257|0))|0);
        $259 = __THREW__; __THREW__ = 0;
        if ((($259|0) != 0) & ((threwValue|0) != 0)) { $260 = _testSetjmp(HEAP32[$259>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($260|0) == 0) { _longjmp($259|0, threwValue|0); } tempRet0 = threwValue; } else { $260 = -1; };
        $261 = tempRet0;
        $cond16 = ($260|0)==(1);
        if ($cond16) {
         $$reg2mem1297$0 = $261;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $arg$0$be$reg2mem1329$0 = $255;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $258;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 109:  {
        $262 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $263 = (($argv) + ($127<<2)|0);
        $264 = HEAP32[$263>>2]|0;
        __THREW__ = 0;
        $265 = (invoke_ii(4,($264|0))|0);
        $266 = __THREW__; __THREW__ = 0;
        if ((($266|0) != 0) & ((threwValue|0) != 0)) { $267 = _testSetjmp(HEAP32[$266>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($267|0) == 0) { _longjmp($266|0, threwValue|0); } tempRet0 = threwValue; } else { $267 = -1; };
        $268 = tempRet0;
        $cond15 = ($267|0)==(1);
        if ($cond15) {
         $$reg2mem1297$0 = $268;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAP32[224>>2] = $265;
        $arg$0$be$reg2mem1329$0 = $262;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 119:  {
        HEAP32[184>>2] = 1;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 111:  {
        $291 = (($argv) + ($127<<2)|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = HEAP8[$292>>0]|0;
        $294 = $293 << 24 >> 24;
        $isdigittmp = (($294) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $302 = (($292) + 1|0);
         $303 = HEAP8[$302>>0]|0;
         $304 = ($303<<24>>24)==(0);
         if ($304) {
          $305 = (($arg$0119$reg2mem1379$0) + 2)|0;
          __THREW__ = 0;
          $306 = (invoke_ii(4,($292|0))|0);
          $307 = __THREW__; __THREW__ = 0;
          if ((($307|0) != 0) & ((threwValue|0) != 0)) { $308 = _testSetjmp(HEAP32[$307>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($308|0) == 0) { _longjmp($307|0, threwValue|0); } tempRet0 = threwValue; } else { $308 = -1; };
          $309 = tempRet0;
          $cond11 = ($308|0)==(1);
          if ($cond11) {
           $$reg2mem1297$0 = $309;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
           break L1;
          }
          HEAP32[200>>2] = $306;
          $arg$0$be$reg2mem1329$0 = $305;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
         } else {
          $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
         }
        } else {
         $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        }
        break;
       }
       case 110:  {
        $153 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $154 = (($argv) + ($127<<2)|0);
        $155 = HEAP32[$154>>2]|0;
        __THREW__ = 0;
        $156 = (+invoke_di(1,($155|0)));
        $157 = __THREW__; __THREW__ = 0;
        if ((($157|0) != 0) & ((threwValue|0) != 0)) { $158 = _testSetjmp(HEAP32[$157>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($158|0) == 0) { _longjmp($157|0, threwValue|0); } tempRet0 = threwValue; } else { $158 = -1; };
        $159 = tempRet0;
        $cond29 = ($158|0)==(1);
        if ($cond29) {
         $$reg2mem1297$0 = $159;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $160 = $156;
        HEAPF32[128>>2] = $160;
        $arg$0$be$reg2mem1329$0 = $153;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 72:  {
        $269 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $270 = (($argv) + ($127<<2)|0);
        $271 = HEAP32[$270>>2]|0;
        __THREW__ = 0;
        $272 = (invoke_ii(4,($271|0))|0);
        $273 = __THREW__; __THREW__ = 0;
        if ((($273|0) != 0) & ((threwValue|0) != 0)) { $274 = _testSetjmp(HEAP32[$273>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($274|0) == 0) { _longjmp($273|0, threwValue|0); } tempRet0 = threwValue; } else { $274 = -1; };
        $275 = tempRet0;
        $cond14 = ($274|0)==(1);
        if ($cond14) {
         $$reg2mem1297$0 = $275;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAP32[160>>2] = $272;
        $arg$0$be$reg2mem1329$0 = $269;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 115:  {
        $276 = (($argv) + ($127<<2)|0);
        $277 = HEAP32[$276>>2]|0;
        __THREW__ = 0;
        $278 = (invoke_ii(4,($277|0))|0);
        $279 = __THREW__; __THREW__ = 0;
        if ((($279|0) != 0) & ((threwValue|0) != 0)) { $280 = _testSetjmp(HEAP32[$279>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($280|0) == 0) { _longjmp($279|0, threwValue|0); } tempRet0 = threwValue; } else { $280 = -1; };
        $281 = tempRet0;
        $cond12 = ($280|0)==(1);
        if ($cond12) {
         $$reg2mem1297$0 = $281;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $ispos = ($278|0)>(-1);
        $neg = (0 - ($278))|0;
        $282 = $ispos ? $278 : $neg;
        HEAP32[8>>2] = $282;
        $283 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $284 = HEAP32[$276>>2]|0;
        __THREW__ = 0;
        $285 = (invoke_iii(2,($284|0),(625600|0))|0);
        $286 = __THREW__; __THREW__ = 0;
        if ((($286|0) != 0) & ((threwValue|0) != 0)) { $287 = _testSetjmp(HEAP32[$286>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($287|0) == 0) { _longjmp($286|0, threwValue|0); } tempRet0 = threwValue; } else { $287 = -1; };
        $288 = tempRet0;
        $cond13 = ($287|0)==(1);
        if ($cond13) {
         $$reg2mem1297$0 = $288;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $289 = ($285|0)==(0);
        $290 = $289&1;
        HEAP32[16>>2] = $290;
        $arg$0$be$reg2mem1329$0 = $283;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 107:  {
        $234 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $235 = (($argv) + ($127<<2)|0);
        $236 = HEAP32[$235>>2]|0;
        __THREW__ = 0;
        $237 = (invoke_ii(4,($236|0))|0);
        $238 = __THREW__; __THREW__ = 0;
        if ((($238|0) != 0) & ((threwValue|0) != 0)) { $239 = _testSetjmp(HEAP32[$238>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($239|0) == 0) { _longjmp($238|0, threwValue|0); } tempRet0 = threwValue; } else { $239 = -1; };
        $240 = tempRet0;
        $cond19 = ($239|0)==(1);
        if ($cond19) {
         $$reg2mem1297$0 = $240;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        $arg$0$be$reg2mem1329$0 = $234;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $237;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 80:  {
        $310 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $311 = (($argv) + ($127<<2)|0);
        $312 = HEAP32[$311>>2]|0;
        $arg$0$be$reg2mem1329$0 = $310;$bpfile$0$be$reg2mem1333$0 = $312;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 75:  {
        $313 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $314 = (($argv) + ($127<<2)|0);
        $315 = HEAP32[$314>>2]|0;
        $arg$0$be$reg2mem1329$0 = $313;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $315;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 101:  {
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = 1;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 105:  {
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = 1;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 99:  {
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = 1;
        break;
       }
       case 118:  {
        HEAP32[168>>2] = 1;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 104:  {
        HEAP32[136>>2] = 1;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 102:  {
        HEAP32[144>>2] = 1;
        $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
        break;
       }
       case 65:  {
        $316 = (($arg$0119$reg2mem1379$0) + 2)|0;
        $317 = (($argv) + ($127<<2)|0);
        $318 = HEAP32[$317>>2]|0;
        __THREW__ = 0;
        $319 = (invoke_ii(4,($318|0))|0);
        $320 = __THREW__; __THREW__ = 0;
        if ((($320|0) != 0) & ((threwValue|0) != 0)) { $321 = _testSetjmp(HEAP32[$320>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($321|0) == 0) { _longjmp($320|0, threwValue|0); } tempRet0 = threwValue; } else { $321 = -1; };
        $322 = tempRet0;
        $cond7 = ($321|0)==(1);
        if ($cond7) {
         $$reg2mem1297$0 = $322;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAP32[240>>2] = $319;
        $323 = (($arg$0119$reg2mem1379$0) + 3)|0;
        $324 = (($argv) + ($316<<2)|0);
        $325 = HEAP32[$324>>2]|0;
        __THREW__ = 0;
        $326 = (invoke_ii(4,($325|0))|0);
        $327 = __THREW__; __THREW__ = 0;
        if ((($327|0) != 0) & ((threwValue|0) != 0)) { $328 = _testSetjmp(HEAP32[$327>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($328|0) == 0) { _longjmp($327|0, threwValue|0); } tempRet0 = threwValue; } else { $328 = -1; };
        $329 = tempRet0;
        $cond8 = ($328|0)==(1);
        if ($cond8) {
         $$reg2mem1297$0 = $329;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAP32[((240 + 4|0))>>2] = $326;
        $330 = (($arg$0119$reg2mem1379$0) + 4)|0;
        $331 = (($argv) + ($323<<2)|0);
        $332 = HEAP32[$331>>2]|0;
        __THREW__ = 0;
        $333 = (invoke_ii(4,($332|0))|0);
        $334 = __THREW__; __THREW__ = 0;
        if ((($334|0) != 0) & ((threwValue|0) != 0)) { $335 = _testSetjmp(HEAP32[$334>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($335|0) == 0) { _longjmp($334|0, threwValue|0); } tempRet0 = threwValue; } else { $335 = -1; };
        $336 = tempRet0;
        $cond9 = ($335|0)==(1);
        if ($cond9) {
         $$reg2mem1297$0 = $336;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAP32[((240 + 8|0))>>2] = $333;
        $337 = (($argv) + ($330<<2)|0);
        $338 = HEAP32[$337>>2]|0;
        __THREW__ = 0;
        $339 = (invoke_ii(4,($338|0))|0);
        $340 = __THREW__; __THREW__ = 0;
        if ((($340|0) != 0) & ((threwValue|0) != 0)) { $341 = _testSetjmp(HEAP32[$340>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($341|0) == 0) { _longjmp($340|0, threwValue|0); } tempRet0 = threwValue; } else { $341 = -1; };
        $342 = tempRet0;
        $cond10 = ($341|0)==(1);
        if ($cond10) {
         $$reg2mem1297$0 = $342;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
         break L1;
        }
        HEAP32[((240 + 12|0))>>2] = $339;
        $343 = (($arg$0119$reg2mem1379$0) + 5)|0;
        $arg$3$reg2mem1327$0 = $343;
        label = 100;
        break;
       }
       default: {
        label = 112;
        break L46;
       }
       }
      } while(0);
      if ((label|0) == 100) {
       label = 0;
       HEAP32[176>>2] = 1;
       $arg$0$be$reg2mem1329$0 = $arg$3$reg2mem1327$0;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
      }
      else if ((label|0) == 105) {
       label = 0;
       $348 = HEAP32[152>>2]|0;
       $349 = (($348) + 1)|0;
       HEAP32[152>>2] = $349;
       label = 106;
      }
      else if ((label|0) == 111) {
       label = 0;
       HEAP32[208>>2] = 16;
       $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = $use_fuji_rotate$0114$reg2mem1369$0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
      }
      if ((label|0) == 106) {
       label = 0;
       $350 = HEAP32[152>>2]|0;
       $351 = (($350) + 1)|0;
       HEAP32[152>>2] = $351;
       label = 107;
      }
      if ((label|0) == 107) {
       label = 0;
       $arg$0$be$reg2mem1329$0 = $127;$bpfile$0$be$reg2mem1333$0 = $bpfile$0117$reg2mem1375$0;$dark_frame$0$be$reg2mem1331$0 = $dark_frame$0118$reg2mem1377$0;$identify_only$0$be$reg2mem1349$0 = $identify_only$0109$reg2mem1359$0;$read_from_stdin$0$be$reg2mem1335$0 = $read_from_stdin$0116$reg2mem1373$0;$thumbnail_only$0$be$reg2mem1351$0 = $thumbnail_only$0108$reg2mem1357$0;$timestamp_only$0$be$reg2mem1353$0 = $timestamp_only$0107$reg2mem1355$0;$use_fuji_rotate$0$be$reg2mem1339$0 = 0;$user_black$0$be$reg2mem1345$0 = $user_black$0111$reg2mem1363$0;$user_flip$0$be$reg2mem1341$0 = $user_flip$0113$reg2mem1367$0;$user_qual$0$be$reg2mem1347$0 = $user_qual$0110$reg2mem1361$0;$user_sat$0$be$reg2mem1343$0 = $user_sat$0112$reg2mem1365$0;$write_to_stdout$0$be$reg2mem1337$0 = $write_to_stdout$0115$reg2mem1371$0;
      }
      $295 = (($argv) + ($arg$0$be$reg2mem1329$0<<2)|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = HEAP8[$296>>0]|0;
      $298 = $297 << 24 >> 24;
      $299 = (($298) + -2)|0;
      $300 = $299 | 2;
      $301 = ($300|0)==(43);
      if ($301) {
       $$reg2mem1381$0 = $296;$$reg2mem1383$0 = $297;$arg$0119$reg2mem1379$0 = $arg$0$be$reg2mem1329$0;$bpfile$0117$reg2mem1375$0 = $bpfile$0$be$reg2mem1333$0;$dark_frame$0118$reg2mem1377$0 = $dark_frame$0$be$reg2mem1331$0;$identify_only$0109$reg2mem1359$0 = $identify_only$0$be$reg2mem1349$0;$read_from_stdin$0116$reg2mem1373$0 = $read_from_stdin$0$be$reg2mem1335$0;$thumbnail_only$0108$reg2mem1357$0 = $thumbnail_only$0$be$reg2mem1351$0;$timestamp_only$0107$reg2mem1355$0 = $timestamp_only$0$be$reg2mem1353$0;$use_fuji_rotate$0114$reg2mem1369$0 = $use_fuji_rotate$0$be$reg2mem1339$0;$user_black$0111$reg2mem1363$0 = $user_black$0$be$reg2mem1345$0;$user_flip$0113$reg2mem1367$0 = $user_flip$0$be$reg2mem1341$0;$user_qual$0110$reg2mem1361$0 = $user_qual$0$be$reg2mem1347$0;$user_sat$0112$reg2mem1365$0 = $user_sat$0$be$reg2mem1343$0;$write_to_stdout$0115$reg2mem1371$0 = $write_to_stdout$0$be$reg2mem1337$0;
      } else {
       $arg$0$lcssa$reg2mem1325$0 = $arg$0$be$reg2mem1329$0;$bpfile$0$lcssa$reg2mem1321$0 = $bpfile$0$be$reg2mem1333$0;$dark_frame$0$lcssa$reg2mem1323$0 = $dark_frame$0$be$reg2mem1331$0;$identify_only$0$lcssa$reg2mem1305$0 = $identify_only$0$be$reg2mem1349$0;$read_from_stdin$0$lcssa$reg2mem1319$0 = $read_from_stdin$0$be$reg2mem1335$0;$thumbnail_only$0$lcssa$reg2mem1303$0 = $thumbnail_only$0$be$reg2mem1351$0;$timestamp_only$0$lcssa$reg2mem1301$0 = $timestamp_only$0$be$reg2mem1353$0;$use_fuji_rotate$0$lcssa$reg2mem1315$0 = $use_fuji_rotate$0$be$reg2mem1339$0;$user_black$0$lcssa$reg2mem1309$0 = $user_black$0$be$reg2mem1345$0;$user_flip$0$lcssa$reg2mem1313$0 = $user_flip$0$be$reg2mem1341$0;$user_qual$0$lcssa$reg2mem1307$0 = $user_qual$0$be$reg2mem1347$0;$user_sat$0$lcssa$reg2mem1311$0 = $user_sat$0$be$reg2mem1343$0;$write_to_stdout$0$lcssa$reg2mem1317$0 = $write_to_stdout$0$be$reg2mem1337$0;
       break L45;
      }
     }
     if ((label|0) == 48) {
      $149 = HEAP32[_stderr>>2]|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer1388>>2] = $130;
      (invoke_iiii(3,($149|0),(625568|0),($vararg_buffer1388|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      if ((($150|0) != 0) & ((threwValue|0) != 0)) { $151 = _testSetjmp(HEAP32[$150>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($151|0) == 0) { _longjmp($150|0, threwValue|0); } tempRet0 = threwValue; } else { $151 = -1; };
      $152 = tempRet0;
      $cond6 = ($151|0)==(1);
      if ($cond6) {
       $$reg2mem1297$0 = $152;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
       break L1;
      }
      $$0$reg2mem$0 = 1;
      _free(_setjmpTable|0);
      STACKTOP = sp;return ($$0$reg2mem$0|0);
     }
     else if ((label|0) == 112) {
      $352 = HEAP32[_stderr>>2]|0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer1391>>2] = $130;
      (invoke_iiii(3,($352|0),(625608|0),($vararg_buffer1391|0))|0);
      $353 = __THREW__; __THREW__ = 0;
      if ((($353|0) != 0) & ((threwValue|0) != 0)) { $354 = _testSetjmp(HEAP32[$353>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($354|0) == 0) { _longjmp($353|0, threwValue|0); } tempRet0 = threwValue; } else { $354 = -1; };
      $355 = tempRet0;
      $cond30 = ($354|0)==(1);
      if ($cond30) {
       $$reg2mem1297$0 = $355;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = 0;$dark_frame$0$lcssa$reg2mem$1 = 0;$identify_only$0$lcssa$reg2mem$1 = 0;$user_black$0$lcssa$reg2mem$1 = 0;$user_flip$0$lcssa$reg2mem$1 = 0;$user_qual$0$lcssa$reg2mem$1 = 0;$user_sat$0$lcssa$reg2mem$1 = 0;
       break L1;
      }
      $$0$reg2mem$0 = 1;
      _free(_setjmpTable|0);
      STACKTOP = sp;return ($$0$reg2mem$0|0);
     }
    } else {
     $arg$0$lcssa$reg2mem1325$0 = 1;$bpfile$0$lcssa$reg2mem1321$0 = 0;$dark_frame$0$lcssa$reg2mem1323$0 = 0;$identify_only$0$lcssa$reg2mem1305$0 = 0;$read_from_stdin$0$lcssa$reg2mem1319$0 = 0;$thumbnail_only$0$lcssa$reg2mem1303$0 = 0;$timestamp_only$0$lcssa$reg2mem1301$0 = 0;$use_fuji_rotate$0$lcssa$reg2mem1315$0 = 1;$user_black$0$lcssa$reg2mem1309$0 = -1;$user_flip$0$lcssa$reg2mem1313$0 = -1;$user_qual$0$lcssa$reg2mem1307$0 = -1;$user_sat$0$lcssa$reg2mem1311$0 = -1;$write_to_stdout$0$lcssa$reg2mem1317$0 = 0;
    }
   } while(0);
   $356 = ($arg$0$lcssa$reg2mem1325$0|0)==($argc|0);
   if ($356) {
    $357 = HEAP32[_stderr>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii(1,(625632|0),21,1,($357|0))|0);
    $358 = __THREW__; __THREW__ = 0;
    if ((($358|0) != 0) & ((threwValue|0) != 0)) { $359 = _testSetjmp(HEAP32[$358>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($359|0) == 0) { _longjmp($358|0, threwValue|0); } tempRet0 = threwValue; } else { $359 = -1; };
    $360 = tempRet0;
    $cond4 = ($359|0)==(1);
    if ($cond4) {
     $$reg2mem1297$0 = $360;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = 0;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem1321$0;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem1323$0;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem1305$0;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem1309$0;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem1313$0;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem1307$0;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem1311$0;
     break;
    }
    $$0$reg2mem$0 = 1;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0$reg2mem$0|0);
   }
   $361 = ($write_to_stdout$0$lcssa$reg2mem1317$0|0)!=(0);
   if ($361) {
    __THREW__ = 0;
    $362 = (invoke_ii(5,1)|0);
    $363 = __THREW__; __THREW__ = 0;
    if ((($363|0) != 0) & ((threwValue|0) != 0)) { $364 = _testSetjmp(HEAP32[$363>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($364|0) == 0) { _longjmp($363|0, threwValue|0); } tempRet0 = threwValue; } else { $364 = -1; };
    $365 = tempRet0;
    $cond2 = ($364|0)==(1);
    if ($cond2) {
     $$reg2mem1297$0 = $365;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = $361;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem1321$0;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem1323$0;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem1305$0;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem1309$0;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem1313$0;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem1307$0;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem1311$0;
     break;
    }
    $366 = ($362|0)==(0);
    if (!($366)) {
     $385 = HEAP32[_stderr>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii(1,(625656|0),41,1,($385|0))|0);
     $386 = __THREW__; __THREW__ = 0;
     if ((($386|0) != 0) & ((threwValue|0) != 0)) { $387 = _testSetjmp(HEAP32[$386>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($387|0) == 0) { _longjmp($386|0, threwValue|0); } tempRet0 = threwValue; } else { $387 = -1; };
     $388 = tempRet0;
     $cond3 = ($387|0)==(1);
     if ($cond3) {
      $$reg2mem1297$0 = $388;$$reg2mem493$1 = 0;$$reg2mem495$1 = 0;$$reg2mem497$1 = 0;$$reg2mem499$1 = 0;$$reg2mem504$1 = 0;$$reg2mem506$1 = 0;$$reg2mem508$1 = 0;$$reg2mem510$1 = 0;$$reg2mem512$1 = 0;$$reg2mem514$1 = 0;$$reg2mem516$1 = 0;$$reg2mem518$1 = 0;$$reg2mem520$1 = 0;$$reg2mem523$1 = 0;$$reg2mem527$1 = 0;$$reg2mem530$1 = 0;$$reg2mem532$1 = 0;$$reg2mem534$1 = 0;$$reg2mem541$1 = $361;$arg$496$reg2mem$0 = 0;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem1321$0;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem1323$0;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem1305$0;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem1309$0;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem1313$0;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem1307$0;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem1311$0;
      break;
     }
     $$0$reg2mem$0 = 1;
     _free(_setjmpTable|0);
     STACKTOP = sp;return ($$0$reg2mem$0|0);
    }
   }
   $367 = ($arg$0$lcssa$reg2mem1325$0|0)<($argc|0);
   if ($367) {
    $368 = HEAP32[_stdout>>2]|0;
    $369 = ($user_flip$0$lcssa$reg2mem1313$0|0)>(-1);
    $370 = ($timestamp_only$0$lcssa$reg2mem1301$0|0)==(0);
    $371 = ($thumbnail_only$0$lcssa$reg2mem1303$0|0)!=(0);
    $372 = HEAP32[_stderr>>2]|0;
    $373 = ($identify_only$0$lcssa$reg2mem1305$0|0)!=(0);
    $374 = ($use_fuji_rotate$0$lcssa$reg2mem1315$0|0)==(0);
    $375 = ($read_from_stdin$0$lcssa$reg2mem1319$0|0)!=(0);
    $376 = HEAP32[_stdin>>2]|0;
    $377 = ($dark_frame$0$lcssa$reg2mem1323$0|0)==(0|0);
    $378 = ($user_qual$0$lcssa$reg2mem1307$0|0)>(-1);
    $379 = ($user_black$0$lcssa$reg2mem1309$0|0)>(-1);
    $380 = ($user_sat$0$lcssa$reg2mem1311$0|0)>(0);
    $381 = ($use_fuji_rotate$0$lcssa$reg2mem1315$0|0)==(0);
    $382 = HEAP32[_stderr>>2]|0;
    $383 = ($identify_only$0$lcssa$reg2mem1305$0|0)==(0);
    $384 = (($ut) + 4|0);
    $$reg2mem493$0 = $ut;$$reg2mem495$0 = $384;$$reg2mem497$0 = $383;$$reg2mem499$0 = $382;$$reg2mem504$0 = $381;$$reg2mem506$0 = $380;$$reg2mem508$0 = $379;$$reg2mem510$0 = $378;$$reg2mem512$0 = $377;$$reg2mem514$0 = $376;$$reg2mem516$0 = $375;$$reg2mem518$0 = $374;$$reg2mem520$0 = $373;$$reg2mem523$0 = $372;$$reg2mem527$0 = $371;$$reg2mem530$0 = $370;$$reg2mem532$0 = $369;$$reg2mem534$0 = $368;$$reg2mem541$0 = $361;$arg$496$reg2mem1299$0 = $arg$0$lcssa$reg2mem1325$0;$bpfile$0$lcssa$reg2mem$0 = $bpfile$0$lcssa$reg2mem1321$0;$dark_frame$0$lcssa$reg2mem$0 = $dark_frame$0$lcssa$reg2mem1323$0;$identify_only$0$lcssa$reg2mem$0 = $identify_only$0$lcssa$reg2mem1305$0;$user_black$0$lcssa$reg2mem$0 = $user_black$0$lcssa$reg2mem1309$0;$user_flip$0$lcssa$reg2mem$0 = $user_flip$0$lcssa$reg2mem1313$0;$user_qual$0$lcssa$reg2mem$0 = $user_qual$0$lcssa$reg2mem1307$0;$user_sat$0$lcssa$reg2mem$0 = $user_sat$0$lcssa$reg2mem1311$0;
    label = 124;
    break;
   } else {
    $$0$reg2mem$0 = 0;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$0$reg2mem$0|0);
   }
  }
 } while(0);
 L143: while(1) {
  if ((label|0) == 124) {
   label = 0;
   HEAP32[132328>>2] = 0;
   HEAP32[132112>>2] = 0;
   HEAP32[492248>>2] = 0;
   HEAP32[189368>>2] = 0;
   HEAP32[133792>>2] = $$reg2mem534$0;
   _setjmpTable = _saveSetjmp(688,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $389 = __THREW__; __THREW__ = 0;
   if ((($389|0) != 0) & ((threwValue|0) != 0)) { $390 = _testSetjmp(HEAP32[$389>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($390|0) == 0) { _longjmp($389|0, threwValue|0); } tempRet0 = threwValue; } else { $390 = -1; };
   $391 = tempRet0;
   $cond1 = ($390|0)==(1);
   if ($cond1) {
    $$reg2mem1297$0 = $391;$$reg2mem493$1 = $$reg2mem493$0;$$reg2mem495$1 = $$reg2mem495$0;$$reg2mem497$1 = $$reg2mem497$0;$$reg2mem499$1 = $$reg2mem499$0;$$reg2mem504$1 = $$reg2mem504$0;$$reg2mem506$1 = $$reg2mem506$0;$$reg2mem508$1 = $$reg2mem508$0;$$reg2mem510$1 = $$reg2mem510$0;$$reg2mem512$1 = $$reg2mem512$0;$$reg2mem514$1 = $$reg2mem514$0;$$reg2mem516$1 = $$reg2mem516$0;$$reg2mem518$1 = $$reg2mem518$0;$$reg2mem520$1 = $$reg2mem520$0;$$reg2mem523$1 = $$reg2mem523$0;$$reg2mem527$1 = $$reg2mem527$0;$$reg2mem530$1 = $$reg2mem530$0;$$reg2mem532$1 = $$reg2mem532$0;$$reg2mem534$1 = $$reg2mem534$0;$$reg2mem541$1 = $$reg2mem541$0;$arg$496$reg2mem$0 = $arg$496$reg2mem1299$0;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$0;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$0;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$0;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$0;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$0;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$0;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$0;
    continue;
   }
   $$reg2mem1297$0 = 0;$$reg2mem493$1 = $$reg2mem493$0;$$reg2mem495$1 = $$reg2mem495$0;$$reg2mem497$1 = $$reg2mem497$0;$$reg2mem499$1 = $$reg2mem499$0;$$reg2mem504$1 = $$reg2mem504$0;$$reg2mem506$1 = $$reg2mem506$0;$$reg2mem508$1 = $$reg2mem508$0;$$reg2mem510$1 = $$reg2mem510$0;$$reg2mem512$1 = $$reg2mem512$0;$$reg2mem514$1 = $$reg2mem514$0;$$reg2mem516$1 = $$reg2mem516$0;$$reg2mem518$1 = $$reg2mem518$0;$$reg2mem520$1 = $$reg2mem520$0;$$reg2mem523$1 = $$reg2mem523$0;$$reg2mem527$1 = $$reg2mem527$0;$$reg2mem530$1 = $$reg2mem530$0;$$reg2mem532$1 = $$reg2mem532$0;$$reg2mem534$1 = $$reg2mem534$0;$$reg2mem541$1 = $$reg2mem541$0;$arg$496$reg2mem$0 = $arg$496$reg2mem1299$0;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$0;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$0;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$0;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$0;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$0;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$0;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$0;
  }
  $392 = ($$reg2mem1297$0|0)==(0);
  L148: do {
   if ($392) {
    $413 = (($argv) + ($arg$496$reg2mem$0<<2)|0);
    $414 = HEAP32[$413>>2]|0;
    HEAP32[680>>2] = $414;
    __THREW__ = 0;
    $415 = (invoke_iii(3,($414|0),(190192|0))|0);
    $416 = __THREW__; __THREW__ = 0;
    if ((($416|0) != 0) & ((threwValue|0) != 0)) { $417 = _testSetjmp(HEAP32[$416>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($417|0) == 0) { _longjmp($416|0, threwValue|0); } tempRet0 = threwValue; } else { $417 = -1; };
    $418 = tempRet0;
    $cond77 = ($417|0)==(1);
    if ($cond77) {
     $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $418;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
     continue L143;
    }
    HEAP32[864>>2] = $415;
    $419 = ($415|0)==(0|0);
    if ($419) {
     $420 = HEAP32[680>>2]|0;
     __THREW__ = 0;
     invoke_vi(1,($420|0));
     $421 = __THREW__; __THREW__ = 0;
     if ((($421|0) != 0) & ((threwValue|0) != 0)) { $422 = _testSetjmp(HEAP32[$421>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($422|0) == 0) { _longjmp($421|0, threwValue|0); } tempRet0 = threwValue; } else { $422 = -1; };
     $423 = tempRet0;
     $cond173 = ($422|0)==(1);
     if ($cond173) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $423;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
     $arg$5$reg2mem$0 = $arg$496$reg2mem$0;$status$5$reg2mem1267$0 = 1;
     break;
    }
    __THREW__ = 0;
    invoke_v(54);
    $424 = __THREW__; __THREW__ = 0;
    if ((($424|0) != 0) & ((threwValue|0) != 0)) { $425 = _testSetjmp(HEAP32[$424>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($425|0) == 0) { _longjmp($424|0, threwValue|0); } tempRet0 = threwValue; } else { $425 = -1; };
    $426 = tempRet0;
    $cond78 = ($425|0)==(1);
    if ($cond78) {
     $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $426;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
     continue L143;
    }
    $427 = HEAP32[133208>>2]|0;
    $428 = ($427|0)==(0);
    $429 = $428&1;
    if ($$reg2mem532$1) {
     HEAP32[454784>>2] = $user_flip$0$lcssa$reg2mem$1;
    }
    $430 = HEAP32[454784>>2]|0;
    $431 = (($430) + 3600)|0;
    $432 = (($431>>>0) % 360)&-1;
    if ((($432|0) == 270)) {
     HEAP32[454784>>2] = 5;
    } else if ((($432|0) == 180)) {
     HEAP32[454784>>2] = 3;
    } else if ((($432|0) == 90)) {
     HEAP32[454784>>2] = 6;
    }
    L164: do {
     if ($$reg2mem530$1) {
      HEAP32[625768>>2] = 55;
      do {
       if ($$reg2mem527$1) {
        $456 = HEAP32[454040>>2]|0;
        $457 = ($456|0)==(0);
        $458 = $457&1;
        if ($457) {
         $459 = HEAP32[680>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1406>>2] = $459;
         (invoke_iiii(3,($$reg2mem523$1|0),(625776|0),($vararg_buffer1406|0))|0);
         $460 = __THREW__; __THREW__ = 0;
         if ((($460|0) != 0) & ((threwValue|0) != 0)) { $461 = _testSetjmp(HEAP32[$460>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($461|0) == 0) { _longjmp($460|0, threwValue|0); } tempRet0 = threwValue; } else { $461 = -1; };
         $462 = tempRet0;
         $cond172 = ($461|0)==(1);
         if ($cond172) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $462;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $status$2$reg2mem1283$0 = $458;
         break L164;
        }
        $463 = HEAP32[457432>>2]|0;
        $464 = ($463|0)==(0|0);
        if (!($464)) {
         HEAP32[189952>>2] = $463;
         $465 = HEAP32[454040>>2]|0;
         HEAP32[133280>>2] = $465;
         $466 = HEAP16[133760>>1]|0;
         HEAP16[132080>>1] = $466;
         $467 = HEAP16[133752>>1]|0;
         HEAP16[132088>>1] = $467;
         HEAP32[584>>2] = 0;
         HEAP32[132272>>2] = 3;
         $status$1$reg2mem1295$0 = $458;
         label = 166;
         break;
        }
        $468 = HEAP32[864>>2]|0;
        __THREW__ = 0;
        (invoke_iiii(4,($468|0),($456|0),0)|0);
        $469 = __THREW__; __THREW__ = 0;
        if ((($469|0) != 0) & ((threwValue|0) != 0)) { $470 = _testSetjmp(HEAP32[$469>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($470|0) == 0) { _longjmp($469|0, threwValue|0); } tempRet0 = threwValue; } else { $470 = -1; };
        $471 = tempRet0;
        $cond171 = ($470|0)==(1);
        if ($cond171) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $471;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $472 = HEAP32[457424>>2]|0;
        HEAP32[625768>>2] = $472;
        $$reg2mem1277$0 = $472;$status$3$reg2mem1275$0 = $458;
       } else {
        $status$1$reg2mem1295$0 = $429;
        label = 166;
       }
      } while(0);
      if ((label|0) == 166) {
       label = 0;
       $473 = HEAP32[189952>>2]|0;
       $474 = ($473|0)==(25|0);
       if ($474) {
        $475 = HEAP16[132080>>1]|0;
        $476 = $475&65535;
        $477 = $476 & 1;
        $478 = (($477) + ($476))|0;
        $479 = $478&65535;
        HEAP16[132080>>1] = $479;
        $480 = HEAP16[132088>>1]|0;
        $481 = $480&65535;
        $482 = $481 & 1;
        $483 = (($482) + ($481))|0;
        $484 = $483&65535;
        HEAP16[132088>>1] = $484;
       }
       $485 = HEAP32[168>>2]|0;
       $486 = ($485|0)!=(0);
       $or$cond = $$reg2mem520$1 & $486;
       $or$cond$not = $or$cond ^ 1;
       $487 = HEAP8[133624>>0]|0;
       $488 = ($487<<24>>24)==(0);
       $or$cond29 = $488 | $or$cond$not;
       if ($or$cond29) {
        $597 = HEAP32[133208>>2]|0;
        $598 = ($597|0)==(0);
        if ($598) {
         $599 = HEAP32[680>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1473>>2] = $599;
         (invoke_iiii(3,($$reg2mem523$1|0),(626152|0),($vararg_buffer1473|0))|0);
         $600 = __THREW__; __THREW__ = 0;
         if ((($600|0) != 0) & ((threwValue|0) != 0)) { $601 = _testSetjmp(HEAP32[$600>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($601|0) == 0) { _longjmp($600|0, threwValue|0); } tempRet0 = threwValue; } else { $601 = -1; };
         $602 = tempRet0;
         $cond170 = ($601|0)==(1);
         if ($cond170) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $602;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         label = 204;
        }
       } else {
        $489 = HEAP32[680>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1409>>2] = $489;
        (invoke_iii(1,(625800|0),($vararg_buffer1409|0))|0);
        $490 = __THREW__; __THREW__ = 0;
        if ((($490|0) != 0) & ((threwValue|0) != 0)) { $491 = _testSetjmp(HEAP32[$490>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($491|0) == 0) { _longjmp($490|0, threwValue|0); } tempRet0 = threwValue; } else { $491 = -1; };
        $492 = tempRet0;
        $cond84 = ($491|0)==(1);
        if ($cond84) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $492;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        $493 = (invoke_ii(8,(190152|0))|0);
        $494 = __THREW__; __THREW__ = 0;
        if ((($494|0) != 0) & ((threwValue|0) != 0)) { $495 = _testSetjmp(HEAP32[$494>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($495|0) == 0) { _longjmp($494|0, threwValue|0); } tempRet0 = threwValue; } else { $495 = -1; };
        $496 = tempRet0;
        $cond85 = ($495|0)==(1);
        if ($cond85) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $496;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        HEAP32[$vararg_buffer1412>>2] = $493;
        (invoke_iii(1,(625816|0),($vararg_buffer1412|0))|0);
        $497 = __THREW__; __THREW__ = 0;
        if ((($497|0) != 0) & ((threwValue|0) != 0)) { $498 = _testSetjmp(HEAP32[$497>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($498|0) == 0) { _longjmp($497|0, threwValue|0); } tempRet0 = threwValue; } else { $498 = -1; };
        $499 = tempRet0;
        $cond86 = ($498|0)==(1);
        if ($cond86) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $499;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        HEAP32[$vararg_buffer1415>>2] = 133624;
        $vararg_ptr1418 = (($vararg_buffer1415) + 4|0);
        HEAP32[$vararg_ptr1418>>2] = 133688;
        (invoke_iii(1,(625832|0),($vararg_buffer1415|0))|0);
        $500 = __THREW__; __THREW__ = 0;
        if ((($500|0) != 0) & ((threwValue|0) != 0)) { $501 = _testSetjmp(HEAP32[$500>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($501|0) == 0) { _longjmp($500|0, threwValue|0); } tempRet0 = threwValue; } else { $501 = -1; };
        $502 = tempRet0;
        $cond87 = ($501|0)==(1);
        if ($cond87) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $502;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $503 = HEAP8[454800>>0]|0;
        $504 = ($503<<24>>24)==(0);
        if (!($504)) {
         __THREW__ = 0;
         HEAP32[$vararg_buffer1419>>2] = 454800;
         (invoke_iii(1,(625848|0),($vararg_buffer1419|0))|0);
         $505 = __THREW__; __THREW__ = 0;
         if ((($505|0) != 0) & ((threwValue|0) != 0)) { $506 = _testSetjmp(HEAP32[$505>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($506|0) == 0) { _longjmp($505|0, threwValue|0); } tempRet0 = threwValue; } else { $506 = -1; };
         $507 = tempRet0;
         $cond88 = ($506|0)==(1);
         if ($cond88) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $507;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        }
        $508 = HEAP32[133072>>2]|0;
        $509 = ($508|0)==(0);
        if (!($509)) {
         __THREW__ = 0;
         (invoke_iii(1,(625864|0),($vararg_buffer1422|0))|0);
         $510 = __THREW__; __THREW__ = 0;
         if ((($510|0) != 0) & ((threwValue|0) != 0)) { $511 = _testSetjmp(HEAP32[$510>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($511|0) == 0) { _longjmp($510|0, threwValue|0); } tempRet0 = threwValue; } else { $511 = -1; };
         $512 = tempRet0;
         $cond89 = ($511|0)==(1);
         if ($cond89) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $512;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $513 = HEAP32[133072>>2]|0;
         $514 = $513 >>> 24;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1424>>2] = $514;
         $vararg_ptr1427 = (($vararg_buffer1424) + 4|0);
         HEAP32[$vararg_ptr1427>>2] = 46;
         (invoke_iii(1,(625880|0),($vararg_buffer1424|0))|0);
         $515 = __THREW__; __THREW__ = 0;
         if ((($515|0) != 0) & ((threwValue|0) != 0)) { $516 = _testSetjmp(HEAP32[$515>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($516|0) == 0) { _longjmp($515|0, threwValue|0); } tempRet0 = threwValue; } else { $516 = -1; };
         $517 = tempRet0;
         $cond90 = ($516|0)==(1);
         if ($cond90) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $517;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $518 = HEAP32[133072>>2]|0;
         $519 = $518 >>> 16;
         $520 = $519 & 255;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1428>>2] = $520;
         $vararg_ptr1431 = (($vararg_buffer1428) + 4|0);
         HEAP32[$vararg_ptr1431>>2] = 46;
         (invoke_iii(1,(625880|0),($vararg_buffer1428|0))|0);
         $521 = __THREW__; __THREW__ = 0;
         if ((($521|0) != 0) & ((threwValue|0) != 0)) { $522 = _testSetjmp(HEAP32[$521>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($522|0) == 0) { _longjmp($521|0, threwValue|0); } tempRet0 = threwValue; } else { $522 = -1; };
         $523 = tempRet0;
         $cond91 = ($522|0)==(1);
         if ($cond91) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $523;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $524 = HEAP32[133072>>2]|0;
         $525 = $524 >>> 8;
         $526 = $525 & 255;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1432>>2] = $526;
         $vararg_ptr1435 = (($vararg_buffer1432) + 4|0);
         HEAP32[$vararg_ptr1435>>2] = 46;
         (invoke_iii(1,(625880|0),($vararg_buffer1432|0))|0);
         $527 = __THREW__; __THREW__ = 0;
         if ((($527|0) != 0) & ((threwValue|0) != 0)) { $528 = _testSetjmp(HEAP32[$527>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($528|0) == 0) { _longjmp($527|0, threwValue|0); } tempRet0 = threwValue; } else { $528 = -1; };
         $529 = tempRet0;
         $cond92 = ($528|0)==(1);
         if ($cond92) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $529;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $530 = HEAP32[133072>>2]|0;
         $531 = $530 & 255;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1436>>2] = $531;
         $vararg_ptr1439 = (($vararg_buffer1436) + 4|0);
         HEAP32[$vararg_ptr1439>>2] = 10;
         (invoke_iii(1,(625880|0),($vararg_buffer1436|0))|0);
         $532 = __THREW__; __THREW__ = 0;
         if ((($532|0) != 0) & ((threwValue|0) != 0)) { $533 = _testSetjmp(HEAP32[$532>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($533|0) == 0) { _longjmp($532|0, threwValue|0); } tempRet0 = threwValue; } else { $533 = -1; };
         $534 = tempRet0;
         $cond93 = ($533|0)==(1);
         if ($cond93) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $534;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        }
        $535 = +HEAPF32[454744>>2];
        $536 = (~~(($535)));
        __THREW__ = 0;
        HEAP32[$vararg_buffer1440>>2] = $536;
        (invoke_iii(1,(625888|0),($vararg_buffer1440|0))|0);
        $537 = __THREW__; __THREW__ = 0;
        if ((($537|0) != 0) & ((threwValue|0) != 0)) { $538 = _testSetjmp(HEAP32[$537>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($538|0) == 0) { _longjmp($537|0, threwValue|0); } tempRet0 = threwValue; } else { $538 = -1; };
        $539 = tempRet0;
        $cond94 = ($538|0)==(1);
        if ($cond94) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $539;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        (invoke_iii(1,(625904|0),($vararg_buffer1443|0))|0);
        $540 = __THREW__; __THREW__ = 0;
        if ((($540|0) != 0) & ((threwValue|0) != 0)) { $541 = _testSetjmp(HEAP32[$540>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($541|0) == 0) { _longjmp($540|0, threwValue|0); } tempRet0 = threwValue; } else { $541 = -1; };
        $542 = tempRet0;
        $cond95 = ($541|0)==(1);
        if ($cond95) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $542;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $543 = +HEAPF32[454760>>2];
        $544 = $543 > 0.0;
        $545 = $543 < 1.0;
        $or$cond3 = $544 & $545;
        if ($or$cond3) {
         __THREW__ = 0;
         (invoke_iii(1,(625920|0),($vararg_buffer1445|0))|0);
         $546 = __THREW__; __THREW__ = 0;
         if ((($546|0) != 0) & ((threwValue|0) != 0)) { $547 = _testSetjmp(HEAP32[$546>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($547|0) == 0) { _longjmp($546|0, threwValue|0); } tempRet0 = threwValue; } else { $547 = -1; };
         $548 = tempRet0;
         $cond169 = ($547|0)==(1);
         if ($cond169) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $548;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $549 = +HEAPF32[454760>>2];
         $550 = 1.0 / $549;
         HEAPF32[454760>>2] = $550;
        }
        $551 = +HEAPF32[454760>>2];
        $552 = $551;
        __THREW__ = 0;
        HEAPF64[$vararg_buffer1447>>3] = $552;
        (invoke_iii(1,(625928|0),($vararg_buffer1447|0))|0);
        $553 = __THREW__; __THREW__ = 0;
        if ((($553|0) != 0) & ((threwValue|0) != 0)) { $554 = _testSetjmp(HEAP32[$553>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($554|0) == 0) { _longjmp($553|0, threwValue|0); } tempRet0 = threwValue; } else { $554 = -1; };
        $555 = tempRet0;
        $cond96 = ($554|0)==(1);
        if ($cond96) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $555;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $556 = +HEAPF32[454752>>2];
        $557 = $556;
        __THREW__ = 0;
        HEAPF64[$vararg_buffer1450>>3] = $557;
        (invoke_iii(1,(625944|0),($vararg_buffer1450|0))|0);
        $558 = __THREW__; __THREW__ = 0;
        if ((($558|0) != 0) & ((threwValue|0) != 0)) { $559 = _testSetjmp(HEAP32[$558>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($559|0) == 0) { _longjmp($558|0, threwValue|0); } tempRet0 = threwValue; } else { $559 = -1; };
        $560 = tempRet0;
        $cond97 = ($559|0)==(1);
        if ($cond97) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $560;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $561 = +HEAPF32[455472>>2];
        $562 = $561;
        __THREW__ = 0;
        HEAPF64[$vararg_buffer1453>>3] = $562;
        (invoke_iii(1,(625968|0),($vararg_buffer1453|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        if ((($563|0) != 0) & ((threwValue|0) != 0)) { $564 = _testSetjmp(HEAP32[$563>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($564|0) == 0) { _longjmp($563|0, threwValue|0); } tempRet0 = threwValue; } else { $564 = -1; };
        $565 = tempRet0;
        $cond98 = ($564|0)==(1);
        if ($cond98) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $565;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $566 = HEAP32[456264>>2]|0;
        $567 = ($566|0)!=(0);
        $568 = $567 ? 626024 : 626032;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1456>>2] = $568;
        (invoke_iii(1,(625992|0),($vararg_buffer1456|0))|0);
        $569 = __THREW__; __THREW__ = 0;
        if ((($569|0) != 0) & ((threwValue|0) != 0)) { $570 = _testSetjmp(HEAP32[$569>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($570|0) == 0) { _longjmp($569|0, threwValue|0); } tempRet0 = threwValue; } else { $570 = -1; };
        $571 = tempRet0;
        $cond99 = ($570|0)==(1);
        if ($cond99) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $571;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $572 = HEAP32[133208>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1459>>2] = $572;
        (invoke_iii(1,(626040|0),($vararg_buffer1459|0))|0);
        $573 = __THREW__; __THREW__ = 0;
        if ((($573|0) != 0) & ((threwValue|0) != 0)) { $574 = _testSetjmp(HEAP32[$573>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($574|0) == 0) { _longjmp($573|0, threwValue|0); } tempRet0 = threwValue; } else { $574 = -1; };
        $575 = tempRet0;
        $cond100 = ($574|0)==(1);
        if ($cond100) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $575;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $576 = +HEAPF64[457384>>3];
        $577 = $576 != 1.0;
        if ($577) {
         __THREW__ = 0;
         HEAPF64[$vararg_buffer1462>>3] = $576;
         (invoke_iii(1,(626072|0),($vararg_buffer1462|0))|0);
         $578 = __THREW__; __THREW__ = 0;
         if ((($578|0) != 0) & ((threwValue|0) != 0)) { $579 = _testSetjmp(HEAP32[$578>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($579|0) == 0) { _longjmp($578|0, threwValue|0); } tempRet0 = threwValue; } else { $579 = -1; };
         $580 = tempRet0;
         $cond168 = ($579|0)==(1);
         if ($cond168) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $580;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        }
        $581 = HEAP32[454040>>2]|0;
        $582 = ($581|0)==(0);
        if (!($582)) {
         $583 = HEAP16[133752>>1]|0;
         $584 = $583&65535;
         $585 = HEAP16[133760>>1]|0;
         $586 = $585&65535;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1465>>2] = $584;
         $vararg_ptr1468 = (($vararg_buffer1465) + 4|0);
         HEAP32[$vararg_ptr1468>>2] = $586;
         (invoke_iii(1,(626104|0),($vararg_buffer1465|0))|0);
         $587 = __THREW__; __THREW__ = 0;
         if ((($587|0) != 0) & ((threwValue|0) != 0)) { $588 = _testSetjmp(HEAP32[$587>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($588|0) == 0) { _longjmp($587|0, threwValue|0); } tempRet0 = threwValue; } else { $588 = -1; };
         $589 = tempRet0;
         $cond101 = ($588|0)==(1);
         if ($cond101) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $589;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        }
        $590 = HEAP16[132336>>1]|0;
        $591 = $590&65535;
        $592 = HEAP16[133064>>1]|0;
        $593 = $592&65535;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1469>>2] = $591;
        $vararg_ptr1472 = (($vararg_buffer1469) + 4|0);
        HEAP32[$vararg_ptr1472>>2] = $593;
        (invoke_iii(1,(626128|0),($vararg_buffer1469|0))|0);
        $594 = __THREW__; __THREW__ = 0;
        if ((($594|0) != 0) & ((threwValue|0) != 0)) { $595 = _testSetjmp(HEAP32[$594>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($595|0) == 0) { _longjmp($594|0, threwValue|0); } tempRet0 = threwValue; } else { $595 = -1; };
        $596 = tempRet0;
        $cond102 = ($595|0)==(1);
        if ($cond102) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $596;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        label = 204;
       }
       if ((label|0) == 204) {
        label = 0;
        $$pr = HEAP32[133208>>2]|0;
        $603 = ($$pr|0)==(0);
        if ($603) {
         $status$2$reg2mem1283$0 = $status$1$reg2mem1295$0;
         break;
        }
       }
       $604 = HEAP32[584>>2]|0;
       $605 = ($604|0)==(0);
       if ($605) {
        $$reg2mem1293$0 = 0;
       } else {
        $606 = HEAP32[136>>2]|0;
        $$not = ($606|0)!=(0);
        $607 = $606 | $identify_only$0$lcssa$reg2mem$1;
        $608 = ($607|0)==(0);
        if ($608) {
         $609 = +HEAPF32[128>>2];
         $610 = $609 != 0.0;
         $611 = +HEAPF64[24>>3];
         $612 = $611 != 1.0;
         $or$cond5 = $610 | $612;
         if ($or$cond5) {
          $$reg2mem1293$0 = 1;
         } else {
          $613 = +HEAPF64[((24 + 16|0))>>3];
          $614 = $613 != 1.0;
          $$reg2mem1293$0 = $614;
         }
        } else {
         $$reg2mem1293$0 = $$not;
        }
       }
       $615 = $$reg2mem1293$0&1;
       HEAP16[132096>>1] = $615;
       $616 = HEAP16[132080>>1]|0;
       $617 = $616&65535;
       $618 = $$reg2mem1293$0&1;
       $619 = (($617) + ($618))|0;
       $620 = $619 >>> $618;
       $621 = $620&65535;
       HEAP16[190336>>1] = $621;
       $622 = HEAP16[132088>>1]|0;
       $623 = $622&65535;
       $624 = HEAP16[132096>>1]|0;
       $625 = $624&65535;
       $626 = (($625) + ($623))|0;
       $627 = $626 >>> $625;
       $628 = $627&65535;
       HEAP16[132104>>1] = $628;
       if ($$reg2mem520$1) {
        $629 = HEAP32[168>>2]|0;
        $630 = ($629|0)==(0);
        if ($630) {
         $781 = HEAP32[680>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1508>>2] = $781;
         $vararg_ptr1511 = (($vararg_buffer1508) + 4|0);
         HEAP32[$vararg_ptr1511>>2] = 133624;
         $vararg_ptr1512 = (($vararg_buffer1508) + 8|0);
         HEAP32[$vararg_ptr1512>>2] = 133688;
         (invoke_iii(1,(626312|0),($vararg_buffer1508|0))|0);
         $782 = __THREW__; __THREW__ = 0;
         if ((($782|0) != 0) & ((threwValue|0) != 0)) { $783 = _testSetjmp(HEAP32[$782>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($783|0) == 0) { _longjmp($782|0, threwValue|0); } tempRet0 = threwValue; } else { $783 = -1; };
         $784 = tempRet0;
         $cond167 = ($783|0)==(1);
         if ($cond167) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $784;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $status$2$reg2mem1283$0 = $status$1$reg2mem1295$0;
         break;
        }
        $631 = HEAP32[152>>2]|0;
        $632 = ($631|0)==(3);
        if ($632) {
         HEAP16[189960>>1] = 0;
         HEAP16[592>>1] = 0;
         HEAP16[600>>1] = 0;
         $633 = HEAP16[133064>>1]|0;
         HEAP16[132080>>1] = $633;
         $634 = HEAP16[132336>>1]|0;
         HEAP16[132088>>1] = $634;
        }
        $635 = HEAP16[132080>>1]|0;
        $636 = $635&65535;
        $637 = HEAP16[132096>>1]|0;
        $638 = $637&65535;
        $639 = (($638) + ($636))|0;
        $640 = $639 >>> $638;
        $641 = $640&65535;
        HEAP16[190336>>1] = $641;
        $642 = HEAP16[132088>>1]|0;
        $643 = $642&65535;
        $644 = HEAP16[132096>>1]|0;
        $645 = $644&65535;
        $646 = (($645) + ($643))|0;
        $647 = $646 >>> $645;
        $648 = $647&65535;
        HEAP16[132104>>1] = $648;
        do {
         if (!($$reg2mem518$1)) {
          $649 = HEAP16[189960>>1]|0;
          $650 = ($649<<16>>16)==(0);
          if (!($650)) {
           $651 = $649&65535;
           $652 = (($651) + -1)|0;
           $653 = HEAP16[132096>>1]|0;
           $654 = $653&65535;
           $655 = (($652) + ($654))|0;
           $656 = $655 >> $654;
           $657 = $656&65535;
           HEAP16[189960>>1] = $657;
           $658 = $656 & 65535;
           $659 = (+($658|0));
           $660 = $659 / 0.70710678118654757;
           $661 = (~~(($660))&65535);
           HEAP16[132104>>1] = $661;
           $662 = HEAP16[190336>>1]|0;
           $663 = $662&65535;
           $664 = HEAP16[189960>>1]|0;
           $665 = $664&65535;
           $666 = (($663) - ($665))|0;
           $667 = (+($666|0));
           $668 = $667 / 0.70710678118654757;
           $669 = (~~(($668))&65535);
           HEAP16[190336>>1] = $669;
           break;
          }
          $670 = +HEAPF64[457384>>3];
          $671 = $670 < 1.0;
          if ($671) {
           $672 = HEAP16[190336>>1]|0;
           $673 = $672&65535;
           $674 = (+($673|0));
           $675 = $674 / $670;
           $676 = $675 + 0.5;
           $677 = (~~(($676))&65535);
           HEAP16[190336>>1] = $677;
           $$pr31 = +HEAPF64[457384>>3];
           $$reg2mem1291$0 = $$pr31;
          } else {
           $$reg2mem1291$0 = $670;
          }
          $678 = $$reg2mem1291$0 > 1.0;
          if (!($678)) {
           break;
          }
          $679 = HEAP16[132104>>1]|0;
          $680 = $679&65535;
          $681 = (+($680|0));
          $682 = $$reg2mem1291$0 * $681;
          $683 = $682 + 0.5;
          $684 = (~~(($683))&65535);
          HEAP16[132104>>1] = $684;
         }
        } while(0);
        $685 = HEAP32[454784>>2]|0;
        $686 = $685 & 4;
        $687 = ($686|0)==(0);
        if (!($687)) {
         $688 = HEAP16[190336>>1]|0;
         $689 = HEAP16[132104>>1]|0;
         HEAP16[132104>>1] = $688;
         HEAP16[190336>>1] = $689;
        }
        $690 = HEAP16[132088>>1]|0;
        $691 = $690&65535;
        $692 = HEAP16[132080>>1]|0;
        $693 = $692&65535;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1476>>2] = $691;
        $vararg_ptr1479 = (($vararg_buffer1476) + 4|0);
        HEAP32[$vararg_ptr1479>>2] = $693;
        (invoke_iii(1,(626176|0),($vararg_buffer1476|0))|0);
        $694 = __THREW__; __THREW__ = 0;
        if ((($694|0) != 0) & ((threwValue|0) != 0)) { $695 = _testSetjmp(HEAP32[$694>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($695|0) == 0) { _longjmp($694|0, threwValue|0); } tempRet0 = threwValue; } else { $695 = -1; };
        $696 = tempRet0;
        $cond152 = ($695|0)==(1);
        if ($cond152) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $696;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $697 = HEAP16[132104>>1]|0;
        $698 = $697&65535;
        $699 = HEAP16[190336>>1]|0;
        $700 = $699&65535;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1480>>2] = $698;
        $vararg_ptr1483 = (($vararg_buffer1480) + 4|0);
        HEAP32[$vararg_ptr1483>>2] = $700;
        (invoke_iii(1,(626200|0),($vararg_buffer1480|0))|0);
        $701 = __THREW__; __THREW__ = 0;
        if ((($701|0) != 0) & ((threwValue|0) != 0)) { $702 = _testSetjmp(HEAP32[$701>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($702|0) == 0) { _longjmp($701|0, threwValue|0); } tempRet0 = threwValue; } else { $702 = -1; };
        $703 = tempRet0;
        $cond153 = ($702|0)==(1);
        if ($cond153) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $703;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $704 = HEAP32[132272>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1484>>2] = $704;
        (invoke_iii(1,(626224|0),($vararg_buffer1484|0))|0);
        $705 = __THREW__; __THREW__ = 0;
        if ((($705|0) != 0) & ((threwValue|0) != 0)) { $706 = _testSetjmp(HEAP32[$705>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($706|0) == 0) { _longjmp($705|0, threwValue|0); } tempRet0 = threwValue; } else { $706 = -1; };
        $707 = tempRet0;
        $cond154 = ($706|0)==(1);
        if ($cond154) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $707;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $708 = HEAP32[584>>2]|0;
        $709 = ($708|0)==(0);
        if (!($709)) {
         $710 = $708 >>> 8;
         $711 = $710 ^ $708;
         $712 = $711 & 255;
         $713 = ($712|0)==(0);
         $$ = $713 ? 2 : 4;
         $714 = $708 >>> 16;
         $$masked = $708 & 65535;
         $715 = ($$masked|0)==($714|0);
         $fhigh$1 = $715 ? $$ : 8;
         $716 = ($708|0)==(1);
         $$fhigh$1 = $716 ? 16 : $fhigh$1;
         $$30 = $716 ? 16 : 2;
         $717 = ($708|0)==(9);
         $fhigh$3 = $717 ? 6 : $$fhigh$1;
         $fwide$1 = $717 ? 6 : $$30;
         __THREW__ = 0;
         (invoke_iii(1,(626240|0),($vararg_buffer1487|0))|0);
         $718 = __THREW__; __THREW__ = 0;
         if ((($718|0) != 0) & ((threwValue|0) != 0)) { $719 = _testSetjmp(HEAP32[$718>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($719|0) == 0) { _longjmp($718|0, threwValue|0); } tempRet0 = threwValue; } else { $719 = -1; };
         $720 = tempRet0;
         $cond155 = ($719|0)==(1);
         if ($cond155) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $720;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $i$290$reg2mem1289$0 = 0;
         while(1) {
          $721 = ($i$290$reg2mem1289$0|0)==(0);
          if ($721) {
           $c$289$reg2mem1287$0 = 0;
          } else {
           __THREW__ = 0;
           (invoke_ii(3,47)|0);
           $722 = __THREW__; __THREW__ = 0;
           if ((($722|0) != 0) & ((threwValue|0) != 0)) { $723 = _testSetjmp(HEAP32[$722>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($723|0) == 0) { _longjmp($722|0, threwValue|0); } tempRet0 = threwValue; } else { $723 = -1; };
           $724 = tempRet0;
           $cond156 = ($723|0)==(1);
           if ($cond156) {
            $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $724;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
            continue L143;
           }
           $c$289$reg2mem1287$0 = 0;
          }
          while(1) {
           __THREW__ = 0;
           $725 = (invoke_iii(5,($i$290$reg2mem1289$0|0),($c$289$reg2mem1287$0|0))|0);
           $726 = __THREW__; __THREW__ = 0;
           if ((($726|0) != 0) & ((threwValue|0) != 0)) { $727 = _testSetjmp(HEAP32[$726>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($727|0) == 0) { _longjmp($726|0, threwValue|0); } tempRet0 = threwValue; } else { $727 = -1; };
           $728 = tempRet0;
           $cond157 = ($727|0)==(1);
           if ($cond157) {
            $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $728;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
            continue L143;
           }
           $729 = (457376 + ($725)|0);
           $730 = HEAP8[$729>>0]|0;
           $731 = $730 << 24 >> 24;
           __THREW__ = 0;
           (invoke_ii(3,($731|0))|0);
           $732 = __THREW__; __THREW__ = 0;
           if ((($732|0) != 0) & ((threwValue|0) != 0)) { $733 = _testSetjmp(HEAP32[$732>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($733|0) == 0) { _longjmp($732|0, threwValue|0); } tempRet0 = threwValue; } else { $733 = -1; };
           $734 = tempRet0;
           $cond158 = ($733|0)==(1);
           if ($cond158) {
            $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $734;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
            continue L143;
           }
           $735 = (($c$289$reg2mem1287$0) + 1)|0;
           $736 = ($735|0)<($fwide$1|0);
           if ($736) {
            $c$289$reg2mem1287$0 = $735;
           } else {
            break;
           }
          }
          $737 = (($i$290$reg2mem1289$0) + 1)|0;
          $738 = ($737|0)<($fhigh$3|0);
          if ($738) {
           $i$290$reg2mem1289$0 = $737;
          } else {
           break;
          }
         }
        }
        __THREW__ = 0;
        (invoke_iii(1,(626264|0),($vararg_buffer1489|0))|0);
        $739 = __THREW__; __THREW__ = 0;
        if ((($739|0) != 0) & ((threwValue|0) != 0)) { $740 = _testSetjmp(HEAP32[$739>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($740|0) == 0) { _longjmp($739|0, threwValue|0); } tempRet0 = threwValue; } else { $740 = -1; };
        $741 = tempRet0;
        $cond159 = ($740|0)==(1);
        if ($cond159) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $741;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $742 = HEAP32[132272>>2]|0;
        $743 = ($742|0)==(0);
        if (!($743)) {
         $c$391$reg2mem1285$0 = 0;
         while(1) {
          $744 = (132048 + ($c$391$reg2mem1285$0<<2)|0);
          $745 = +HEAPF32[$744>>2];
          $746 = $745;
          __THREW__ = 0;
          HEAPF64[$vararg_buffer1491>>3] = $746;
          (invoke_iii(1,(190600|0),($vararg_buffer1491|0))|0);
          $747 = __THREW__; __THREW__ = 0;
          if ((($747|0) != 0) & ((threwValue|0) != 0)) { $748 = _testSetjmp(HEAP32[$747>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($748|0) == 0) { _longjmp($747|0, threwValue|0); } tempRet0 = threwValue; } else { $748 = -1; };
          $749 = tempRet0;
          $cond160 = ($748|0)==(1);
          if ($cond160) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $749;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          $750 = (($c$391$reg2mem1285$0) + 1)|0;
          $751 = HEAP32[132272>>2]|0;
          $752 = ($750>>>0)<($751>>>0);
          if ($752) {
           $c$391$reg2mem1285$0 = $750;
          } else {
           break;
          }
         }
        }
        $753 = +HEAPF32[133480>>2];
        $754 = $753 > 0.0;
        if ($754) {
         __THREW__ = 0;
         (invoke_iii(1,(626288|0),($vararg_buffer1494|0))|0);
         $755 = __THREW__; __THREW__ = 0;
         if ((($755|0) != 0) & ((threwValue|0) != 0)) { $756 = _testSetjmp(HEAP32[$755>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($756|0) == 0) { _longjmp($755|0, threwValue|0); } tempRet0 = threwValue; } else { $756 = -1; };
         $757 = tempRet0;
         $cond162 = ($756|0)==(1);
         if ($cond162) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $757;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $758 = +HEAPF32[133480>>2];
         $759 = $758;
         __THREW__ = 0;
         HEAPF64[$vararg_buffer1496>>3] = $759;
         (invoke_iii(1,(190600|0),($vararg_buffer1496|0))|0);
         $760 = __THREW__; __THREW__ = 0;
         if ((($760|0) != 0) & ((threwValue|0) != 0)) { $761 = _testSetjmp(HEAP32[$760>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($761|0) == 0) { _longjmp($760|0, threwValue|0); } tempRet0 = threwValue; } else { $761 = -1; };
         $762 = tempRet0;
         $cond163 = ($761|0)==(1);
         if ($cond163) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $762;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $763 = +HEAPF32[((133480 + 4|0))>>2];
         $764 = $763;
         __THREW__ = 0;
         HEAPF64[$vararg_buffer1499>>3] = $764;
         (invoke_iii(1,(190600|0),($vararg_buffer1499|0))|0);
         $765 = __THREW__; __THREW__ = 0;
         if ((($765|0) != 0) & ((threwValue|0) != 0)) { $766 = _testSetjmp(HEAP32[$765>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($766|0) == 0) { _longjmp($765|0, threwValue|0); } tempRet0 = threwValue; } else { $766 = -1; };
         $767 = tempRet0;
         $cond164 = ($766|0)==(1);
         if ($cond164) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $767;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $768 = +HEAPF32[((133480 + 8|0))>>2];
         $769 = $768;
         __THREW__ = 0;
         HEAPF64[$vararg_buffer1502>>3] = $769;
         (invoke_iii(1,(190600|0),($vararg_buffer1502|0))|0);
         $770 = __THREW__; __THREW__ = 0;
         if ((($770|0) != 0) & ((threwValue|0) != 0)) { $771 = _testSetjmp(HEAP32[$770>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($771|0) == 0) { _longjmp($770|0, threwValue|0); } tempRet0 = threwValue; } else { $771 = -1; };
         $772 = tempRet0;
         $cond165 = ($771|0)==(1);
         if ($cond165) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $772;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $773 = +HEAPF32[((133480 + 12|0))>>2];
         $774 = $773;
         __THREW__ = 0;
         HEAPF64[$vararg_buffer1505>>3] = $774;
         (invoke_iii(1,(190600|0),($vararg_buffer1505|0))|0);
         $775 = __THREW__; __THREW__ = 0;
         if ((($775|0) != 0) & ((threwValue|0) != 0)) { $776 = _testSetjmp(HEAP32[$775>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($776|0) == 0) { _longjmp($775|0, threwValue|0); } tempRet0 = threwValue; } else { $776 = -1; };
         $777 = tempRet0;
         $cond166 = ($776|0)==(1);
         if ($cond166) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $777;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        }
        __THREW__ = 0;
        (invoke_ii(3,10)|0);
        $778 = __THREW__; __THREW__ = 0;
        if ((($778|0) != 0) & ((threwValue|0) != 0)) { $779 = _testSetjmp(HEAP32[$778>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($779|0) == 0) { _longjmp($778|0, threwValue|0); } tempRet0 = threwValue; } else { $779 = -1; };
        $780 = tempRet0;
        $cond161 = ($779|0)==(1);
        if ($cond161) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $780;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $status$2$reg2mem1283$0 = $status$1$reg2mem1295$0;
        break;
       }
       $789 = HEAP32[133944>>2]|0;
       $790 = ($789|0)==(0);
       if (!($790)) {
        __THREW__ = 0;
        $791 = (invoke_ii(9,($789|0))|0);
        $792 = __THREW__; __THREW__ = 0;
        if ((($792|0) != 0) & ((threwValue|0) != 0)) { $793 = _testSetjmp(HEAP32[$792>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($793|0) == 0) { _longjmp($792|0, threwValue|0); } tempRet0 = threwValue; } else { $793 = -1; };
        $794 = tempRet0;
        $cond103 = ($793|0)==(1);
        if ($cond103) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $794;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        HEAP32[189368>>2] = $791;
        __THREW__ = 0;
        invoke_vii(1,($791|0),(626336|0));
        $795 = __THREW__; __THREW__ = 0;
        if ((($795|0) != 0) & ((threwValue|0) != 0)) { $796 = _testSetjmp(HEAP32[$795>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($796|0) == 0) { _longjmp($795|0, threwValue|0); } tempRet0 = threwValue; } else { $796 = -1; };
        $797 = tempRet0;
        $cond104 = ($796|0)==(1);
        if ($cond104) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $797;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $798 = HEAP32[584>>2]|0;
       $799 = ($798|0)!=(0);
       $800 = HEAP32[132272>>2]|0;
       $801 = ($800|0)==(1);
       $or$cond7 = $799 | $801;
       if ($or$cond7) {
        $802 = HEAP16[133064>>1]|0;
        $803 = $802&65535;
        $804 = (($803) + 7)|0;
        $805 = HEAP16[132336>>1]|0;
        $806 = $805&65535;
        $807 = $806 << 1;
        __THREW__ = 0;
        $808 = (invoke_iii(6,($804|0),($807|0))|0);
        $809 = __THREW__; __THREW__ = 0;
        if ((($809|0) != 0) & ((threwValue|0) != 0)) { $810 = _testSetjmp(HEAP32[$809>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($810|0) == 0) { _longjmp($809|0, threwValue|0); } tempRet0 = threwValue; } else { $810 = -1; };
        $811 = tempRet0;
        $cond150 = ($810|0)==(1);
        if ($cond150) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $811;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        HEAP32[132328>>2] = $808;
        __THREW__ = 0;
        invoke_vii(1,($808|0),(626336|0));
        $812 = __THREW__; __THREW__ = 0;
        if ((($812|0) != 0) & ((threwValue|0) != 0)) { $813 = _testSetjmp(HEAP32[$812>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($813|0) == 0) { _longjmp($812|0, threwValue|0); } tempRet0 = threwValue; } else { $813 = -1; };
        $814 = tempRet0;
        $cond151 = ($813|0)==(1);
        if ($cond151) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $814;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       } else {
        $815 = HEAP16[190336>>1]|0;
        $816 = $815&65535;
        $817 = HEAP16[132104>>1]|0;
        $818 = $817&65535;
        $819 = $818 << 3;
        __THREW__ = 0;
        $820 = (invoke_iii(6,($816|0),($819|0))|0);
        $821 = __THREW__; __THREW__ = 0;
        if ((($821|0) != 0) & ((threwValue|0) != 0)) { $822 = _testSetjmp(HEAP32[$821>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($822|0) == 0) { _longjmp($821|0, threwValue|0); } tempRet0 = threwValue; } else { $822 = -1; };
        $823 = tempRet0;
        $cond105 = ($822|0)==(1);
        if ($cond105) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $823;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        HEAP32[132112>>2] = $820;
        __THREW__ = 0;
        invoke_vii(1,($820|0),(626336|0));
        $824 = __THREW__; __THREW__ = 0;
        if ((($824|0) != 0) & ((threwValue|0) != 0)) { $825 = _testSetjmp(HEAP32[$824>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($825|0) == 0) { _longjmp($824|0, threwValue|0); } tempRet0 = threwValue; } else { $825 = -1; };
        $826 = tempRet0;
        $cond106 = ($825|0)==(1);
        if ($cond106) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $826;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $827 = HEAP32[168>>2]|0;
       $828 = ($827|0)==(0);
       if (!($828)) {
        $829 = HEAP32[680>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1513>>2] = 133624;
        $vararg_ptr1516 = (($vararg_buffer1513) + 4|0);
        HEAP32[$vararg_ptr1516>>2] = 133688;
        $vararg_ptr1517 = (($vararg_buffer1513) + 8|0);
        HEAP32[$vararg_ptr1517>>2] = $829;
        (invoke_iiii(3,($$reg2mem499$1|0),(626344|0),($vararg_buffer1513|0))|0);
        $830 = __THREW__; __THREW__ = 0;
        if ((($830|0) != 0) & ((threwValue|0) != 0)) { $831 = _testSetjmp(HEAP32[$830>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($831|0) == 0) { _longjmp($830|0, threwValue|0); } tempRet0 = threwValue; } else { $831 = -1; };
        $832 = tempRet0;
        $cond107 = ($831|0)==(1);
        if ($cond107) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $832;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $833 = HEAP32[8>>2]|0;
       $834 = HEAP32[133208>>2]|0;
       $835 = ($833>>>0)<($834>>>0);
       if (!($835)) {
        $836 = HEAP32[680>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer1518>>2] = $836;
        $vararg_ptr1521 = (($vararg_buffer1518) + 4|0);
        HEAP32[$vararg_ptr1521>>2] = $833;
        (invoke_iiii(3,($$reg2mem499$1|0),(626384|0),($vararg_buffer1518|0))|0);
        $837 = __THREW__; __THREW__ = 0;
        if ((($837|0) != 0) & ((threwValue|0) != 0)) { $838 = _testSetjmp(HEAP32[$837>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($838|0) == 0) { _longjmp($837|0, threwValue|0); } tempRet0 = threwValue; } else { $838 = -1; };
        $839 = tempRet0;
        $cond108 = ($838|0)==(1);
        if ($cond108) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $839;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $840 = HEAP32[864>>2]|0;
       $841 = HEAP32[133280>>2]|0;
       __THREW__ = 0;
       (invoke_iiii(5,($840|0),($841|0),0)|0);
       $842 = __THREW__; __THREW__ = 0;
       if ((($842|0) != 0) & ((threwValue|0) != 0)) { $843 = _testSetjmp(HEAP32[$842>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($843|0) == 0) { _longjmp($842|0, threwValue|0); } tempRet0 = threwValue; } else { $843 = -1; };
       $844 = tempRet0;
       $cond109 = ($843|0)==(1);
       if ($cond109) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $844;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
       $845 = HEAP32[132328>>2]|0;
       $846 = ($845|0)!=(0|0);
       $or$cond9 = $$reg2mem516$1 & $846;
       if ($or$cond9) {
        $847 = HEAP16[133064>>1]|0;
        $848 = $847&65535;
        $849 = HEAP16[132336>>1]|0;
        $850 = $849&65535;
        $851 = Math_imul($850, $848)|0;
        __THREW__ = 0;
        (invoke_iiiii(2,($845|0),2,($851|0),($$reg2mem514$1|0))|0);
        $852 = __THREW__; __THREW__ = 0;
        if ((($852|0) != 0) & ((threwValue|0) != 0)) { $853 = _testSetjmp(HEAP32[$852>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($853|0) == 0) { _longjmp($852|0, threwValue|0); } tempRet0 = threwValue; } else { $853 = -1; };
        $854 = tempRet0;
        $cond149 = ($853|0)==(1);
        if ($cond149) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $854;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       } else {
        $855 = HEAP32[189952>>2]|0;
        __THREW__ = 0;
        invoke_v($855|0);
        $856 = __THREW__; __THREW__ = 0;
        if ((($856|0) != 0) & ((threwValue|0) != 0)) { $857 = _testSetjmp(HEAP32[$856>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($857|0) == 0) { _longjmp($856|0, threwValue|0); } tempRet0 = threwValue; } else { $857 = -1; };
        $858 = tempRet0;
        $cond110 = ($857|0)==(1);
        if ($cond110) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $858;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $859 = HEAP32[152>>2]|0;
       $860 = ($859|0)==(3);
       if ($860) {
        HEAP16[189960>>1] = 0;
        HEAP16[592>>1] = 0;
        HEAP16[600>>1] = 0;
        $861 = HEAP16[133064>>1]|0;
        HEAP16[132080>>1] = $861;
        $862 = HEAP16[132336>>1]|0;
        HEAP16[132088>>1] = $862;
       }
       $863 = HEAP16[132080>>1]|0;
       $864 = $863&65535;
       $865 = HEAP16[132096>>1]|0;
       $866 = $865&65535;
       $867 = (($866) + ($864))|0;
       $868 = $867 >>> $866;
       $869 = $868&65535;
       HEAP16[190336>>1] = $869;
       $870 = HEAP16[132088>>1]|0;
       $871 = $870&65535;
       $872 = HEAP16[132096>>1]|0;
       $873 = $872&65535;
       $874 = (($873) + ($871))|0;
       $875 = $874 >>> $873;
       $876 = $875&65535;
       HEAP16[132104>>1] = $876;
       $877 = HEAP32[132328>>2]|0;
       $878 = ($877|0)==(0|0);
       if (!($878)) {
        $879 = HEAP16[190336>>1]|0;
        $880 = $879&65535;
        $881 = $875 << 3;
        $882 = $881 & 524280;
        __THREW__ = 0;
        $883 = (invoke_iii(6,($880|0),($882|0))|0);
        $884 = __THREW__; __THREW__ = 0;
        if ((($884|0) != 0) & ((threwValue|0) != 0)) { $885 = _testSetjmp(HEAP32[$884>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($885|0) == 0) { _longjmp($884|0, threwValue|0); } tempRet0 = threwValue; } else { $885 = -1; };
        $886 = tempRet0;
        $cond111 = ($885|0)==(1);
        if ($cond111) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $886;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        HEAP32[132112>>2] = $883;
        __THREW__ = 0;
        invoke_vii(1,($883|0),(626336|0));
        $887 = __THREW__; __THREW__ = 0;
        if ((($887|0) != 0) & ((threwValue|0) != 0)) { $888 = _testSetjmp(HEAP32[$887>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($888|0) == 0) { _longjmp($887|0, threwValue|0); } tempRet0 = threwValue; } else { $888 = -1; };
        $889 = tempRet0;
        $cond112 = ($888|0)==(1);
        if ($cond112) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $889;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        invoke_v(56);
        $890 = __THREW__; __THREW__ = 0;
        if ((($890|0) != 0) & ((threwValue|0) != 0)) { $891 = _testSetjmp(HEAP32[$890>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($891|0) == 0) { _longjmp($890|0, threwValue|0); } tempRet0 = threwValue; } else { $891 = -1; };
        $892 = tempRet0;
        $cond113 = ($891|0)==(1);
        if ($cond113) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $892;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $893 = HEAP32[132328>>2]|0;
        __THREW__ = 0;
        invoke_vi(2,($893|0));
        $894 = __THREW__; __THREW__ = 0;
        if ((($894|0) != 0) & ((threwValue|0) != 0)) { $895 = _testSetjmp(HEAP32[$894>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($895|0) == 0) { _longjmp($894|0, threwValue|0); } tempRet0 = threwValue; } else { $895 = -1; };
        $896 = tempRet0;
        $cond114 = ($895|0)==(1);
        if ($cond114) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $896;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $897 = HEAP32[489976>>2]|0;
       $898 = ($897|0)==(0);
       if (!($898)) {
        __THREW__ = 0;
        invoke_v(57);
        $899 = __THREW__; __THREW__ = 0;
        if ((($899|0) != 0) & ((threwValue|0) != 0)) { $900 = _testSetjmp(HEAP32[$899>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($900|0) == 0) { _longjmp($899|0, threwValue|0); } tempRet0 = threwValue; } else { $900 = -1; };
        $901 = tempRet0;
        $cond115 = ($900|0)==(1);
        if ($cond115) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $901;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       __THREW__ = 0;
       invoke_vi(3,($bpfile$0$lcssa$reg2mem$1|0));
       $902 = __THREW__; __THREW__ = 0;
       if ((($902|0) != 0) & ((threwValue|0) != 0)) { $903 = _testSetjmp(HEAP32[$902>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($903|0) == 0) { _longjmp($902|0, threwValue|0); } tempRet0 = threwValue; } else { $903 = -1; };
       $904 = tempRet0;
       $cond116 = ($903|0)==(1);
       if ($cond116) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $904;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
       if (!($$reg2mem512$1)) {
        __THREW__ = 0;
        invoke_vi(4,($dark_frame$0$lcssa$reg2mem$1|0));
        $905 = __THREW__; __THREW__ = 0;
        if ((($905|0) != 0) & ((threwValue|0) != 0)) { $906 = _testSetjmp(HEAP32[$905>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($906|0) == 0) { _longjmp($905|0, threwValue|0); } tempRet0 = threwValue; } else { $906 = -1; };
        $907 = tempRet0;
        $cond117 = ($906|0)==(1);
        if ($cond117) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $907;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $908 = HEAP16[189960>>1]|0;
       $909 = ($908<<16>>16)==(0);
       $910 = $909&1;
       $911 = $910 | 2;
       $912 = HEAP16[((134176 + 6|0))>>1]|0;
       $913 = $912&65535;
       $914 = HEAP16[134176>>1]|0;
       $915 = $914&65535;
       $916 = ($913>>>0)>($915>>>0);
       $$i$3 = $916 ? $915 : $913;
       $917 = HEAP16[((134176 + 2|0))>>1]|0;
       $918 = $917&65535;
       $919 = ($$i$3>>>0)>($918>>>0);
       $$i$3$1 = $919 ? $918 : $$i$3;
       $920 = HEAP16[((134176 + 4|0))>>1]|0;
       $921 = $920&65535;
       $922 = ($$i$3$1>>>0)>($921>>>0);
       $$i$3$2 = $922 ? $921 : $$i$3$1;
       $923 = HEAP16[134176>>1]|0;
       $924 = $923&65535;
       $925 = (($924) - ($$i$3$2))|0;
       $926 = $925&65535;
       HEAP16[134176>>1] = $926;
       $927 = HEAP16[((134176 + 2|0))>>1]|0;
       $928 = $927&65535;
       $929 = (($928) - ($$i$3$2))|0;
       $930 = $929&65535;
       HEAP16[((134176 + 2|0))>>1] = $930;
       $931 = HEAP16[((134176 + 4|0))>>1]|0;
       $932 = $931&65535;
       $933 = (($932) - ($$i$3$2))|0;
       $934 = $933&65535;
       HEAP16[((134176 + 4|0))>>1] = $934;
       $935 = HEAP16[((134176 + 6|0))>>1]|0;
       $936 = $935&65535;
       $937 = (($936) - ($$i$3$2))|0;
       $938 = $937&65535;
       HEAP16[((134176 + 6|0))>>1] = $938;
       $user_qual$0$ = $$reg2mem510$1 ? $user_qual$0$lcssa$reg2mem$1 : $911;
       $939 = HEAP32[132360>>2]|0;
       $940 = (($939) + ($$i$3$2))|0;
       HEAP32[132360>>2] = $940;
       $941 = HEAP16[((134176 + 12|0))>>1]|0;
       $942 = $941&65535;
       $943 = HEAP16[((134176 + 8|0))>>1]|0;
       $944 = $943&65535;
       $945 = HEAP16[((134176 + 10|0))>>1]|0;
       $946 = $945&65535;
       $947 = Math_imul($946, $944)|0;
       $948 = ($947|0)==(0);
       if ($948) {
        $i$5$lcssa$reg2mem1281$0 = $942;
       } else {
        $949 = HEAP16[((134176 + 8|0))>>1]|0;
        $950 = $949&65535;
        $951 = HEAP16[((134176 + 10|0))>>1]|0;
        $952 = $951&65535;
        $953 = Math_imul($952, $950)|0;
        $c$780$reg2mem$0 = 0;$i$579$reg2mem$0 = $942;
        while(1) {
         $960 = (($c$780$reg2mem$0) + 6)|0;
         $961 = (134176 + ($960<<1)|0);
         $962 = HEAP16[$961>>1]|0;
         $963 = $962&65535;
         $964 = ($i$579$reg2mem$0|0)>($963|0);
         $$i$5 = $964 ? $963 : $i$579$reg2mem$0;
         $965 = (($c$780$reg2mem$0) + 1)|0;
         $966 = ($965|0)<($953|0);
         if ($966) {
          $c$780$reg2mem$0 = $965;$i$579$reg2mem$0 = $$i$5;
         } else {
          $i$5$lcssa$reg2mem1281$0 = $$i$5;
          break;
         }
        }
       }
       $954 = HEAP16[((134176 + 8|0))>>1]|0;
       $955 = $954&65535;
       $956 = HEAP16[((134176 + 10|0))>>1]|0;
       $957 = $956&65535;
       $958 = Math_imul($957, $955)|0;
       $959 = ($958|0)==(0);
       if (!($959)) {
        $c$881$reg2mem$0 = 0;
        while(1) {
         $967 = (($c$881$reg2mem$0) + 6)|0;
         $968 = (134176 + ($967<<1)|0);
         $969 = HEAP16[$968>>1]|0;
         $970 = $969&65535;
         $971 = (($970) - ($i$5$lcssa$reg2mem1281$0))|0;
         $972 = $971&65535;
         HEAP16[$968>>1] = $972;
         $973 = (($c$881$reg2mem$0) + 1)|0;
         $974 = HEAP16[((134176 + 8|0))>>1]|0;
         $975 = $974&65535;
         $976 = HEAP16[((134176 + 10|0))>>1]|0;
         $977 = $976&65535;
         $978 = Math_imul($977, $975)|0;
         $979 = ($973|0)<($978|0);
         if ($979) {
          $c$881$reg2mem$0 = $973;
         } else {
          break;
         }
        }
       }
       $980 = HEAP32[132360>>2]|0;
       $981 = (($980) + ($i$5$lcssa$reg2mem1281$0))|0;
       $user_black$0$ = $$reg2mem508$1 ? $user_black$0$lcssa$reg2mem$1 : $981;
       HEAP32[132360>>2] = $user_black$0$;
       $982 = HEAP16[134176>>1]|0;
       $983 = $982&65535;
       $984 = (($983) + ($user_black$0$))|0;
       $985 = $984&65535;
       HEAP16[134176>>1] = $985;
       $986 = HEAP16[((134176 + 2|0))>>1]|0;
       $987 = $986&65535;
       $988 = (($987) + ($user_black$0$))|0;
       $989 = $988&65535;
       HEAP16[((134176 + 2|0))>>1] = $989;
       $990 = HEAP16[((134176 + 4|0))>>1]|0;
       $991 = $990&65535;
       $992 = (($991) + ($user_black$0$))|0;
       $993 = $992&65535;
       HEAP16[((134176 + 4|0))>>1] = $993;
       $994 = HEAP16[((134176 + 6|0))>>1]|0;
       $995 = $994&65535;
       $996 = (($995) + ($user_black$0$))|0;
       $997 = $996&65535;
       HEAP16[((134176 + 6|0))>>1] = $997;
       if ($$reg2mem506$1) {
        HEAP32[132368>>2] = $user_sat$0$lcssa$reg2mem$1;
       }
       $998 = HEAP32[458128>>2]|0;
       $999 = ($998|0)==(0);
       $1000 = HEAP32[152>>2]|0;
       do {
        if ($999) {
         $1026 = ($1000|0)<(2);
         if (!($1026)) {
          break;
         }
         __THREW__ = 0;
         invoke_v(59);
         $1027 = __THREW__; __THREW__ = 0;
         if ((($1027|0) != 0) & ((threwValue|0) != 0)) { $1028 = _testSetjmp(HEAP32[$1027>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1028|0) == 0) { _longjmp($1027|0, threwValue|0); } tempRet0 = threwValue; } else { $1028 = -1; };
         $1029 = tempRet0;
         $cond148 = ($1028|0)==(1);
         if ($cond148) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1029;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        } else {
         $1001 = ($1000|0)!=(0);
         $1002 = HEAP32[189952>>2]|0;
         $1003 = ($1002|0)==(35|0);
         $or$cond11 = $1001 | $1003;
         if (!($or$cond11)) {
          __THREW__ = 0;
          invoke_v(58);
          $1023 = __THREW__; __THREW__ = 0;
          if ((($1023|0) != 0) & ((threwValue|0) != 0)) { $1024 = _testSetjmp(HEAP32[$1023>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1024|0) == 0) { _longjmp($1023|0, threwValue|0); } tempRet0 = threwValue; } else { $1024 = -1; };
          $1025 = tempRet0;
          $cond118 = ($1024|0)==(1);
          if ($cond118) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1025;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          break;
         }
         $1004 = HEAP16[132080>>1]|0;
         $1005 = $1004&65535;
         $1006 = HEAP16[132088>>1]|0;
         $1007 = $1006&65535;
         $1008 = $1005 << 2;
         $1009 = Math_imul($1008, $1007)|0;
         $1010 = ($1009|0)>(0);
         if (!($1010)) {
          break;
         }
         $1011 = HEAP32[132112>>2]|0;
         $i$784$reg2mem1279$0 = 0;
         while(1) {
          $1012 = (($1011) + ($i$784$reg2mem1279$0<<1)|0);
          $1013 = HEAP16[$1012>>1]|0;
          $1014 = ($1013<<16>>16)<(0);
          if ($1014) {
           HEAP16[$1012>>1] = 0;
          }
          $1015 = (($i$784$reg2mem1279$0) + 1)|0;
          $1016 = HEAP16[132080>>1]|0;
          $1017 = $1016&65535;
          $1018 = HEAP16[132088>>1]|0;
          $1019 = $1018&65535;
          $1020 = $1017 << 2;
          $1021 = Math_imul($1020, $1019)|0;
          $1022 = ($1015|0)<($1021|0);
          if ($1022) {
           $i$784$reg2mem1279$0 = $1015;
          } else {
           break;
          }
         }
        }
       } while(0);
       __THREW__ = 0;
       invoke_v(60);
       $1030 = __THREW__; __THREW__ = 0;
       if ((($1030|0) != 0) & ((threwValue|0) != 0)) { $1031 = _testSetjmp(HEAP32[$1030>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1031|0) == 0) { _longjmp($1030|0, threwValue|0); } tempRet0 = threwValue; } else { $1031 = -1; };
       $1032 = tempRet0;
       $cond119 = ($1031|0)==(1);
       if ($cond119) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1032;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
       $1033 = HEAP32[584>>2]|0;
       $1034 = ($1033|0)==(0);
       $1035 = HEAP32[152>>2]|0;
       $1036 = ($1035|0)!=(0);
       $or$cond13 = $1034 | $1036;
       do {
        if (!($or$cond13)) {
         $1037 = ($user_qual$0$|0)==(0);
         if ($1037) {
          __THREW__ = 0;
          invoke_v(61);
          $1038 = __THREW__; __THREW__ = 0;
          if ((($1038|0) != 0) & ((threwValue|0) != 0)) { $1039 = _testSetjmp(HEAP32[$1038>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1039|0) == 0) { _longjmp($1038|0, threwValue|0); } tempRet0 = threwValue; } else { $1039 = -1; };
          $1040 = tempRet0;
          $cond124 = ($1039|0)==(1);
          if ($cond124) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1040;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          break;
         }
         $1041 = ($user_qual$0$|0)==(1);
         $1042 = HEAP32[132272>>2]|0;
         $1043 = ($1042>>>0)>(3);
         $or$cond15 = $1041 | $1043;
         if ($or$cond15) {
          __THREW__ = 0;
          invoke_v(62);
          $1044 = __THREW__; __THREW__ = 0;
          if ((($1044|0) != 0) & ((threwValue|0) != 0)) { $1045 = _testSetjmp(HEAP32[$1044>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1045|0) == 0) { _longjmp($1044|0, threwValue|0); } tempRet0 = threwValue; } else { $1045 = -1; };
          $1046 = tempRet0;
          $cond123 = ($1045|0)==(1);
          if ($cond123) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1046;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          break;
         }
         $1047 = ($user_qual$0$|0)==(2);
         $1048 = ($1033>>>0)>(1000);
         $or$cond17 = $1047 & $1048;
         if ($or$cond17) {
          __THREW__ = 0;
          invoke_v(63);
          $1049 = __THREW__; __THREW__ = 0;
          if ((($1049|0) != 0) & ((threwValue|0) != 0)) { $1050 = _testSetjmp(HEAP32[$1049>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1050|0) == 0) { _longjmp($1049|0, threwValue|0); } tempRet0 = threwValue; } else { $1050 = -1; };
          $1051 = tempRet0;
          $cond122 = ($1050|0)==(1);
          if ($cond122) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1051;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          break;
         }
         $1052 = ($1033|0)==(9);
         if ($1052) {
          $1053 = $user_qual$0$ << 1;
          $1054 = (($1053) + -3)|0;
          __THREW__ = 0;
          invoke_vi(5,($1054|0));
          $1055 = __THREW__; __THREW__ = 0;
          if ((($1055|0) != 0) & ((threwValue|0) != 0)) { $1056 = _testSetjmp(HEAP32[$1055>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1056|0) == 0) { _longjmp($1055|0, threwValue|0); } tempRet0 = threwValue; } else { $1056 = -1; };
          $1057 = tempRet0;
          $cond121 = ($1056|0)==(1);
          if ($cond121) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1057;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          break;
         } else {
          __THREW__ = 0;
          invoke_v(64);
          $1058 = __THREW__; __THREW__ = 0;
          if ((($1058|0) != 0) & ((threwValue|0) != 0)) { $1059 = _testSetjmp(HEAP32[$1058>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1059|0) == 0) { _longjmp($1058|0, threwValue|0); } tempRet0 = threwValue; } else { $1059 = -1; };
          $1060 = tempRet0;
          $cond120 = ($1059|0)==(1);
          if ($cond120) {
           $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1060;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
           continue L143;
          }
          break;
         }
        }
       } while(0);
       $1061 = HEAP32[142384>>2]|0;
       $1062 = ($1061|0)==(0);
       do {
        if (!($1062)) {
         HEAP32[132272>>2] = 3;
         $1063 = HEAP16[132080>>1]|0;
         $1064 = $1063&65535;
         $1065 = HEAP16[132088>>1]|0;
         $1066 = $1065&65535;
         $1067 = Math_imul($1066, $1064)|0;
         $1068 = ($1067|0)==(0);
         if ($1068) {
          break;
         }
         $1069 = HEAP32[132112>>2]|0;
         $i$886$reg2mem$0 = 0;
         while(1) {
          $1070 = ((($1069) + ($i$886$reg2mem$0<<3)|0) + 2|0);
          $1071 = HEAP16[$1070>>1]|0;
          $1072 = $1071&65535;
          $1073 = ((($1069) + ($i$886$reg2mem$0<<3)|0) + 6|0);
          $1074 = HEAP16[$1073>>1]|0;
          $1075 = $1074&65535;
          $1076 = (($1075) + ($1072))|0;
          $1077 = $1076 >>> 1;
          $1078 = $1077&65535;
          HEAP16[$1070>>1] = $1078;
          $1079 = (($i$886$reg2mem$0) + 1)|0;
          $1080 = HEAP16[132080>>1]|0;
          $1081 = $1080&65535;
          $1082 = HEAP16[132088>>1]|0;
          $1083 = $1082&65535;
          $1084 = Math_imul($1083, $1081)|0;
          $1085 = ($1079|0)<($1084|0);
          if ($1085) {
           $i$886$reg2mem$0 = $1079;
          } else {
           break;
          }
         }
        }
       } while(0);
       $1086 = HEAP32[458128>>2]|0;
       $1087 = ($1086|0)==(0);
       $1088 = HEAP32[132272>>2]|0;
       $1089 = ($1088|0)==(3);
       $or$cond19 = $1087 & $1089;
       if ($or$cond19) {
        __THREW__ = 0;
        invoke_v(65);
        $1090 = __THREW__; __THREW__ = 0;
        if ((($1090|0) != 0) & ((threwValue|0) != 0)) { $1091 = _testSetjmp(HEAP32[$1090>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1091|0) == 0) { _longjmp($1090|0, threwValue|0); } tempRet0 = threwValue; } else { $1091 = -1; };
        $1092 = tempRet0;
        $cond147 = ($1091|0)==(1);
        if ($cond147) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1092;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $1093 = HEAP32[458128>>2]|0;
       $1094 = ($1093|0)==(0);
       $1095 = HEAP32[160>>2]|0;
       $1096 = ($1095|0)==(2);
       $or$cond21 = $1094 & $1096;
       if ($or$cond21) {
        __THREW__ = 0;
        invoke_v(66);
        $1097 = __THREW__; __THREW__ = 0;
        if ((($1097|0) != 0) & ((threwValue|0) != 0)) { $1098 = _testSetjmp(HEAP32[$1097>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1098|0) == 0) { _longjmp($1097|0, threwValue|0); } tempRet0 = threwValue; } else { $1098 = -1; };
        $1099 = tempRet0;
        $cond146 = ($1098|0)==(1);
        if ($cond146) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1099;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $1100 = HEAP32[458128>>2]|0;
       $1101 = ($1100|0)==(0);
       $1102 = HEAP32[160>>2]|0;
       $1103 = ($1102|0)>(2);
       $or$cond23 = $1101 & $1103;
       if ($or$cond23) {
        __THREW__ = 0;
        invoke_v(67);
        $1104 = __THREW__; __THREW__ = 0;
        if ((($1104|0) != 0) & ((threwValue|0) != 0)) { $1105 = _testSetjmp(HEAP32[$1104>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1105|0) == 0) { _longjmp($1104|0, threwValue|0); } tempRet0 = threwValue; } else { $1105 = -1; };
        $1106 = tempRet0;
        $cond145 = ($1105|0)==(1);
        if ($cond145) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1106;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       if ($$reg2mem504$1) {
        __THREW__ = 0;
        invoke_v(69);
        $1116 = __THREW__; __THREW__ = 0;
        if ((($1116|0) != 0) & ((threwValue|0) != 0)) { $1117 = _testSetjmp(HEAP32[$1116>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1117|0) == 0) { _longjmp($1116|0, threwValue|0); } tempRet0 = threwValue; } else { $1117 = -1; };
        $1118 = tempRet0;
        $cond144 = ($1117|0)==(1);
        if ($cond144) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1118;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       } else {
        __THREW__ = 0;
        invoke_v(68);
        $1107 = __THREW__; __THREW__ = 0;
        if ((($1107|0) != 0) & ((threwValue|0) != 0)) { $1108 = _testSetjmp(HEAP32[$1107>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1108|0) == 0) { _longjmp($1107|0, threwValue|0); } tempRet0 = threwValue; } else { $1108 = -1; };
        $1109 = tempRet0;
        $cond125 = ($1108|0)==(1);
        if ($cond125) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1109;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        invoke_v(69);
        $1110 = __THREW__; __THREW__ = 0;
        if ((($1110|0) != 0) & ((threwValue|0) != 0)) { $1111 = _testSetjmp(HEAP32[$1110>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1111|0) == 0) { _longjmp($1110|0, threwValue|0); } tempRet0 = threwValue; } else { $1111 = -1; };
        $1112 = tempRet0;
        $cond126 = ($1111|0)==(1);
        if ($cond126) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1112;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        invoke_v(70);
        $1113 = __THREW__; __THREW__ = 0;
        if ((($1113|0) != 0) & ((threwValue|0) != 0)) { $1114 = _testSetjmp(HEAP32[$1113>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1114|0) == 0) { _longjmp($1113|0, threwValue|0); } tempRet0 = threwValue; } else { $1114 = -1; };
        $1115 = tempRet0;
        $cond127 = ($1114|0)==(1);
        if ($cond127) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1115;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
       }
       $$pr32 = HEAP32[625768>>2]|0;
       $$reg2mem1277$0 = $$pr32;$status$3$reg2mem1275$0 = $status$1$reg2mem1295$0;
      }
      $1119 = ($$reg2mem1277$0|0)==(36|0);
      if ($1119) {
       $write_ext$0$reg2mem1273$0 = 457480;
      } else {
       $1120 = HEAP32[216>>2]|0;
       $1121 = ($1120|0)!=(0);
       $1122 = ($$reg2mem1277$0|0)==(55|0);
       $or$cond25 = $1122 & $1121;
       if ($or$cond25) {
        $write_ext$0$reg2mem1273$0 = 626432;
       } else {
        $1123 = HEAP32[132272>>2]|0;
        $1124 = ($1123*5)|0;
        $$sum = (($1124) + -5)|0;
        $1125 = (626440 + ($$sum)|0);
        $write_ext$0$reg2mem1273$0 = $1125;
       }
      }
      $1126 = HEAP32[680>>2]|0;
      __THREW__ = 0;
      $1127 = (invoke_ii(10,($1126|0))|0);
      $1128 = __THREW__; __THREW__ = 0;
      if ((($1128|0) != 0) & ((threwValue|0) != 0)) { $1129 = _testSetjmp(HEAP32[$1128>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1129|0) == 0) { _longjmp($1128|0, threwValue|0); } tempRet0 = threwValue; } else { $1129 = -1; };
      $1130 = tempRet0;
      $cond128 = ($1129|0)==(1);
      if ($cond128) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1130;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      $1131 = (($1127) + 64)|0;
      __THREW__ = 0;
      $1132 = (invoke_ii(9,($1131|0))|0);
      $1133 = __THREW__; __THREW__ = 0;
      if ((($1133|0) != 0) & ((threwValue|0) != 0)) { $1134 = _testSetjmp(HEAP32[$1133>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1134|0) == 0) { _longjmp($1133|0, threwValue|0); } tempRet0 = threwValue; } else { $1134 = -1; };
      $1135 = tempRet0;
      $cond129 = ($1134|0)==(1);
      if ($cond129) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1135;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      __THREW__ = 0;
      invoke_vii(1,($1132|0),(626336|0));
      $1136 = __THREW__; __THREW__ = 0;
      if ((($1136|0) != 0) & ((threwValue|0) != 0)) { $1137 = _testSetjmp(HEAP32[$1136>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1137|0) == 0) { _longjmp($1136|0, threwValue|0); } tempRet0 = threwValue; } else { $1137 = -1; };
      $1138 = tempRet0;
      $cond130 = ($1137|0)==(1);
      if ($cond130) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1138;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      do {
       if ($$reg2mem541$1) {
        dest=$1132+0|0; src=626464+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
       } else {
        $1139 = HEAP32[680>>2]|0;
        __THREW__ = 0;
        (invoke_iii(7,($1132|0),($1139|0))|0);
        $1140 = __THREW__; __THREW__ = 0;
        if ((($1140|0) != 0) & ((threwValue|0) != 0)) { $1141 = _testSetjmp(HEAP32[$1140>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1141|0) == 0) { _longjmp($1140|0, threwValue|0); } tempRet0 = threwValue; } else { $1141 = -1; };
        $1142 = tempRet0;
        $cond131 = ($1141|0)==(1);
        if ($cond131) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1142;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        $1143 = (invoke_iii(8,($1132|0),46)|0);
        $1144 = __THREW__; __THREW__ = 0;
        if ((($1144|0) != 0) & ((threwValue|0) != 0)) { $1145 = _testSetjmp(HEAP32[$1144>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1145|0) == 0) { _longjmp($1144|0, threwValue|0); } tempRet0 = threwValue; } else { $1145 = -1; };
        $1146 = tempRet0;
        $cond132 = ($1145|0)==(1);
        if ($cond132) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1146;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $1147 = ($1143|0)==(0|0);
        if (!($1147)) {
         HEAP8[$1143>>0] = 0;
        }
        $1148 = HEAP32[16>>2]|0;
        $1149 = ($1148|0)==(0);
        if (!($1149)) {
         __THREW__ = 0;
         $1150 = (invoke_ii(10,($1132|0))|0);
         $1151 = __THREW__; __THREW__ = 0;
         if ((($1151|0) != 0) & ((threwValue|0) != 0)) { $1152 = _testSetjmp(HEAP32[$1151>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1152|0) == 0) { _longjmp($1151|0, threwValue|0); } tempRet0 = threwValue; } else { $1152 = -1; };
         $1153 = tempRet0;
         $cond133 = ($1152|0)==(1);
         if ($cond133) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1153;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $1154 = (($1132) + ($1150)|0);
         $1155 = HEAP32[133208>>2]|0;
         $1156 = (($1155) + -1)|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1522>>2] = $1156;
         $1157 = (invoke_iiiii(3,(0|0),0,(456296|0),($vararg_buffer1522|0))|0);
         $1158 = __THREW__; __THREW__ = 0;
         if ((($1158|0) != 0) & ((threwValue|0) != 0)) { $1159 = _testSetjmp(HEAP32[$1158>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1159|0) == 0) { _longjmp($1158|0, threwValue|0); } tempRet0 = threwValue; } else { $1159 = -1; };
         $1160 = tempRet0;
         $cond134 = ($1159|0)==(1);
         if ($cond134) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1160;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $1161 = HEAP32[8>>2]|0;
         __THREW__ = 0;
         HEAP32[$vararg_buffer1525>>2] = $1157;
         $vararg_ptr1528 = (($vararg_buffer1525) + 4|0);
         HEAP32[$vararg_ptr1528>>2] = $1161;
         (invoke_iiii(6,($1154|0),(626480|0),($vararg_buffer1525|0))|0);
         $1162 = __THREW__; __THREW__ = 0;
         if ((($1162|0) != 0) & ((threwValue|0) != 0)) { $1163 = _testSetjmp(HEAP32[$1162>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1163|0) == 0) { _longjmp($1162|0, threwValue|0); } tempRet0 = threwValue; } else { $1163 = -1; };
         $1164 = tempRet0;
         $cond135 = ($1163|0)==(1);
         if ($cond135) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1164;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
        }
        if ($$reg2mem527$1) {
         __THREW__ = 0;
         $strlen = (invoke_ii(10,($1132|0))|0);
         $1165 = __THREW__; __THREW__ = 0;
         if ((($1165|0) != 0) & ((threwValue|0) != 0)) { $1166 = _testSetjmp(HEAP32[$1165>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1166|0) == 0) { _longjmp($1165|0, threwValue|0); } tempRet0 = threwValue; } else { $1166 = -1; };
         $1167 = tempRet0;
         $cond143 = ($1166|0)==(1);
         if ($cond143) {
          $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1167;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
          continue L143;
         }
         $endptr = (($1132) + ($strlen)|0);
         ;HEAP8[$endptr+0>>0]=HEAP8[626488+0>>0]|0;HEAP8[$endptr+1>>0]=HEAP8[626488+1>>0]|0;HEAP8[$endptr+2>>0]=HEAP8[626488+2>>0]|0;HEAP8[$endptr+3>>0]=HEAP8[626488+3>>0]|0;HEAP8[$endptr+4>>0]=HEAP8[626488+4>>0]|0;HEAP8[$endptr+5>>0]=HEAP8[626488+5>>0]|0;HEAP8[$endptr+6>>0]=HEAP8[626488+6>>0]|0;
        }
        __THREW__ = 0;
        (invoke_iii(9,($1132|0),($write_ext$0$reg2mem1273$0|0))|0);
        $1168 = __THREW__; __THREW__ = 0;
        if ((($1168|0) != 0) & ((threwValue|0) != 0)) { $1169 = _testSetjmp(HEAP32[$1168>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1169|0) == 0) { _longjmp($1168|0, threwValue|0); } tempRet0 = threwValue; } else { $1169 = -1; };
        $1170 = tempRet0;
        $cond136 = ($1169|0)==(1);
        if ($cond136) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1170;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        __THREW__ = 0;
        $1171 = (invoke_iii(3,($1132|0),(626496|0))|0);
        $1172 = __THREW__; __THREW__ = 0;
        if ((($1172|0) != 0) & ((threwValue|0) != 0)) { $1173 = _testSetjmp(HEAP32[$1172>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1173|0) == 0) { _longjmp($1172|0, threwValue|0); } tempRet0 = threwValue; } else { $1173 = -1; };
        $1174 = tempRet0;
        $cond137 = ($1173|0)==(1);
        if ($cond137) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1174;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        HEAP32[133792>>2] = $1171;
        $1175 = ($1171|0)==(0|0);
        if (!($1175)) {
         break;
        }
        __THREW__ = 0;
        invoke_vi(1,($1132|0));
        $1176 = __THREW__; __THREW__ = 0;
        if ((($1176|0) != 0) & ((threwValue|0) != 0)) { $1177 = _testSetjmp(HEAP32[$1176>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1177|0) == 0) { _longjmp($1176|0, threwValue|0); } tempRet0 = threwValue; } else { $1177 = -1; };
        $1178 = tempRet0;
        $cond142 = ($1177|0)==(1);
        if ($cond142) {
         $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1178;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
         continue L143;
        }
        $ofname$0$reg2mem1269$0 = $1132;$status$4$reg2mem1271$0 = 1;
        label = 379;
        break L148;
       }
      } while(0);
      $1179 = HEAP32[168>>2]|0;
      $1180 = ($1179|0)==(0);
      if (!($1180)) {
       __THREW__ = 0;
       HEAP32[$vararg_buffer1529>>2] = $1132;
       (invoke_iiii(3,($$reg2mem523$1|0),(626504|0),($vararg_buffer1529|0))|0);
       $1181 = __THREW__; __THREW__ = 0;
       if ((($1181|0) != 0) & ((threwValue|0) != 0)) { $1182 = _testSetjmp(HEAP32[$1181>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1182|0) == 0) { _longjmp($1181|0, threwValue|0); } tempRet0 = threwValue; } else { $1182 = -1; };
       $1183 = tempRet0;
       $cond138 = ($1182|0)==(1);
       if ($cond138) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1183;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
      }
      $1184 = HEAP32[625768>>2]|0;
      __THREW__ = 0;
      invoke_v($1184|0);
      $1185 = __THREW__; __THREW__ = 0;
      if ((($1185|0) != 0) & ((threwValue|0) != 0)) { $1186 = _testSetjmp(HEAP32[$1185>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1186|0) == 0) { _longjmp($1185|0, threwValue|0); } tempRet0 = threwValue; } else { $1186 = -1; };
      $1187 = tempRet0;
      $cond139 = ($1186|0)==(1);
      if ($cond139) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1187;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      $1188 = HEAP32[864>>2]|0;
      __THREW__ = 0;
      (invoke_ii(7,($1188|0))|0);
      $1189 = __THREW__; __THREW__ = 0;
      if ((($1189|0) != 0) & ((threwValue|0) != 0)) { $1190 = _testSetjmp(HEAP32[$1189>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1190|0) == 0) { _longjmp($1189|0, threwValue|0); } tempRet0 = threwValue; } else { $1190 = -1; };
      $1191 = tempRet0;
      $cond140 = ($1190|0)==(1);
      if ($cond140) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1191;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      $1192 = HEAP32[133792>>2]|0;
      $1193 = ($1192|0)==($$reg2mem534$1|0);
      if ($1193) {
       $ofname$0$reg2mem1269$0 = $1132;$status$4$reg2mem1271$0 = $status$3$reg2mem1275$0;
       label = 379;
       break L148;
      }
      __THREW__ = 0;
      (invoke_ii(7,($1192|0))|0);
      $1194 = __THREW__; __THREW__ = 0;
      if ((($1194|0) != 0) & ((threwValue|0) != 0)) { $1195 = _testSetjmp(HEAP32[$1194>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1195|0) == 0) { _longjmp($1194|0, threwValue|0); } tempRet0 = threwValue; } else { $1195 = -1; };
      $1196 = tempRet0;
      $cond141 = ($1195|0)==(1);
      if ($cond141) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1196;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      $ofname$0$reg2mem1269$0 = $1132;$status$4$reg2mem1271$0 = $status$3$reg2mem1275$0;
      label = 379;
      break L148;
     } else {
      $433 = HEAP32[190152>>2]|0;
      $434 = ($433|0)==(0);
      $435 = $434&1;
      if ($434) {
       $436 = HEAP32[680>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer1394>>2] = $436;
       (invoke_iiii(3,($$reg2mem499$1|0),(625704|0),($vararg_buffer1394|0))|0);
       $437 = __THREW__; __THREW__ = 0;
       if ((($437|0) != 0) & ((threwValue|0) != 0)) { $438 = _testSetjmp(HEAP32[$437>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($438|0) == 0) { _longjmp($437|0, threwValue|0); } tempRet0 = threwValue; } else { $438 = -1; };
       $439 = tempRet0;
       $cond83 = ($438|0)==(1);
       if ($cond83) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $439;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
       $status$2$reg2mem1283$0 = $435;
       break;
      }
      if (!($$reg2mem497$1)) {
       $440 = HEAP32[454768>>2]|0;
       $441 = HEAP32[680>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer1397>>2] = $433;
       $vararg_ptr1400 = (($vararg_buffer1397) + 4|0);
       HEAP32[$vararg_ptr1400>>2] = $440;
       $vararg_ptr1401 = (($vararg_buffer1397) + 8|0);
       HEAP32[$vararg_ptr1401>>2] = $441;
       (invoke_iii(1,(625728|0),($vararg_buffer1397|0))|0);
       $442 = __THREW__; __THREW__ = 0;
       if ((($442|0) != 0) & ((threwValue|0) != 0)) { $443 = _testSetjmp(HEAP32[$442>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($443|0) == 0) { _longjmp($442|0, threwValue|0); } tempRet0 = threwValue; } else { $443 = -1; };
       $444 = tempRet0;
       $cond79 = ($443|0)==(1);
       if ($cond79) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $444;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
       $status$2$reg2mem1283$0 = $435;
       break;
      }
      $445 = HEAP32[168>>2]|0;
      $446 = ($445|0)==(0);
      if (!($446)) {
       $447 = HEAP32[680>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer1402>>2] = $447;
       $vararg_ptr1405 = (($vararg_buffer1402) + 4|0);
       HEAP32[$vararg_ptr1405>>2] = $433;
       (invoke_iiii(3,($$reg2mem499$1|0),(625744|0),($vararg_buffer1402|0))|0);
       $448 = __THREW__; __THREW__ = 0;
       if ((($448|0) != 0) & ((threwValue|0) != 0)) { $449 = _testSetjmp(HEAP32[$448>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($449|0) == 0) { _longjmp($448|0, threwValue|0); } tempRet0 = threwValue; } else { $449 = -1; };
       $450 = tempRet0;
       $cond81 = ($449|0)==(1);
       if ($cond81) {
        $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $450;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
        continue L143;
       }
      }
      $451 = HEAP32[190152>>2]|0;
      HEAP32[$$reg2mem495$1>>2] = $451;
      HEAP32[$$reg2mem493$1>>2] = $451;
      $452 = HEAP32[680>>2]|0;
      __THREW__ = 0;
      (invoke_iii(4,($452|0),($ut|0))|0);
      $453 = __THREW__; __THREW__ = 0;
      if ((($453|0) != 0) & ((threwValue|0) != 0)) { $454 = _testSetjmp(HEAP32[$453>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($454|0) == 0) { _longjmp($453|0, threwValue|0); } tempRet0 = threwValue; } else { $454 = -1; };
      $455 = tempRet0;
      $cond82 = ($454|0)==(1);
      if ($cond82) {
       $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $455;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
       continue L143;
      }
      $status$2$reg2mem1283$0 = $435;
     }
    } while(0);
    $785 = HEAP32[864>>2]|0;
    __THREW__ = 0;
    (invoke_ii(7,($785|0))|0);
    $786 = __THREW__; __THREW__ = 0;
    if ((($786|0) != 0) & ((threwValue|0) != 0)) { $787 = _testSetjmp(HEAP32[$786>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($787|0) == 0) { _longjmp($786|0, threwValue|0); } tempRet0 = threwValue; } else { $787 = -1; };
    $788 = tempRet0;
    $cond80 = ($787|0)==(1);
    if ($cond80) {
     $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $788;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
     continue L143;
    }
    $arg$5$reg2mem$0 = $arg$496$reg2mem$0;$status$5$reg2mem1267$0 = $status$2$reg2mem1283$0;
   } else {
    $393 = HEAP32[864>>2]|0;
    __THREW__ = 0;
    $394 = (invoke_ii(6,($393|0))|0);
    $395 = __THREW__; __THREW__ = 0;
    if ((($395|0) != 0) & ((threwValue|0) != 0)) { $396 = _testSetjmp(HEAP32[$395>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($396|0) == 0) { _longjmp($395|0, threwValue|0); } tempRet0 = threwValue; } else { $396 = -1; };
    $397 = tempRet0;
    $cond69 = ($396|0)==(1);
    if ($cond69) {
     $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $397;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
     continue L143;
    }
    $398 = ($394|0)>(2);
    if ($398) {
     $399 = HEAP32[864>>2]|0;
     __THREW__ = 0;
     (invoke_ii(7,($399|0))|0);
     $400 = __THREW__; __THREW__ = 0;
     if ((($400|0) != 0) & ((threwValue|0) != 0)) { $401 = _testSetjmp(HEAP32[$400>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($401|0) == 0) { _longjmp($400|0, threwValue|0); } tempRet0 = threwValue; } else { $401 = -1; };
     $402 = tempRet0;
     $cond76 = ($401|0)==(1);
     if ($cond76) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $402;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
    }
    $403 = HEAP32[133792>>2]|0;
    __THREW__ = 0;
    $404 = (invoke_ii(6,($403|0))|0);
    $405 = __THREW__; __THREW__ = 0;
    if ((($405|0) != 0) & ((threwValue|0) != 0)) { $406 = _testSetjmp(HEAP32[$405>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($406|0) == 0) { _longjmp($405|0, threwValue|0); } tempRet0 = threwValue; } else { $406 = -1; };
    $407 = tempRet0;
    $cond70 = ($406|0)==(1);
    if ($cond70) {
     $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $407;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
     continue L143;
    }
    $408 = ($404|0)>(2);
    if ($408) {
     $409 = HEAP32[133792>>2]|0;
     __THREW__ = 0;
     (invoke_ii(7,($409|0))|0);
     $410 = __THREW__; __THREW__ = 0;
     if ((($410|0) != 0) & ((threwValue|0) != 0)) { $411 = _testSetjmp(HEAP32[$410>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($411|0) == 0) { _longjmp($410|0, threwValue|0); } tempRet0 = threwValue; } else { $411 = -1; };
     $412 = tempRet0;
     $cond75 = ($411|0)==(1);
     if ($cond75) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $412;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
     $ofname$0$reg2mem1269$0 = 0;$status$4$reg2mem1271$0 = 1;
     label = 379;
    } else {
     $ofname$0$reg2mem1269$0 = 0;$status$4$reg2mem1271$0 = 1;
     label = 379;
    }
   }
  } while(0);
  do {
   if ((label|0) == 379) {
    label = 0;
    $1197 = HEAP32[189368>>2]|0;
    $1198 = ($1197|0)==(0|0);
    if (!($1198)) {
     __THREW__ = 0;
     invoke_vi(2,($1197|0));
     $1199 = __THREW__; __THREW__ = 0;
     if ((($1199|0) != 0) & ((threwValue|0) != 0)) { $1200 = _testSetjmp(HEAP32[$1199>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1200|0) == 0) { _longjmp($1199|0, threwValue|0); } tempRet0 = threwValue; } else { $1200 = -1; };
     $1201 = tempRet0;
     $cond71 = ($1200|0)==(1);
     if ($cond71) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1201;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
    }
    $1202 = ($ofname$0$reg2mem1269$0|0)==(0|0);
    if (!($1202)) {
     __THREW__ = 0;
     invoke_vi(2,($ofname$0$reg2mem1269$0|0));
     $1203 = __THREW__; __THREW__ = 0;
     if ((($1203|0) != 0) & ((threwValue|0) != 0)) { $1204 = _testSetjmp(HEAP32[$1203>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1204|0) == 0) { _longjmp($1203|0, threwValue|0); } tempRet0 = threwValue; } else { $1204 = -1; };
     $1205 = tempRet0;
     $cond72 = ($1204|0)==(1);
     if ($cond72) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1205;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
    }
    $1206 = HEAP32[492248>>2]|0;
    $1207 = ($1206|0)==(0|0);
    if (!($1207)) {
     __THREW__ = 0;
     invoke_vi(2,($1206|0));
     $1208 = __THREW__; __THREW__ = 0;
     if ((($1208|0) != 0) & ((threwValue|0) != 0)) { $1209 = _testSetjmp(HEAP32[$1208>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1209|0) == 0) { _longjmp($1208|0, threwValue|0); } tempRet0 = threwValue; } else { $1209 = -1; };
     $1210 = tempRet0;
     $cond73 = ($1209|0)==(1);
     if ($cond73) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1210;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
    }
    $1211 = HEAP32[132112>>2]|0;
    $1212 = ($1211|0)==(0|0);
    if (!($1212)) {
     __THREW__ = 0;
     invoke_vi(2,($1211|0));
     $1213 = __THREW__; __THREW__ = 0;
     if ((($1213|0) != 0) & ((threwValue|0) != 0)) { $1214 = _testSetjmp(HEAP32[$1213>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($1214|0) == 0) { _longjmp($1213|0, threwValue|0); } tempRet0 = threwValue; } else { $1214 = -1; };
     $1215 = tempRet0;
     $cond74 = ($1214|0)==(1);
     if ($cond74) {
      $user_sat$0$lcssa$reg2mem$1$phi = $user_sat$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$1$phi = $user_qual$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$1$phi = $user_flip$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$1$phi = $user_black$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$1$phi = $identify_only$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$1$phi = $dark_frame$0$lcssa$reg2mem$1;$bpfile$0$lcssa$reg2mem$1$phi = $bpfile$0$lcssa$reg2mem$1;$arg$496$reg2mem$0$phi = $arg$496$reg2mem$0;$$reg2mem541$1$phi = $$reg2mem541$1;$$reg2mem534$1$phi = $$reg2mem534$1;$$reg2mem532$1$phi = $$reg2mem532$1;$$reg2mem530$1$phi = $$reg2mem530$1;$$reg2mem527$1$phi = $$reg2mem527$1;$$reg2mem523$1$phi = $$reg2mem523$1;$$reg2mem520$1$phi = $$reg2mem520$1;$$reg2mem518$1$phi = $$reg2mem518$1;$$reg2mem516$1$phi = $$reg2mem516$1;$$reg2mem514$1$phi = $$reg2mem514$1;$$reg2mem512$1$phi = $$reg2mem512$1;$$reg2mem510$1$phi = $$reg2mem510$1;$$reg2mem508$1$phi = $$reg2mem508$1;$$reg2mem506$1$phi = $$reg2mem506$1;$$reg2mem504$1$phi = $$reg2mem504$1;$$reg2mem499$1$phi = $$reg2mem499$1;$$reg2mem497$1$phi = $$reg2mem497$1;$$reg2mem495$1$phi = $$reg2mem495$1;$$reg2mem493$1$phi = $$reg2mem493$1;$$reg2mem1297$0 = $1215;$user_sat$0$lcssa$reg2mem$1 = $user_sat$0$lcssa$reg2mem$1$phi;$user_qual$0$lcssa$reg2mem$1 = $user_qual$0$lcssa$reg2mem$1$phi;$user_flip$0$lcssa$reg2mem$1 = $user_flip$0$lcssa$reg2mem$1$phi;$user_black$0$lcssa$reg2mem$1 = $user_black$0$lcssa$reg2mem$1$phi;$identify_only$0$lcssa$reg2mem$1 = $identify_only$0$lcssa$reg2mem$1$phi;$dark_frame$0$lcssa$reg2mem$1 = $dark_frame$0$lcssa$reg2mem$1$phi;$bpfile$0$lcssa$reg2mem$1 = $bpfile$0$lcssa$reg2mem$1$phi;$arg$496$reg2mem$0 = $arg$496$reg2mem$0$phi;$$reg2mem541$1 = $$reg2mem541$1$phi;$$reg2mem534$1 = $$reg2mem534$1$phi;$$reg2mem532$1 = $$reg2mem532$1$phi;$$reg2mem530$1 = $$reg2mem530$1$phi;$$reg2mem527$1 = $$reg2mem527$1$phi;$$reg2mem523$1 = $$reg2mem523$1$phi;$$reg2mem520$1 = $$reg2mem520$1$phi;$$reg2mem518$1 = $$reg2mem518$1$phi;$$reg2mem516$1 = $$reg2mem516$1$phi;$$reg2mem514$1 = $$reg2mem514$1$phi;$$reg2mem512$1 = $$reg2mem512$1$phi;$$reg2mem510$1 = $$reg2mem510$1$phi;$$reg2mem508$1 = $$reg2mem508$1$phi;$$reg2mem506$1 = $$reg2mem506$1$phi;$$reg2mem504$1 = $$reg2mem504$1$phi;$$reg2mem499$1 = $$reg2mem499$1$phi;$$reg2mem497$1 = $$reg2mem497$1$phi;$$reg2mem495$1 = $$reg2mem495$1$phi;$$reg2mem493$1 = $$reg2mem493$1$phi;
      continue L143;
     }
    }
    $1216 = HEAP32[16>>2]|0;
    $1217 = ($1216|0)==(0);
    if ($1217) {
     $arg$5$reg2mem$0 = $arg$496$reg2mem$0;$status$5$reg2mem1267$0 = $status$4$reg2mem1271$0;
    } else {
     $1218 = HEAP32[8>>2]|0;
     $1219 = (($1218) + 1)|0;
     HEAP32[8>>2] = $1219;
     $1220 = HEAP32[133208>>2]|0;
     $1221 = ($1219>>>0)<($1220>>>0);
     if ($1221) {
      $1222 = (($arg$496$reg2mem$0) + -1)|0;
      $arg$5$reg2mem$0 = $1222;$status$5$reg2mem1267$0 = $status$4$reg2mem1271$0;
      break;
     } else {
      HEAP32[8>>2] = 0;
      $arg$5$reg2mem$0 = $arg$496$reg2mem$0;$status$5$reg2mem1267$0 = $status$4$reg2mem1271$0;
      break;
     }
    }
   }
  } while(0);
  $1223 = (($arg$5$reg2mem$0) + 1)|0;
  $1224 = ($1223|0)<($argc|0);
  if ($1224) {
   $$reg2mem493$0 = $$reg2mem493$1;$$reg2mem495$0 = $$reg2mem495$1;$$reg2mem497$0 = $$reg2mem497$1;$$reg2mem499$0 = $$reg2mem499$1;$$reg2mem504$0 = $$reg2mem504$1;$$reg2mem506$0 = $$reg2mem506$1;$$reg2mem508$0 = $$reg2mem508$1;$$reg2mem510$0 = $$reg2mem510$1;$$reg2mem512$0 = $$reg2mem512$1;$$reg2mem514$0 = $$reg2mem514$1;$$reg2mem516$0 = $$reg2mem516$1;$$reg2mem518$0 = $$reg2mem518$1;$$reg2mem520$0 = $$reg2mem520$1;$$reg2mem523$0 = $$reg2mem523$1;$$reg2mem527$0 = $$reg2mem527$1;$$reg2mem530$0 = $$reg2mem530$1;$$reg2mem532$0 = $$reg2mem532$1;$$reg2mem534$0 = $$reg2mem534$1;$$reg2mem541$0 = $$reg2mem541$1;$arg$496$reg2mem1299$0 = $1223;$bpfile$0$lcssa$reg2mem$0 = $bpfile$0$lcssa$reg2mem$1;$dark_frame$0$lcssa$reg2mem$0 = $dark_frame$0$lcssa$reg2mem$1;$identify_only$0$lcssa$reg2mem$0 = $identify_only$0$lcssa$reg2mem$1;$user_black$0$lcssa$reg2mem$0 = $user_black$0$lcssa$reg2mem$1;$user_flip$0$lcssa$reg2mem$0 = $user_flip$0$lcssa$reg2mem$1;$user_qual$0$lcssa$reg2mem$0 = $user_qual$0$lcssa$reg2mem$1;$user_sat$0$lcssa$reg2mem$0 = $user_sat$0$lcssa$reg2mem$1;
   label = 124;
  } else {
   $$0$reg2mem$0 = $status$5$reg2mem1267$0;
   break;
  }
 }
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$0$reg2mem$0|0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$lcssa = 0, $$lcssa24 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$04 = 0, $c$1 = 0, $c$2 = 0, $s$05 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 626784 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (626576 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $20 = ($19|0)==(0);
      if ($20) {
       $c$2 = $18;
       break;
      } else {
       $$023 = $19;$c$04 = $18;$s$05 = $16;
       label = 11;
       break;
      }
     }
    } else {
     $$023 = $n;$c$04 = $2;$s$05 = $src;
     label = 11;
    }
   } while(0);
   L18: do {
    if ((label|0) == 11) {
     $21 = HEAP8[$s$05>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$04 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$023;$32 = $21;$c$1 = $c$04;$s$1 = $s$05;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa24 = $35;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L18;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$st>>2] = 0;
     HEAP32[$11>>2] = $$lcssa;
     $37 = (($n) - ($$lcssa24))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa = 0, $$lcssa366 = 0, $$lcssa39 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi223Z2D = 0, $$pre209 = 0, $$pre211 = 0, $$pre215 = 0, $$pre217 = 0, $$pre218 = 0, $$pre220 = 0, $$pre221 = 0;
 var $$pre222 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0204 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$us106 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0;
 var $isdigit = 0, $isdigit7 = 0, $isdigit796 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp695 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111347 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0;
 var $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0, $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0;
 var $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph139 = 0;
 var $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0111 = 0;$p$0117 = $fmt;$pos$0116 = 0;$s$0109 = 0;$wcs$0110 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0117>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0117) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0117) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L21;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0117) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = $arglist_current;
           $73 = (0 + 4|0);
           $expanded4 = $73;
           $expanded = (($expanded4) - 1)|0;
           $74 = (($72) + ($expanded))|0;
           $75 = (0 + 4|0);
           $expanded8 = $75;
           $expanded7 = (($expanded8) - 1)|0;
           $expanded6 = $expanded7 ^ -1;
           $76 = $74 & $expanded6;
           $77 = $76;
           $78 = HEAP32[$77>>2]|0;
           $arglist_next = (($77) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $79 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $79;
           } else {
            $$lcssa = $78;
            break;
           }
          }
          $80 = (($p$0117) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $80;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $81 = $arglist_current2;
        $82 = (0 + 4|0);
        $expanded11 = $82;
        $expanded10 = (($expanded11) - 1)|0;
        $83 = (($81) + ($expanded10))|0;
        $84 = (0 + 4|0);
        $expanded15 = $84;
        $expanded14 = (($expanded15) - 1)|0;
        $expanded13 = $expanded14 ^ -1;
        $85 = $83 & $expanded13;
        $86 = $85;
        $87 = HEAP32[$86>>2]|0;
        $arglist_next3 = (($86) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $87;$p$2 = $44;
       }
      } while(0);
      $88 = HEAP8[$p$2>>0]|0;
      $89 = $88&255;
      $isdigittmp695 = (($89) + -48)|0;
      $isdigit796 = ($isdigittmp695>>>0)<(10);
      if ($isdigit796) {
       $93 = $89;$p$397 = $p$2;$width$098 = 0;
       while(1) {
        $90 = ($width$098*10)|0;
        $91 = (($90) + -48)|0;
        $92 = (($91) + ($93))|0;
        $94 = (($p$397) + 1|0);
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $isdigittmp6 = (($96) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $93 = $96;$p$397 = $94;$width$098 = $92;
        } else {
         $$lcssa39 = $95;$p$3$lcssa = $94;$width$0$lcssa = $92;
         break;
        }
       }
      } else {
       $$lcssa39 = $88;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $97 = ($$lcssa39<<24>>24)==(109);
      if ($97) {
       $98 = ($dest$0|0)!=(0|0);
       $99 = $98&1;
       $100 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$100>>0]|0;
       $103 = $$pre;$alloc$0 = $99;$p$4 = $100;$s$1 = 0;$wcs$1 = 0;
      } else {
       $103 = $$lcssa39;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0109;$wcs$1 = $wcs$0110;
      }
      $101 = (($p$4) + 1|0);
      $102 = $103&255;
      switch ($102|0) {
      case 116: case 122:  {
       $p$5 = $101;$size$0 = 1;
       break;
      }
      case 108:  {
       $107 = HEAP8[$101>>0]|0;
       $108 = ($107<<24>>24)==(108);
       $109 = (($p$4) + 2|0);
       $$12 = $108 ? $109 : $101;
       $$13 = $108 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 76:  {
       $p$5 = $101;$size$0 = 2;
       break;
      }
      case 106:  {
       $p$5 = $101;$size$0 = 3;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $104 = HEAP8[$101>>0]|0;
       $105 = ($104<<24>>24)==(104);
       $106 = (($p$4) + 2|0);
       $$10 = $105 ? $106 : $101;
       $$11 = $105 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      default: {
       $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 163;
       break L4;
      }
      }
      $110 = HEAP8[$p$5>>0]|0;
      $111 = $110&255;
      $112 = $111 & 47;
      $113 = ($112|0)==(3);
      $114 = $111 | 32;
      $$ = $113 ? $114 : $111;
      $$size$0 = $113 ? 1 : $size$0;
      if ((($$|0) == 110)) {
       $116 = ($pos$0116|0)<(0);
       $117 = $116 << 31 >> 31;
       $118 = ($dest$0|0)==(0|0);
       if ($118) {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case 3:  {
        $121 = $dest$0;
        $122 = $121;
        HEAP32[$122>>2] = $pos$0116;
        $123 = (($121) + 4)|0;
        $124 = $123;
        HEAP32[$124>>2] = $117;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $119 = $pos$0116&255;
        HEAP8[$dest$0>>0] = $119;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $120 = $pos$0116&65535;
        HEAP16[$dest$0>>1] = $120;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0116;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $115 = ($width$0$lcssa|0)<(1);
       $$width$0 = $115 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0116;$width$1 = $$width$0;
      } else {
       ___shlim($f,0);
       while(1) {
        $125 = HEAP32[$3>>2]|0;
        $126 = HEAP32[$4>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = (($125) + 1|0);
         HEAP32[$3>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $132 = $130;
        } else {
         $131 = (___shgetc($f)|0);
         $132 = $131;
        }
        $133 = (_isspace($132)|0);
        $134 = ($133|0)==(0);
        if ($134) {
         break;
        }
       }
       $135 = HEAP32[$4>>2]|0;
       $136 = ($135|0)==(0|0);
       $$pre209 = HEAP32[$3>>2]|0;
       if ($136) {
        $140 = $$pre209;
       } else {
        $137 = (($$pre209) + -1|0);
        HEAP32[$3>>2] = $137;
        $140 = $137;
       }
       $138 = HEAP32[$5>>2]|0;
       $139 = HEAP32[$6>>2]|0;
       $141 = $140;
       $142 = $139;
       $143 = (($138) + ($pos$0116))|0;
       $144 = (($143) + ($141))|0;
       $145 = (($144) - ($142))|0;
       $pos$1 = $145;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $146 = HEAP32[$3>>2]|0;
      $147 = HEAP32[$4>>2]|0;
      $148 = ($146>>>0)<($147>>>0);
      if ($148) {
       $149 = (($146) + 1|0);
       HEAP32[$3>>2] = $149;
       $152 = $147;
      } else {
       $150 = (___shgetc($f)|0);
       $151 = ($150|0)<(0);
       if ($151) {
        $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 163;
        break L4;
       }
       $$pre211 = HEAP32[$4>>2]|0;
       $152 = $$pre211;
      }
      $153 = ($152|0)==(0|0);
      if (!($153)) {
       $154 = HEAP32[$3>>2]|0;
       $155 = (($154) + -1|0);
       HEAP32[$3>>2] = $155;
      }
      L78: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $156 = ($$|0)==(99);
        $157 = $$ & 239;
        $158 = ($157|0)==(99);
        L80: do {
         if ($158) {
          $159 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($159) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $160 = (($p$5) + 1|0);
          $161 = HEAP8[$160>>0]|0;
          $162 = ($161<<24>>24)==(94);
          $163 = (($p$5) + 2|0);
          $invert$0 = $162&1;
          $164 = $162 ? $160 : $p$5;
          $p$6 = $162 ? $163 : $160;
          $165 = $162&1;
          _memset(($scanset|0),($165|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $166 = HEAP8[$p$6>>0]|0;
          if ((($166<<24>>24) == 93)) {
           $170 = (($164) + 2|0);
           $171 = $invert$0 ^ 1;
           $172 = $171&255;
           HEAP8[$11>>0] = $172;
           $$pre$phi223Z2D = $172;$p$7$ph = $170;
          } else if ((($166<<24>>24) == 45)) {
           $167 = (($164) + 2|0);
           $168 = $invert$0 ^ 1;
           $169 = $168&255;
           HEAP8[$10>>0] = $169;
           $$pre$phi223Z2D = $169;$p$7$ph = $167;
          } else {
           $$pre221 = $invert$0 ^ 1;
           $$pre222 = $$pre221&255;
           $$pre$phi223Z2D = $$pre222;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $173 = HEAP8[$p$7>>0]|0;
           if ((($173<<24>>24) == 45)) {
            $174 = (($p$7) + 1|0);
            $175 = HEAP8[$174>>0]|0;
            if ((($175<<24>>24) == 93) | (($175<<24>>24) == 0)) {
             $186 = 45;$p$8 = $p$7;
            } else {
             $176 = (($p$7) + -1|0);
             $177 = HEAP8[$176>>0]|0;
             $178 = ($177&255)<($175&255);
             if ($178) {
              $179 = $177&255;
              $c$0101 = $179;
              while(1) {
               $180 = (($c$0101) + 1)|0;
               $181 = (($scanset) + ($180)|0);
               HEAP8[$181>>0] = $$pre$phi223Z2D;
               $182 = HEAP8[$174>>0]|0;
               $183 = $182&255;
               $184 = ($180|0)<($183|0);
               if ($184) {
                $c$0101 = $180;
               } else {
                $186 = $182;$p$8 = $174;
                break;
               }
              }
             } else {
              $186 = $175;$p$8 = $174;
             }
            }
           } else if ((($173<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L80;
           } else if ((($173<<24>>24) == 0)) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 163;
            break L4;
           } else {
            $186 = $173;$p$8 = $p$7;
           }
           $185 = $186&255;
           $187 = (($185) + 1)|0;
           $188 = (($scanset) + ($187)|0);
           HEAP8[$188>>0] = $$pre$phi223Z2D;
           $189 = (($p$8) + 1|0);
           $p$7 = $189;
          }
         }
        } while(0);
        $190 = (($width$1) + 1)|0;
        $$8 = $156 ? $190 : 31;
        $191 = ($$size$0|0)==(1);
        $192 = ($alloc$0|0)!=(0);
        L99: do {
         if ($191) {
          if ($192) {
           $193 = $$8 << 2;
           $194 = (_malloc($193)|0);
           $195 = ($194|0)==(0|0);
           if ($195) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $194;
            label = 163;
            break L4;
           } else {
            $wcs$2 = $194;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L105: while(1) {
           $196 = ($wcs$3$ph|0)==(0|0);
           if ($196) {
            while(1) {
             $199 = HEAP32[$3>>2]|0;
             $210 = HEAP32[$4>>2]|0;
             $211 = ($199>>>0)<($210>>>0);
             if ($211) {
              $198 = (($199) + 1|0);
              HEAP32[$3>>2] = $198;
              $200 = HEAP8[$199>>0]|0;
              $201 = $200&255;
              $203 = $201;
             } else {
              $197 = (___shgetc($f)|0);
              $203 = $197;
             }
             $202 = (($203) + 1)|0;
             $204 = (($scanset) + ($202)|0);
             $205 = HEAP8[$204>>0]|0;
             $206 = ($205<<24>>24)==(0);
             if ($206) {
              $i$0$ph21$lcssa = $i$0$ph;$wcs$3$ph139 = 0;
              break L105;
             }
             $207 = $203&255;
             HEAP8[$0>>0] = $207;
             $208 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($208|0) == -2)) {
              continue;
             } else if ((($208|0) == -1)) {
              $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = 0;
              label = 163;
              break L4;
             }
             $209 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $192 & $209;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($192) {
             $i$0$ph21$us106 = $i$0$ph;
            } else {
             $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
             label = 85;
             break;
            }
            while(1) {
             while(1) {
              $214 = HEAP32[$3>>2]|0;
              $228 = HEAP32[$4>>2]|0;
              $229 = ($214>>>0)<($228>>>0);
              if ($229) {
               $213 = (($214) + 1|0);
               HEAP32[$3>>2] = $213;
               $215 = HEAP8[$214>>0]|0;
               $216 = $215&255;
               $218 = $216;
              } else {
               $212 = (___shgetc($f)|0);
               $218 = $212;
              }
              $217 = (($218) + 1)|0;
              $219 = (($scanset) + ($217)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $i$0$ph21$lcssa = $i$0$ph21$us106;$wcs$3$ph139 = $wcs$3$ph;
               break L105;
              }
              $222 = $218&255;
              HEAP8[$0>>0] = $222;
              $223 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($223|0) == -1)) {
               $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 163;
               break L4;
              } else if (!((($223|0) == -2))) {
               break;
              }
             }
             $224 = HEAP32[$wc>>2]|0;
             $225 = (($i$0$ph21$us106) + 1)|0;
             $226 = (($wcs$3$ph) + ($i$0$ph21$us106<<2)|0);
             HEAP32[$226>>2] = $224;
             $227 = ($225|0)==($k$0$ph|0);
             if ($227) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph21$us106 = $225;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $247 = $factor | 1;
           $248 = $247 << 2;
           $249 = (_realloc($wcs$3$ph,$248)|0);
           $250 = ($249|0)==(0|0);
           if ($250) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 163;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $247;$wcs$3$ph = $249;
          }
          L129: do {
           if ((label|0) == 85) {
            label = 0;
            $i$0$ph21 = $i$0$ph$lcssa;
            while(1) {
             while(1) {
              $230 = HEAP32[$3>>2]|0;
              $231 = HEAP32[$4>>2]|0;
              $232 = ($230>>>0)<($231>>>0);
              if ($232) {
               $233 = (($230) + 1|0);
               HEAP32[$3>>2] = $233;
               $234 = HEAP8[$230>>0]|0;
               $235 = $234&255;
               $238 = $235;
              } else {
               $236 = (___shgetc($f)|0);
               $238 = $236;
              }
              $237 = (($238) + 1)|0;
              $239 = (($scanset) + ($237)|0);
              $240 = HEAP8[$239>>0]|0;
              $241 = ($240<<24>>24)==(0);
              if ($241) {
               $i$0$ph21$lcssa = $i$0$ph21;$wcs$3$ph139 = $wcs$3$ph$lcssa;
               break L129;
              }
              $242 = $238&255;
              HEAP8[$0>>0] = $242;
              $243 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($243|0) == -1)) {
               $alloc$0204 = 0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
               label = 163;
               break L4;
              } else if (!((($243|0) == -2))) {
               break;
              }
             }
             $244 = HEAP32[$wc>>2]|0;
             $245 = (($i$0$ph21) + 1)|0;
             $246 = (($wcs$3$ph$lcssa) + ($i$0$ph21<<2)|0);
             HEAP32[$246>>2] = $244;
             $i$0$ph21 = $245;
            }
           }
          } while(0);
          $251 = (_mbsinit($st)|0);
          $252 = ($251|0)==(0);
          if ($252) {
           $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = $wcs$3$ph139;
           label = 163;
           break L4;
          } else {
           $i$4 = $i$0$ph21$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph139;
          }
         } else {
          if ($192) {
           $253 = (_malloc($$8)|0);
           $254 = ($253|0)==(0|0);
           if ($254) {
            $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = 0;$wcs$7 = 0;
            label = 163;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $253;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $255 = HEAP32[$3>>2]|0;
             $256 = HEAP32[$4>>2]|0;
             $257 = ($255>>>0)<($256>>>0);
             if ($257) {
              $258 = (($255) + 1|0);
              HEAP32[$3>>2] = $258;
              $259 = HEAP8[$255>>0]|0;
              $260 = $259&255;
              $263 = $260;
             } else {
              $261 = (___shgetc($f)|0);
              $263 = $261;
             }
             $262 = (($263) + 1)|0;
             $264 = (($scanset) + ($262)|0);
             $265 = HEAP8[$264>>0]|0;
             $266 = ($265<<24>>24)==(0);
             if ($266) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L99;
             }
             $267 = $263&255;
             $268 = (($i$2) + 1)|0;
             $269 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$269>>0] = $267;
             $270 = ($268|0)==($k$1$ph|0);
             if ($270) {
              break;
             } else {
              $i$2 = $268;
             }
            }
            $factor17 = $k$1$ph << 1;
            $271 = $factor17 | 1;
            $272 = (_realloc($s$2$ph,$271)|0);
            $273 = ($272|0)==(0|0);
            if ($273) {
             $alloc$0204 = $alloc$0;$matches$0111347 = $matches$0111;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 163;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $271;$s$2$ph = $272;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $274 = ($dest$0|0)==(0|0);
          if ($274) {
           $292 = $152;
           while(1) {
            $290 = HEAP32[$3>>2]|0;
            $291 = ($290>>>0)<($292>>>0);
            if ($291) {
             $293 = (($290) + 1|0);
             HEAP32[$3>>2] = $293;
             $294 = HEAP8[$290>>0]|0;
             $295 = $294&255;
             $298 = $295;
            } else {
             $296 = (___shgetc($f)|0);
             $298 = $296;
            }
            $297 = (($298) + 1)|0;
            $299 = (($scanset) + ($297)|0);
            $300 = HEAP8[$299>>0]|0;
            $301 = ($300<<24>>24)==(0);
            if ($301) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L99;
            }
            $$pre217 = HEAP32[$4>>2]|0;
            $292 = $$pre217;
           }
          } else {
           $277 = $152;$i$3 = 0;
           while(1) {
            $275 = HEAP32[$3>>2]|0;
            $276 = ($275>>>0)<($277>>>0);
            if ($276) {
             $278 = (($275) + 1|0);
             HEAP32[$3>>2] = $278;
             $279 = HEAP8[$275>>0]|0;
             $280 = $279&255;
             $283 = $280;
            } else {
             $281 = (___shgetc($f)|0);
             $283 = $281;
            }
            $282 = (($283) + 1)|0;
            $284 = (($scanset) + ($282)|0);
            $285 = HEAP8[$284>>0]|0;
            $286 = ($285<<24>>24)==(0);
            if ($286) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L99;
            }
            $287 = $283&255;
            $288 = (($i$3) + 1)|0;
            $289 = (($dest$0) + ($i$3)|0);
            HEAP8[$289>>0] = $287;
            $$pre218 = HEAP32[$4>>2]|0;
            $277 = $$pre218;$i$3 = $288;
           }
          }
         }
        } while(0);
        $302 = HEAP32[$4>>2]|0;
        $303 = ($302|0)==(0|0);
        $$pre215 = HEAP32[$3>>2]|0;
        if ($303) {
         $307 = $$pre215;
        } else {
         $304 = (($$pre215) + -1|0);
         HEAP32[$3>>2] = $304;
         $307 = $304;
        }
        $305 = HEAP32[$5>>2]|0;
        $306 = HEAP32[$6>>2]|0;
        $308 = $307;
        $309 = $306;
        $310 = (($308) - ($309))|0;
        $311 = (($310) + ($305))|0;
        $312 = ($311|0)==(0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $156 ^ 1;
        $313 = ($311|0)==($width$1|0);
        $or$cond9 = $313 | $$not;
        if (!($or$cond9)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($192) {
          if ($191) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($156) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $314 = ($wcs$4|0)==(0|0);
         if (!($314)) {
          $315 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$315>>2] = 0;
         }
         $316 = ($s$3|0)==(0|0);
         if ($316) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $317 = (($s$3) + ($i$4)|0);
          HEAP8[$317>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $337 = (+___floatscan($f,$$size$0,0));
        $338 = HEAP32[$5>>2]|0;
        $339 = HEAP32[$3>>2]|0;
        $340 = HEAP32[$6>>2]|0;
        $341 = $339;
        $342 = $340;
        $343 = (($342) - ($341))|0;
        $344 = ($338|0)==($343|0);
        if ($344) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $345 = ($dest$0|0)==(0|0);
        if ($345) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $346 = $337;
          HEAPF32[$dest$0>>2] = $346;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $337;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $337;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 145;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 145;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 145;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 145;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L198: do {
       if ((label|0) == 145) {
        label = 0;
        $318 = (___intscan($f,$base$0,0,-1,-1)|0);
        $319 = tempRet0;
        $320 = HEAP32[$5>>2]|0;
        $321 = HEAP32[$3>>2]|0;
        $322 = HEAP32[$6>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($324) - ($323))|0;
        $326 = ($320|0)==($325|0);
        if ($326) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0111;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $327 = ($$|0)==(112);
        $328 = ($dest$0|0)!=(0|0);
        $or$cond3 = $328 & $327;
        if ($or$cond3) {
         $329 = $318;
         HEAP32[$dest$0>>2] = $329;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case 3:  {
          $333 = $dest$0;
          $334 = $333;
          HEAP32[$334>>2] = $318;
          $335 = (($333) + 4)|0;
          $336 = $335;
          HEAP32[$336>>2] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case -2:  {
          $331 = $318&255;
          HEAP8[$dest$0>>0] = $331;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case -1:  {
          $332 = $318&65535;
          HEAP16[$dest$0>>1] = $332;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L198;
         }
         }
        }
       }
      } while(0);
      $347 = HEAP32[$5>>2]|0;
      $348 = HEAP32[$3>>2]|0;
      $349 = HEAP32[$6>>2]|0;
      $350 = $348;
      $351 = $349;
      $352 = (($347) + ($pos$1))|0;
      $353 = (($352) + ($350))|0;
      $354 = (($353) - ($351))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $355 = $not$&1;
      $matches$0$ = (($355) + ($matches$0111))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $354;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0117) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $57 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $57 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $58 = ($57|0)==($56|0);
    if (!($58)) {
     $$lcssa366 = $57;$matches$0111$lcssa = $matches$0111;$s$0109$lcssa = $s$0109;$wcs$0110$lcssa = $wcs$0110;
     label = 19;
     break L4;
    }
    $65 = (($pos$0116) + 1)|0;
    $matches$1 = $matches$0111;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   } else {
    $p$1 = $p$0117;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre220 = HEAP32[$3>>2]|0;
    if ($32) {
     $36 = $$pre220;
    } else {
     $33 = (($$pre220) + -1|0);
     HEAP32[$3>>2] = $33;
     $36 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $37 = $36;
    $38 = $35;
    $39 = (($34) + ($pos$0116))|0;
    $40 = (($39) + ($37))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0111;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   }
  } while(0);
  $356 = (($p$11) + 1|0);
  $357 = HEAP8[$356>>0]|0;
  $358 = ($357<<24>>24)==(0);
  if ($358) {
   $matches$3 = $matches$1;
   label = 167;
   break;
  } else {
   $13 = $357;$matches$0111 = $matches$1;$p$0117 = $356;$pos$0116 = $pos$2;$s$0109 = $s$5;$wcs$0110 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($$lcssa366|0)>(-1);
  $64 = ($matches$0111$lcssa|0)!=(0);
  $or$cond5 = $64 | $63;
  if ($or$cond5) {
   $matches$3 = $matches$0111$lcssa;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0109$lcssa;$wcs$8 = $wcs$0110$lcssa;
   label = 164;
  }
 }
 else if ((label|0) == 163) {
  $$old4 = ($matches$0111347|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0204;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 164;
  } else {
   $alloc$2 = $alloc$0204;$matches$2 = $matches$0111347;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 167) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 164) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $359 = ($alloc$2|0)==(0);
 if ($359) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 7;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$0211 = $s;
   while(1) {
    $8 = HEAP8[$$0211>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ($8<<24>>24)==($5<<24>>24);
    $or$cond = $9 | $10;
    if ($or$cond) {
     $$0 = $$0211;
     break;
    }
    $11 = (($$0211) + 1|0);
    $12 = $11;
    $13 = $12 & 3;
    $14 = ($13|0)==(0);
    if ($14) {
     $$02$lcssa = $11;
     break L5;
    } else {
     $$0211 = $11;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $23 = $16;$w$08 = $$02$lcssa;
   while(1) {
    $22 = $23 ^ $15;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if (!($28)) {
     $w$0$lcssa = $w$08;
     break L12;
    }
    $29 = (($w$08) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + -16843009)|0;
    $32 = $30 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    if ($35) {
     $23 = $30;$w$08 = $29;
    } else {
     $w$0$lcssa = $29;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond5 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond5) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 return ($$0|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i15 = 0, $$$i7 = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i14 = 0, $$01$i = 0, $$02$i = 0, $$02$i10 = 0, $$03$i = 0, $$03$us$i = 0, $$lcssa$i = 0, $$lcssa$i13 = 0, $$lcssa$i6 = 0, $$lcssa198 = 0, $$lcssa201 = 0, $$lcssa204 = 0, $$lcssa218 = 0, $$lcssa221 = 0;
 var $$lcssa224 = 0, $$lcssa239 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $27$phi = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $div$i = 0, $div$us$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i9 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0;
 var $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$us$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0;
 var $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa238 = 0, $mem$0$us$i = 0, $or$cond$i = 0, $or$cond$i11 = 0, $or$cond5$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $19 << 8;
  $21 = $9&255;
  $22 = $20 | $21;
  $$01$i = $8;$27 = $3;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$lcssa$i = $27;$32 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($27) + 2|0);
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $29 | $25;
   $31 = ($28<<24>>24)==(0);
   if ($31) {
    $$lcssa$i = $$01$i;$32 = 0;
    break;
   } else {
    $27$phi = $$01$i;$$01$i = $26;$275 = $28;$hw$0$in2$i = $30;$27 = $27$phi;
   }
  }
  $33 = ($32<<24>>24)==(0);
  $$$i = $33 ? 0 : $$lcssa$i;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i = $34;$$lcssa$i6 = 0;
  } else {
   $$02$i = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i = $58;$$lcssa$i6 = $63;
     break;
    } else {
     $$02$i = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i) + -2|0);
  $$$i7 = $$lcssa$i6 ? 0 : $65;
  $$0 = $$$i7;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i14 = $66;$$lcssa$i13 = 0;
  } else {
   $$02$i10 = $66;$hw$03$i9 = $92;
   while(1) {
    $94 = $hw$03$i9 << 8;
    $95 = (($$02$i10) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i11 = $99 | $100;
    if ($or$cond$i11) {
     $$0$lcssa$i14 = $95;$$lcssa$i13 = $99;
     break;
    } else {
     $$02$i10 = $95;$hw$03$i9 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i14) + -3|0);
  $$$i15 = $$lcssa$i13 ? 0 : $101;
  $$0 = $$$i15;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$080$i = 0;
 while(1) {
  $102 = (($3) + ($l$080$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0$i = 0;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div4$i = ($106&255) >>> 5;
  $109 = $div4$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$080$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   $$lcssa239 = $113;$l$080$i$lcssa238 = $l$080$i;
   label = 23;
   break;
  } else {
   $106 = $117;$l$080$i = $113;
  }
 }
 L46: do {
  if ((label|0) == 23) {
   $119 = ($$lcssa239>>>0)>(1);
   L48: do {
    if ($119) {
     $276 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
     L49: while(1) {
      $277 = $276;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
      while(1) {
       $278 = $277;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
       L53: while(1) {
        $129 = $278;$k$059$i = 1;
        while(1) {
         $125 = (($k$059$i) + ($ip$0$ph76$i))|0;
         $126 = (($n) + ($125)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = (($n) + ($129)|0);
         $130 = HEAP8[$128>>0]|0;
         $131 = ($127<<24>>24)==($130<<24>>24);
         if (!($131)) {
          $$lcssa218 = $129;$$lcssa221 = $127;$$lcssa224 = $130;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
          break L53;
         }
         $132 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
         $123 = (($k$059$i) + 1)|0;
         if ($132) {
          break;
         }
         $122 = (($123) + ($jp$0$ph1365$i))|0;
         $124 = ($122>>>0)<($$lcssa239>>>0);
         if ($124) {
          $129 = $122;$k$059$i = $123;
         } else {
          $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
          break L49;
         }
        }
        $133 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
        $134 = (($133) + 1)|0;
        $135 = ($134>>>0)<($$lcssa239>>>0);
        if ($135) {
         $278 = $134;$jp$0$ph1365$i = $133;
        } else {
         $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
         break L49;
        }
       }
       $136 = ($$lcssa221&255)>($$lcssa224&255);
       $137 = (($$lcssa218) - ($ip$0$ph76$i))|0;
       if (!($136)) {
        $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
        break;
       }
       $120 = (($$lcssa218) + 1)|0;
       $121 = ($120>>>0)<($$lcssa239>>>0);
       if ($121) {
        $277 = $120;$jp$0$ph13$ph70$i = $$lcssa218;$p$0$ph$ph71$i = $137;
       } else {
        $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $137;
        break L49;
       }
      }
      $138 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
      $139 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
      $140 = ($139>>>0)<($$lcssa239>>>0);
      if ($140) {
       $276 = $139;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $138;
      } else {
       $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
       break;
      }
     }
     $279 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
     while(1) {
      $281 = $279;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
      while(1) {
       $280 = $281;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
       L68: while(1) {
        $148 = $280;$k$139$i = 1;
        while(1) {
         $144 = (($k$139$i) + ($ip$1$ph55$i))|0;
         $145 = (($n) + ($144)|0);
         $146 = HEAP8[$145>>0]|0;
         $147 = (($n) + ($148)|0);
         $149 = HEAP8[$147>>0]|0;
         $150 = ($146<<24>>24)==($149<<24>>24);
         if (!($150)) {
          $$lcssa198 = $148;$$lcssa201 = $146;$$lcssa204 = $149;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
          break L68;
         }
         $151 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
         $142 = (($k$139$i) + 1)|0;
         if ($151) {
          break;
         }
         $141 = (($142) + ($jp$1$ph944$i))|0;
         $143 = ($141>>>0)<($$lcssa239>>>0);
         if ($143) {
          $148 = $141;$k$139$i = $142;
         } else {
          $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
          break L48;
         }
        }
        $152 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
        $153 = (($152) + 1)|0;
        $154 = ($153>>>0)<($$lcssa239>>>0);
        if ($154) {
         $280 = $153;$jp$1$ph944$i = $152;
        } else {
         $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
         break L48;
        }
       }
       $155 = ($$lcssa201&255)<($$lcssa204&255);
       $156 = (($$lcssa198) - ($ip$1$ph55$i))|0;
       if (!($155)) {
        $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
        break;
       }
       $160 = (($$lcssa198) + 1)|0;
       $161 = ($160>>>0)<($$lcssa239>>>0);
       if ($161) {
        $281 = $160;$jp$1$ph9$ph49$i = $$lcssa198;$p$1$ph$ph50$i = $156;
       } else {
        $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $156;
        break L48;
       }
      }
      $157 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
      $158 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
      $159 = ($158>>>0)<($$lcssa239>>>0);
      if ($159) {
       $279 = $158;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $157;
      } else {
       $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
       break;
      }
     }
    } else {
     $ip$0$ph$lcssa147$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32151$i = 1;$p$1$ph$ph$lcssa23$i = 1;
    }
   } while(0);
   $162 = (($ip$1$ph$lcssa$i) + 1)|0;
   $163 = (($ip$0$ph$lcssa147$i) + 1)|0;
   $164 = ($162>>>0)>($163>>>0);
   $p$1$p$0$i = $164 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
   $ip$1$ip$0$i = $164 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
   $165 = (($n) + ($p$1$p$0$i)|0);
   $166 = (($ip$1$ip$0$i) + 1)|0;
   $167 = (_memcmp($n,$165,$166)|0);
   $168 = ($167|0)==(0);
   if ($168) {
    $174 = (($$lcssa239) - ($p$1$p$0$i))|0;
    $175 = $$lcssa239 | 63;
    $176 = ($$lcssa239|0)==($p$1$p$0$i|0);
    if ($176) {
     $232 = $175;$p$3155$i = $$lcssa239;
    } else {
     $$03$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
     L82: while(1) {
      $178 = $z$0$us$i;
      $179 = $$03$us$i;
      $180 = (($178) - ($179))|0;
      $181 = ($180>>>0)<($$lcssa239>>>0);
      do {
       if ($181) {
        $182 = (_memchr($z$0$us$i,0,$175)|0);
        $183 = ($182|0)==(0|0);
        if ($183) {
         $187 = (($z$0$us$i) + ($175)|0);
         $z$1$us$i = $187;
         break;
        } else {
         $184 = $182;
         $185 = (($184) - ($179))|0;
         $186 = ($185>>>0)<($$lcssa239>>>0);
         if ($186) {
          $$0$i = 0;
          break L46;
         } else {
          $z$1$us$i = $182;
          break;
         }
        }
       } else {
        $z$1$us$i = $z$0$us$i;
       }
      } while(0);
      $188 = (($$03$us$i) + ($l$080$i$lcssa238)|0);
      $189 = HEAP8[$188>>0]|0;
      $div$us$i = ($189&255) >>> 5;
      $190 = $div$us$i&255;
      $191 = (($byteset$i) + ($190<<2)|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = $189 & 31;
      $194 = $193&255;
      $195 = 1 << $194;
      $196 = $195 & $192;
      $197 = ($196|0)==(0);
      if ($197) {
       $227 = (($$03$us$i) + ($$lcssa239)|0);
       $$03$us$i = $227;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
       continue;
      }
      $198 = $189&255;
      $199 = (($shift$i) + ($198<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($$lcssa239) - ($200))|0;
      $202 = ($$lcssa239|0)==($200|0);
      if (!($202)) {
       $203 = ($mem$0$us$i|0)!=(0);
       $204 = ($201>>>0)<($p$1$p$0$i>>>0);
       $or$cond5$us$i = $203 & $204;
       $k$2$us$i = $or$cond5$us$i ? $174 : $201;
       $205 = (($$03$us$i) + ($k$2$us$i)|0);
       $$03$us$i = $205;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
       continue;
      }
      $206 = ($166>>>0)>($mem$0$us$i>>>0);
      $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
      $207 = (($n) + ($$mem$0$us$i)|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ($208<<24>>24)==(0);
      L96: do {
       if ($209) {
        $k$4$us$i = $166;
       } else {
        $$pr$us$i = $208;$k$338$us$i = $$mem$0$us$i;
        while(1) {
         $210 = (($$03$us$i) + ($k$338$us$i)|0);
         $211 = HEAP8[$210>>0]|0;
         $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
         if (!($212)) {
          $k$338$us$i$lcssa = $k$338$us$i;
          break;
         }
         $215 = (($k$338$us$i) + 1)|0;
         $216 = (($n) + ($215)|0);
         $217 = HEAP8[$216>>0]|0;
         $218 = ($217<<24>>24)==(0);
         if ($218) {
          $k$4$us$i = $166;
          break L96;
         } else {
          $$pr$us$i = $217;$k$338$us$i = $215;
         }
        }
        $213 = (($k$338$us$i$lcssa) - ($ip$1$ip$0$i))|0;
        $214 = (($$03$us$i) + ($213)|0);
        $$03$us$i = $214;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
        continue L82;
       }
      } while(0);
      while(1) {
       $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
       if (!($219)) {
        $$0$i = $$03$us$i;
        break L46;
       }
       $220 = (($k$4$us$i) + -1)|0;
       $221 = (($n) + ($220)|0);
       $222 = HEAP8[$221>>0]|0;
       $223 = (($$03$us$i) + ($220)|0);
       $224 = HEAP8[$223>>0]|0;
       $225 = ($222<<24>>24)==($224<<24>>24);
       if ($225) {
        $k$4$us$i = $220;
       } else {
        break;
       }
      }
      $226 = (($$03$us$i) + ($p$1$p$0$i)|0);
      $$03$us$i = $226;$mem$0$us$i = $174;$z$0$us$i = $z$1$us$i;
     }
    }
   } else {
    $169 = (($$lcssa239) - ($ip$1$ip$0$i))|0;
    $170 = (($169) + -1)|0;
    $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
    $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
    $172 = (($ip$1$ip$0$$i) + 1)|0;
    $173 = $$lcssa239 | 63;
    $232 = $173;$p$3155$i = $172;
   }
   $177 = (($n) + ($166)|0);
   $$03$i = $3;$z$0$i = $3;
   L106: while(1) {
    $228 = $z$0$i;
    $229 = $$03$i;
    $230 = (($228) - ($229))|0;
    $231 = ($230>>>0)<($$lcssa239>>>0);
    do {
     if ($231) {
      $233 = (_memchr($z$0$i,0,$232)|0);
      $234 = ($233|0)==(0|0);
      if ($234) {
       $238 = (($z$0$i) + ($232)|0);
       $z$1$i = $238;
       break;
      } else {
       $235 = $233;
       $236 = (($235) - ($229))|0;
       $237 = ($236>>>0)<($$lcssa239>>>0);
       if ($237) {
        $$0$i = 0;
        break L46;
       } else {
        $z$1$i = $233;
        break;
       }
      }
     } else {
      $z$1$i = $z$0$i;
     }
    } while(0);
    $239 = (($$03$i) + ($l$080$i$lcssa238)|0);
    $240 = HEAP8[$239>>0]|0;
    $div$i = ($240&255) >>> 5;
    $241 = $div$i&255;
    $242 = (($byteset$i) + ($241<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $240 & 31;
    $245 = $244&255;
    $246 = 1 << $245;
    $247 = $246 & $243;
    $248 = ($247|0)==(0);
    if ($248) {
     $255 = (($$03$i) + ($$lcssa239)|0);
     $$03$i = $255;$z$0$i = $z$1$i;
     continue;
    }
    $249 = $240&255;
    $250 = (($shift$i) + ($249<<2)|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ($$lcssa239|0)==($251|0);
    if (!($252)) {
     $253 = (($$lcssa239) - ($251))|0;
     $254 = (($$03$i) + ($253)|0);
     $$03$i = $254;$z$0$i = $z$1$i;
     continue;
    }
    $256 = HEAP8[$177>>0]|0;
    $257 = ($256<<24>>24)==(0);
    L120: do {
     if ($257) {
      $k$4$i = $166;
     } else {
      $$pr$i = $256;$k$338$i = $166;
      while(1) {
       $258 = (($$03$i) + ($k$338$i)|0);
       $259 = HEAP8[$258>>0]|0;
       $260 = ($$pr$i<<24>>24)==($259<<24>>24);
       if (!($260)) {
        $k$338$i$lcssa = $k$338$i;
        break;
       }
       $261 = (($k$338$i) + 1)|0;
       $262 = (($n) + ($261)|0);
       $263 = HEAP8[$262>>0]|0;
       $264 = ($263<<24>>24)==(0);
       if ($264) {
        $k$4$i = $166;
        break L120;
       } else {
        $$pr$i = $263;$k$338$i = $261;
       }
      }
      $265 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
      $266 = (($$03$i) + ($265)|0);
      $$03$i = $266;$z$0$i = $z$1$i;
      continue L106;
     }
    } while(0);
    while(1) {
     $267 = ($k$4$i|0)==(0);
     if ($267) {
      $$0$i = $$03$i;
      break L46;
     }
     $268 = (($k$4$i) + -1)|0;
     $269 = (($n) + ($268)|0);
     $270 = HEAP8[$269>>0]|0;
     $271 = (($$03$i) + ($268)|0);
     $272 = HEAP8[$271>>0]|0;
     $273 = ($270<<24>>24)==($272<<24>>24);
     if ($273) {
      $k$4$i = $268;
     } else {
      break;
     }
    }
    $274 = (($$03$i) + ($p$3155$i)|0);
    $$03$i = $274;$z$0$i = $z$1$i;
   }
  }
 } while(0);
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa148 = 0, $$lcssa152 = 0, $$lcssa153 = 0, $$lcssa154 = 0, $$lcssa156 = 0, $$lcssa159 = 0, $$lcssa161 = 0, $$lcssa163 = 0, $$lcssa165 = 0, $$lcssa167 = 0, $$lcssa169 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre108 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2337 = 0, $$sum$i32 = 0, $$sum$i38 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0;
 var $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0;
 var $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0;
 var $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0, $$sum3$pre$i$i = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0;
 var $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0;
 var $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0;
 var $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0;
 var $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0;
 var $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0;
 var $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$08$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0;
 var $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $T$07$i$i = 0, $T$07$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i26$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond55$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0;
 var $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$082$i = 0, $sp$082$i$lcssa = 0, $sp$181$i = 0, $sp$181$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0;
 var $tbase$253$i = 0, $tsize$0313843$i = 0, $tsize$1$i = 0, $tsize$252$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[626792>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((626792 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((626792 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[626792>>2] = $22;
     } else {
      $23 = HEAP32[((626792 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((626792 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((626792 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((626792 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[626792>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[((626792 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((626792 + 8|0))>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((626792 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((626792 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[626792>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[626792>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre108 = ((626792 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre108;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((626792 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((626792 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((626792 + 8|0))>>2] = $81;
     HEAP32[((626792 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((626792 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((626792 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((626792 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((626792 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((626792 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((626792 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((626792 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((626792 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((626792 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i38 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i38)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((626792 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((626792 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((626792 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[626792>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[626792>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((626792 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((626792 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((626792 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((626792 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((626792 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((626792 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((626792 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 90;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 94;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 90;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 90) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = ((626792 + ($327<<2)|0) + 304|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;
      } else {
       $t$2$ph$i = $t$1$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
       label = 94;
      }
     }
     if ((label|0) == 94) {
      while(1) {
       label = 0;
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 94;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 94;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((626792 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((626792 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((626792 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((626792 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((626792 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((626792 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((626792 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((626792 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L205: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2337 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2337)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((626792 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[626792>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[626792>>2] = $430;
           $$sum14$pre$i = (($424) + 2)|0;
           $$pre$i25 = ((626792 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = ((626792 + ($$sum17$i<<2)|0) + 40|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[((626792 + 16|0))>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((626792 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((626792 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((626792 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa169 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L225;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[((626792 + 16|0))>>2]|0;
           $495 = ($$lcssa169>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa169>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L205;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((626792 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((626792 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((626792 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((626792 + 20|0))>>2] = $514;
   HEAP32[((626792 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((626792 + 8|0))>>2] = 0;
   HEAP32[((626792 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((626792 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((626792 + 12|0))>>2] = $528;
  $529 = HEAP32[((626792 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((626792 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[627264>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((627264 + 8|0))>>2] = $538;
    HEAP32[((627264 + 4|0))>>2] = $538;
    HEAP32[((627264 + 12|0))>>2] = -1;
    HEAP32[((627264 + 16|0))>>2] = -1;
    HEAP32[((627264 + 20|0))>>2] = 0;
    HEAP32[((626792 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[627264>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((627264 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((626792 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((626792 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((626792 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L267: do {
  if ($560) {
   $561 = HEAP32[((626792 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L269: do {
    if ($562) {
     label = 180;
    } else {
     $sp$0$i$i = ((626792 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa165 = $sp$0$i$i;$$lcssa167 = $565;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 180;
       break L269;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[((626792 + 12|0))>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa165>>2]|0;
      $600 = HEAP32[$$lcssa167>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0313843$i = $596;
       } else {
        $tbase$253$i = $598;$tsize$252$i = $596;
        label = 200;
        break L267;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;
       label = 190;
      }
     } else {
      $tsize$0313843$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 180) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0313843$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[((627264 + 4|0))>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[((626792 + 432|0))>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[((626792 + 440|0))>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0313843$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       if ($593) {
        $tbase$253$i = $572;$tsize$252$i = $ssize$0$i;
        label = 200;
        break L267;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;
        label = 190;
       }
      } else {
       $tsize$0313843$i = 0;
      }
     }
    }
   } while(0);
   L289: do {
    if ((label|0) == 190) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond4$i = $607 & $or$cond5$i;
     do {
      if ($or$cond4$i) {
       $608 = HEAP32[((627264 + 8|0))>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0313843$i = 0;
         break L289;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0313843$i = 0;
     } else {
      $tbase$253$i = $br$0$ph$i;$tsize$252$i = $ssize$2$i;
      label = 200;
      break L267;
     }
    }
   } while(0);
   $618 = HEAP32[((626792 + 444|0))>>2]|0;
   $619 = $618 | 4;
   HEAP32[((626792 + 444|0))>>2] = $619;
   $tsize$1$i = $tsize$0313843$i;
   label = 197;
  } else {
   $tsize$1$i = 0;
   label = 197;
  }
 } while(0);
 if ((label|0) == 197) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond6$i = $625 & $or$cond3$i;
   if ($or$cond6$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$253$i = $621;$tsize$252$i = $$tsize$1$i;
     label = 200;
    }
   }
  }
 }
 if ((label|0) == 200) {
  $631 = HEAP32[((626792 + 432|0))>>2]|0;
  $632 = (($631) + ($tsize$252$i))|0;
  HEAP32[((626792 + 432|0))>>2] = $632;
  $633 = HEAP32[((626792 + 436|0))>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[((626792 + 436|0))>>2] = $632;
  }
  $635 = HEAP32[((626792 + 24|0))>>2]|0;
  $636 = ($635|0)==(0|0);
  L308: do {
   if ($636) {
    $637 = HEAP32[((626792 + 16|0))>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$253$i>>>0)<($637>>>0);
    $or$cond8$i = $638 | $639;
    if ($or$cond8$i) {
     HEAP32[((626792 + 16|0))>>2] = $tbase$253$i;
    }
    HEAP32[((626792 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((626792 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((626792 + 460|0))>>2] = 0;
    $640 = HEAP32[627264>>2]|0;
    HEAP32[((626792 + 36|0))>>2] = $640;
    HEAP32[((626792 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = ((626792 + ($641<<2)|0) + 40|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = ((626792 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = ((626792 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$252$i) + -40)|0;
    $647 = (($tbase$253$i) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    if ($650) {
     $654 = 0;
    } else {
     $651 = (0 - ($648))|0;
     $652 = $651 & 7;
     $654 = $652;
    }
    $653 = (($tbase$253$i) + ($654)|0);
    $655 = (($646) - ($654))|0;
    HEAP32[((626792 + 24|0))>>2] = $653;
    HEAP32[((626792 + 12|0))>>2] = $655;
    $656 = $655 | 1;
    $$sum$i12$i = (($654) + 4)|0;
    $657 = (($tbase$253$i) + ($$sum$i12$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$252$i) + -36)|0;
    $658 = (($tbase$253$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[((627264 + 16|0))>>2]|0;
    HEAP32[((626792 + 28|0))>>2] = $659;
   } else {
    $sp$082$i = ((626792 + 448|0));
    while(1) {
     $660 = HEAP32[$sp$082$i>>2]|0;
     $661 = (($sp$082$i) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$253$i|0)==($663|0);
     if ($664) {
      $$lcssa159 = $660;$$lcssa161 = $661;$$lcssa163 = $662;$sp$082$i$lcssa = $sp$082$i;
      label = 212;
      break;
     }
     $665 = (($sp$082$i) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$082$i = $666;
     }
    }
    if ((label|0) == 212) {
     $668 = (($sp$082$i$lcssa) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa159>>>0);
      $673 = ($635>>>0)<($tbase$253$i>>>0);
      $or$cond55$i = $673 & $672;
      if ($or$cond55$i) {
       $674 = (($$lcssa163) + ($tsize$252$i))|0;
       HEAP32[$$lcssa161>>2] = $674;
       $675 = HEAP32[((626792 + 12|0))>>2]|0;
       $676 = (($675) + ($tsize$252$i))|0;
       $677 = (($635) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       if ($680) {
        $684 = 0;
       } else {
        $681 = (0 - ($678))|0;
        $682 = $681 & 7;
        $684 = $682;
       }
       $683 = (($635) + ($684)|0);
       $685 = (($676) - ($684))|0;
       HEAP32[((626792 + 24|0))>>2] = $683;
       HEAP32[((626792 + 12|0))>>2] = $685;
       $686 = $685 | 1;
       $$sum$i16$i = (($684) + 4)|0;
       $687 = (($635) + ($$sum$i16$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i17$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i17$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[((627264 + 16|0))>>2]|0;
       HEAP32[((626792 + 28|0))>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[((626792 + 16|0))>>2]|0;
    $691 = ($tbase$253$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[((626792 + 16|0))>>2] = $tbase$253$i;
     $755 = $tbase$253$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$253$i) + ($tsize$252$i)|0);
    $sp$181$i = ((626792 + 448|0));
    while(1) {
     $693 = HEAP32[$sp$181$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa156 = $sp$181$i;$sp$181$i$lcssa = $sp$181$i;
      label = 222;
      break;
     }
     $695 = (($sp$181$i) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = ((626792 + 448|0));
      break;
     } else {
      $sp$181$i = $696;
     }
    }
    if ((label|0) == 222) {
     $698 = (($sp$181$i$lcssa) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa156>>2] = $tbase$253$i;
      $702 = (($sp$181$i$lcssa) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$252$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = (($tbase$253$i) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      if ($708) {
       $712 = 0;
      } else {
       $709 = (0 - ($706))|0;
       $710 = $709 & 7;
       $712 = $710;
      }
      $711 = (($tbase$253$i) + ($712)|0);
      $$sum110$i = (($tsize$252$i) + 8)|0;
      $713 = (($tbase$253$i) + ($$sum110$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      if ($716) {
       $719 = 0;
      } else {
       $717 = (0 - ($714))|0;
       $718 = $717 & 7;
       $719 = $718;
      }
      $$sum111$i = (($719) + ($tsize$252$i))|0;
      $720 = (($tbase$253$i) + ($$sum111$i)|0);
      $721 = $720;
      $722 = $711;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($712) + ($nb$0))|0;
      $724 = (($tbase$253$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($712) + 4)|0;
      $727 = (($tbase$253$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L345: do {
       if ($728) {
        $729 = HEAP32[((626792 + 12|0))>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[((626792 + 12|0))>>2] = $730;
        HEAP32[((626792 + 24|0))>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$253$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[((626792 + 20|0))>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[((626792 + 8|0))>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[((626792 + 8|0))>>2] = $736;
         HEAP32[((626792 + 20|0))>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$253$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$253$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$252$i) + 4)|0;
        $$sum112$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$253$i) + ($$sum112$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L353: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum122$i = (($$sum3738$i$i) + ($tsize$252$i))|0;
           $747 = (($tbase$253$i) + ($$sum122$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$252$i) + 12)|0;
           $$sum123$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$253$i) + ($$sum123$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = ((626792 + ($751<<2)|0) + 40|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = (($748) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[626792>>2]|0;
            $763 = $762 & $761;
            HEAP32[626792>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre58$i$i = (($750) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = (($750) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi59$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = (($748) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum113$i = (($$sum34$i$i) + ($tsize$252$i))|0;
           $770 = (($tbase$253$i) + ($$sum113$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$252$i) + 12)|0;
           $$sum114$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$253$i) + ($$sum114$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum120$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$253$i) + ($$sum120$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum121$i = (($$sum67$i$i) + ($tsize$252$i))|0;
              $787 = (($tbase$253$i) + ($$sum121$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = (($R$0$i$i) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = (($R$0$i$i) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum115$i = (($$sum3536$i$i) + ($tsize$252$i))|0;
             $775 = (($tbase$253$i) + ($$sum115$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = (($776) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = (($773) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$252$i) + 28)|0;
           $$sum116$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$253$i) + ($$sum116$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ((626792 + ($799<<2)|0) + 304|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[((626792 + 4|0))>>2]|0;
             $806 = $805 & $804;
             HEAP32[((626792 + 4|0))>>2] = $806;
             break L353;
            } else {
             $807 = HEAP32[((626792 + 16|0))>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = (($771) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = (($771) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L353;
             }
            }
           } while(0);
           $814 = HEAP32[((626792 + 16|0))>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = (($R$1$i$i) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum117$i = (($$sum3132$i$i) + ($tsize$252$i))|0;
           $817 = (($tbase$253$i) + ($$sum117$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = (($R$1$i$i) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = (($818) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum118$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$253$i) + ($$sum118$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[((626792 + 16|0))>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = (($R$1$i$i) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = (($824) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum119$i = (($$sum9$i$i) + ($tsize$252$i))|0;
         $830 = (($tbase$253$i) + ($$sum119$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = (($oldfirst$0$i$i) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$253$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$253$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = ((626792 + ($840<<2)|0) + 40|0);
         $842 = HEAP32[626792>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[626792>>2] = $846;
           $$sum26$pre$i$i = (($840) + 2)|0;
           $$pre$i22$i = ((626792 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i23$iZ2D = $$pre$i22$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = ((626792 + ($$sum29$i$i<<2)|0) + 40|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[((626792 + 16|0))>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = (($F4$0$i$i) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$253$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$253$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = ((626792 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$253$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$253$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$253$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[((626792 + 4|0))>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[((626792 + 4|0))>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$253$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$253$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$253$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ($I7$0$i$i|0)==(31);
        if ($892) {
         $900 = 0;
        } else {
         $893 = $I7$0$i$i >>> 1;
         $894 = (25 - ($893))|0;
         $900 = $894;
        }
        $895 = (($891) + 4|0);
        $896 = HEAP32[$895>>2]|0;
        $897 = $896 & -8;
        $898 = ($897|0)==($qsize$0$i$i|0);
        L442: do {
         if ($898) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $899 = $qsize$0$i$i << $900;
          $K8$053$i$i = $899;$T$052$i$i = $891;
          while(1) {
           $907 = $K8$053$i$i >>> 31;
           $908 = ((($T$052$i$i) + ($907<<2)|0) + 16|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $901 = $K8$053$i$i << 1;
           $902 = (($903) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L442;
           } else {
            $K8$053$i$i = $901;$T$052$i$i = $903;
           }
          }
          $910 = HEAP32[((626792 + 16|0))>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$253$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$253$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$253$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L345;
          }
         }
        } while(0);
        $915 = (($T$0$lcssa$i25$i) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[((626792 + 16|0))>>2]|0;
        $918 = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = ($916>>>0)>=($917>>>0);
        $or$cond$i26$i = $918 & $919;
        if ($or$cond$i26$i) {
         $920 = (($916) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$253$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$253$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$253$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $712 | 8;
      $924 = (($tbase$253$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = ((626792 + 448|0));
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = (($sp$0$i$i$i) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa152 = $925;$$lcssa153 = $928;$$lcssa154 = $929;
       break;
      }
     }
     $931 = (($sp$0$i$i$i) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i13$i = (($$lcssa153) + -47)|0;
    $$sum1$i14$i = (($$lcssa153) + -39)|0;
    $933 = (($$lcssa152) + ($$sum1$i14$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    if ($936) {
     $939 = 0;
    } else {
     $937 = (0 - ($934))|0;
     $938 = $937 & 7;
     $939 = $938;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($939))|0;
    $940 = (($$lcssa152) + ($$sum2$i15$i)|0);
    $941 = (($635) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = (($943) + 8|0);
    $945 = (($tsize$252$i) + -40)|0;
    $946 = (($tbase$253$i) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    if ($949) {
     $953 = 0;
    } else {
     $950 = (0 - ($947))|0;
     $951 = $950 & 7;
     $953 = $951;
    }
    $952 = (($tbase$253$i) + ($953)|0);
    $954 = (($945) - ($953))|0;
    HEAP32[((626792 + 24|0))>>2] = $952;
    HEAP32[((626792 + 12|0))>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($953) + 4)|0;
    $956 = (($tbase$253$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$252$i) + -36)|0;
    $957 = (($tbase$253$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[((627264 + 16|0))>>2]|0;
    HEAP32[((626792 + 28|0))>>2] = $958;
    $959 = (($943) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944+0>>2]=HEAP32[((626792 + 448|0))+0>>2]|0;HEAP32[$944+4>>2]=HEAP32[((626792 + 448|0))+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[((626792 + 448|0))+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[((626792 + 448|0))+12>>2]|0;
    HEAP32[((626792 + 448|0))>>2] = $tbase$253$i;
    HEAP32[((626792 + 452|0))>>2] = $tsize$252$i;
    HEAP32[((626792 + 460|0))>>2] = 0;
    HEAP32[((626792 + 456|0))>>2] = $944;
    $960 = (($943) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = (($943) + 32|0);
    $962 = ($961>>>0)<($$lcssa154>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = (($964) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = (($964) + 8|0);
      $966 = ($965>>>0)<($$lcssa154>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = (($635) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = ((626792 + ($977<<2)|0) + 40|0);
      $979 = HEAP32[626792>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      do {
       if ($982) {
        $983 = $979 | $980;
        HEAP32[626792>>2] = $983;
        $$sum3$pre$i$i = (($977) + 2)|0;
        $$pre$i$i = ((626792 + ($$sum3$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $978;
       } else {
        $$sum4$i$i = (($977) + 2)|0;
        $984 = ((626792 + ($$sum4$i$i<<2)|0) + 40|0);
        $985 = HEAP32[$984>>2]|0;
        $986 = HEAP32[((626792 + 16|0))>>2]|0;
        $987 = ($985>>>0)<($986>>>0);
        if (!($987)) {
         $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = (($F$0$i$i) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = (($635) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = (($635) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = ((626792 + ($I1$0$i$i<<2)|0) + 304|0);
     $1017 = (($635) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = (($635) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[((626792 + 4|0))>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[((626792 + 4|0))>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = (($635) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = (($635) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = (($635) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ($I1$0$i$i|0)==(31);
     if ($1028) {
      $1036 = 0;
     } else {
      $1029 = $I1$0$i$i >>> 1;
      $1030 = (25 - ($1029))|0;
      $1036 = $1030;
     }
     $1031 = (($1027) + 4|0);
     $1032 = HEAP32[$1031>>2]|0;
     $1033 = $1032 & -8;
     $1034 = ($1033|0)==($970|0);
     L492: do {
      if ($1034) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1035 = $970 << $1036;
       $K2$08$i$i = $1035;$T$07$i$i = $1027;
       while(1) {
        $1043 = $K2$08$i$i >>> 31;
        $1044 = ((($T$07$i$i) + ($1043<<2)|0) + 16|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa148 = $1044;$T$07$i$i$lcssa = $T$07$i$i;
         break;
        }
        $1037 = $K2$08$i$i << 1;
        $1038 = (($1039) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L492;
        } else {
         $K2$08$i$i = $1037;$T$07$i$i = $1039;
        }
       }
       $1046 = HEAP32[((626792 + 16|0))>>2]|0;
       $1047 = ($$lcssa148>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa148>>2] = $635;
        $1048 = (($635) + 24|0);
        HEAP32[$1048>>2] = $T$07$i$i$lcssa;
        $1049 = (($635) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = (($635) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L308;
       }
      }
     } while(0);
     $1051 = (($T$0$lcssa$i$i) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[((626792 + 16|0))>>2]|0;
     $1054 = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = ($1052>>>0)>=($1053>>>0);
     $or$cond$i$i = $1054 & $1055;
     if ($or$cond$i$i) {
      $1056 = (($1052) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = (($635) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = (($635) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = (($635) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[((626792 + 12|0))>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[((626792 + 12|0))>>2] = $1062;
   $1063 = HEAP32[((626792 + 24|0))>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[((626792 + 24|0))>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = (($1063) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = (($1063) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi60Z2D = 0, $$pre$phi62Z2D = 0, $$pre$phiZ2D = 0, $$pre59 = 0, $$pre61 = 0, $$sum = 0, $$sum10$pre = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$054 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$053 = 0, $T$053$lcssa = 0, $cond = 0, $cond48 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((626792 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((626792 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((626792 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((626792 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[626792>>2]|0;
     $36 = $35 & $34;
     HEAP32[626792>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre61 = (($24) + 8|0);
     $$pre$phi62Z2D = $$pre61;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi62Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi62Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((626792 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((626792 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((626792 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((626792 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((626792 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((626792 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((626792 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((626792 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((626792 + 12|0))>>2] = $120;
   HEAP32[((626792 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((626792 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((626792 + 20|0))>>2] = 0;
   HEAP32[((626792 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((626792 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((626792 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((626792 + 8|0))>>2] = $128;
   HEAP32[((626792 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((626792 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((626792 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[626792>>2]|0;
     $152 = $151 & $150;
     HEAP32[626792>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre59 = (($139) + 8|0);
     $$pre$phi60Z2D = $$pre59;
    } else {
     $154 = HEAP32[((626792 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi60Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi60Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((626792 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((626792 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((626792 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond48 = ($R7$1|0)==(0|0);
      if ($cond48) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((626792 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((626792 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((626792 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((626792 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((626792 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((626792 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((626792 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((626792 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[626792>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[626792>>2] = $239;
   $$sum10$pre = (($233) + 2)|0;
   $$pre = ((626792 + ($$sum10$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = ((626792 + ($$sum11<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((626792 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((626792 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = (($p$0) + 16|0);
 $275 = (($p$0) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[((626792 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((626792 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$054 = $292;$T$053 = $284;
     while(1) {
      $300 = $K19$054 >>> 31;
      $301 = ((($T$053) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$053$lcssa = $T$053;
       break;
      }
      $294 = $K19$054 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$054 = $294;$T$053 = $296;
      }
     }
     $303 = HEAP32[((626792 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$053$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((626792 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((626792 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((626792 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((626792 + 456|0));
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((626792 + 32|0))>>2] = -1;
 return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0;
 var $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa122 = $13;
   break;
  }
 }
 $16 = ($$lcssa122|0)==(45);
 do {
  if ((($$lcssa122|0) == 43) | (($$lcssa122|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa122;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (627288 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 46;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (627288 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa121 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa121;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$88 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $89 = ($88|0)<(0);
     $90 = $89 << 31 >> 31;
     $91 = $88 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $88;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($88|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$88 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $252 = $284;$254 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $252 = $282;$254 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (627552 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (627288 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (627288 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $146 & $145;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa117 = $133;$$lcssa118 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa118;$152 = 0;$154 = $$lcssa117;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$152 = 0;$154 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $153 = ($152>>>0)>($148>>>0);
    $155 = ($154>>>0)>($147>>>0);
    $156 = ($152|0)==($148|0);
    $157 = $156 & $155;
    $158 = $153 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $154;$286 = $152;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $154;$160 = $152;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (627288 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$124 = $$125;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (627288 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (627288 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $196 & $195;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa119 = $183;$$lcssa120 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa120;$287 = $$lcssa119;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $202 = $288;$204 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $203 = ($202>>>0)>($201>>>0);
     $205 = ($204>>>0)>($200>>>0);
     $206 = ($202|0)==($201|0);
     $207 = $206 & $205;
     $208 = $203 | $207;
     if ($208) {
      $$124 = $$125;$285 = $204;$286 = $202;$c$8 = $c$755;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($204|0),($202|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$124 = $$125;$285 = $204;$286 = $202;$c$8 = $c$755;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (627288 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $202 = $220;$204 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $$124 = $$125;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (627288 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (627288 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $252 = $1;$254 = $0;
  } else {
   $252 = $286;$254 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $253 = ($252>>>0)<($1>>>0);
 $255 = ($254>>>0)<($0>>>0);
 $256 = ($252|0)==($1|0);
 $257 = $256 & $255;
 $258 = $253 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($252>>>0)>($1>>>0);
  $268 = ($254>>>0)>($0>>>0);
  $269 = ($252|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $254 ^ $neg$0;
 $276 = $252 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$012$i = 0, $$013$i = 0, $$01335$i = 0, $$01336$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3131$i = 0, $$in = 0, $$k$0$i = 0;
 var $$lcssa = 0, $$lcssa207 = 0, $$lcssa207$lcssa = 0, $$lcssa208 = 0, $$lcssa208$lcssa = 0, $$lcssa221 = 0, $$lcssa222 = 0, $$lcssa232 = 0, $$lcssa59$i = 0, $$lnz$0$i = 0, $$neg41$i = 0, $$old$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us102$i = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0;
 var $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0.0, $458 = 0.0;
 var $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0.0;
 var $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0.0, $480 = 0, $481 = 0, $482 = 0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0.0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0.0, $663 = 0, $664 = 0.0, $665 = 0.0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0;
 var $675 = 0.0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa186$i = 0, $a$0110$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph47$i = 0, $a$3$i = 0, $a$3$i$lcssa199 = 0, $a$3$i$ph = 0, $a$3$i200 = 0, $a$3$ph$i = 0, $a$487$i = 0;
 var $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge136 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$186 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0112$i = 0;
 var $carry1$0$us$i = 0, $carry1$0$us98$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us103$i = 0, $carry1$1$us103$i$lcssa = 0, $carry3$090$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$033$i = 0, $denormal$034$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us93$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0;
 var $e2$1$i197 = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond175$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa193 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa230 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3127$i = 0, $gotdig$3127$i$lcssa = 0;
 var $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1128$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$085 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0130$i = 0, $j$0130$i$lcssa = 0, $j$076$i = 0;
 var $j$077$i = 0, $j$078$i = 0, $j$2$i = 0, $j$3119$i = 0, $k$0$lcssa$i = 0, $k$0129$i = 0, $k$0129$i$lcssa = 0, $k$072$i = 0, $k$073$i = 0, $k$074$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4111$i = 0, $k$5$in$us$i = 0, $k$5$in$us97$i = 0, $k$5$us$i = 0, $k$5$us99$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us105$i = 0, $k$688$i = 0;
 var $lnz$0$lcssa$i = 0, $lnz$0126$i = 0, $lnz$0126$i$lcssa = 0, $lnz$066$i = 0, $lnz$067$i = 0, $lnz$068$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11123$i = 0, $or$cond16$i = 0, $or$cond18$i = 0, $or$cond19$i = 0, $or$cond191$i = 0, $or$cond192$i = 0, $or$cond20$us$i = 0;
 var $or$cond20$us104$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa187$i = 0, $rp$0109$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0, $rp$2$ph45$i = 0, $rp$3$i$ph = 0, $rp$3$ph43$i = 0, $rp$486$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph46$i = 0, $z$1$us$i = 0, $z$1$us94$i = 0, $z$2$us$i = 0, $z$2$us96$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us106$i = 0;
 var $z$3$us106$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa232 = $9;
   break;
  }
 }
 $12 = ($$lcssa232|0)==(45);
 do {
  if ((($$lcssa232|0) == 43) | (($$lcssa232|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa232;$sign$0 = 1;
  }
 } while(0);
 $c$186 = $c$0;$i$085 = 0;
 while(1) {
  $23 = $c$186 | 32;
  $24 = (627568 + ($i$085)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$186;$i$0$lcssa = $i$085;
   break;
  }
  $28 = ($i$085>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$186;
   }
  } while(0);
  $36 = (($i$085) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$186 = $c$2;$i$085 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $39 & $38;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   do {
    if ($51) {
     $52 = $c$1$lcssa | 32;
     $53 = ($52|0)==(110);
     if ($53) {
      $54 = HEAP32[$0>>2]|0;
      $55 = HEAP32[$1>>2]|0;
      $56 = ($54>>>0)<($55>>>0);
      if ($56) {
       $57 = (($54) + 1|0);
       HEAP32[$0>>2] = $57;
       $58 = HEAP8[$54>>0]|0;
       $59 = $58&255;
       $c$4 = $59;
      } else {
       $60 = (___shgetc($f)|0);
       $c$4 = $60;
      }
      $61 = $c$4 | 32;
      $62 = ($61|0)==(97);
      if (!($62)) {
       break;
      }
      $710 = HEAP32[$0>>2]|0;
      $711 = HEAP32[$1>>2]|0;
      $712 = ($710>>>0)<($711>>>0);
      if ($712) {
       $714 = (($710) + 1|0);
       HEAP32[$0>>2] = $714;
       $715 = HEAP8[$710>>0]|0;
       $716 = $715&255;
       $c$4$1 = $716;
      } else {
       $713 = (___shgetc($f)|0);
       $c$4$1 = $713;
      }
      $717 = $c$4$1 | 32;
      $718 = ($717|0)==(110);
      if (!($718)) {
       break;
      }
      $63 = HEAP32[$0>>2]|0;
      $64 = HEAP32[$1>>2]|0;
      $65 = ($63>>>0)<($64>>>0);
      if ($65) {
       $66 = (($63) + 1|0);
       HEAP32[$0>>2] = $66;
       $67 = HEAP8[$63>>0]|0;
       $68 = $67&255;
       $70 = $68;
      } else {
       $69 = (___shgetc($f)|0);
       $70 = $69;
      }
      $71 = ($70|0)==(40);
      if ($71) {
       $i$4 = 1;
      } else {
       $72 = HEAP32[$1>>2]|0;
       $73 = ($72|0)==(0|0);
       if ($73) {
        $$0 = nan;
        STACKTOP = sp;return (+$$0);
       }
       $74 = HEAP32[$0>>2]|0;
       $75 = (($74) + -1|0);
       HEAP32[$0>>2] = $75;
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      while(1) {
       $76 = HEAP32[$0>>2]|0;
       $77 = HEAP32[$1>>2]|0;
       $78 = ($76>>>0)<($77>>>0);
       if ($78) {
        $79 = (($76) + 1|0);
        HEAP32[$0>>2] = $79;
        $80 = HEAP8[$76>>0]|0;
        $81 = $80&255;
        $84 = $81;
       } else {
        $82 = (___shgetc($f)|0);
        $84 = $82;
       }
       $83 = (($84) + -48)|0;
       $85 = ($83>>>0)<(10);
       $86 = (($84) + -65)|0;
       $87 = ($86>>>0)<(26);
       $or$cond = $85 | $87;
       if (!($or$cond)) {
        $88 = (($84) + -97)|0;
        $89 = ($88>>>0)<(26);
        $90 = ($84|0)==(95);
        $or$cond7 = $90 | $89;
        if (!($or$cond7)) {
         $$lcssa = $84;$i$4$lcssa = $i$4;
         break;
        }
       }
       $102 = (($i$4) + 1)|0;
       $i$4 = $102;
      }
      $91 = ($$lcssa|0)==(41);
      if ($91) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      }
      $92 = HEAP32[$1>>2]|0;
      $93 = ($92|0)==(0|0);
      if (!($93)) {
       $94 = HEAP32[$0>>2]|0;
       $95 = (($94) + -1|0);
       HEAP32[$0>>2] = $95;
      }
      if (!($39)) {
       $97 = (___errno_location()|0);
       HEAP32[$97>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       STACKTOP = sp;return (+$$0);
      }
      $96 = ($i$4$lcssa|0)==(0);
      $brmerge136 = $96 | $93;
      if ($brmerge136) {
       $$0 = nan;
       STACKTOP = sp;return (+$$0);
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $98 = (($$in) + -1)|0;
       $99 = HEAP32[$0>>2]|0;
       $100 = (($99) + -1|0);
       HEAP32[$0>>2] = $100;
       $101 = ($98|0)==(0);
       if ($101) {
        $$0 = nan;
        break;
       } else {
        $$in = $98;
       }
      }
      STACKTOP = sp;return (+$$0);
     }
     $108 = ($c$1$lcssa|0)==(48);
     do {
      if ($108) {
       $109 = HEAP32[$0>>2]|0;
       $110 = HEAP32[$1>>2]|0;
       $111 = ($109>>>0)<($110>>>0);
       if ($111) {
        $112 = (($109) + 1|0);
        HEAP32[$0>>2] = $112;
        $113 = HEAP8[$109>>0]|0;
        $114 = $113&255;
        $117 = $114;
       } else {
        $115 = (___shgetc($f)|0);
        $117 = $115;
       }
       $116 = $117 | 32;
       $118 = ($116|0)==(120);
       if (!($118)) {
        $320 = HEAP32[$1>>2]|0;
        $321 = ($320|0)==(0|0);
        if ($321) {
         $c$6 = 48;
         break;
        }
        $322 = HEAP32[$0>>2]|0;
        $323 = (($322) + -1|0);
        HEAP32[$0>>2] = $323;
        $c$6 = 48;
        break;
       }
       $119 = HEAP32[$0>>2]|0;
       $120 = HEAP32[$1>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = (($119) + 1|0);
        HEAP32[$0>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $c$0$i = $124;$gotdig$0$i = 0;
       } else {
        $125 = (___shgetc($f)|0);
        $c$0$i = $125;$gotdig$0$i = 0;
       }
       while(1) {
        if ((($c$0$i|0) == 46)) {
         $gotdig$0$i$lcssa193 = $gotdig$0$i;
         label = 68;
         break;
        } else if (!((($c$0$i|0) == 48))) {
         $163 = 0;$165 = 0;$719 = 0;$720 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         break;
        }
        $126 = HEAP32[$0>>2]|0;
        $127 = HEAP32[$1>>2]|0;
        $128 = ($126>>>0)<($127>>>0);
        if ($128) {
         $129 = (($126) + 1|0);
         HEAP32[$0>>2] = $129;
         $130 = HEAP8[$126>>0]|0;
         $131 = $130&255;
         $c$0$i = $131;$gotdig$0$i = 1;
         continue;
        } else {
         $132 = (___shgetc($f)|0);
         $c$0$i = $132;$gotdig$0$i = 1;
         continue;
        }
       }
       if ((label|0) == 68) {
        $133 = HEAP32[$0>>2]|0;
        $134 = HEAP32[$1>>2]|0;
        $135 = ($133>>>0)<($134>>>0);
        if ($135) {
         $136 = (($133) + 1|0);
         HEAP32[$0>>2] = $136;
         $137 = HEAP8[$133>>0]|0;
         $138 = $137&255;
         $c$1$ph$i = $138;
        } else {
         $139 = (___shgetc($f)|0);
         $c$1$ph$i = $139;
        }
        $140 = ($c$1$ph$i|0)==(48);
        if ($140) {
         $148 = 0;$149 = 0;
         while(1) {
          $141 = HEAP32[$0>>2]|0;
          $142 = HEAP32[$1>>2]|0;
          $143 = ($141>>>0)<($142>>>0);
          if ($143) {
           $144 = (($141) + 1|0);
           HEAP32[$0>>2] = $144;
           $145 = HEAP8[$141>>0]|0;
           $146 = $145&255;
           $152 = $146;
          } else {
           $147 = (___shgetc($f)|0);
           $152 = $147;
          }
          $150 = (_i64Add(($148|0),($149|0),-1,-1)|0);
          $151 = tempRet0;
          $153 = ($152|0)==(48);
          if ($153) {
           $148 = $150;$149 = $151;
          } else {
           $163 = 0;$165 = 0;$719 = $150;$720 = $151;$c$2$i = $152;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break;
          }
         }
        } else {
         $163 = 0;$165 = 0;$719 = 0;$720 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa193;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
       L115: while(1) {
        $154 = (($c$2$i) + -48)|0;
        $155 = ($154>>>0)<(10);
        do {
         if ($155) {
          $d$0$i = $154;
          label = 81;
         } else {
          $156 = $c$2$i | 32;
          $157 = (($156) + -97)|0;
          $158 = ($157>>>0)<(6);
          $159 = ($c$2$i|0)==(46);
          $or$cond6$i = $159 | $158;
          if (!($or$cond6$i)) {
           $207 = $719;$208 = $165;$210 = $720;$211 = $163;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L115;
          }
          if ($159) {
           $160 = ($gotrad$0$i|0)==(0);
           if ($160) {
            $721 = $165;$722 = $163;$723 = $165;$724 = $163;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
            break;
           } else {
            $207 = $719;$208 = $165;$210 = $720;$211 = $163;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break L115;
           }
          } else {
           $161 = ($c$2$i|0)>(57);
           $162 = (($156) + -87)|0;
           $$$i = $161 ? $162 : $154;
           $d$0$i = $$$i;
           label = 81;
           break;
          }
         }
        } while(0);
        if ((label|0) == 81) {
         label = 0;
         $164 = ($163|0)<(0);
         $166 = ($165>>>0)<(8);
         $167 = ($163|0)==(0);
         $168 = $167 & $166;
         $169 = $164 | $168;
         do {
          if ($169) {
           $170 = $x$0$i << 4;
           $171 = (($d$0$i) + ($170))|0;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $171;$y$1$i = $y$0$i;
          } else {
           $172 = ($163|0)<(0);
           $173 = ($165>>>0)<(14);
           $174 = ($163|0)==(0);
           $175 = $174 & $173;
           $176 = $172 | $175;
           if ($176) {
            $177 = (+($d$0$i|0));
            $178 = $scale$0$i * 0.0625;
            $179 = $178 * $177;
            $180 = $y$0$i + $179;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $178;$x$1$i = $x$0$i;$y$1$i = $180;
            break;
           }
           $181 = ($d$0$i|0)==(0);
           $182 = ($gottail$0$i|0)!=(0);
           $or$cond$i = $182 | $181;
           if ($or$cond$i) {
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           } else {
            $183 = $scale$0$i * 0.5;
            $184 = $y$0$i + $183;
            $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $184;
           }
          }
         } while(0);
         $185 = (_i64Add(($165|0),($163|0),1,0)|0);
         $186 = tempRet0;
         $721 = $719;$722 = $720;$723 = $185;$724 = $186;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
        }
        $187 = HEAP32[$0>>2]|0;
        $188 = HEAP32[$1>>2]|0;
        $189 = ($187>>>0)<($188>>>0);
        if ($189) {
         $190 = (($187) + 1|0);
         HEAP32[$0>>2] = $190;
         $191 = HEAP8[$187>>0]|0;
         $192 = $191&255;
         $163 = $724;$165 = $723;$719 = $721;$720 = $722;$c$2$i = $192;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        } else {
         $193 = (___shgetc($f)|0);
         $163 = $724;$165 = $723;$719 = $721;$720 = $722;$c$2$i = $193;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
         continue;
        }
       }
       $194 = ($gotdig$2$i$lcssa|0)==(0);
       if ($194) {
        $195 = HEAP32[$1>>2]|0;
        $196 = ($195|0)==(0|0);
        if (!($196)) {
         $197 = HEAP32[$0>>2]|0;
         $198 = (($197) + -1|0);
         HEAP32[$0>>2] = $198;
        }
        $199 = ($pok|0)==(0);
        if ($199) {
         ___shlim($f,0);
        } else {
         if (!($196)) {
          $200 = HEAP32[$0>>2]|0;
          $201 = (($200) + -1|0);
          HEAP32[$0>>2] = $201;
          $202 = ($gotrad$0$i$lcssa|0)==(0);
          if (!($202)) {
           $203 = (($200) + -2|0);
           HEAP32[$0>>2] = $203;
          }
         }
        }
        $204 = (+($sign$0|0));
        $205 = $204 * 0.0;
        $$0 = $205;
        STACKTOP = sp;return (+$$0);
       }
       $206 = ($gotrad$0$i$lcssa|0)==(0);
       $209 = $206 ? $208 : $207;
       $212 = $206 ? $211 : $210;
       $213 = ($211|0)<(0);
       $214 = ($208>>>0)<(8);
       $215 = ($211|0)==(0);
       $216 = $215 & $214;
       $217 = $213 | $216;
       if ($217) {
        $219 = $208;$220 = $211;$x$325$i = $x$0$i$lcssa;
        while(1) {
         $218 = $x$325$i << 4;
         $221 = (_i64Add(($219|0),($220|0),1,0)|0);
         $222 = tempRet0;
         $223 = ($222|0)<(0);
         $224 = ($221>>>0)<(8);
         $225 = ($222|0)==(0);
         $226 = $225 & $224;
         $227 = $223 | $226;
         if ($227) {
          $219 = $221;$220 = $222;$x$325$i = $218;
         } else {
          $x$3$lcssa$i = $218;
          break;
         }
        }
       } else {
        $x$3$lcssa$i = $x$0$i$lcssa;
       }
       $228 = $c$2$lcssa$i | 32;
       $229 = ($228|0)==(112);
       do {
        if ($229) {
         $230 = (_scanexp($f,$pok)|0);
         $231 = tempRet0;
         $232 = ($230|0)==(0);
         $233 = ($231|0)==(-2147483648);
         $234 = $232 & $233;
         if ($234) {
          $235 = ($pok|0)==(0);
          if ($235) {
           ___shlim($f,0);
           $$0 = 0.0;
           STACKTOP = sp;return (+$$0);
          } else {
           $236 = HEAP32[$1>>2]|0;
           $237 = ($236|0)==(0|0);
           if ($237) {
            $248 = 0;$249 = 0;
            break;
           }
           $238 = HEAP32[$0>>2]|0;
           $239 = (($238) + -1|0);
           HEAP32[$0>>2] = $239;
           $248 = 0;$249 = 0;
           break;
          }
         } else {
          $248 = $230;$249 = $231;
         }
        } else {
         $240 = HEAP32[$1>>2]|0;
         $241 = ($240|0)==(0|0);
         if ($241) {
          $248 = 0;$249 = 0;
         } else {
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $248 = 0;$249 = 0;
         }
        }
       } while(0);
       $244 = (_bitshift64Shl(($209|0),($212|0),2)|0);
       $245 = tempRet0;
       $246 = (_i64Add(($244|0),($245|0),-32,-1)|0);
       $247 = tempRet0;
       $250 = (_i64Add(($246|0),($247|0),($248|0),($249|0))|0);
       $251 = tempRet0;
       $252 = ($x$3$lcssa$i|0)==(0);
       if ($252) {
        $253 = (+($sign$0|0));
        $254 = $253 * 0.0;
        $$0 = $254;
        STACKTOP = sp;return (+$$0);
       }
       $255 = (0 - ($emin$0$ph))|0;
       $256 = ($251|0)>(0);
       $257 = ($250>>>0)>($255>>>0);
       $258 = ($251|0)==(0);
       $259 = $258 & $257;
       $260 = $256 | $259;
       if ($260) {
        $261 = (___errno_location()|0);
        HEAP32[$261>>2] = 34;
        $262 = (+($sign$0|0));
        $263 = $262 * 1.7976931348623157E+308;
        $264 = $263 * 1.7976931348623157E+308;
        $$0 = $264;
        STACKTOP = sp;return (+$$0);
       }
       $265 = (($emin$0$ph) + -106)|0;
       $266 = ($265|0)<(0);
       $267 = $266 << 31 >> 31;
       $268 = ($251|0)<($267|0);
       $269 = ($250>>>0)<($265>>>0);
       $270 = ($251|0)==($267|0);
       $271 = $270 & $269;
       $272 = $268 | $271;
       if ($272) {
        $274 = (___errno_location()|0);
        HEAP32[$274>>2] = 34;
        $275 = (+($sign$0|0));
        $276 = $275 * 2.2250738585072014E-308;
        $277 = $276 * 2.2250738585072014E-308;
        $$0 = $277;
        STACKTOP = sp;return (+$$0);
       }
       $273 = ($x$3$lcssa$i|0)>(-1);
       if ($273) {
        $282 = $250;$283 = $251;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
        while(1) {
         $278 = !($y$321$i >= 0.5);
         $279 = $x$420$i << 1;
         if ($278) {
          $$pn$i = $y$321$i;$x$5$i = $279;
         } else {
          $280 = $279 | 1;
          $281 = $y$321$i + -1.0;
          $$pn$i = $281;$x$5$i = $280;
         }
         $y$4$i = $y$321$i + $$pn$i;
         $284 = (_i64Add(($282|0),($283|0),-1,-1)|0);
         $285 = tempRet0;
         $286 = ($x$5$i|0)>(-1);
         if ($286) {
          $282 = $284;$283 = $285;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
         } else {
          $291 = $284;$292 = $285;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
          break;
         }
        }
       } else {
        $291 = $250;$292 = $251;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
       }
       $287 = ($emin$0$ph|0)<(0);
       $288 = $287 << 31 >> 31;
       $289 = (_i64Subtract(32,0,($emin$0$ph|0),($288|0))|0);
       $290 = tempRet0;
       $293 = (_i64Add(($291|0),($292|0),($289|0),($290|0))|0);
       $294 = tempRet0;
       $295 = (0)>($294|0);
       $296 = ($bits$0$ph>>>0)>($293>>>0);
       $297 = (0)==($294|0);
       $298 = $297 & $296;
       $299 = $295 | $298;
       if ($299) {
        $300 = ($293|0)<(0);
        if ($300) {
         $$0711$i = 0;
         label = 124;
        } else {
         $$07$i = $293;
         label = 122;
        }
       } else {
        $$07$i = $bits$0$ph;
        label = 122;
       }
       do {
        if ((label|0) == 122) {
         $301 = ($$07$i|0)<(53);
         if ($301) {
          $$0711$i = $$07$i;
          label = 124;
          break;
         }
         $$pre$i = (+($sign$0|0));
         $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
        }
       } while(0);
       if ((label|0) == 124) {
        $302 = (84 - ($$0711$i))|0;
        $303 = (+_scalbn(1.0,$302));
        $304 = (+($sign$0|0));
        $305 = (+_copysignl($303,$304));
        $$0712$i = $$0711$i;$$pre$phi$iZ2D = $304;$bias$0$i = $305;
       }
       $306 = ($$0712$i|0)<(32);
       $307 = $y$3$lcssa$i != 0.0;
       $or$cond4$i = $307 & $306;
       $308 = $x$4$lcssa$i & 1;
       $309 = ($308|0)==(0);
       $or$cond9$i = $309 & $or$cond4$i;
       $310 = $or$cond9$i&1;
       $x$6$i = (($310) + ($x$4$lcssa$i))|0;
       $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
       $311 = (+($x$6$i>>>0));
       $312 = $$pre$phi$iZ2D * $311;
       $313 = $bias$0$i + $312;
       $314 = $$pre$phi$iZ2D * $y$5$i;
       $315 = $314 + $313;
       $316 = $315 - $bias$0$i;
       $317 = $316 != 0.0;
       if (!($317)) {
        $318 = (___errno_location()|0);
        HEAP32[$318>>2] = 34;
       }
       $319 = (+_scalbnl($316,$291));
       $$0 = $319;
       STACKTOP = sp;return (+$$0);
      } else {
       $c$6 = $c$1$lcssa;
      }
     } while(0);
     $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
     $324 = (0 - ($sum$i))|0;
     $$012$i = $c$6;$gotdig$0$i12 = 0;
     while(1) {
      if ((($$012$i|0) == 46)) {
       $gotdig$0$i12$lcssa230 = $gotdig$0$i12;
       label = 135;
       break;
      } else if (!((($$012$i|0) == 48))) {
       $$2$i = $$012$i;$725 = 0;$726 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
       break;
      }
      $325 = HEAP32[$0>>2]|0;
      $326 = HEAP32[$1>>2]|0;
      $327 = ($325>>>0)<($326>>>0);
      if ($327) {
       $328 = (($325) + 1|0);
       HEAP32[$0>>2] = $328;
       $329 = HEAP8[$325>>0]|0;
       $330 = $329&255;
       $$012$i = $330;$gotdig$0$i12 = 1;
       continue;
      } else {
       $331 = (___shgetc($f)|0);
       $$012$i = $331;$gotdig$0$i12 = 1;
       continue;
      }
     }
     if ((label|0) == 135) {
      $332 = HEAP32[$0>>2]|0;
      $333 = HEAP32[$1>>2]|0;
      $334 = ($332>>>0)<($333>>>0);
      if ($334) {
       $335 = (($332) + 1|0);
       HEAP32[$0>>2] = $335;
       $336 = HEAP8[$332>>0]|0;
       $337 = $336&255;
       $$1$ph$i = $337;
      } else {
       $338 = (___shgetc($f)|0);
       $$1$ph$i = $338;
      }
      $339 = ($$1$ph$i|0)==(48);
      if ($339) {
       $340 = 0;$341 = 0;
       while(1) {
        $342 = (_i64Add(($340|0),($341|0),-1,-1)|0);
        $343 = tempRet0;
        $344 = HEAP32[$0>>2]|0;
        $345 = HEAP32[$1>>2]|0;
        $346 = ($344>>>0)<($345>>>0);
        if ($346) {
         $347 = (($344) + 1|0);
         HEAP32[$0>>2] = $347;
         $348 = HEAP8[$344>>0]|0;
         $349 = $348&255;
         $$1$be$i = $349;
        } else {
         $350 = (___shgetc($f)|0);
         $$1$be$i = $350;
        }
        $351 = ($$1$be$i|0)==(48);
        if ($351) {
         $340 = $342;$341 = $343;
        } else {
         $$2$i = $$1$be$i;$725 = $342;$726 = $343;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
         break;
        }
       }
      } else {
       $$2$i = $$1$ph$i;$725 = 0;$726 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa230;$gotrad$0$i14 = 1;
      }
     }
     HEAP32[$x$i>>2] = 0;
     $352 = (($$2$i) + -48)|0;
     $353 = ($352>>>0)<(10);
     $354 = ($$2$i|0)==(46);
     $or$cond11123$i = $354 | $353;
     L217: do {
      if ($or$cond11123$i) {
       $355 = (($x$i) + 496|0);
       $$3131$i = $$2$i;$358 = 0;$359 = 0;$727 = $354;$728 = $352;$729 = $725;$730 = $726;$gotdig$3127$i = $gotdig$2$i13;$gotrad$1128$i = $gotrad$0$i14;$j$0130$i = 0;$k$0129$i = 0;$lnz$0126$i = 0;
       L219: while(1) {
        do {
         if ($727) {
          $cond$i = ($gotrad$1128$i|0)==(0);
          if ($cond$i) {
           $731 = $358;$732 = $359;$733 = $358;$734 = $359;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = 1;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
          } else {
           $735 = $729;$736 = $730;$737 = $358;$738 = $359;$gotdig$3127$i$lcssa = $gotdig$3127$i;$j$0130$i$lcssa = $j$0130$i;$k$0129$i$lcssa = $k$0129$i;$lnz$0126$i$lcssa = $lnz$0126$i;
           break L219;
          }
         } else {
          $357 = ($k$0129$i|0)<(125);
          $360 = (_i64Add(($358|0),($359|0),1,0)|0);
          $361 = tempRet0;
          $362 = ($$3131$i|0)!=(48);
          if (!($357)) {
           if (!($362)) {
            $731 = $729;$732 = $730;$733 = $360;$734 = $361;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
            break;
           }
           $372 = HEAP32[$355>>2]|0;
           $373 = $372 | 1;
           HEAP32[$355>>2] = $373;
           $731 = $729;$732 = $730;$733 = $360;$734 = $361;$gotdig$4$i = $gotdig$3127$i;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $j$0130$i;$k$2$i = $k$0129$i;$lnz$2$i = $lnz$0126$i;
           break;
          }
          $$lnz$0$i = $362 ? $360 : $lnz$0126$i;
          $363 = ($j$0130$i|0)==(0);
          $364 = (($x$i) + ($k$0129$i<<2)|0);
          if ($363) {
           $storemerge$i = $728;
          } else {
           $365 = HEAP32[$364>>2]|0;
           $366 = ($365*10)|0;
           $367 = (($$3131$i) + -48)|0;
           $368 = (($367) + ($366))|0;
           $storemerge$i = $368;
          }
          HEAP32[$364>>2] = $storemerge$i;
          $369 = (($j$0130$i) + 1)|0;
          $370 = ($369|0)==(9);
          $371 = $370&1;
          $$k$0$i = (($371) + ($k$0129$i))|0;
          $$14$i = $370 ? 0 : $369;
          $731 = $729;$732 = $730;$733 = $360;$734 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1128$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
         }
        } while(0);
        $374 = HEAP32[$0>>2]|0;
        $375 = HEAP32[$1>>2]|0;
        $376 = ($374>>>0)<($375>>>0);
        if ($376) {
         $377 = (($374) + 1|0);
         HEAP32[$0>>2] = $377;
         $378 = HEAP8[$374>>0]|0;
         $379 = $378&255;
         $$3$be$i = $379;
        } else {
         $380 = (___shgetc($f)|0);
         $$3$be$i = $380;
        }
        $381 = (($$3$be$i) + -48)|0;
        $382 = ($381>>>0)<(10);
        $383 = ($$3$be$i|0)==(46);
        $or$cond11$i = $383 | $382;
        if ($or$cond11$i) {
         $$3131$i = $$3$be$i;$358 = $733;$359 = $734;$727 = $383;$728 = $381;$729 = $731;$730 = $732;$gotdig$3127$i = $gotdig$4$i;$gotrad$1128$i = $gotrad$2$i;$j$0130$i = $j$2$i;$k$0129$i = $k$2$i;$lnz$0126$i = $lnz$2$i;
        } else {
         $$3$lcssa$i = $$3$be$i;$385 = $731;$386 = $733;$388 = $732;$389 = $734;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
         label = 158;
         break L217;
        }
       }
       $356 = ($gotdig$3127$i$lcssa|0)!=(0);
       $739 = $737;$740 = $738;$741 = $735;$742 = $736;$743 = $356;$j$078$i = $j$0130$i$lcssa;$k$074$i = $k$0129$i$lcssa;$lnz$068$i = $lnz$0126$i$lcssa;
       label = 166;
      } else {
       $$3$lcssa$i = $$2$i;$385 = $725;$386 = 0;$388 = $726;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
       label = 158;
      }
     } while(0);
     do {
      if ((label|0) == 158) {
       $384 = ($gotrad$1$lcssa$i|0)==(0);
       $387 = $384 ? $386 : $385;
       $390 = $384 ? $389 : $388;
       $391 = ($gotdig$3$lcssa$i|0)!=(0);
       $392 = $$3$lcssa$i | 32;
       $393 = ($392|0)==(101);
       $or$cond16$i = $393 & $391;
       if (!($or$cond16$i)) {
        $408 = ($$3$lcssa$i|0)>(-1);
        if ($408) {
         $739 = $386;$740 = $389;$741 = $387;$742 = $390;$743 = $391;$j$078$i = $j$0$lcssa$i;$k$074$i = $k$0$lcssa$i;$lnz$068$i = $lnz$0$lcssa$i;
         label = 166;
         break;
        } else {
         $744 = $386;$745 = $389;$746 = $391;$747 = $387;$748 = $390;$j$077$i = $j$0$lcssa$i;$k$073$i = $k$0$lcssa$i;$lnz$067$i = $lnz$0$lcssa$i;
         label = 168;
         break;
        }
       }
       $394 = (_scanexp($f,$pok)|0);
       $395 = tempRet0;
       $396 = ($394|0)==(0);
       $397 = ($395|0)==(-2147483648);
       $398 = $396 & $397;
       if ($398) {
        $399 = ($pok|0)==(0);
        if ($399) {
         ___shlim($f,0);
         $$0$i27 = 0.0;
         break;
        }
        $400 = HEAP32[$1>>2]|0;
        $401 = ($400|0)==(0|0);
        if ($401) {
         $404 = 0;$405 = 0;
        } else {
         $402 = HEAP32[$0>>2]|0;
         $403 = (($402) + -1|0);
         HEAP32[$0>>2] = $403;
         $404 = 0;$405 = 0;
        }
       } else {
        $404 = $394;$405 = $395;
       }
       $406 = (_i64Add(($404|0),($405|0),($387|0),($390|0))|0);
       $407 = tempRet0;
       $418 = $406;$420 = $386;$421 = $407;$423 = $389;$j$076$i = $j$0$lcssa$i;$k$072$i = $k$0$lcssa$i;$lnz$066$i = $lnz$0$lcssa$i;
       label = 170;
      }
     } while(0);
     if ((label|0) == 166) {
      $409 = HEAP32[$1>>2]|0;
      $410 = ($409|0)==(0|0);
      if ($410) {
       $744 = $739;$745 = $740;$746 = $743;$747 = $741;$748 = $742;$j$077$i = $j$078$i;$k$073$i = $k$074$i;$lnz$067$i = $lnz$068$i;
       label = 168;
      } else {
       $411 = HEAP32[$0>>2]|0;
       $412 = (($411) + -1|0);
       HEAP32[$0>>2] = $412;
       if ($743) {
        $418 = $741;$420 = $739;$421 = $742;$423 = $740;$j$076$i = $j$078$i;$k$072$i = $k$074$i;$lnz$066$i = $lnz$068$i;
        label = 170;
       } else {
        label = 169;
       }
      }
     }
     if ((label|0) == 168) {
      if ($746) {
       $418 = $747;$420 = $744;$421 = $748;$423 = $745;$j$076$i = $j$077$i;$k$072$i = $k$073$i;$lnz$066$i = $lnz$067$i;
       label = 170;
      } else {
       label = 169;
      }
     }
     do {
      if ((label|0) == 169) {
       $413 = (___errno_location()|0);
       HEAP32[$413>>2] = 22;
       ___shlim($f,0);
       $$0$i27 = 0.0;
      }
      else if ((label|0) == 170) {
       $414 = HEAP32[$x$i>>2]|0;
       $415 = ($414|0)==(0);
       if ($415) {
        $416 = (+($sign$0|0));
        $417 = $416 * 0.0;
        $$0$i27 = $417;
        break;
       }
       $419 = ($418|0)==($420|0);
       $422 = ($421|0)==($423|0);
       $424 = $419 & $422;
       $425 = ($423|0)<(0);
       $426 = ($420>>>0)<(10);
       $427 = ($423|0)==(0);
       $428 = $427 & $426;
       $429 = $425 | $428;
       $or$cond$i17 = $429 & $424;
       if ($or$cond$i17) {
        $430 = ($bits$0$ph>>>0)>(30);
        $431 = $414 >>> $bits$0$ph;
        $432 = ($431|0)==(0);
        $or$cond18$i = $430 | $432;
        if ($or$cond18$i) {
         $433 = (+($sign$0|0));
         $434 = (+($414>>>0));
         $435 = $433 * $434;
         $$0$i27 = $435;
         break;
        }
       }
       $436 = (($emin$0$ph|0) / -2)&-1;
       $437 = ($436|0)<(0);
       $438 = $437 << 31 >> 31;
       $439 = ($421|0)>($438|0);
       $440 = ($418>>>0)>($436>>>0);
       $441 = ($421|0)==($438|0);
       $442 = $441 & $440;
       $443 = $439 | $442;
       if ($443) {
        $444 = (___errno_location()|0);
        HEAP32[$444>>2] = 34;
        $445 = (+($sign$0|0));
        $446 = $445 * 1.7976931348623157E+308;
        $447 = $446 * 1.7976931348623157E+308;
        $$0$i27 = $447;
        break;
       }
       $448 = (($emin$0$ph) + -106)|0;
       $449 = ($448|0)<(0);
       $450 = $449 << 31 >> 31;
       $451 = ($421|0)<($450|0);
       $452 = ($418>>>0)<($448>>>0);
       $453 = ($421|0)==($450|0);
       $454 = $453 & $452;
       $455 = $451 | $454;
       if ($455) {
        $456 = (___errno_location()|0);
        HEAP32[$456>>2] = 34;
        $457 = (+($sign$0|0));
        $458 = $457 * 2.2250738585072014E-308;
        $459 = $458 * 2.2250738585072014E-308;
        $$0$i27 = $459;
        break;
       }
       $460 = ($j$076$i|0)==(0);
       if ($460) {
        $k$3$i = $k$072$i;
       } else {
        $461 = ($j$076$i|0)<(9);
        if ($461) {
         $462 = (($x$i) + ($k$072$i<<2)|0);
         $$promoted$i = HEAP32[$462>>2]|0;
         $464 = $$promoted$i;$j$3119$i = $j$076$i;
         while(1) {
          $463 = ($464*10)|0;
          $465 = (($j$3119$i) + 1)|0;
          $exitcond175$i = ($j$3119$i|0)==(8);
          if ($exitcond175$i) {
           $$lcssa222 = $463;
           break;
          } else {
           $464 = $463;$j$3119$i = $465;
          }
         }
         HEAP32[$462>>2] = $$lcssa222;
        }
        $466 = (($k$072$i) + 1)|0;
        $k$3$i = $466;
       }
       $467 = ($lnz$066$i|0)<(9);
       if ($467) {
        $468 = ($lnz$066$i|0)<=($418|0);
        $469 = ($418|0)<(18);
        $or$cond3$i = $468 & $469;
        if ($or$cond3$i) {
         $470 = ($418|0)==(9);
         if ($470) {
          $471 = (+($sign$0|0));
          $472 = HEAP32[$x$i>>2]|0;
          $473 = (+($472>>>0));
          $474 = $471 * $473;
          $$0$i27 = $474;
          break;
         }
         $475 = ($418|0)<(9);
         if ($475) {
          $476 = (+($sign$0|0));
          $477 = HEAP32[$x$i>>2]|0;
          $478 = (+($477>>>0));
          $479 = $476 * $478;
          $480 = (8 - ($418))|0;
          $481 = (627584 + ($480<<2)|0);
          $482 = HEAP32[$481>>2]|0;
          $483 = (+($482|0));
          $484 = $479 / $483;
          $$0$i27 = $484;
          break;
         }
         $$neg41$i = (($bits$0$ph) + 27)|0;
         $485 = Math_imul($418, -3)|0;
         $486 = (($$neg41$i) + ($485))|0;
         $487 = ($486|0)>(30);
         $$pre$i18 = HEAP32[$x$i>>2]|0;
         $488 = $$pre$i18 >>> $486;
         $489 = ($488|0)==(0);
         $or$cond191$i = $487 | $489;
         if ($or$cond191$i) {
          $490 = (+($sign$0|0));
          $491 = (+($$pre$i18>>>0));
          $492 = $490 * $491;
          $493 = (($418) + -10)|0;
          $494 = (627584 + ($493<<2)|0);
          $495 = HEAP32[$494>>2]|0;
          $496 = (+($495|0));
          $497 = $492 * $496;
          $$0$i27 = $497;
          break;
         }
        }
       }
       $498 = (($418|0) % 9)&-1;
       $499 = ($498|0)==(0);
       if ($499) {
        $a$2$ph47$i = 0;$e2$0$ph$i = 0;$rp$2$ph45$i = $418;$z$1$ph46$i = $k$3$i;
       } else {
        $500 = ($418|0)>(-1);
        $501 = (($498) + 9)|0;
        $502 = $500 ? $498 : $501;
        $503 = (8 - ($502))|0;
        $504 = (627584 + ($503<<2)|0);
        $505 = HEAP32[$504>>2]|0;
        $506 = ($k$3$i|0)==(0);
        if ($506) {
         $a$0$lcssa186$i = 0;$rp$0$lcssa187$i = $418;$z$0$i = 0;
        } else {
         $507 = (1000000000 / ($505|0))&-1;
         $a$0110$i = 0;$carry$0112$i = 0;$k$4111$i = 0;$rp$0109$i = $418;
         while(1) {
          $508 = (($x$i) + ($k$4111$i<<2)|0);
          $509 = HEAP32[$508>>2]|0;
          $510 = (($509>>>0) % ($505>>>0))&-1;
          $511 = (($509>>>0) / ($505>>>0))&-1;
          $512 = (($511) + ($carry$0112$i))|0;
          HEAP32[$508>>2] = $512;
          $513 = Math_imul($510, $507)|0;
          $514 = ($k$4111$i|0)==($a$0110$i|0);
          $515 = ($512|0)==(0);
          $or$cond19$i = $514 & $515;
          $516 = (($k$4111$i) + 1)|0;
          if ($or$cond19$i) {
           $517 = $516 & 127;
           $518 = (($rp$0109$i) + -9)|0;
           $a$1$i = $517;$rp$1$i19 = $518;
          } else {
           $a$1$i = $a$0110$i;$rp$1$i19 = $rp$0109$i;
          }
          $519 = ($516|0)==($k$3$i|0);
          if ($519) {
           $$lcssa221 = $513;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
           break;
          } else {
           $a$0110$i = $a$1$i;$carry$0112$i = $513;$k$4111$i = $516;$rp$0109$i = $rp$1$i19;
          }
         }
         $520 = ($$lcssa221|0)==(0);
         if ($520) {
          $a$0$lcssa186$i = $a$1$i$lcssa;$rp$0$lcssa187$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
         } else {
          $521 = (($k$3$i) + 1)|0;
          $522 = (($x$i) + ($k$3$i<<2)|0);
          HEAP32[$522>>2] = $$lcssa221;
          $a$0$lcssa186$i = $a$1$i$lcssa;$rp$0$lcssa187$i = $rp$1$i19$lcssa;$z$0$i = $521;
         }
        }
        $523 = (9 - ($502))|0;
        $524 = (($523) + ($rp$0$lcssa187$i))|0;
        $a$2$ph47$i = $a$0$lcssa186$i;$e2$0$ph$i = 0;$rp$2$ph45$i = $524;$z$1$ph46$i = $z$0$i;
       }
       L302: while(1) {
        $525 = ($rp$2$ph45$i|0)<(18);
        $526 = (($x$i) + ($a$2$ph47$i<<2)|0);
        if ($525) {
         $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph46$i;
         while(1) {
          $528 = (($z$1$us$i) + 127)|0;
          $carry1$0$us$i = 0;$k$5$in$us$i = $528;$z$2$us$i = $z$1$us$i;
          while(1) {
           $k$5$us$i = $k$5$in$us$i & 127;
           $529 = (($x$i) + ($k$5$us$i<<2)|0);
           $530 = HEAP32[$529>>2]|0;
           $531 = (_bitshift64Shl(($530|0),0,29)|0);
           $532 = tempRet0;
           $533 = (_i64Add(($531|0),($532|0),($carry1$0$us$i|0),0)|0);
           $534 = tempRet0;
           $535 = ($534>>>0)>(0);
           $536 = ($533>>>0)>(1000000000);
           $537 = ($534|0)==(0);
           $538 = $537 & $536;
           $539 = $535 | $538;
           if ($539) {
            $540 = (___udivdi3(($533|0),($534|0),1000000000,0)|0);
            $541 = tempRet0;
            $542 = (___uremdi3(($533|0),($534|0),1000000000,0)|0);
            $543 = tempRet0;
            $$sink$off0$us$i = $542;$carry1$1$us$i = $540;
           } else {
            $$sink$off0$us$i = $533;$carry1$1$us$i = 0;
           }
           HEAP32[$529>>2] = $$sink$off0$us$i;
           $544 = (($z$2$us$i) + 127)|0;
           $545 = $544 & 127;
           $546 = ($k$5$us$i|0)!=($545|0);
           $547 = ($k$5$us$i|0)==($a$2$ph47$i|0);
           $or$cond20$us$i = $546 | $547;
           if ($or$cond20$us$i) {
            $z$3$us$i = $z$2$us$i;
           } else {
            $548 = ($$sink$off0$us$i|0)==(0);
            $k$5$z$2$us$i = $548 ? $k$5$us$i : $z$2$us$i;
            $z$3$us$i = $k$5$z$2$us$i;
           }
           $549 = (($k$5$us$i) + -1)|0;
           if ($547) {
            $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
            break;
           } else {
            $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $549;$z$2$us$i = $z$3$us$i;
           }
          }
          $550 = (($e2$0$us$i) + -29)|0;
          $551 = ($carry1$1$us$i$lcssa|0)==(0);
          if ($551) {
           $e2$0$us$i = $550;$z$1$us$i = $z$3$us$i$lcssa;
          } else {
           $$lcssa59$i = $550;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
           break;
          }
         }
        } else {
         $527 = ($rp$2$ph45$i|0)==(18);
         if ($527) {
          $e2$0$us93$i = $e2$0$ph$i;$z$1$us94$i = $z$1$ph46$i;
         } else {
          $a$3$ph$i = $a$2$ph47$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph43$i = $rp$2$ph45$i;$z$5$ph$i = $z$1$ph46$i;
          break;
         }
         while(1) {
          $552 = HEAP32[$526>>2]|0;
          $553 = ($552>>>0)<(9007199);
          if (!($553)) {
           $a$3$ph$i = $a$2$ph47$i;$e2$1$ph$i = $e2$0$us93$i;$rp$3$ph43$i = 18;$z$5$ph$i = $z$1$us94$i;
           break L302;
          }
          $554 = (($z$1$us94$i) + 127)|0;
          $carry1$0$us98$i = 0;$k$5$in$us97$i = $554;$z$2$us96$i = $z$1$us94$i;
          while(1) {
           $k$5$us99$i = $k$5$in$us97$i & 127;
           $555 = (($x$i) + ($k$5$us99$i<<2)|0);
           $556 = HEAP32[$555>>2]|0;
           $557 = (_bitshift64Shl(($556|0),0,29)|0);
           $558 = tempRet0;
           $559 = (_i64Add(($557|0),($558|0),($carry1$0$us98$i|0),0)|0);
           $560 = tempRet0;
           $561 = ($560>>>0)>(0);
           $562 = ($559>>>0)>(1000000000);
           $563 = ($560|0)==(0);
           $564 = $563 & $562;
           $565 = $561 | $564;
           if ($565) {
            $566 = (___udivdi3(($559|0),($560|0),1000000000,0)|0);
            $567 = tempRet0;
            $568 = (___uremdi3(($559|0),($560|0),1000000000,0)|0);
            $569 = tempRet0;
            $$sink$off0$us102$i = $568;$carry1$1$us103$i = $566;
           } else {
            $$sink$off0$us102$i = $559;$carry1$1$us103$i = 0;
           }
           HEAP32[$555>>2] = $$sink$off0$us102$i;
           $570 = (($z$2$us96$i) + 127)|0;
           $571 = $570 & 127;
           $572 = ($k$5$us99$i|0)!=($571|0);
           $573 = ($k$5$us99$i|0)==($a$2$ph47$i|0);
           $or$cond20$us104$i = $572 | $573;
           if ($or$cond20$us104$i) {
            $z$3$us106$i = $z$2$us96$i;
           } else {
            $574 = ($$sink$off0$us102$i|0)==(0);
            $k$5$z$2$us105$i = $574 ? $k$5$us99$i : $z$2$us96$i;
            $z$3$us106$i = $k$5$z$2$us105$i;
           }
           $575 = (($k$5$us99$i) + -1)|0;
           if ($573) {
            $carry1$1$us103$i$lcssa = $carry1$1$us103$i;$z$3$us106$i$lcssa = $z$3$us106$i;
            break;
           } else {
            $carry1$0$us98$i = $carry1$1$us103$i;$k$5$in$us97$i = $575;$z$2$us96$i = $z$3$us106$i;
           }
          }
          $576 = (($e2$0$us93$i) + -29)|0;
          $577 = ($carry1$1$us103$i$lcssa|0)==(0);
          if ($577) {
           $e2$0$us93$i = $576;$z$1$us94$i = $z$3$us106$i$lcssa;
          } else {
           $$lcssa59$i = $576;$carry1$1$lcssa$lcssa$i = $carry1$1$us103$i$lcssa;$z$3$lcssa$lcssa$i = $z$3$us106$i$lcssa;
           break;
          }
         }
        }
        $578 = (($rp$2$ph45$i) + 9)|0;
        $579 = (($a$2$ph47$i) + 127)|0;
        $580 = $579 & 127;
        $581 = ($580|0)==($z$3$lcssa$lcssa$i|0);
        if ($581) {
         $582 = (($z$3$lcssa$lcssa$i) + 127)|0;
         $583 = $582 & 127;
         $584 = (($x$i) + ($583<<2)|0);
         $585 = HEAP32[$584>>2]|0;
         $586 = (($z$3$lcssa$lcssa$i) + 126)|0;
         $587 = $586 & 127;
         $588 = (($x$i) + ($587<<2)|0);
         $589 = HEAP32[$588>>2]|0;
         $590 = $589 | $585;
         HEAP32[$588>>2] = $590;
         $z$4$i = $583;
        } else {
         $z$4$i = $z$3$lcssa$lcssa$i;
        }
        $591 = (($x$i) + ($580<<2)|0);
        HEAP32[$591>>2] = $carry1$1$lcssa$lcssa$i;
        $a$2$ph47$i = $580;$e2$0$ph$i = $$lcssa59$i;$rp$2$ph45$i = $578;$z$1$ph46$i = $z$4$i;
       }
       L333: while(1) {
        $622 = (($z$5$ph$i) + 1)|0;
        $619 = $622 & 127;
        $623 = (($z$5$ph$i) + 127)|0;
        $624 = $623 & 127;
        $625 = (($x$i) + ($624<<2)|0);
        $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph43$i;
        while(1) {
         $$old$i = ($rp$3$i$ph|0)==(18);
         $626 = ($rp$3$i$ph|0)>(27);
         $$21$i = $626 ? 9 : 1;
         $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
         while(1) {
          $592 = $a$3$i & 127;
          $593 = ($592|0)==($z$5$ph$i|0);
          do {
           if ($593) {
            label = 226;
           } else {
            $594 = (($x$i) + ($592<<2)|0);
            $595 = HEAP32[$594>>2]|0;
            $596 = ($595>>>0)<(9007199);
            if ($596) {
             label = 226;
             break;
            }
            $597 = ($595>>>0)>(9007199);
            if ($597) {
             break;
            }
            $598 = (($a$3$i) + 1)|0;
            $599 = $598 & 127;
            $600 = ($599|0)==($z$5$ph$i|0);
            if ($600) {
             label = 226;
             break;
            }
            $706 = (($x$i) + ($599<<2)|0);
            $707 = HEAP32[$706>>2]|0;
            $708 = ($707>>>0)<(254740991);
            if ($708) {
             label = 226;
             break;
            }
            $709 = ($707>>>0)<(254740992);
            $or$cond192$i = $$old$i & $709;
            if ($or$cond192$i) {
             $632 = $592;$a$3$i200 = $a$3$i;$e2$1$i197 = $e2$1$i;$z$7$i = $z$5$ph$i;
             break L333;
            }
           }
          } while(0);
          if ((label|0) == 226) {
           label = 0;
           if ($$old$i) {
            label = 227;
            break L333;
           }
          }
          $601 = (($$21$i) + ($e2$1$i))|0;
          $602 = ($a$3$i|0)==($z$5$ph$i|0);
          if ($602) {
           $a$3$i = $z$5$ph$i;$e2$1$i = $601;
          } else {
           $$lcssa207 = $601;$a$3$i$lcssa199 = $a$3$i;
           break;
          }
         }
         $603 = 1 << $$21$i;
         $604 = (($603) + -1)|0;
         $605 = 1000000000 >>> $$21$i;
         $a$487$i = $a$3$i$lcssa199;$carry3$090$i = 0;$k$688$i = $a$3$i$lcssa199;$rp$486$i = $rp$3$i$ph;
         while(1) {
          $606 = (($x$i) + ($k$688$i<<2)|0);
          $607 = HEAP32[$606>>2]|0;
          $608 = $607 & $604;
          $609 = $607 >>> $$21$i;
          $610 = (($609) + ($carry3$090$i))|0;
          HEAP32[$606>>2] = $610;
          $611 = Math_imul($608, $605)|0;
          $612 = ($k$688$i|0)==($a$487$i|0);
          $613 = ($610|0)==(0);
          $or$cond22$i = $612 & $613;
          $614 = (($k$688$i) + 1)|0;
          $615 = $614 & 127;
          $616 = (($rp$486$i) + -9)|0;
          $rp$5$i = $or$cond22$i ? $616 : $rp$486$i;
          $a$5$i = $or$cond22$i ? $615 : $a$487$i;
          $617 = ($615|0)==($z$5$ph$i|0);
          if ($617) {
           $$lcssa208 = $611;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
           break;
          } else {
           $a$487$i = $a$5$i;$carry3$090$i = $611;$k$688$i = $615;$rp$486$i = $rp$5$i;
          }
         }
         $618 = ($$lcssa208|0)==(0);
         if ($618) {
          $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa207;$rp$3$i$ph = $rp$5$i$lcssa;
          continue;
         }
         $620 = ($619|0)==($a$5$i$lcssa|0);
         if (!($620)) {
          $$lcssa207$lcssa = $$lcssa207;$$lcssa208$lcssa = $$lcssa208;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
          break;
         }
         $627 = HEAP32[$625>>2]|0;
         $628 = $627 | 1;
         HEAP32[$625>>2] = $628;
         $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa207;$rp$3$i$ph = $rp$5$i$lcssa;
        }
        $621 = (($x$i) + ($z$5$ph$i<<2)|0);
        HEAP32[$621>>2] = $$lcssa208$lcssa;
        $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa207$lcssa;$rp$3$ph43$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $619;
       }
       if ((label|0) == 227) {
        if ($593) {
         $629 = (($619) + -1)|0;
         $630 = (($x$i) + ($629<<2)|0);
         HEAP32[$630>>2] = 0;
         $632 = $z$5$ph$i;$a$3$i200 = $a$3$i;$e2$1$i197 = $e2$1$i;$z$7$i = $619;
        } else {
         $632 = $592;$a$3$i200 = $a$3$i;$e2$1$i197 = $e2$1$i;$z$7$i = $z$5$ph$i;
        }
       }
       $631 = (($x$i) + ($632<<2)|0);
       $633 = HEAP32[$631>>2]|0;
       $634 = (+($633>>>0));
       $635 = (($a$3$i200) + 1)|0;
       $636 = $635 & 127;
       $637 = ($636|0)==($z$7$i|0);
       if ($637) {
        $696 = (($z$7$i) + 1)|0;
        $697 = $696 & 127;
        $698 = (($697) + -1)|0;
        $699 = (($x$i) + ($698<<2)|0);
        HEAP32[$699>>2] = 0;
        $z$7$1$i = $697;
       } else {
        $z$7$1$i = $z$7$i;
       }
       $700 = $634 * 1.0E+9;
       $701 = (($x$i) + ($636<<2)|0);
       $702 = HEAP32[$701>>2]|0;
       $703 = (+($702>>>0));
       $704 = $700 + $703;
       $661 = (+($sign$0|0));
       $643 = $661 * $704;
       $681 = (($e2$1$i197) + 53)|0;
       $638 = (($681) - ($emin$0$ph))|0;
       $705 = ($638|0)<($bits$0$ph|0);
       if ($705) {
        $639 = ($638|0)<(0);
        if ($639) {
         $$01335$i = 0;$denormal$034$i = 1;
         label = 241;
        } else {
         $$013$i = $638;$denormal$0$i = 1;
         label = 240;
        }
       } else {
        $$013$i = $bits$0$ph;$denormal$0$i = 0;
        label = 240;
       }
       if ((label|0) == 240) {
        $640 = ($$013$i|0)<(53);
        if ($640) {
         $$01335$i = $$013$i;$denormal$034$i = $denormal$0$i;
         label = 241;
        } else {
         $$01336$i = $$013$i;$bias$0$i24 = 0.0;$denormal$033$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $643;
        }
       }
       if ((label|0) == 241) {
        $641 = (105 - ($$01335$i))|0;
        $642 = (+_scalbn(1.0,$641));
        $644 = (+_copysignl($642,$643));
        $645 = (53 - ($$01335$i))|0;
        $646 = (+_scalbn(1.0,$645));
        $647 = (+_fmodl($643,$646));
        $648 = $643 - $647;
        $649 = $644 + $648;
        $$01336$i = $$01335$i;$bias$0$i24 = $644;$denormal$033$i = $denormal$034$i;$frac$0$i = $647;$y$1$i23 = $649;
       }
       $650 = (($a$3$i200) + 2)|0;
       $651 = $650 & 127;
       $652 = ($651|0)==($z$7$1$i|0);
       do {
        if ($652) {
         $frac$2$i = $frac$0$i;
        } else {
         $653 = (($x$i) + ($651<<2)|0);
         $654 = HEAP32[$653>>2]|0;
         $655 = ($654>>>0)<(500000000);
         do {
          if ($655) {
           $656 = ($654|0)==(0);
           if ($656) {
            $657 = (($a$3$i200) + 3)|0;
            $658 = $657 & 127;
            $659 = ($658|0)==($z$7$1$i|0);
            if ($659) {
             $frac$1$i = $frac$0$i;
             break;
            }
           }
           $660 = $661 * 0.25;
           $662 = $660 + $frac$0$i;
           $frac$1$i = $662;
          } else {
           $663 = ($654>>>0)>(500000000);
           if ($663) {
            $664 = $661 * 0.75;
            $665 = $664 + $frac$0$i;
            $frac$1$i = $665;
            break;
           }
           $666 = (($a$3$i200) + 3)|0;
           $667 = $666 & 127;
           $668 = ($667|0)==($z$7$1$i|0);
           if ($668) {
            $669 = $661 * 0.5;
            $670 = $669 + $frac$0$i;
            $frac$1$i = $670;
            break;
           } else {
            $671 = $661 * 0.75;
            $672 = $671 + $frac$0$i;
            $frac$1$i = $672;
            break;
           }
          }
         } while(0);
         $673 = (53 - ($$01336$i))|0;
         $674 = ($673|0)>(1);
         if (!($674)) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $675 = (+_fmodl($frac$1$i,1.0));
         $676 = $675 != 0.0;
         if ($676) {
          $frac$2$i = $frac$1$i;
          break;
         }
         $677 = $frac$1$i + 1.0;
         $frac$2$i = $677;
        }
       } while(0);
       $678 = $y$1$i23 + $frac$2$i;
       $679 = $678 - $bias$0$i24;
       $680 = $681 & 2147483647;
       $682 = (-2 - ($sum$i))|0;
       $683 = ($680|0)>($682|0);
       do {
        if ($683) {
         $684 = (+Math_abs((+$679)));
         $685 = !($684 >= 9007199254740992.0);
         if ($685) {
          $denormal$2$i = $denormal$033$i;$e2$2$i = $e2$1$i197;$y$2$i25 = $679;
         } else {
          $686 = ($denormal$033$i|0)!=(0);
          $687 = ($$01336$i|0)==($638|0);
          $or$cond23$i = $687 & $686;
          $denormal$1$i = $or$cond23$i ? 0 : $denormal$033$i;
          $688 = $679 * 0.5;
          $689 = (($e2$1$i197) + 1)|0;
          $denormal$2$i = $denormal$1$i;$e2$2$i = $689;$y$2$i25 = $688;
         }
         $690 = (($e2$2$i) + 50)|0;
         $691 = ($690|0)>($324|0);
         if (!($691)) {
          $692 = ($denormal$2$i|0)!=(0);
          $693 = $frac$2$i != 0.0;
          $or$cond9$i26 = $693 & $692;
          if (!($or$cond9$i26)) {
           $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
           break;
          }
         }
         $694 = (___errno_location()|0);
         HEAP32[$694>>2] = 34;
         $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        } else {
         $e2$3$i = $e2$1$i197;$y$3$i = $679;
        }
       } while(0);
       $695 = (+_scalbnl($y$3$i,$e2$3$i));
       $$0$i27 = $695;
      }
     } while(0);
     $$0 = $$0$i27;
     STACKTOP = sp;return (+$$0);
    }
   } while(0);
   $103 = HEAP32[$1>>2]|0;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    $105 = HEAP32[$0>>2]|0;
    $106 = (($105) + -1|0);
    HEAP32[$0>>2] = $106;
   }
   $107 = (___errno_location()|0);
   HEAP32[$107>>2] = 22;
   ___shlim($f,0);
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _exp2($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = ($2>>>0)>(1083174911);
 do {
  if ($3) {
   $4 = ($2>>>0)>(1083179007);
   $5 = ($1|0)>(-1);
   $6 = ($0>>>0)>(4294967295);
   $7 = ($1|0)==(-1);
   $8 = $7 & $6;
   $9 = $5 | $8;
   $or$cond = $9 & $4;
   if ($or$cond) {
    $10 = $x * 8.9884656743115795E+307;
    $$0 = $10;
    STACKTOP = sp;return (+$$0);
   }
   $11 = ($2>>>0)>(2146435071);
   if ($11) {
    $12 = -1.0 / $x;
    $$0 = $12;
    STACKTOP = sp;return (+$$0);
   }
   $13 = ($1|0)<(0);
   if ($13) {
    $14 = !($x <= -1075.0);
    if ($14) {
     $17 = $x + -4503599627370496.0;
     $18 = $17 + 4503599627370496.0;
     $19 = $18 != $x;
     if (!($19)) {
      break;
     }
     $20 = -1.4012984643248171E-45 / $x;
     $21 = $20;
     HEAPF32[$__x>>2] = $21;
     break;
    } else {
     $15 = -1.4012984643248171E-45 / $x;
     $16 = $15;
     HEAPF32[$__x>>2] = $16;
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
   }
  } else {
   $22 = ($2>>>0)<(1016070144);
   if ($22) {
    $23 = $x + 1.0;
    $$0 = $23;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 $24 = $x + 26388279066624.0;
 HEAPF64[tempDoublePtr>>3] = $24;$25 = HEAP32[tempDoublePtr>>2]|0;
 $26 = HEAP32[tempDoublePtr+4>>2]|0;
 $27 = (($25) + 128)|0;
 $28 = $27 & -256;
 $29 = (($28|0) / 256)&-1;
 $30 = $24 + -26388279066624.0;
 $31 = $x - $30;
 $32 = $27 << 1;
 $33 = $32 & 510;
 $34 = (627616 + ($33<<3)|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $33 | 1;
 $37 = (627616 + ($36<<3)|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $31 - $38;
 $40 = $35 * $39;
 $41 = $39 * 0.0013333559164630223;
 $42 = $41 + 0.0096181298421260663;
 $43 = $39 * $42;
 $44 = $43 + 0.055504108664821403;
 $45 = $39 * $44;
 $46 = $45 + 0.2402265069591;
 $47 = $39 * $46;
 $48 = $47 + 0.69314718055994529;
 $49 = $40 * $48;
 $50 = $35 + $49;
 $51 = (+_scalbn($50,$29));
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0;
 var $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $__x = 0;
 var $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, $y$0 = 0.0, $y$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 $3 = (_bitshift64Lshr(($0|0),($1|0),63)|0);
 $4 = tempRet0;
 $5 = ($2>>>0)>(1078159481);
 do {
  if ($5) {
   $6 = $1 & 2147483647;
   $7 = ($6>>>0)>(2146435072);
   $8 = ($0>>>0)>(0);
   $9 = ($6|0)==(2146435072);
   $10 = $9 & $8;
   $11 = $7 | $10;
   if ($11) {
    $$0 = $x;
    STACKTOP = sp;return (+$$0);
   }
   $12 = ($3|0)==(0);
   if (!($12)) {
    $$0 = -1.0;
    STACKTOP = sp;return (+$$0);
   }
   $13 = $x > 709.78271289338397;
   if ($13) {
    $14 = $x * 8.9884656743115795E+307;
    $$0 = $14;
    STACKTOP = sp;return (+$$0);
   } else {
    label = 11;
   }
  } else {
   $15 = ($2>>>0)>(1071001154);
   if ($15) {
    $16 = ($2>>>0)<(1072734898);
    if (!($16)) {
     label = 11;
     break;
    }
    $17 = ($3|0)==(0);
    if ($17) {
     $18 = $x + -0.69314718036912382;
     $hi$0 = $18;$k$0 = 1;$lo$0 = 1.9082149292705877E-10;
     label = 12;
     break;
    } else {
     $19 = $x + 0.69314718036912382;
     $hi$0 = $19;$k$0 = -1;$lo$0 = -1.9082149292705877E-10;
     label = 12;
     break;
    }
   }
   $32 = ($2>>>0)<(1016070144);
   if ($32) {
    $33 = ($2>>>0)<(1048576);
    if (!($33)) {
     $$0 = $x;
     STACKTOP = sp;return (+$$0);
    }
    $34 = $x;
    HEAPF32[$__x>>2] = $34;
    $$0 = $x;
    STACKTOP = sp;return (+$$0);
   } else {
    $$02 = $x;$c$0 = 0.0;$k$1 = 0;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $20 = $x * 1.4426950408889634;
  $21 = ($3|0)!=(0);
  $22 = $21 ? -0.5 : 0.5;
  $23 = $20 + $22;
  $24 = (~~(($23)));
  $25 = (+($24|0));
  $26 = $25 * 0.69314718036912382;
  $27 = $x - $26;
  $28 = $25 * 1.9082149292705877E-10;
  $hi$0 = $27;$k$0 = $24;$lo$0 = $28;
  label = 12;
 }
 if ((label|0) == 12) {
  $29 = $hi$0 - $lo$0;
  $30 = $hi$0 - $29;
  $31 = $30 - $lo$0;
  $$02 = $29;$c$0 = $31;$k$1 = $k$0;
 }
 $35 = $$02 * 0.5;
 $36 = $$02 * $35;
 $37 = $36 * 2.0109921818362437E-7;
 $38 = 4.0082178273293624E-6 - $37;
 $39 = $36 * $38;
 $40 = $39 + -7.9365075786748794E-5;
 $41 = $36 * $40;
 $42 = $41 + 0.0015873015872548146;
 $43 = $36 * $42;
 $44 = $43 + -0.033333333333333132;
 $45 = $36 * $44;
 $46 = $45 + 1.0;
 $47 = $35 * $46;
 $48 = 3.0 - $47;
 $49 = $46 - $48;
 $50 = $$02 * $48;
 $51 = 6.0 - $50;
 $52 = $49 / $51;
 $53 = $36 * $52;
 $54 = ($k$1|0)==(0);
 if ($54) {
  $55 = $$02 * $53;
  $56 = $55 - $36;
  $57 = $$02 - $56;
  $$0 = $57;
  STACKTOP = sp;return (+$$0);
 }
 $58 = $53 - $c$0;
 $59 = $$02 * $58;
 $60 = $59 - $c$0;
 $61 = $60 - $36;
 if ((($k$1|0) == -1)) {
  $62 = $$02 - $61;
  $63 = $62 * 0.5;
  $64 = $63 + -0.5;
  $$0 = $64;
  STACKTOP = sp;return (+$$0);
 } else if ((($k$1|0) == 1)) {
  $65 = $$02 < -0.25;
  if ($65) {
   $66 = $$02 + 0.5;
   $67 = $61 - $66;
   $68 = $67 * -2.0;
   $$0 = $68;
   STACKTOP = sp;return (+$$0);
  } else {
   $69 = $$02 - $61;
   $70 = $69 * 2.0;
   $71 = $70 + 1.0;
   $$0 = $71;
   STACKTOP = sp;return (+$$0);
  }
 } else {
  $72 = (($k$1) + 1023)|0;
  $73 = (_bitshift64Shl(($72|0),0,52)|0);
  $74 = tempRet0;
  HEAP32[tempDoublePtr>>2] = $73;HEAP32[tempDoublePtr+4>>2] = $74;$75 = +HEAPF64[tempDoublePtr>>3];
  $76 = ($k$1>>>0)>(56);
  if ($76) {
   $77 = $$02 - $61;
   $78 = $77 + 1.0;
   $79 = ($k$1|0)==(1024);
   if ($79) {
    $80 = $78 * 2.0;
    $81 = $80 * 8.9884656743115795E+307;
    $y$0 = $81;
   } else {
    $82 = $75 * $78;
    $y$0 = $82;
   }
   $83 = $y$0 + -1.0;
   $$0 = $83;
   STACKTOP = sp;return (+$$0);
  } else {
   $84 = (1023 - ($k$1))|0;
   $85 = (_bitshift64Shl(($84|0),0,52)|0);
   $86 = tempRet0;
   $87 = ($k$1|0)<(20);
   if ($87) {
    $88 = $$02 - $61;
    HEAP32[tempDoublePtr>>2] = $85;HEAP32[tempDoublePtr+4>>2] = $86;$89 = +HEAPF64[tempDoublePtr>>3];
    $90 = 1.0 - $89;
    $91 = $90 + $88;
    $$pn = $91;
   } else {
    HEAP32[tempDoublePtr>>2] = $85;HEAP32[tempDoublePtr+4>>2] = $86;$92 = +HEAPF64[tempDoublePtr>>3];
    $93 = $92 + $61;
    $94 = $$02 - $93;
    $95 = $94 + 1.0;
    $$pn = $95;
   }
   $y$1 = $75 * $$pn;
   $$0 = $y$1;
   STACKTOP = sp;return (+$$0);
  }
 }
 return +(0.0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0;
 var $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L27: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $95 = ($94|0)==($85|0);
       $97 = ($96|0)==($86|0);
       $98 = $95 & $97;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $94;$101 = $96;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
      } else {
       $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L27;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $114 = ($113|0)==($85|0);
    $116 = ($115|0)==($86|0);
    $117 = $114 & $116;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $118 = $156;$120 = $155;
    }
   } else {
    $118 = $115;$120 = $113;
   }
   $119 = ($118>>>0)<(1048576);
   $121 = ($120>>>0)<(0);
   $122 = ($118|0)==(1048576);
   $123 = $122 & $121;
   $124 = $119 | $123;
   if ($124) {
    $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$151 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$151 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $150;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _tanh($x) {
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $__x = 0, $t$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__x = sp;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $2;$3 = +HEAPF64[tempDoublePtr>>3];
 $4 = ($2>>>0)>(1071748074);
 do {
  if ($4) {
   $5 = ($2>>>0)>(1077149696);
   if ($5) {
    $6 = 0.0 / $3;
    $7 = 1.0 - $6;
    $t$0 = $7;
    break;
   } else {
    $8 = $3 * 2.0;
    $9 = (+_expm1($8));
    $10 = $9 + 2.0;
    $11 = 2.0 / $10;
    $12 = 1.0 - $11;
    $t$0 = $12;
    break;
   }
  } else {
   $13 = ($2>>>0)>(1070618798);
   if ($13) {
    $14 = $3 * 2.0;
    $15 = (+_expm1($14));
    $16 = $15 + 2.0;
    $17 = $15 / $16;
    $t$0 = $17;
    break;
   }
   $18 = ($2>>>0)>(1048575);
   if ($18) {
    $19 = $3 * -2.0;
    $20 = (+_expm1($19));
    $21 = -$20;
    $22 = $20 + 2.0;
    $23 = $21 / $22;
    $t$0 = $23;
    break;
   } else {
    $24 = $3;
    HEAPF32[$__x>>2] = $24;
    $t$0 = $3;
    break;
   }
  }
 } while(0);
 $25 = ($1|0)<(0);
 if (!($25)) {
  $27 = $t$0;
  STACKTOP = sp;return (+$27);
 }
 $26 = -$t$0;
 $27 = $26;
 STACKTOP = sp;return (+$27);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 7]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 7]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa8 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $7 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 7]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa8 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 7]($f,$s,$i$0$lcssa8)|0);
   $26 = ($25>>>0)<($i$0$lcssa8>>>0);
   if ($26) {
    $$0 = $i$0$lcssa8;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa8)|0);
    $28 = (($l) - ($i$0$lcssa8))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa8;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 7]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=632280+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa7 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa7 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa7>>0]|0;
  $$1$ph = $$lcssa7;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
 } else {
  $n$0$lcssa = 0;
  $14 = ($neg$1$ph|0)!=(0);
  $15 = (0 - ($n$0$lcssa))|0;
  $16 = $14 ? $n$0$lcssa : $15;
  return ($16|0);
 }
 while(1) {
  $9 = ($n$04*10)|0;
  $10 = (($$13) + 1|0);
  $11 = (($9) - ($isdigittmp5))|0;
  $12 = HEAP8[$10>>0]|0;
  $13 = $12 << 24 >> 24;
  $isdigittmp = (($13) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
  } else {
   $n$0$lcssa = $11;
   break;
  }
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = (($w$011) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = (($s$15) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa13 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa13&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa20 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $5 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $5;$r$0$lcssa = $r$04;
     break L1;
    }
    $6 = ($5<<24>>24)==($3<<24>>24);
    if (!($6)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa20 = $l$03;$r$04$lcssa19 = $r$04;
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $5 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa20>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa19;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncasecmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$04 = 0, $$08 = 0, $$08$in = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $l$06$lcssa24 = 0, $or$cond = 0, $r$0$lcssa = 0, $r$07 = 0, $r$07$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$04 = 0;
  return ($$04|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $21 = 0;$r$0$lcssa = $_r;
  } else {
   $3 = $1&255;
   $$08$in = $n;$7 = $1;$9 = $3;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $4 = HEAP8[$r$07>>0]|0;
    $5 = ($4<<24>>24)!=(0);
    $6 = ($$08|0)!=(0);
    $or$cond = $6 & $5;
    if (!($or$cond)) {
     $21 = $7;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = ($7<<24>>24)==($4<<24>>24);
    if (!($8)) {
     $10 = (_tolower($9)|0);
     $11 = HEAP8[$r$07>>0]|0;
     $12 = $11&255;
     $13 = (_tolower($12)|0);
     $14 = ($10|0)==($13|0);
     if (!($14)) {
      $l$06$lcssa24 = $l$06;$r$07$lcssa23 = $r$07;
      break;
     }
    }
    $15 = (($l$06) + 1|0);
    $16 = (($r$07) + 1|0);
    $17 = HEAP8[$15>>0]|0;
    $18 = $17&255;
    $19 = ($17<<24>>24)==(0);
    if ($19) {
     $21 = 0;$r$0$lcssa = $16;
     break L4;
    } else {
     $$08$in = $$08;$7 = $17;$9 = $18;$l$06 = $15;$r$07 = $16;
    }
   }
   $$pre = HEAP8[$l$06$lcssa24>>0]|0;
   $21 = $$pre;$r$0$lcssa = $r$07$lcssa23;
  }
 } while(0);
 $20 = $21&255;
 $22 = (_tolower($20)|0);
 $23 = HEAP8[$r$0$lcssa>>0]|0;
 $24 = $23&255;
 $25 = (_tolower($24)|0);
 $26 = (($22) - ($25))|0;
 $$04 = $26;
 return ($$04|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$08|0)!=(0);
    $or$cond = $5 & $4;
    $7 = ($6<<24>>24)==($3<<24>>24);
    $or$cond4 = $7 & $or$cond;
    if (!($or$cond4)) {
     $13 = $6;$r$0$lcssa = $r$07;
     break L4;
    }
    $8 = (($l$06) + 1|0);
    $9 = (($r$07) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((626792 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((627264 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((626792 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((626792 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((626792 + 24|0))>>2] = $36;
  HEAP32[((626792 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((626792 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((626792 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((626792 + 8|0))>>2] = $storemerge21;
  HEAP32[((626792 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((626792 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[626792>>2]|0;
    $88 = $87 & $86;
    HEAP32[626792>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((626792 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((626792 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((626792 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((626792 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((626792 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((626792 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phiZ2D = 0, $$pre50 = 0, $$pre52 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$pre = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$045 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$044 = 0, $T$044$lcssa = 0, $cond = 0;
 var $cond40 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((626792 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((626792 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((626792 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((626792 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[626792>>2]|0;
     $32 = $31 & $30;
     HEAP32[626792>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre52 = (($20) + 8|0);
     $$pre$phi53Z2D = $$pre52;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi53Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi53Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((626792 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((626792 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((626792 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((626792 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((626792 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((626792 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((626792 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((626792 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((626792 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((626792 + 12|0))>>2] = $115;
   HEAP32[((626792 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((626792 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((626792 + 20|0))>>2] = 0;
   HEAP32[((626792 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((626792 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((626792 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((626792 + 8|0))>>2] = $123;
   HEAP32[((626792 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((626792 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[626792>>2]|0;
     $146 = $145 & $144;
     HEAP32[626792>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre50 = (($134) + 8|0);
     $$pre$phi51Z2D = $$pre50;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi51Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi51Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((626792 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond40 = ($R7$1|0)==(0|0);
      if ($cond40) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((626792 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((626792 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((626792 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((626792 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((626792 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((626792 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((626792 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((626792 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[626792>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[626792>>2] = $230;
   $$sum6$pre = (($224) + 2)|0;
   $$pre = ((626792 + ($$sum6$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = ((626792 + ($$sum7<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((626792 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((626792 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = (($$0) + 16|0);
 $266 = (($$0) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[((626792 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((626792 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$045 = $283;$T$044 = $275;
   while(1) {
    $291 = $K20$045 >>> 31;
    $292 = ((($T$044) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$044$lcssa = $T$044;
     break;
    }
    $285 = $K20$045 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$045 = $285;$T$044 = $287;
    }
   }
   $294 = HEAP32[((626792 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$044$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((626792 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 } else {
  $c$111 = $c$0;$x$012 = 0;
 }
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa18 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa18|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa18;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $$lcssa18;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0;
 var $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0, $$01$i69$i = 0;
 var $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0;
 var $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0;
 var $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$93 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa107 = 0, $$lcssa283$i = 0, $$lcssa345 = 0, $$lcssa346 = 0;
 var $$lcssa350 = 0, $$lcssa352 = 0, $$lcssa353 = 0, $$lcssa354 = 0, $$lcssa355 = 0, $$lcssa356 = 0, $$lcssa358 = 0, $$lcssa359 = 0, $$lcssa365 = 0, $$lcssa369 = 0, $$lcssa371 = 0, $$lcssa374 = 0, $$lcssa375 = 0, $$lcssa378 = 0.0, $$lcssa379 = 0, $$lcssa382 = 0, $$lcssa386 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0;
 var $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0, $$pre269 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0.0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0.0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1175$phi = 0, $1176 = 0, $1176$phi = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $140$phi = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0.0, $639 = 0.0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $655$phi = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0.0, $777 = 0.0, $778 = 0, $779 = 0.0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $955$phi = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0;
 var $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded101 = 0, $expanded102 = 0, $expanded103 = 0, $expanded105 = 0, $expanded106 = 0, $expanded108 = 0, $expanded109 = 0;
 var $expanded110 = 0, $expanded112 = 0, $expanded113 = 0, $expanded115 = 0, $expanded116 = 0, $expanded117 = 0, $expanded119 = 0, $expanded120 = 0, $expanded122 = 0, $expanded123 = 0, $expanded124 = 0, $expanded126 = 0, $expanded127 = 0, $expanded129 = 0, $expanded130 = 0, $expanded131 = 0, $expanded133 = 0, $expanded134 = 0, $expanded136 = 0, $expanded137 = 0;
 var $expanded138 = 0, $expanded140 = 0, $expanded141 = 0, $expanded143 = 0, $expanded144 = 0, $expanded145 = 0, $expanded147 = 0, $expanded148 = 0, $expanded150 = 0, $expanded151 = 0, $expanded152 = 0, $expanded154 = 0, $expanded155 = 0, $expanded157 = 0, $expanded158 = 0, $expanded159 = 0, $expanded161 = 0, $expanded162 = 0, $expanded164 = 0, $expanded165 = 0;
 var $expanded166 = 0, $expanded168 = 0, $expanded169 = 0, $expanded171 = 0, $expanded172 = 0, $expanded173 = 0, $expanded175 = 0, $expanded176 = 0, $expanded178 = 0, $expanded179 = 0, $expanded180 = 0, $expanded182 = 0, $expanded183 = 0, $expanded185 = 0, $expanded186 = 0, $expanded187 = 0, $expanded189 = 0, $expanded190 = 0, $expanded192 = 0, $expanded193 = 0;
 var $expanded194 = 0, $expanded196 = 0, $expanded197 = 0, $expanded199 = 0, $expanded200 = 0, $expanded201 = 0, $expanded203 = 0, $expanded204 = 0, $expanded206 = 0, $expanded207 = 0, $expanded208 = 0, $expanded210 = 0, $expanded211 = 0, $expanded213 = 0, $expanded214 = 0, $expanded215 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded68 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded75 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded82 = 0, $expanded84 = 0, $expanded85 = 0, $expanded87 = 0, $expanded88 = 0, $expanded89 = 0, $expanded91 = 0, $expanded92 = 0, $expanded94 = 0, $expanded95 = 0, $expanded96 = 0;
 var $expanded98 = 0, $expanded99 = 0, $fl$0111 = 0, $fl$0171 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa272 = 0, $i$0176 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1187 = 0, $i$1230$i = 0, $i$2163 = 0, $i$2163$lcssa = 0;
 var $i$2217$i = 0, $i$3161 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0;
 var $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1175 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0, $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0;
 var $or$cond274 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4271 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0;
 var $prefix$2 = 0, $r$0$a$8$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0;
 var $sext = 0, $sext94 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa351 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8109 = 0, $storemerge8170 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0;
 var $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0177 = 0, $ws$1188 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0164 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1175 = 0;$1176 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 355;
   break;
  } else {
   $1177 = $22;$26 = $23;
  }
  while(1) {
   if ((($1177<<24>>24) == 37)) {
    $28 = $26;$z$0164 = $26;
    label = 9;
    break;
   } else if ((($1177<<24>>24) == 0)) {
    $$lcssa107 = $26;$z$0$lcssa = $26;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1177 = $$pre;$26 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $27 = (($28) + 1|0);
     $29 = HEAP8[$27>>0]|0;
     $30 = ($29<<24>>24)==(37);
     if (!($30)) {
      $$lcssa107 = $28;$z$0$lcssa = $z$0164;
      break L12;
     }
     $31 = (($z$0164) + 1|0);
     $32 = (($28) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ($33<<24>>24)==(37);
     if ($34) {
      $28 = $32;$z$0164 = $31;
      label = 9;
     } else {
      $$lcssa107 = $32;$z$0$lcssa = $31;
      break;
     }
    }
   }
  } while(0);
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$1176$phi = $1176;$1175$phi = $1175;$23 = $$lcssa107;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$0$phi;$1176 = $1176$phi;$1175 = $1175$phi;
   continue;
  }
  $39 = (($$lcssa107) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = (($$lcssa107) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = (($$lcssa107) + 3|0);
   $$93 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre269 = HEAP8[$$93>>0]|0;
   $47 = $$pre269;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$93;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L24: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0171 = 0;$storemerge8170 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$0111 = $fl$0171;$storemerge8109 = $storemerge8170;
      break L24;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0171;
     $60 = (($storemerge8170) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0171 = $59;$storemerge8170 = $60;
     } else {
      $65 = $61;$fl$0111 = $59;$storemerge8109 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$0111 = 0;$storemerge8109 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = (($storemerge8109) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = (($storemerge8109) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($storemerge8109) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
    if ((label|0) == 23) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      label = 374;
      break L1;
     }
     if (!($1)) {
      $105 = $67;$fl$1 = $fl$0111;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = (0 + 4|0);
     $expanded64 = $87;
     $expanded = (($expanded64) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = (0 + 4|0);
     $expanded68 = $89;
     $expanded67 = (($expanded68) - 1)|0;
     $expanded66 = $expanded67 ^ -1;
     $90 = $88 & $expanded66;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = (($91) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$0111 | 8192;
     $95 = (0 - ($w$0))|0;
     $105 = $storemerge13;$fl$1 = $94;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $105 = $storemerge13;$fl$1 = $fl$0111;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge8109;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = (($100) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa345 = $98;$$lcssa346 = $99;
       break;
      }
     }
     $103 = ($$lcssa345|0)<(0);
     if ($103) {
      $$0 = -1;
      label = 374;
      break L1;
     } else {
      $105 = $$lcssa346;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = $$lcssa345;
     }
    } else {
     $105 = $storemerge8109;$fl$1 = $fl$0111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$105>>0]|0;
  $106 = ($104<<24>>24)==(46);
  L45: do {
   if ($106) {
    $107 = (($105) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i28 = (($136) + -48)|0;
     $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
     if ($isdigit2$i29) {
      $1179 = $107;$140 = $105;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
     } else {
      $1178 = $107;$p$0 = 0;
      break;
     }
     while(1) {
      $137 = ($i$03$i31*10)|0;
      $138 = (($137) + ($isdigittmp4$i30))|0;
      $139 = (($140) + 2|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i32 = (($142) + -48)|0;
      $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
      if ($isdigit$i33) {
       $140$phi = $1179;$1179 = $139;$i$03$i31 = $138;$isdigittmp4$i30 = $isdigittmp$i32;$140 = $140$phi;
      } else {
       $1178 = $139;$p$0 = $138;
       break L45;
      }
     }
    }
    $110 = (($105) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = (($105) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($105) + 4|0);
      $1178 = $127;$p$0 = $123;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     label = 374;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = (0 + 4|0);
     $expanded71 = $130;
     $expanded70 = (($expanded71) - 1)|0;
     $131 = (($129) + ($expanded70))|0;
     $132 = (0 + 4|0);
     $expanded75 = $132;
     $expanded74 = (($expanded75) - 1)|0;
     $expanded73 = $expanded74 ^ -1;
     $133 = $131 & $expanded73;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = (($134) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1178 = $110;$p$0 = $135;
    } else {
     $1178 = $110;$p$0 = 0;
    }
   } else {
    $1178 = $105;$p$0 = -1;
   }
  } while(0);
  $144 = $1178;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$144>>0]|0;
   $145 = $143 << 24 >> 24;
   $146 = (($145) + -65)|0;
   $147 = ($146>>>0)>(57);
   if ($147) {
    $$0 = -1;
    label = 374;
    break L1;
   }
   $148 = (($144) + 1|0);
   $149 = ((631712 + (($st$0*58)|0)|0) + ($146)|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($151) + -1)|0;
   $153 = ($152>>>0)<(8);
   if ($153) {
    $144 = $148;$st$0 = $151;
   } else {
    $$lcssa350 = $144;$$lcssa352 = $148;$$lcssa353 = $150;$$lcssa354 = $151;$st$0$lcssa351 = $st$0;
    break;
   }
  }
  $154 = ($$lcssa353<<24>>24)==(0);
  if ($154) {
   $$0 = -1;
   label = 374;
   break;
  }
  $155 = ($$lcssa353<<24>>24)==(19);
  $156 = ($argpos$0|0)>(-1);
  L64: do {
   if ($155) {
    if ($156) {
     $$0 = -1;
     label = 374;
     break L1;
    } else {
     $1180 = $1175;$1181 = $1176;
     label = 62;
    }
   } else {
    if ($156) {
     $157 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$157>>2] = $$lcssa354;
     $158 = (($nl_arg) + ($argpos$0<<3)|0);
     $159 = $158;
     $160 = $159;
     $161 = HEAP32[$160>>2]|0;
     $162 = (($159) + 4)|0;
     $163 = $162;
     $164 = HEAP32[$163>>2]|0;
     $1180 = $164;$1181 = $161;
     label = 62;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 374;
     break L1;
    }
    $165 = ($$lcssa353&255)>(20);
    if ($165) {
     $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
    } else {
     do {
      switch ($$lcssa354|0) {
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $174 = $arglist_current8;
       $175 = (0 + 4|0);
       $expanded85 = $175;
       $expanded84 = (($expanded85) - 1)|0;
       $176 = (($174) + ($expanded84))|0;
       $177 = (0 + 4|0);
       $expanded89 = $177;
       $expanded88 = (($expanded89) - 1)|0;
       $expanded87 = $expanded88 ^ -1;
       $178 = $176 & $expanded87;
       $179 = $178;
       $180 = HEAP32[$179>>2]|0;
       $arglist_next9 = (($179) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $181 = ($180|0)<(0);
       $182 = $181 << 31 >> 31;
       $1182 = $$lcssa352;$267 = $180;$294 = $182;
       break L64;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       $249 = $arglist_current32;
       $250 = (0 + 8|0);
       $expanded141 = $250;
       $expanded140 = (($expanded141) - 1)|0;
       $251 = (($249) + ($expanded140))|0;
       $252 = (0 + 8|0);
       $expanded145 = $252;
       $expanded144 = (($expanded145) - 1)|0;
       $expanded143 = $expanded144 ^ -1;
       $253 = $251 & $expanded143;
       $254 = $253;
       $255 = +HEAPF64[$254>>3];
       $arglist_next33 = (($254) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $255;$256 = HEAP32[tempDoublePtr>>2]|0;
       $257 = HEAP32[tempDoublePtr+4>>2]|0;
       $1182 = $$lcssa352;$267 = $256;$294 = $257;
       break L64;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $221 = $arglist_current23;
       $222 = (0 + 4|0);
       $expanded120 = $222;
       $expanded119 = (($expanded120) - 1)|0;
       $223 = (($221) + ($expanded119))|0;
       $224 = (0 + 4|0);
       $expanded124 = $224;
       $expanded123 = (($expanded124) - 1)|0;
       $expanded122 = $expanded123 ^ -1;
       $225 = $223 & $expanded122;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $arglist_next24 = (($226) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $228 = $227&255;
       $229 = $228 << 24 >> 24;
       $230 = ($229|0)<(0);
       $231 = $230 << 31 >> 31;
       $sext = $227 << 24;
       $232 = $sext >> 24;
       $1182 = $$lcssa352;$267 = $232;$294 = $231;
       break L64;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $202 = $arglist_current17;
       $203 = (0 + 4|0);
       $expanded106 = $203;
       $expanded105 = (($expanded106) - 1)|0;
       $204 = (($202) + ($expanded105))|0;
       $205 = (0 + 4|0);
       $expanded110 = $205;
       $expanded109 = (($expanded110) - 1)|0;
       $expanded108 = $expanded109 ^ -1;
       $206 = $204 & $expanded108;
       $207 = $206;
       $208 = HEAP32[$207>>2]|0;
       $arglist_next18 = (($207) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $209 = $208&65535;
       $210 = $209 << 16 >> 16;
       $211 = ($210|0)<(0);
       $212 = $211 << 31 >> 31;
       $sext94 = $208 << 16;
       $213 = $sext94 >> 16;
       $1182 = $$lcssa352;$267 = $213;$294 = $212;
       break L64;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $166 = $arglist_current5;
       $167 = (0 + 4|0);
       $expanded78 = $167;
       $expanded77 = (($expanded78) - 1)|0;
       $168 = (($166) + ($expanded77))|0;
       $169 = (0 + 4|0);
       $expanded82 = $169;
       $expanded81 = (($expanded82) - 1)|0;
       $expanded80 = $expanded81 ^ -1;
       $170 = $168 & $expanded80;
       $171 = $170;
       $172 = HEAP32[$171>>2]|0;
       $arglist_next6 = (($171) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $173 = $172;
       $1182 = $$lcssa352;$267 = $173;$294 = $1175;
       break L64;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $183 = $arglist_current11;
       $184 = (0 + 4|0);
       $expanded92 = $184;
       $expanded91 = (($expanded92) - 1)|0;
       $185 = (($183) + ($expanded91))|0;
       $186 = (0 + 4|0);
       $expanded96 = $186;
       $expanded95 = (($expanded96) - 1)|0;
       $expanded94 = $expanded95 ^ -1;
       $187 = $185 & $expanded94;
       $188 = $187;
       $189 = HEAP32[$188>>2]|0;
       $arglist_next12 = (($188) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1182 = $$lcssa352;$267 = $189;$294 = 0;
       break L64;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $190 = $arglist_current14;
       $191 = (0 + 8|0);
       $expanded99 = $191;
       $expanded98 = (($expanded99) - 1)|0;
       $192 = (($190) + ($expanded98))|0;
       $193 = (0 + 8|0);
       $expanded103 = $193;
       $expanded102 = (($expanded103) - 1)|0;
       $expanded101 = $expanded102 ^ -1;
       $194 = $192 & $expanded101;
       $195 = $194;
       $196 = $195;
       $197 = $196;
       $198 = HEAP32[$197>>2]|0;
       $199 = (($196) + 4)|0;
       $200 = $199;
       $201 = HEAP32[$200>>2]|0;
       $arglist_next15 = (($195) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1182 = $$lcssa352;$267 = $198;$294 = $201;
       break L64;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $214 = $arglist_current20;
       $215 = (0 + 4|0);
       $expanded113 = $215;
       $expanded112 = (($expanded113) - 1)|0;
       $216 = (($214) + ($expanded112))|0;
       $217 = (0 + 4|0);
       $expanded117 = $217;
       $expanded116 = (($expanded117) - 1)|0;
       $expanded115 = $expanded116 ^ -1;
       $218 = $216 & $expanded115;
       $219 = $218;
       $220 = HEAP32[$219>>2]|0;
       $arglist_next21 = (($219) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i38 = $220 & 65535;
       $1182 = $$lcssa352;$267 = $$mask1$i38;$294 = 0;
       break L64;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $233 = $arglist_current26;
       $234 = (0 + 4|0);
       $expanded127 = $234;
       $expanded126 = (($expanded127) - 1)|0;
       $235 = (($233) + ($expanded126))|0;
       $236 = (0 + 4|0);
       $expanded131 = $236;
       $expanded130 = (($expanded131) - 1)|0;
       $expanded129 = $expanded130 ^ -1;
       $237 = $235 & $expanded129;
       $238 = $237;
       $239 = HEAP32[$238>>2]|0;
       $arglist_next27 = (($238) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i39 = $239 & 255;
       $1182 = $$lcssa352;$267 = $$mask$i39;$294 = 0;
       break L64;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       $240 = $arglist_current29;
       $241 = (0 + 8|0);
       $expanded134 = $241;
       $expanded133 = (($expanded134) - 1)|0;
       $242 = (($240) + ($expanded133))|0;
       $243 = (0 + 8|0);
       $expanded138 = $243;
       $expanded137 = (($expanded138) - 1)|0;
       $expanded136 = $expanded137 ^ -1;
       $244 = $242 & $expanded136;
       $245 = $244;
       $246 = +HEAPF64[$245>>3];
       $arglist_next30 = (($245) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $246;$247 = HEAP32[tempDoublePtr>>2]|0;
       $248 = HEAP32[tempDoublePtr+4>>2]|0;
       $1182 = $$lcssa352;$267 = $247;$294 = $248;
       break L64;
       break;
      }
      default: {
       $1182 = $$lcssa352;$267 = $1176;$294 = $1175;
       break L64;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 62) {
   label = 0;
   if ($1) {
    $1182 = $$lcssa352;$267 = $1181;$294 = $1180;
   } else {
    $1175 = $1180;$1176 = $1181;$23 = $$lcssa352;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $258 = HEAP8[$$lcssa350>>0]|0;
  $259 = $258 << 24 >> 24;
  $260 = ($st$0$lcssa351|0)!=(0);
  $261 = $259 & 15;
  $262 = ($261|0)==(3);
  $or$cond15 = $260 & $262;
  $263 = $259 & -33;
  $t$0 = $or$cond15 ? $263 : $259;
  $264 = $fl$1 & 8192;
  $265 = ($264|0)==(0);
  $266 = $fl$1 & -65537;
  $fl$1$ = $265 ? $fl$1 : $266;
  L86: do {
   switch ($t$0|0) {
   case 67:  {
    HEAP32[$wc>>2] = $267;
    HEAP32[$5>>2] = 0;
    $1187 = $wc;$1188 = $6;$p$4271 = -1;
    label = 99;
    break;
   }
   case 83:  {
    $393 = $267;
    $394 = ($p$0|0)==(0);
    if ($394) {
     $1189 = $267;$1190 = $393;$i$0$lcssa272 = 0;
     label = 104;
    } else {
     $1187 = $393;$1188 = $267;$p$4271 = $p$0;
     label = 99;
    }
    break;
   }
   case 105: case 100:  {
    $332 = ($294|0)<(0);
    if ($332) {
     $333 = (_i64Subtract(0,0,($267|0),($294|0))|0);
     $334 = tempRet0;
     $339 = $334;$341 = $333;$pl$0 = 1;$prefix$0 = 632176;
     label = 84;
     break L86;
    }
    $335 = $fl$1$ & 2048;
    $336 = ($335|0)==(0);
    if ($336) {
     $337 = $fl$1$ & 1;
     $338 = ($337|0)==(0);
     $$ = $338 ? 632176 : ((632176 + 2|0));
     $339 = $294;$341 = $267;$pl$0 = $337;$prefix$0 = $$;
     label = 84;
    } else {
     $339 = $294;$341 = $267;$pl$0 = 1;$prefix$0 = ((632176 + 1|0));
     label = 84;
    }
    break;
   }
   case 111:  {
    $315 = ($267|0)==(0);
    $316 = ($294|0)==(0);
    $317 = $315 & $316;
    if ($317) {
     $$0$lcssa$i52 = $2;
    } else {
     $$03$i49 = $2;$319 = $267;$323 = $294;
     while(1) {
      $318 = $319 & 7;
      $320 = $318 | 48;
      $321 = $320&255;
      $322 = (($$03$i49) + -1|0);
      HEAP8[$322>>0] = $321;
      $324 = (_bitshift64Lshr(($319|0),($323|0),3)|0);
      $325 = tempRet0;
      $326 = ($324|0)==(0);
      $327 = ($325|0)==(0);
      $328 = $326 & $327;
      if ($328) {
       $$0$lcssa$i52 = $322;
       break;
      } else {
       $$03$i49 = $322;$319 = $324;$323 = $325;
      }
     }
    }
    $329 = $fl$1$ & 8;
    $330 = ($329|0)==(0);
    $or$cond19 = $330 | $317;
    $$25 = $or$cond19 ? 632176 : ((632176 + 5|0));
    $331 = $or$cond19&1;
    $$26 = $331 ^ 1;
    $369 = $267;$371 = $294;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
    label = 89;
    break;
   }
   case 110:  {
    switch ($st$0$lcssa351|0) {
    case 3:  {
     $277 = $cnt$1&65535;
     $278 = $267;
     HEAP16[$278>>1] = $277;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $282 = ($cnt$1|0)<(0);
     $283 = $282 << 31 >> 31;
     $284 = $267;
     $285 = $284;
     $286 = $285;
     HEAP32[$286>>2] = $cnt$1;
     $287 = (($285) + 4)|0;
     $288 = $287;
     HEAP32[$288>>2] = $283;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $279 = $cnt$1&255;
     $280 = $267;
     HEAP8[$280>>0] = $279;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $269 = $267;
     HEAP32[$269>>2] = $cnt$1;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $281 = $267;
     HEAP32[$281>>2] = $cnt$1;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $270 = ($cnt$1|0)<(0);
     $271 = $270 << 31 >> 31;
     $272 = $267;
     $273 = $272;
     $274 = $273;
     HEAP32[$274>>2] = $cnt$1;
     $275 = (($273) + 4)|0;
     $276 = $275;
     HEAP32[$276>>2] = $271;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $268 = $267;
     HEAP32[$268>>2] = $cnt$1;
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $37;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 99:  {
    $381 = $267&255;
    HEAP8[$4>>0] = $381;
    $1183 = $294;$1184 = $267;$a$2 = $4;$fl$6 = $266;$p$5 = 1;$pl$2 = 0;$prefix$2 = 632176;$z$2 = $2;
    break;
   }
   case 109:  {
    $382 = (___errno_location()|0);
    $383 = HEAP32[$382>>2]|0;
    $384 = (_strerror(($383|0))|0);
    $a$1 = $384;
    label = 94;
    break;
   }
   case 115:  {
    $385 = $267;
    $386 = ($267|0)==(0);
    $$21 = $386 ? 632192 : $385;
    $a$1 = $$21;
    label = 94;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $267;HEAP32[tempDoublePtr+4>>2] = $294;$432 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $433 = ($294|0)<(0);
    if ($433) {
     $434 = -$432;
     $$013$i = $434;$pl$0$i = 1;$prefix$0$i = 632200;
    } else {
     $435 = $fl$1$ & 2048;
     $436 = ($435|0)==(0);
     if ($436) {
      $437 = $fl$1$ & 1;
      $438 = ($437|0)==(0);
      $$$i = $438 ? ((632200 + 1|0)) : ((632200 + 6|0));
      $$013$i = $432;$pl$0$i = $437;$prefix$0$i = $$$i;
     } else {
      $$013$i = $432;$pl$0$i = 1;$prefix$0$i = ((632200 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$013$i;$439 = HEAP32[tempDoublePtr>>2]|0;
    $440 = HEAP32[tempDoublePtr+4>>2]|0;
    $441 = $440 & 2146435072;
    $442 = ($441>>>0)<(2146435072);
    $443 = (0)<(0);
    $444 = ($441|0)==(2146435072);
    $445 = $444 & $443;
    $446 = $442 | $445;
    do {
     if ($446) {
      $472 = (+_frexpl($$013$i,$e2$i));
      $473 = $472 * 2.0;
      $474 = $473 != 0.0;
      if ($474) {
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -1)|0;
       HEAP32[$e2$i>>2] = $476;
      }
      $477 = $t$0 | 32;
      $478 = ($477|0)==(97);
      if ($478) {
       $479 = $t$0 & 32;
       $480 = ($479|0)==(0);
       $481 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $480 ? $prefix$0$i : $481;
       $482 = $pl$0$i | 2;
       $483 = ($p$0>>>0)>(11);
       do {
        if ($483) {
         $$1$i = $473;
        } else {
         $484 = (12 - ($p$0))|0;
         $re$1187$i = $484;$round$0186$i = 8.0;
         while(1) {
          $485 = (($re$1187$i) + -1)|0;
          $486 = $round$0186$i * 16.0;
          $487 = ($485|0)==(0);
          if ($487) {
           $$lcssa378 = $486;
           break;
          } else {
           $re$1187$i = $485;$round$0186$i = $486;
          }
         }
         $488 = HEAP8[$prefix$0$$i>>0]|0;
         $489 = ($488<<24>>24)==(45);
         if ($489) {
          $490 = -$473;
          $491 = $490 - $$lcssa378;
          $492 = $$lcssa378 + $491;
          $493 = -$492;
          $$1$i = $493;
          break;
         } else {
          $494 = $473 + $$lcssa378;
          $495 = $494 - $$lcssa378;
          $$1$i = $495;
          break;
         }
        }
       } while(0);
       $496 = HEAP32[$e2$i>>2]|0;
       $497 = ($496|0)<(0);
       $498 = (0 - ($496))|0;
       $499 = $497 ? $498 : $496;
       $500 = ($499|0)<(0);
       if ($500) {
        $501 = ($499|0)<(0);
        $502 = $501 << 31 >> 31;
        $$05$i$i = $7;$503 = $499;$504 = $502;
        while(1) {
         $505 = (___uremdi3(($503|0),($504|0),10,0)|0);
         $506 = tempRet0;
         $507 = $505 | 48;
         $508 = $507&255;
         $509 = (($$05$i$i) + -1|0);
         HEAP8[$509>>0] = $508;
         $510 = (___udivdi3(($503|0),($504|0),10,0)|0);
         $511 = tempRet0;
         $512 = ($504>>>0)>(9);
         $513 = ($503>>>0)>(4294967295);
         $514 = ($504|0)==(9);
         $515 = $514 & $513;
         $516 = $512 | $515;
         if ($516) {
          $$05$i$i = $509;$503 = $510;$504 = $511;
         } else {
          $$lcssa379 = $509;$1191 = $510;$1192 = $511;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa379;$$01$lcssa$off0$i$i = $1191;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $499;
       }
       $517 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($517) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $518 = (($y$03$i$i>>>0) % 10)&-1;
         $519 = $518 | 48;
         $520 = $519&255;
         $521 = (($$12$i$i) + -1|0);
         HEAP8[$521>>0] = $520;
         $522 = (($y$03$i$i>>>0) / 10)&-1;
         $523 = ($y$03$i$i>>>0)<(10);
         if ($523) {
          $$1$lcssa$i$i = $521;
          break;
         } else {
          $$12$i$i = $521;$y$03$i$i = $522;
         }
        }
       }
       $524 = ($$1$lcssa$i$i|0)==($7|0);
       if ($524) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $525 = HEAP32[$e2$i>>2]|0;
       $526 = $525 >> 31;
       $527 = $526 & 2;
       $528 = (($527) + 43)|0;
       $529 = $528&255;
       $530 = (($estr$0$i) + -1|0);
       HEAP8[$530>>0] = $529;
       $531 = (($t$0) + 15)|0;
       $532 = $531&255;
       $533 = (($estr$0$i) + -2|0);
       HEAP8[$533>>0] = $532;
       $534 = $fl$1$ & 8;
       $535 = ($534|0)==(0);
       if ($535) {
        $notrhs$i = ($p$0|0)<(1);
        if ($notrhs$i) {
         $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
         while(1) {
          $536 = (~~(($$2$us$us$i)));
          $537 = (632256 + ($536)|0);
          $538 = HEAP8[$537>>0]|0;
          $539 = $538&255;
          $540 = $539 | $479;
          $541 = $540&255;
          $542 = (($s$0$us$us$i) + 1|0);
          HEAP8[$s$0$us$us$i>>0] = $541;
          $543 = (+($536|0));
          $544 = $$2$us$us$i - $543;
          $545 = $544 * 16.0;
          $546 = $542;
          $547 = (($546) - ($0))|0;
          $548 = ($547|0)!=(1);
          $notlhs$us$us$i = $545 == 0.0;
          $or$cond$i80 = $548 | $notlhs$us$us$i;
          if ($or$cond$i80) {
           $s$1$us$us$i = $542;
          } else {
           $549 = (($s$0$us$us$i) + 2|0);
           HEAP8[$542>>0] = 46;
           $s$1$us$us$i = $549;
          }
          $550 = $545 != 0.0;
          if ($550) {
           $$2$us$us$i = $545;$s$0$us$us$i = $s$1$us$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$us$i;
           break;
          }
         }
        } else {
         $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
         while(1) {
          $551 = (~~(($$2$us$i)));
          $552 = (632256 + ($551)|0);
          $553 = HEAP8[$552>>0]|0;
          $554 = $553&255;
          $555 = $554 | $479;
          $556 = $555&255;
          $557 = (($s$0$us$i) + 1|0);
          HEAP8[$s$0$us$i>>0] = $556;
          $558 = (+($551|0));
          $559 = $$2$us$i - $558;
          $560 = $559 * 16.0;
          $561 = $557;
          $562 = (($561) - ($0))|0;
          $563 = ($562|0)==(1);
          if ($563) {
           $564 = (($s$0$us$i) + 2|0);
           HEAP8[$557>>0] = 46;
           $s$1$us$i = $564;
          } else {
           $s$1$us$i = $557;
          }
          $565 = $560 != 0.0;
          if ($565) {
           $$2$us$i = $560;$s$0$us$i = $s$1$us$i;
          } else {
           $s$1$lcssa$i = $s$1$us$i;
           break;
          }
         }
        }
       } else {
        $$2$i = $$1$i;$s$0$i = $buf$i;
        while(1) {
         $566 = (~~(($$2$i)));
         $567 = (632256 + ($566)|0);
         $568 = HEAP8[$567>>0]|0;
         $569 = $568&255;
         $570 = $569 | $479;
         $571 = $570&255;
         $572 = (($s$0$i) + 1|0);
         HEAP8[$s$0$i>>0] = $571;
         $573 = (+($566|0));
         $574 = $$2$i - $573;
         $575 = $574 * 16.0;
         $576 = $572;
         $577 = (($576) - ($0))|0;
         $578 = ($577|0)==(1);
         if ($578) {
          $579 = (($s$0$i) + 2|0);
          HEAP8[$572>>0] = 46;
          $s$1$i = $579;
         } else {
          $s$1$i = $572;
         }
         $580 = $575 != 0.0;
         if ($580) {
          $$2$i = $575;$s$0$i = $s$1$i;
         } else {
          $s$1$lcssa$i = $s$1$i;
          break;
         }
        }
       }
       $581 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $582 = (($11) + ($$pre308$i))|0;
       $583 = ($582|0)<($p$0|0);
       $or$cond274 = $581 & $583;
       $584 = $533;
       if ($or$cond274) {
        $585 = (($12) + ($p$0))|0;
        $586 = (($585) - ($584))|0;
        $l$0$i = $586;
       } else {
        $587 = (($10) - ($584))|0;
        $588 = (($587) + ($$pre308$i))|0;
        $l$0$i = $588;
       }
       $589 = (($l$0$i) + ($482))|0;
       $590 = $fl$1$ & 73728;
       $591 = ($590|0)==(0);
       $592 = ($w$1|0)>($589|0);
       $or$cond$i60$i = $591 & $592;
       if ($or$cond$i60$i) {
        $593 = (($w$1) - ($589))|0;
        $594 = ($593>>>0)>(256);
        $595 = $594 ? 256 : $593;
        _memset(($pad$i|0),32,($595|0))|0;
        $596 = ($593>>>0)>(255);
        if ($596) {
         $$01$i62$i = $593;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $597 = (($$01$i62$i) + -256)|0;
          $598 = ($597>>>0)>(255);
          if ($598) {
           $$01$i62$i = $597;
          } else {
           break;
          }
         }
         $599 = $593 & 255;
         $$0$lcssa$i64$i = $599;
        } else {
         $$0$lcssa$i64$i = $593;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$482,$f)|0);
       $600 = ($590|0)==(65536);
       $or$cond$i67$i = $600 & $592;
       if ($or$cond$i67$i) {
        $601 = (($w$1) - ($589))|0;
        $602 = ($601>>>0)>(256);
        $603 = $602 ? 256 : $601;
        _memset(($pad$i|0),48,($603|0))|0;
        $604 = ($601>>>0)>(255);
        if ($604) {
         $$01$i69$i = $601;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $605 = (($$01$i69$i) + -256)|0;
          $606 = ($605>>>0)>(255);
          if ($606) {
           $$01$i69$i = $605;
          } else {
           break;
          }
         }
         $607 = $601 & 255;
         $$0$lcssa$i71$i = $607;
        } else {
         $$0$lcssa$i71$i = $601;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $608 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$608,$f)|0);
       $609 = $533;
       $610 = (($9) - ($609))|0;
       $611 = (($l$0$i) - ($610))|0;
       $612 = (($611) - ($608))|0;
       $613 = ($612|0)>(0);
       if ($613) {
        $614 = ($612>>>0)>(256);
        $615 = $614 ? 256 : $612;
        _memset(($pad$i|0),48,($615|0))|0;
        $616 = ($612>>>0)>(255);
        if ($616) {
         $$01$i75$i = $612;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $617 = (($$01$i75$i) + -256)|0;
          $618 = ($617>>>0)>(255);
          if ($618) {
           $$01$i75$i = $617;
          } else {
           break;
          }
         }
         $619 = $612 & 255;
         $$0$lcssa$i77$i = $619;
        } else {
         $$0$lcssa$i77$i = $612;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($533,$610,$f)|0);
       $620 = ($590|0)==(8192);
       $or$cond$i80$i = $620 & $592;
       if ($or$cond$i80$i) {
        $621 = (($w$1) - ($589))|0;
        $622 = ($621>>>0)>(256);
        $623 = $622 ? 256 : $621;
        _memset(($pad$i|0),32,($623|0))|0;
        $624 = ($621>>>0)>(255);
        if ($624) {
         $$01$i82$i = $621;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $625 = (($$01$i82$i) + -256)|0;
          $626 = ($625>>>0)>(255);
          if ($626) {
           $$01$i82$i = $625;
          } else {
           break;
          }
         }
         $627 = $621 & 255;
         $$0$lcssa$i84$i = $627;
        } else {
         $$0$lcssa$i84$i = $621;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $592 ? $w$1 : $589;
       $$0$i = $w$25$i;
       break;
      }
      $628 = ($p$0|0)<(0);
      $$p$i = $628 ? 6 : $p$0;
      if ($474) {
       $629 = $473 * 268435456.0;
       $630 = HEAP32[$e2$i>>2]|0;
       $631 = (($630) + -28)|0;
       HEAP32[$e2$i>>2] = $631;
       $$3$i = $629;$632 = $631;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $473;$632 = $$pre$i;
      }
      $633 = ($632|0)<(0);
      $$39$i = $633 ? $big$i : $13;
      $634 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $635 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $635;
       $636 = (($z$0$i) + 4|0);
       $637 = (+($635>>>0));
       $638 = $$4$i - $637;
       $639 = $638 * 1.0E+9;
       $640 = $639 != 0.0;
       if ($640) {
        $$4$i = $639;$z$0$i = $636;
       } else {
        $$lcssa355 = $636;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $641 = ($$pr$i|0)>(0);
      if ($641) {
       $642 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa355;
       while(1) {
        $643 = ($642|0)>(29);
        $644 = $643 ? 29 : $642;
        $d$0253$i = (($z$1260$i) + -4|0);
        $645 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($645) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $655 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $646 = HEAP32[$d$0255$i>>2]|0;
           $647 = (_bitshift64Shl(($646|0),0,($644|0))|0);
           $648 = tempRet0;
           $649 = (_i64Add(($647|0),($648|0),($carry$0254$i|0),0)|0);
           $650 = tempRet0;
           $651 = (___uremdi3(($649|0),($650|0),1000000000,0)|0);
           $652 = tempRet0;
           HEAP32[$d$0255$i>>2] = $651;
           $653 = (___udivdi3(($649|0),($650|0),1000000000,0)|0);
           $654 = tempRet0;
           $d$0$i = (($655) + -8|0);
           $656 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($656) {
            $$lcssa356 = $653;
            break;
           } else {
            $655$phi = $d$0255$i;$carry$0254$i = $653;$d$0255$i = $d$0$i;$655 = $655$phi;
           }
          }
          $657 = ($$lcssa356|0)==(0);
          if ($657) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $658 = (($a$1261$i) + -4|0);
          HEAP32[$658>>2] = $$lcssa356;
          $a$2$ph$i = $658;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $659 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($659)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $660 = (($z$2$i) + -4|0);
         $661 = HEAP32[$660>>2]|0;
         $662 = ($661|0)==(0);
         if ($662) {
          $z$2$i = $660;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $663 = HEAP32[$e2$i>>2]|0;
        $664 = (($663) - ($644))|0;
        HEAP32[$e2$i>>2] = $664;
        $665 = ($664|0)>(0);
        if ($665) {
         $642 = $664;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$pr154$i = $664;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa355;
      }
      $666 = ($$pr154$i|0)<(0);
      L244: do {
       if ($666) {
        $667 = (($$p$i) + 25)|0;
        $668 = (($667|0) / 9)&-1;
        $669 = (($668) + 1)|0;
        $670 = ($477|0)==(102);
        if ($670) {
         $671 = (($$39$i) + ($669<<2)|0);
         $672 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $673 = ($672|0)<(-9);
          $674 = (0 - ($672))|0;
          $$26$us$i = $673 ? 9 : $674;
          $675 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($675) {
            $700 = 1 << $$26$us$i;
            $693 = (($700) + -1)|0;
            $697 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $691 = HEAP32[$d$1241$us$i>>2]|0;
             $692 = $691 & $693;
             $694 = $691 >>> $$26$us$i;
             $695 = (($694) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $695;
             $696 = Math_imul($692, $697)|0;
             $698 = (($d$1241$us$i) + 4|0);
             $699 = ($698>>>0)<($z$3247$us$i>>>0);
             if ($699) {
              $carry3$0242$us$i = $696;$d$1241$us$i = $698;
             } else {
              $$lcssa359 = $696;
              break;
             }
            }
            $679 = HEAP32[$a$3248$us$i>>2]|0;
            $680 = ($679|0)==(0);
            $681 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $680 ? $681 : $a$3248$us$i;
            $682 = ($$lcssa359|0)==(0);
            if ($682) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $683 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa359;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $683;
           } else {
            $676 = HEAP32[$a$3248$us$i>>2]|0;
            $677 = ($676|0)==(0);
            $678 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $677 ? $678 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $684 = $z$4$us$i;
          $685 = (($684) - ($634))|0;
          $686 = $685 >> 2;
          $687 = ($686|0)>($669|0);
          $$z$4$us$i = $687 ? $671 : $z$4$us$i;
          $688 = HEAP32[$e2$i>>2]|0;
          $689 = (($688) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $689;
          $690 = ($689|0)<(0);
          if ($690) {
           $672 = $689;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $a$3$lcssa$i = $$a$3$us310$i;$z$3$lcssa$i = $$z$4$us$i;
           break L244;
          }
         }
        } else {
         $701 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        }
        while(1) {
         $702 = ($701|0)<(-9);
         $703 = (0 - ($701))|0;
         $$26$i = $702 ? 9 : $703;
         $704 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($704) {
           $708 = 1 << $$26$i;
           $709 = (($708) + -1)|0;
           $710 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $711 = HEAP32[$d$1241$i>>2]|0;
            $712 = $711 & $709;
            $713 = $711 >>> $$26$i;
            $714 = (($713) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $714;
            $715 = Math_imul($712, $710)|0;
            $716 = (($d$1241$i) + 4|0);
            $717 = ($716>>>0)<($z$3247$i>>>0);
            if ($717) {
             $carry3$0242$i = $715;$d$1241$i = $716;
            } else {
             $$lcssa358 = $715;
             break;
            }
           }
           $718 = HEAP32[$a$3248$i>>2]|0;
           $719 = ($718|0)==(0);
           $720 = (($a$3248$i) + 4|0);
           $$a$3$i = $719 ? $720 : $a$3248$i;
           $721 = ($$lcssa358|0)==(0);
           if ($721) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $722 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa358;
           $$a$3312$i = $$a$3$i;$z$4$i = $722;
          } else {
           $705 = HEAP32[$a$3248$i>>2]|0;
           $706 = ($705|0)==(0);
           $707 = (($a$3248$i) + 4|0);
           $$a$3311$i = $706 ? $707 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $723 = $z$4$i;
         $724 = $$a$3312$i;
         $725 = (($723) - ($724))|0;
         $726 = $725 >> 2;
         $727 = ($726|0)>($669|0);
         if ($727) {
          $728 = (($$a$3312$i) + ($669<<2)|0);
          $z$5$i = $728;
         } else {
          $z$5$i = $z$4$i;
         }
         $729 = HEAP32[$e2$i>>2]|0;
         $730 = (($729) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $730;
         $731 = ($730|0)<(0);
         if ($731) {
          $701 = $730;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $a$3$lcssa$i = $$a$3312$i;$z$3$lcssa$i = $z$5$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $732 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($732) {
        $733 = $a$3$lcssa$i;
        $734 = (($634) - ($733))|0;
        $735 = $734 >> 2;
        $736 = ($735*9)|0;
        $737 = HEAP32[$a$3$lcssa$i>>2]|0;
        $738 = ($737>>>0)<(10);
        if ($738) {
         $e$1$i = $736;
         break;
        } else {
         $e$0237$i = $736;$i$0236$i = 10;
        }
        while(1) {
         $739 = ($i$0236$i*10)|0;
         $740 = (($e$0237$i) + 1)|0;
         $741 = ($737>>>0)<($739>>>0);
         if ($741) {
          $e$1$i = $740;
          break;
         } else {
          $e$0237$i = $740;$i$0236$i = $739;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $742 = ($477|0)!=(102);
      $743 = $742 ? $e$1$i : 0;
      $744 = (($$p$i) - ($743))|0;
      $745 = ($477|0)==(103);
      $746 = ($$p$i|0)!=(0);
      $$27$i = $746 & $745;
      $$neg159$i = $$27$i << 31 >> 31;
      $747 = (($744) + ($$neg159$i))|0;
      $748 = $z$3$lcssa$i;
      $749 = (($748) - ($634))|0;
      $750 = $749 >> 2;
      $751 = ($750*9)|0;
      $752 = (($751) + -9)|0;
      $753 = ($747|0)<($752|0);
      if ($753) {
       $754 = (($747) + 9216)|0;
       $755 = (($754|0) / 9)&-1;
       $$sum$i = (($755) + -1023)|0;
       $756 = (($$39$i) + ($$sum$i<<2)|0);
       $757 = (($754|0) % 9)&-1;
       $j$0229$i = (($757) + 1)|0;
       $758 = ($j$0229$i|0)<(9);
       if ($758) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $759 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0231$i|0)==(8);
         if ($exitcond$i) {
          $i$1$lcssa$i = $759;
          break;
         } else {
          $i$1230$i = $759;$j$0231$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $760 = HEAP32[$756>>2]|0;
       $761 = (($760>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $762 = ($761|0)==(0);
       if ($762) {
        $$sum21$i = (($755) + -1022)|0;
        $763 = (($$39$i) + ($$sum21$i<<2)|0);
        $764 = ($763|0)==($z$3$lcssa$i|0);
        if ($764) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
        } else {
         label = 231;
        }
       } else {
        label = 231;
       }
       do {
        if ((label|0) == 231) {
         label = 0;
         $765 = (($760>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $766 = $765 & 1;
         $767 = ($766|0)==(0);
         $$28$i = $767 ? 9007199254740992.0 : 9007199254740994.0;
         $768 = (($i$1$lcssa$i|0) / 2)&-1;
         $769 = ($761>>>0)<($768>>>0);
         do {
          if ($769) {
           $small$0$i = 0.5;
          } else {
           $770 = ($761|0)==($768|0);
           if ($770) {
            $$sum22$i = (($755) + -1022)|0;
            $771 = (($$39$i) + ($$sum22$i<<2)|0);
            $772 = ($771|0)==($z$3$lcssa$i|0);
            if ($772) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $773 = ($pl$0$i|0)==(0);
         do {
          if ($773) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $774 = HEAP8[$prefix$0$i>>0]|0;
           $775 = ($774<<24>>24)==(45);
           if (!($775)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $776 = -$$28$i;
           $777 = -$small$0$i;
           $round6$1$i = $776;$small$1$i = $777;
          }
         } while(0);
         $778 = (($760) - ($761))|0;
         HEAP32[$756>>2] = $778;
         $779 = $round6$1$i + $small$1$i;
         $780 = $779 != $round6$1$i;
         if (!($780)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $756;$e$3$i = $e$1$i;
          break;
         }
         $781 = (($778) + ($i$1$lcssa$i))|0;
         HEAP32[$756>>2] = $781;
         $782 = ($781>>>0)>(999999999);
         if ($782) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $756;
          while(1) {
           $783 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $784 = ($783>>>0)<($a$5223$i>>>0);
           if ($784) {
            $785 = (($a$5223$i) + -4|0);
            HEAP32[$785>>2] = 0;
            $a$6$i = $785;
           } else {
            $a$6$i = $a$5223$i;
           }
           $786 = HEAP32[$783>>2]|0;
           $787 = (($786) + 1)|0;
           HEAP32[$783>>2] = $787;
           $788 = ($787>>>0)>(999999999);
           if ($788) {
            $a$5223$i = $a$6$i;$d$2222$i = $783;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $783;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $756;
         }
         $789 = $a$5$lcssa$i;
         $790 = (($634) - ($789))|0;
         $791 = $790 >> 2;
         $792 = ($791*9)|0;
         $793 = HEAP32[$a$5$lcssa$i>>2]|0;
         $794 = ($793>>>0)<(10);
         if ($794) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $792;
          break;
         } else {
          $e$2218$i = $792;$i$2217$i = 10;
         }
         while(1) {
          $795 = ($i$2217$i*10)|0;
          $796 = (($e$2218$i) + 1)|0;
          $797 = ($793>>>0)<($795>>>0);
          if ($797) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $796;
           break;
          } else {
           $e$2218$i = $796;$i$2217$i = $795;
          }
         }
        }
       } while(0);
       $798 = (($d$3$i) + 4|0);
       $799 = ($z$3$lcssa$i>>>0)>($798>>>0);
       $$z$3$i = $799 ? $798 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $800 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $801 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($801)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $802 = (($z$6$i) + -4|0);
       $803 = HEAP32[$802>>2]|0;
       $804 = ($803|0)==(0);
       if ($804) {
        $z$6$i = $802;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($745) {
        $805 = ($$p$i|0)==(0);
        $806 = $805&1;
        $$$p$i = (($806) + ($$p$i))|0;
        $807 = ($$$p$i|0)>($e$4$ph$i|0);
        $808 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $807 & $808;
        if ($or$cond6$i) {
         $809 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $810 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $809;$$216$i = $810;
        } else {
         $811 = (($t$0) + -2)|0;
         $812 = (($$$p$i) + -1)|0;
         $$019$i = $811;$$216$i = $812;
        }
        $813 = $fl$1$ & 8;
        $814 = ($813|0)==(0);
        if (!($814)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $815 = (($z$6$i$lcssa) + -4|0);
          $816 = HEAP32[$815>>2]|0;
          $817 = ($816|0)==(0);
          if ($817) {
           $j$2$i = 9;
           break;
          }
          $818 = (($816>>>0) % 10)&-1;
          $819 = ($818|0)==(0);
          if ($819) {
           $i$3213$i = 10;$j$1214$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $820 = ($i$3213$i*10)|0;
           $821 = (($j$1214$i) + 1)|0;
           $822 = (($816>>>0) % ($820>>>0))&-1;
           $823 = ($822|0)==(0);
           if ($823) {
            $i$3213$i = $820;$j$1214$i = $821;
           } else {
            $j$2$i = $821;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $824 = $$019$i | 32;
        $825 = ($824|0)==(102);
        $826 = $z$6$i$lcssa;
        $827 = (($826) - ($634))|0;
        $828 = $827 >> 2;
        $829 = ($828*9)|0;
        $830 = (($829) + -9)|0;
        if ($825) {
         $831 = (($830) - ($j$2$i))|0;
         $832 = ($831|0)<(0);
         $$29$i = $832 ? 0 : $831;
         $833 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $833 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $834 = (($830) + ($e$4$ph$i))|0;
         $835 = (($834) - ($j$2$i))|0;
         $836 = ($835|0)<(0);
         $$31$i = $836 ? 0 : $835;
         $837 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $837 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $838 = ($$317$i|0)!=(0);
      if ($838) {
       $842 = 1;
      } else {
       $839 = $fl$1$ & 8;
       $840 = ($839|0)!=(0);
       $842 = $840;
      }
      $841 = $842&1;
      $843 = $$120$i | 32;
      $844 = ($843|0)==(102);
      if ($844) {
       $845 = ($e$4$ph$i|0)>(0);
       $846 = $845 ? $e$4$ph$i : 0;
       $$pn$i = $846;$estr$2$i = 0;
      } else {
       $847 = ($e$4$ph$i|0)<(0);
       $848 = $847 ? $800 : $e$4$ph$i;
       $849 = ($848|0)<(0);
       if ($849) {
        $850 = ($848|0)<(0);
        $851 = $850 << 31 >> 31;
        $$05$i87$i = $7;$852 = $848;$853 = $851;
        while(1) {
         $854 = (___uremdi3(($852|0),($853|0),10,0)|0);
         $855 = tempRet0;
         $856 = $854 | 48;
         $857 = $856&255;
         $858 = (($$05$i87$i) + -1|0);
         HEAP8[$858>>0] = $857;
         $859 = (___udivdi3(($852|0),($853|0),10,0)|0);
         $860 = tempRet0;
         $861 = ($853>>>0)>(9);
         $862 = ($852>>>0)>(4294967295);
         $863 = ($853|0)==(9);
         $864 = $863 & $862;
         $865 = $861 | $864;
         if ($865) {
          $$05$i87$i = $858;$852 = $859;$853 = $860;
         } else {
          $$lcssa365 = $858;$1193 = $859;$1194 = $860;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa365;$$01$lcssa$off0$i93$i = $1193;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $848;
       }
       $866 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($866) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $867 = (($y$03$i94$i>>>0) % 10)&-1;
         $868 = $867 | 48;
         $869 = $868&255;
         $870 = (($$12$i95$i) + -1|0);
         HEAP8[$870>>0] = $869;
         $871 = (($y$03$i94$i>>>0) / 10)&-1;
         $872 = ($y$03$i94$i>>>0)<(10);
         if ($872) {
          $estr$1$ph$i = $870;
          break;
         } else {
          $$12$i95$i = $870;$y$03$i94$i = $871;
         }
        }
       }
       $873 = $estr$1$ph$i;
       $874 = (($9) - ($873))|0;
       $875 = ($874|0)<(2);
       if ($875) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $876 = (($estr$1209$i) + -1|0);
         HEAP8[$876>>0] = 48;
         $877 = $876;
         $878 = (($9) - ($877))|0;
         $879 = ($878|0)<(2);
         if ($879) {
          $estr$1209$i = $876;
         } else {
          $estr$1$lcssa$i = $876;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $880 = $e$4$ph$i >> 31;
       $881 = $880 & 2;
       $882 = (($881) + 43)|0;
       $883 = $882&255;
       $884 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$884>>0] = $883;
       $885 = $$120$i&255;
       $886 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$886>>0] = $885;
       $887 = $886;
       $888 = (($9) - ($887))|0;
       $$pn$i = $888;$estr$2$i = $886;
      }
      $889 = (($pl$0$i) + 1)|0;
      $890 = (($889) + ($$317$i))|0;
      $l$1$i = (($890) + ($841))|0;
      $891 = (($l$1$i) + ($$pn$i))|0;
      $892 = $fl$1$ & 73728;
      $893 = ($892|0)==(0);
      $894 = ($w$1|0)>($891|0);
      $or$cond$i101$i = $893 & $894;
      if ($or$cond$i101$i) {
       $895 = (($w$1) - ($891))|0;
       $896 = ($895>>>0)>(256);
       $897 = $896 ? 256 : $895;
       _memset(($pad$i|0),32,($897|0))|0;
       $898 = ($895>>>0)>(255);
       if ($898) {
        $$01$i103$i = $895;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $899 = (($$01$i103$i) + -256)|0;
         $900 = ($899>>>0)>(255);
         if ($900) {
          $$01$i103$i = $899;
         } else {
          break;
         }
        }
        $901 = $895 & 255;
        $$0$lcssa$i105$i = $901;
       } else {
        $$0$lcssa$i105$i = $895;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $902 = ($892|0)==(65536);
      $or$cond$i108$i = $902 & $894;
      if ($or$cond$i108$i) {
       $903 = (($w$1) - ($891))|0;
       $904 = ($903>>>0)>(256);
       $905 = $904 ? 256 : $903;
       _memset(($pad$i|0),48,($905|0))|0;
       $906 = ($903>>>0)>(255);
       if ($906) {
        $$01$i110$i = $903;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $907 = (($$01$i110$i) + -256)|0;
         $908 = ($907>>>0)>(255);
         if ($908) {
          $$01$i110$i = $907;
         } else {
          break;
         }
        }
        $909 = $903 & 255;
        $$0$lcssa$i112$i = $909;
       } else {
        $$0$lcssa$i112$i = $903;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      if ($844) {
       $910 = ($a$8$ph$i>>>0)>($$39$i>>>0);
       $r$0$a$8$i = $910 ? $$39$i : $a$8$ph$i;
       $911 = $634 ^ -1;
       $912 = $a$8$ph294$i ^ -1;
       $913 = ($911>>>0)>($912>>>0);
       $umax$i = $913 ? $911 : $912;
       $914 = (3 - ($umax$i))|0;
       $uglygep$i = (($$39$i) + 1|0);
       $uglygep296$i = $uglygep$i;
       $915 = ($914>>>0)>($uglygep296$i>>>0);
       $umax297$i = $915 ? $914 : $uglygep296$i;
       $umax297298299$i = $umax297$i;
       $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
       $uglygep300301$i = $uglygep300$i;
       $916 = $umax$i ^ -1;
       $d$4199$i = $r$0$a$8$i;
       while(1) {
        $917 = HEAP32[$d$4199$i>>2]|0;
        $918 = ($917|0)==(0);
        if ($918) {
         $$1$lcssa$i120$i = $14;
        } else {
         $$12$i118$i = $14;$y$03$i117$i = $917;
         while(1) {
          $919 = (($y$03$i117$i>>>0) % 10)&-1;
          $920 = $919 | 48;
          $921 = $920&255;
          $922 = (($$12$i118$i) + -1|0);
          HEAP8[$922>>0] = $921;
          $923 = (($y$03$i117$i>>>0) / 10)&-1;
          $924 = ($y$03$i117$i>>>0)<(10);
          if ($924) {
           $$1$lcssa$i120$i = $922;
           break;
          } else {
           $$12$i118$i = $922;$y$03$i117$i = $923;
          }
         }
        }
        $925 = ($d$4199$i|0)==($r$0$a$8$i|0);
        do {
         if ($925) {
          $929 = ($$1$lcssa$i120$i|0)==($14|0);
          if (!($929)) {
           $s7$1$i = $$1$lcssa$i120$i;
           break;
          }
          HEAP8[$16>>0] = 48;
          $s7$1$i = $16;
         } else {
          $926 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
          if ($926) {
           $s7$0196$i = $$1$lcssa$i120$i;
          } else {
           $s7$1$i = $$1$lcssa$i120$i;
           break;
          }
          while(1) {
           $927 = (($s7$0196$i) + -1|0);
           HEAP8[$927>>0] = 48;
           $928 = ($927>>>0)>($buf$i>>>0);
           if ($928) {
            $s7$0196$i = $927;
           } else {
            $s7$1$i = $927;
            break;
           }
          }
         }
        } while(0);
        $930 = $s7$1$i;
        $931 = (($15) - ($930))|0;
        (___fwritex($s7$1$i,$931,$f)|0);
        $932 = (($d$4199$i) + 4|0);
        $933 = ($932>>>0)>($$39$i>>>0);
        if ($933) {
         $$lcssa374 = $932;
         break;
        } else {
         $d$4199$i = $932;
        }
       }
       $934 = $uglygep300301$i & -4;
       $935 = (($934) + ($916))|0;
       $936 = $935;
       $$not$i = $838 ^ 1;
       $937 = $fl$1$ & 8;
       $938 = ($937|0)==(0);
       $or$cond35$i = $938 & $$not$i;
       if (!($or$cond35$i)) {
        (___fwritex(632272,1,$f)|0);
       }
       $939 = ($$lcssa374>>>0)<($z$6$i$lcssa>>>0);
       $940 = ($$317$i|0)>(0);
       $or$cond10191$i = $940 & $939;
       if ($or$cond10191$i) {
        $$418193$i = $$317$i;$955 = $936;$d$5192$i = $$lcssa374;
        while(1) {
         $941 = HEAP32[$d$5192$i>>2]|0;
         $942 = ($941|0)==(0);
         if ($942) {
          $s8$0188$i = $14;
          label = 300;
         } else {
          $$12$i127$i = $14;$y$03$i126$i = $941;
          while(1) {
           $943 = (($y$03$i126$i>>>0) % 10)&-1;
           $944 = $943 | 48;
           $945 = $944&255;
           $946 = (($$12$i127$i) + -1|0);
           HEAP8[$946>>0] = $945;
           $947 = (($y$03$i126$i>>>0) / 10)&-1;
           $948 = ($y$03$i126$i>>>0)<(10);
           if ($948) {
            $$lcssa375 = $946;
            break;
           } else {
            $$12$i127$i = $946;$y$03$i126$i = $947;
           }
          }
          $949 = ($$lcssa375>>>0)>($buf$i>>>0);
          if ($949) {
           $s8$0188$i = $$lcssa375;
           label = 300;
          } else {
           $s8$0$lcssa$i = $$lcssa375;
          }
         }
         if ((label|0) == 300) {
          while(1) {
           label = 0;
           $950 = (($s8$0188$i) + -1|0);
           HEAP8[$950>>0] = 48;
           $951 = ($950>>>0)>($buf$i>>>0);
           if ($951) {
            $s8$0188$i = $950;
            label = 300;
           } else {
            $s8$0$lcssa$i = $950;
            break;
           }
          }
         }
         $952 = ($$418193$i|0)>(9);
         $953 = $952 ? 9 : $$418193$i;
         (___fwritex($s8$0$lcssa$i,$953,$f)|0);
         $954 = (($955) + 8|0);
         $956 = (($$418193$i) + -9)|0;
         $957 = ($954>>>0)<($z$6$i$lcssa>>>0);
         $or$cond10$i = $952 & $957;
         if ($or$cond10$i) {
          $955$phi = $d$5192$i;$$418193$i = $956;$d$5192$i = $954;$955 = $955$phi;
         } else {
          $$418$lcssa$i = $956;
          break;
         }
        }
       } else {
        $$418$lcssa$i = $$317$i;
       }
       $958 = ($$418$lcssa$i|0)>(0);
       if ($958) {
        $959 = ($$418$lcssa$i>>>0)>(256);
        $960 = $959 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($960|0))|0;
        $961 = ($$418$lcssa$i>>>0)>(255);
        if ($961) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $962 = (($$01$i134$i) + -256)|0;
          $963 = ($962>>>0)>(255);
          if ($963) {
           $$01$i134$i = $962;
          } else {
           break;
          }
         }
         $964 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $964;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       }
      } else {
       $965 = (($a$8$ph$i) + 4|0);
       $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $965;
       $966 = ($$317$i|0)>(-1);
       do {
        if ($966) {
         $967 = $fl$1$ & 8;
         $968 = ($967|0)==(0);
         $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
         while(1) {
          $969 = HEAP32[$d$6204$i>>2]|0;
          $970 = ($969|0)==(0);
          if ($970) {
           label = 314;
          } else {
           $$12$i142$i = $14;$y$03$i141$i = $969;
           while(1) {
            $971 = (($y$03$i141$i>>>0) % 10)&-1;
            $972 = $971 | 48;
            $973 = $972&255;
            $974 = (($$12$i142$i) + -1|0);
            HEAP8[$974>>0] = $973;
            $975 = (($y$03$i141$i>>>0) / 10)&-1;
            $976 = ($y$03$i141$i>>>0)<(10);
            if ($976) {
             $$12$i142$i$lcssa = $$12$i142$i;$$lcssa369 = $974;
             break;
            } else {
             $$12$i142$i = $974;$y$03$i141$i = $975;
            }
           }
           $977 = ($$lcssa369|0)==($14|0);
           if ($977) {
            label = 314;
           } else {
            $1195 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa369;
           }
          }
          if ((label|0) == 314) {
           label = 0;
           HEAP8[$16>>0] = 48;
           $1195 = $14;$s9$0$i = $16;
          }
          $978 = ($d$6204$i|0)==($a$8$ph$i|0);
          do {
           if ($978) {
            (___fwritex($s9$0$i,1,$f)|0);
            $982 = ($$5205$i|0)<(1);
            $or$cond37$i = $968 & $982;
            if ($or$cond37$i) {
             $s9$2$i = $1195;
             break;
            }
            (___fwritex(632272,1,$f)|0);
            $s9$2$i = $1195;
           } else {
            $979 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($979) {
             $s9$1200$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $980 = (($s9$1200$i) + -1|0);
             HEAP8[$980>>0] = 48;
             $981 = ($980>>>0)>($buf$i>>>0);
             if ($981) {
              $s9$1200$i = $980;
             } else {
              $s9$2$i = $980;
              break;
             }
            }
           }
          } while(0);
          $983 = $s9$2$i;
          $984 = (($15) - ($983))|0;
          $985 = ($$5205$i|0)>($984|0);
          $$$5$i = $985 ? $984 : $$5205$i;
          (___fwritex($s9$2$i,$$$5$i,$f)|0);
          $986 = (($$5205$i) - ($984))|0;
          $987 = (($d$6204$i) + 4|0);
          $988 = ($987>>>0)<($z$6$$i>>>0);
          $989 = ($986|0)>(-1);
          $or$cond12$i = $988 & $989;
          if ($or$cond12$i) {
           $$5205$i = $986;$d$6204$i = $987;
          } else {
           $$lcssa371 = $986;
           break;
          }
         }
         $990 = ($$lcssa371|0)>(0);
         if (!($990)) {
          break;
         }
         $991 = ($$lcssa371>>>0)>(256);
         $992 = $991 ? 256 : $$lcssa371;
         _memset(($pad$i|0),48,($992|0))|0;
         $993 = ($$lcssa371>>>0)>(255);
         if ($993) {
          $$01$i149$i = $$lcssa371;
          while(1) {
           (___fwritex($pad$i,256,$f)|0);
           $994 = (($$01$i149$i) + -256)|0;
           $995 = ($994>>>0)>(255);
           if ($995) {
            $$01$i149$i = $994;
           } else {
            break;
           }
          }
          $996 = $$lcssa371 & 255;
          $$0$lcssa$i151$i = $996;
         } else {
          $$0$lcssa$i151$i = $$lcssa371;
         }
         (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
        } else {
        }
       } while(0);
       $997 = $estr$2$i;
       $998 = (($9) - ($997))|0;
       (___fwritex($estr$2$i,$998,$f)|0);
      }
      $999 = ($892|0)==(8192);
      $or$cond$i$i = $999 & $894;
      if ($or$cond$i$i) {
       $1000 = (($w$1) - ($891))|0;
       $1001 = ($1000>>>0)>(256);
       $1002 = $1001 ? 256 : $1000;
       _memset(($pad$i|0),32,($1002|0))|0;
       $1003 = ($1000>>>0)>(255);
       if ($1003) {
        $$01$i$i = $1000;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $1004 = (($$01$i$i) + -256)|0;
         $1005 = ($1004>>>0)>(255);
         if ($1005) {
          $$01$i$i = $1004;
         } else {
          break;
         }
        }
        $1006 = $1000 & 255;
        $$0$lcssa$i$i = $1006;
       } else {
        $$0$lcssa$i$i = $1000;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $894 ? $w$1 : $891;
      $$0$i = $w$38$i;
     } else {
      $447 = $t$0 & 32;
      $448 = ($447|0)!=(0);
      $449 = $448 ? 632224 : 632232;
      $450 = ($$013$i != $$013$i) | (0.0 != 0.0);
      if ($450) {
       $451 = $448 ? 632240 : 632248;
       $pl$1$i = 0;$s1$0$i = $451;
      } else {
       $pl$1$i = $pl$0$i;$s1$0$i = $449;
      }
      $452 = (($pl$1$i) + 3)|0;
      $453 = $fl$1$ & 8192;
      $454 = ($453|0)==(0);
      $455 = ($w$1|0)>($452|0);
      $or$cond$i43$i = $454 & $455;
      if ($or$cond$i43$i) {
       $456 = (($w$1) - ($452))|0;
       $457 = ($456>>>0)>(256);
       $458 = $457 ? 256 : $456;
       _memset(($pad$i|0),32,($458|0))|0;
       $459 = ($456>>>0)>(255);
       if ($459) {
        $$01$i45$i = $456;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $460 = (($$01$i45$i) + -256)|0;
         $461 = ($460>>>0)>(255);
         if ($461) {
          $$01$i45$i = $460;
         } else {
          break;
         }
        }
        $462 = $456 & 255;
        $$0$lcssa$i47$i = $462;
       } else {
        $$0$lcssa$i47$i = $456;
       }
       (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
      (___fwritex($s1$0$i,3,$f)|0);
      $463 = $fl$1$ & 73728;
      $464 = ($463|0)==(8192);
      $or$cond$i50$i = $464 & $455;
      if ($or$cond$i50$i) {
       $465 = (($w$1) - ($452))|0;
       $466 = ($465>>>0)>(256);
       $467 = $466 ? 256 : $465;
       _memset(($pad$i|0),32,($467|0))|0;
       $468 = ($465>>>0)>(255);
       if ($468) {
        $$01$i52$i = $465;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $469 = (($$01$i52$i) + -256)|0;
         $470 = ($469>>>0)>(255);
         if ($470) {
          $$01$i52$i = $469;
         } else {
          break;
         }
        }
        $471 = $465 & 255;
        $$0$lcssa$i54$i = $471;
       } else {
        $$0$lcssa$i54$i = $465;
       }
       (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
      }
      $w$$i = $455 ? $w$1 : $452;
      $$0$i = $w$$i;
     }
    } while(0);
    $1175 = $294;$1176 = $267;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 73;
    break;
   }
   case 112:  {
    $289 = ($p$0>>>0)>(8);
    $290 = $289 ? $p$0 : 8;
    $291 = $fl$1$ | 8;
    $fl$3 = $291;$p$1 = $290;$t$1 = 120;
    label = 73;
    break;
   }
   case 117:  {
    $339 = $294;$341 = $267;$pl$0 = 0;$prefix$0 = 632176;
    label = 84;
    break;
   }
   default: {
    $1183 = $294;$1184 = $267;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 632176;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 73) {
    label = 0;
    $292 = $t$1 & 32;
    $293 = ($267|0)==(0);
    $295 = ($294|0)==(0);
    $296 = $293 & $295;
    if ($296) {
     $369 = $267;$371 = $294;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 632176;
     label = 89;
    } else {
     $$012$i = $2;$298 = $267;$305 = $294;
     while(1) {
      $297 = $298 & 15;
      $299 = (632256 + ($297)|0);
      $300 = HEAP8[$299>>0]|0;
      $301 = $300&255;
      $302 = $301 | $292;
      $303 = $302&255;
      $304 = (($$012$i) + -1|0);
      HEAP8[$304>>0] = $303;
      $306 = (_bitshift64Lshr(($298|0),($305|0),4)|0);
      $307 = tempRet0;
      $308 = ($306|0)==(0);
      $309 = ($307|0)==(0);
      $310 = $308 & $309;
      if ($310) {
       $$lcssa386 = $304;
       break;
      } else {
       $$012$i = $304;$298 = $306;$305 = $307;
      }
     }
     $311 = $fl$3 & 8;
     $312 = ($311|0)==(0);
     if ($312) {
      $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 632176;
      label = 89;
     } else {
      $313 = $t$1 >> 4;
      $314 = (632176 + ($313)|0);
      $369 = $267;$371 = $294;$a$0 = $$lcssa386;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $314;
      label = 89;
     }
    }
   }
   else if ((label|0) == 84) {
    label = 0;
    $340 = ($339>>>0)>(0);
    $342 = ($341>>>0)>(4294967295);
    $343 = ($339|0)==(0);
    $344 = $343 & $342;
    $345 = $340 | $344;
    if ($345) {
     $$05$i = $2;$346 = $341;$347 = $339;
     while(1) {
      $348 = (___uremdi3(($346|0),($347|0),10,0)|0);
      $349 = tempRet0;
      $350 = $348 | 48;
      $351 = $350&255;
      $352 = (($$05$i) + -1|0);
      HEAP8[$352>>0] = $351;
      $353 = (___udivdi3(($346|0),($347|0),10,0)|0);
      $354 = tempRet0;
      $355 = ($347>>>0)>(9);
      $356 = ($346>>>0)>(4294967295);
      $357 = ($347|0)==(9);
      $358 = $357 & $356;
      $359 = $355 | $358;
      if ($359) {
       $$05$i = $352;$346 = $353;$347 = $354;
      } else {
       $$lcssa382 = $352;$1185 = $353;$1186 = $354;
       break;
      }
     }
     $$0$lcssa$i54 = $$lcssa382;$$01$lcssa$off0$i = $1185;
    } else {
     $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $341;
    }
    $360 = ($$01$lcssa$off0$i|0)==(0);
    if ($360) {
     $369 = $341;$371 = $339;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 89;
    } else {
     $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $361 = (($y$03$i>>>0) % 10)&-1;
      $362 = $361 | 48;
      $363 = $362&255;
      $364 = (($$12$i) + -1|0);
      HEAP8[$364>>0] = $363;
      $365 = (($y$03$i>>>0) / 10)&-1;
      $366 = ($y$03$i>>>0)<(10);
      if ($366) {
       $369 = $341;$371 = $339;$a$0 = $364;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 89;
       break;
      } else {
       $$12$i = $364;$y$03$i = $365;
      }
     }
    }
   }
   else if ((label|0) == 94) {
    label = 0;
    $387 = (_memchr($a$1,0,$p$0)|0);
    $388 = ($387|0)==(0|0);
    if ($388) {
     $389 = (($a$1) + ($p$0)|0);
     $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 632176;$z$2 = $389;
     break;
    } else {
     $390 = $387;
     $391 = $a$1;
     $392 = (($390) - ($391))|0;
     $1183 = $294;$1184 = $267;$a$2 = $a$1;$fl$6 = $266;$p$5 = $392;$pl$2 = 0;$prefix$2 = 632176;$z$2 = $387;
     break;
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $i$0176 = 0;$l$1175 = 0;$ws$0177 = $1187;
    while(1) {
     $395 = HEAP32[$ws$0177>>2]|0;
     $396 = ($395|0)==(0);
     if ($396) {
      $i$0$lcssa = $i$0176;$l$2 = $l$1175;
      break;
     }
     $397 = (_wctomb($mb,$395)|0);
     $398 = ($397|0)<(0);
     $399 = (($p$4271) - ($i$0176))|0;
     $400 = ($397>>>0)>($399>>>0);
     $or$cond23 = $398 | $400;
     if ($or$cond23) {
      $i$0$lcssa = $i$0176;$l$2 = $397;
      break;
     }
     $401 = (($ws$0177) + 4|0);
     $402 = (($397) + ($i$0176))|0;
     $403 = ($p$4271>>>0)>($402>>>0);
     if ($403) {
      $i$0176 = $402;$l$1175 = $397;$ws$0177 = $401;
     } else {
      $i$0$lcssa = $402;$l$2 = $397;
      break;
     }
    }
    $404 = ($l$2|0)<(0);
    if ($404) {
     $$0 = -1;
     label = 374;
     break L1;
    } else {
     $1189 = $1188;$1190 = $1187;$i$0$lcssa272 = $i$0$lcssa;
     label = 104;
    }
   }
  } while(0);
  if ((label|0) == 89) {
   label = 0;
   $367 = ($p$2|0)>(-1);
   $368 = $fl$4 & -65537;
   $$fl$4 = $367 ? $368 : $fl$4;
   $370 = ($369|0)!=(0);
   $372 = ($371|0)!=(0);
   $373 = $370 | $372;
   $374 = ($p$2|0)!=(0);
   $or$cond = $373 | $374;
   if ($or$cond) {
    $375 = $a$0;
    $376 = (($3) - ($375))|0;
    $377 = $373&1;
    $378 = $377 ^ 1;
    $379 = (($378) + ($376))|0;
    $380 = ($p$2|0)>($379|0);
    $p$2$ = $380 ? $p$2 : $379;
    $1183 = $371;$1184 = $369;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1183 = $371;$1184 = $369;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 104) {
   label = 0;
   $405 = $fl$1$ & 73728;
   $406 = ($405|0)==(0);
   $407 = ($w$1|0)>($i$0$lcssa272|0);
   $or$cond$i65 = $406 & $407;
   if ($or$cond$i65) {
    $408 = (($w$1) - ($i$0$lcssa272))|0;
    $409 = ($408>>>0)>(256);
    $410 = $409 ? 256 : $408;
    _memset(($pad$i|0),32,($410|0))|0;
    $411 = ($408>>>0)>(255);
    if ($411) {
     $$01$i67 = $408;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $412 = (($$01$i67) + -256)|0;
      $413 = ($412>>>0)>(255);
      if ($413) {
       $$01$i67 = $412;
      } else {
       break;
      }
     }
     $414 = $408 & 255;
     $$0$lcssa$i69 = $414;
    } else {
     $$0$lcssa$i69 = $408;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $415 = ($i$0$lcssa272|0)==(0);
   L479: do {
    if (!($415)) {
     $i$1187 = 0;$ws$1188 = $1190;
     while(1) {
      $416 = HEAP32[$ws$1188>>2]|0;
      $417 = ($416|0)==(0);
      if ($417) {
       break L479;
      }
      $418 = (_wctomb($mb,$416)|0);
      $419 = (($418) + ($i$1187))|0;
      $420 = ($419|0)>($i$0$lcssa272|0);
      if ($420) {
       break L479;
      }
      $421 = (($ws$1188) + 4|0);
      (___fwritex($mb,$418,$f)|0);
      $422 = ($419>>>0)<($i$0$lcssa272>>>0);
      if ($422) {
       $i$1187 = $419;$ws$1188 = $421;
      } else {
       break;
      }
     }
    }
   } while(0);
   $423 = ($405|0)==(8192);
   $or$cond$i72 = $423 & $407;
   if ($or$cond$i72) {
    $424 = (($w$1) - ($i$0$lcssa272))|0;
    $425 = ($424>>>0)>(256);
    $426 = $425 ? 256 : $424;
    _memset(($pad$i|0),32,($426|0))|0;
    $427 = ($424>>>0)>(255);
    if ($427) {
     $$01$i74 = $424;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $428 = (($$01$i74) + -256)|0;
      $429 = ($428>>>0)>(255);
      if ($429) {
       $$01$i74 = $428;
      } else {
       break;
      }
     }
     $430 = $424 & 255;
     $$0$lcssa$i76 = $430;
    } else {
     $$0$lcssa$i76 = $424;
    }
    (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
   }
   $431 = $407 ? $w$1 : $i$0$lcssa272;
   $1175 = $294;$1176 = $1189;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $431;$l10n$0 = $l10n$3;
   continue;
  }
  $1007 = $z$2;
  $1008 = $a$2;
  $1009 = (($1007) - ($1008))|0;
  $1010 = ($p$5|0)<($1009|0);
  $$p$5 = $1010 ? $1009 : $p$5;
  $1011 = (($pl$2) + ($$p$5))|0;
  $1012 = ($w$1|0)<($1011|0);
  $w$2 = $1012 ? $1011 : $w$1;
  $1013 = $fl$6 & 73728;
  $1014 = ($1013|0)==(0);
  $1015 = ($w$2|0)>($1011|0);
  $or$cond$i82 = $1014 & $1015;
  if ($or$cond$i82) {
   $1016 = (($w$2) - ($1011))|0;
   $1017 = ($1016>>>0)>(256);
   $1018 = $1017 ? 256 : $1016;
   _memset(($pad$i|0),32,($1018|0))|0;
   $1019 = ($1016>>>0)>(255);
   if ($1019) {
    $$01$i84 = $1016;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1020 = (($$01$i84) + -256)|0;
     $1021 = ($1020>>>0)>(255);
     if ($1021) {
      $$01$i84 = $1020;
     } else {
      break;
     }
    }
    $1022 = $1016 & 255;
    $$0$lcssa$i86 = $1022;
   } else {
    $$0$lcssa$i86 = $1016;
   }
   (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $1023 = ($1013|0)==(65536);
  $or$cond$i58 = $1023 & $1015;
  if ($or$cond$i58) {
   $1024 = (($w$2) - ($1011))|0;
   $1025 = ($1024>>>0)>(256);
   $1026 = $1025 ? 256 : $1024;
   _memset(($pad$i|0),48,($1026|0))|0;
   $1027 = ($1024>>>0)>(255);
   if ($1027) {
    $$01$i60 = $1024;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1028 = (($$01$i60) + -256)|0;
     $1029 = ($1028>>>0)>(255);
     if ($1029) {
      $$01$i60 = $1028;
     } else {
      break;
     }
    }
    $1030 = $1024 & 255;
    $$0$lcssa$i62 = $1030;
   } else {
    $$0$lcssa$i62 = $1024;
   }
   (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
  }
  $1031 = ($$p$5|0)>($1009|0);
  if ($1031) {
   $1032 = (($$p$5) - ($1009))|0;
   $1033 = ($1032>>>0)>(256);
   $1034 = $1033 ? 256 : $1032;
   _memset(($pad$i|0),48,($1034|0))|0;
   $1035 = ($1032>>>0)>(255);
   if ($1035) {
    $$01$i45 = $1032;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1036 = (($$01$i45) + -256)|0;
     $1037 = ($1036>>>0)>(255);
     if ($1037) {
      $$01$i45 = $1036;
     } else {
      break;
     }
    }
    $1038 = $1032 & 255;
    $$0$lcssa$i47 = $1038;
   } else {
    $$0$lcssa$i47 = $1032;
   }
   (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
  }
  (___fwritex($a$2,$1009,$f)|0);
  $1039 = ($1013|0)==(8192);
  $or$cond$i = $1039 & $1015;
  if ($or$cond$i) {
   $1040 = (($w$2) - ($1011))|0;
   $1041 = ($1040>>>0)>(256);
   $1042 = $1041 ? 256 : $1040;
   _memset(($pad$i|0),32,($1042|0))|0;
   $1043 = ($1040>>>0)>(255);
   if ($1043) {
    $$01$i = $1040;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $1044 = (($$01$i) + -256)|0;
     $1045 = ($1044>>>0)>(255);
     if ($1045) {
      $$01$i = $1044;
     } else {
      break;
     }
    }
    $1046 = $1040 & 255;
    $$0$lcssa$i = $1046;
   } else {
    $$0$lcssa$i = $1040;
   }
   (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  }
  $1175 = $1183;$1176 = $1184;$23 = $1182;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 355) {
  $1047 = ($f|0)==(0|0);
  if (!($1047)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $1048 = ($l10n$0$lcssa|0)==(0);
  if ($1048) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2163 = 1;
  }
  while(1) {
   $1049 = (($nl_type) + ($i$2163<<2)|0);
   $1050 = HEAP32[$1049>>2]|0;
   $1051 = ($1050|0)==(0);
   if ($1051) {
    $i$2163$lcssa = $i$2163;
    break;
   }
   $1053 = (($nl_arg) + ($i$2163<<3)|0);
   $1054 = ($1050>>>0)>(20);
   L546: do {
    if (!($1054)) {
     do {
      switch ($1050|0) {
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1102 = $arglist_current47;
       $1103 = (0 + 4|0);
       $expanded176 = $1103;
       $expanded175 = (($expanded176) - 1)|0;
       $1104 = (($1102) + ($expanded175))|0;
       $1105 = (0 + 4|0);
       $expanded180 = $1105;
       $expanded179 = (($expanded180) - 1)|0;
       $expanded178 = $expanded179 ^ -1;
       $1106 = $1104 & $expanded178;
       $1107 = $1106;
       $1108 = HEAP32[$1107>>2]|0;
       $arglist_next48 = (($1107) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1109 = $1108&65535;
       $1110 = $1109 << 16 >> 16;
       $1111 = ($1110|0)<(0);
       $1112 = $1111 << 31 >> 31;
       $1113 = $1053;
       $1114 = $1113;
       HEAP32[$1114>>2] = $1110;
       $1115 = (($1113) + 4)|0;
       $1116 = $1115;
       HEAP32[$1116>>2] = $1112;
       break L546;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1117 = $arglist_current50;
       $1118 = (0 + 4|0);
       $expanded183 = $1118;
       $expanded182 = (($expanded183) - 1)|0;
       $1119 = (($1117) + ($expanded182))|0;
       $1120 = (0 + 4|0);
       $expanded187 = $1120;
       $expanded186 = (($expanded187) - 1)|0;
       $expanded185 = $expanded186 ^ -1;
       $1121 = $1119 & $expanded185;
       $1122 = $1121;
       $1123 = HEAP32[$1122>>2]|0;
       $arglist_next51 = (($1122) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1123 & 65535;
       $1124 = $1053;
       $1125 = $1124;
       HEAP32[$1125>>2] = $$mask1$i;
       $1126 = (($1124) + 4)|0;
       $1127 = $1126;
       HEAP32[$1127>>2] = 0;
       break L546;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1128 = $arglist_current53;
       $1129 = (0 + 4|0);
       $expanded190 = $1129;
       $expanded189 = (($expanded190) - 1)|0;
       $1130 = (($1128) + ($expanded189))|0;
       $1131 = (0 + 4|0);
       $expanded194 = $1131;
       $expanded193 = (($expanded194) - 1)|0;
       $expanded192 = $expanded193 ^ -1;
       $1132 = $1130 & $expanded192;
       $1133 = $1132;
       $1134 = HEAP32[$1133>>2]|0;
       $arglist_next54 = (($1133) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1135 = $1134&255;
       $1136 = $1135 << 24 >> 24;
       $1137 = ($1136|0)<(0);
       $1138 = $1137 << 31 >> 31;
       $1139 = $1053;
       $1140 = $1139;
       HEAP32[$1140>>2] = $1136;
       $1141 = (($1139) + 4)|0;
       $1142 = $1141;
       HEAP32[$1142>>2] = $1138;
       break L546;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1143 = $arglist_current56;
       $1144 = (0 + 4|0);
       $expanded197 = $1144;
       $expanded196 = (($expanded197) - 1)|0;
       $1145 = (($1143) + ($expanded196))|0;
       $1146 = (0 + 4|0);
       $expanded201 = $1146;
       $expanded200 = (($expanded201) - 1)|0;
       $expanded199 = $expanded200 ^ -1;
       $1147 = $1145 & $expanded199;
       $1148 = $1147;
       $1149 = HEAP32[$1148>>2]|0;
       $arglist_next57 = (($1148) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1149 & 255;
       $1150 = $1053;
       $1151 = $1150;
       HEAP32[$1151>>2] = $$mask$i;
       $1152 = (($1150) + 4)|0;
       $1153 = $1152;
       HEAP32[$1153>>2] = 0;
       break L546;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       $1154 = $arglist_current59;
       $1155 = (0 + 8|0);
       $expanded204 = $1155;
       $expanded203 = (($expanded204) - 1)|0;
       $1156 = (($1154) + ($expanded203))|0;
       $1157 = (0 + 8|0);
       $expanded208 = $1157;
       $expanded207 = (($expanded208) - 1)|0;
       $expanded206 = $expanded207 ^ -1;
       $1158 = $1156 & $expanded206;
       $1159 = $1158;
       $1160 = +HEAPF64[$1159>>3];
       $arglist_next60 = (($1159) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$1053>>3] = $1160;
       break L546;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       $1161 = $arglist_current62;
       $1162 = (0 + 8|0);
       $expanded211 = $1162;
       $expanded210 = (($expanded211) - 1)|0;
       $1163 = (($1161) + ($expanded210))|0;
       $1164 = (0 + 8|0);
       $expanded215 = $1164;
       $expanded214 = (($expanded215) - 1)|0;
       $expanded213 = $expanded214 ^ -1;
       $1165 = $1163 & $expanded213;
       $1166 = $1165;
       $1167 = +HEAPF64[$1166>>3];
       $arglist_next63 = (($1166) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$1053>>3] = $1167;
       break L546;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $1062 = $arglist_current38;
       $1063 = (0 + 4|0);
       $expanded155 = $1063;
       $expanded154 = (($expanded155) - 1)|0;
       $1064 = (($1062) + ($expanded154))|0;
       $1065 = (0 + 4|0);
       $expanded159 = $1065;
       $expanded158 = (($expanded159) - 1)|0;
       $expanded157 = $expanded158 ^ -1;
       $1066 = $1064 & $expanded157;
       $1067 = $1066;
       $1068 = HEAP32[$1067>>2]|0;
       $arglist_next39 = (($1067) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $1069 = ($1068|0)<(0);
       $1070 = $1069 << 31 >> 31;
       $1071 = $1053;
       $1072 = $1071;
       HEAP32[$1072>>2] = $1068;
       $1073 = (($1071) + 4)|0;
       $1074 = $1073;
       HEAP32[$1074>>2] = $1070;
       break L546;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $1075 = $arglist_current41;
       $1076 = (0 + 4|0);
       $expanded162 = $1076;
       $expanded161 = (($expanded162) - 1)|0;
       $1077 = (($1075) + ($expanded161))|0;
       $1078 = (0 + 4|0);
       $expanded166 = $1078;
       $expanded165 = (($expanded166) - 1)|0;
       $expanded164 = $expanded165 ^ -1;
       $1079 = $1077 & $expanded164;
       $1080 = $1079;
       $1081 = HEAP32[$1080>>2]|0;
       $arglist_next42 = (($1080) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $1082 = $1053;
       $1083 = $1082;
       HEAP32[$1083>>2] = $1081;
       $1084 = (($1082) + 4)|0;
       $1085 = $1084;
       HEAP32[$1085>>2] = 0;
       break L546;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1086 = $arglist_current44;
       $1087 = (0 + 8|0);
       $expanded169 = $1087;
       $expanded168 = (($expanded169) - 1)|0;
       $1088 = (($1086) + ($expanded168))|0;
       $1089 = (0 + 8|0);
       $expanded173 = $1089;
       $expanded172 = (($expanded173) - 1)|0;
       $expanded171 = $expanded172 ^ -1;
       $1090 = $1088 & $expanded171;
       $1091 = $1090;
       $1092 = $1091;
       $1093 = $1092;
       $1094 = HEAP32[$1093>>2]|0;
       $1095 = (($1092) + 4)|0;
       $1096 = $1095;
       $1097 = HEAP32[$1096>>2]|0;
       $arglist_next45 = (($1091) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1098 = $1053;
       $1099 = $1098;
       HEAP32[$1099>>2] = $1094;
       $1100 = (($1098) + 4)|0;
       $1101 = $1100;
       HEAP32[$1101>>2] = $1097;
       break L546;
       break;
      }
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $1055 = $arglist_current35;
       $1056 = (0 + 4|0);
       $expanded148 = $1056;
       $expanded147 = (($expanded148) - 1)|0;
       $1057 = (($1055) + ($expanded147))|0;
       $1058 = (0 + 4|0);
       $expanded152 = $1058;
       $expanded151 = (($expanded152) - 1)|0;
       $expanded150 = $expanded151 ^ -1;
       $1059 = $1057 & $expanded150;
       $1060 = $1059;
       $1061 = HEAP32[$1060>>2]|0;
       $arglist_next36 = (($1060) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$1053>>2] = $1061;
       break L546;
       break;
      }
      default: {
       break L546;
      }
      }
     } while(0);
    }
   } while(0);
   $1168 = (($i$2163) + 1)|0;
   $1169 = ($1168|0)<(10);
   if ($1169) {
    $i$2163 = $1168;
   } else {
    $$0 = 1;
    label = 374;
    break;
   }
  }
  if ((label|0) == 374) {
   STACKTOP = sp;return ($$0|0);
  }
  $1052 = ($i$2163$lcssa|0)<(10);
  if ($1052) {
   $i$3161 = $i$2163$lcssa;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1172 = (($nl_type) + ($i$3161<<2)|0);
   $1173 = HEAP32[$1172>>2]|0;
   $1174 = ($1173|0)==(0);
   $1170 = (($i$3161) + 1)|0;
   if (!($1174)) {
    $$0 = -1;
    label = 374;
    break;
   }
   $1171 = ($1170|0)<(10);
   if ($1171) {
    $i$3161 = $1170;
   } else {
    $$0 = 1;
    label = 374;
    break;
   }
  }
  if ((label|0) == 374) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 374) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {

}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)>>0)]=HEAP8[((psrc+i)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&1](a1|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&3](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0; }
function _fprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fprintf(p0|0,p1|0,p2|0)|0; }
function _fseek__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fseek(p0|0,p1|0,p2|0)|0; }
function _fseeko__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _fseeko(p0|0,p1|0,p2|0)|0; }
function b1(p0) { p0 = p0|0; abort(1);return +0; }
function b2(p0) { p0 = p0|0; abort(2); }
function _perror__wrapper(p0) { p0 = p0|0; _perror(p0|0); }
function b3(p0,p1) { p0 = p0|0;p1 = p1|0; abort(3); }
function b4(p0) { p0 = p0|0; abort(4);return 0; }
function _putenv__wrapper(p0) { p0 = p0|0; return _putenv(p0|0)|0; }
function _puts__wrapper(p0) { p0 = p0|0; return _puts(p0|0)|0; }
function _putchar__wrapper(p0) { p0 = p0|0; return _putchar(p0|0)|0; }
function _isatty__wrapper(p0) { p0 = p0|0; return _isatty(p0|0)|0; }
function _fileno__wrapper(p0) { p0 = p0|0; return _fileno(p0|0)|0; }
function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
function _ctime__wrapper(p0) { p0 = p0|0; return _ctime(p0|0)|0; }
function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
function b5() { ; abort(5); }
function b6(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(6);return 0; }
function _fwrite__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _fwrite(p0|0,p1|0,p2|0,p3|0)|0; }
function _fread__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _fread(p0|0,p1|0,p2|0,p3|0)|0; }
function b7(p0,p1) { p0 = p0|0;p1 = p1|0; abort(7);return 0; }
function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
function _fopen__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0; }
function _utime__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _utime(p0|0,p1|0)|0; }
function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }
function _strcat__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcat(p0|0,p1|0)|0; }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,_sn_write,_memchr,_fprintf__wrapper,_fseek__wrapper,_fseeko__wrapper,_sprintf,_do_read];
var FUNCTION_TABLE_di = [b1,_atof];
var FUNCTION_TABLE_vi = [b2,_perror__wrapper,_free,_bad_pixels,_subtract,_xtrans_interpolate,b2,b2];
var FUNCTION_TABLE_vii = [b3,_merror];
var FUNCTION_TABLE_ii = [b4,_putenv__wrapper,_puts__wrapper,_putchar__wrapper,_atoi,_isatty__wrapper,_fileno__wrapper,_fclose__wrapper,_ctime__wrapper,_malloc,_strlen__wrapper,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_v = [b5,_phase_one_load_raw,_phase_one_load_raw_c,_canon_load_raw,_lossless_jpeg_load_raw,_canon_600_load_raw,_sony_load_raw,_eight_bit_load_raw,_kodak_262_load_raw,_packed_load_raw,_nokia_load_raw,_panasonic_load_raw,_sinar_4shot_load_raw,_sony_arw_load_raw,_samsung_load_raw,_samsung2_load_raw,_samsung3_load_raw,_imacon_full_load_raw,_unpacked_load_raw,_sony_arw2_load_raw,_olympus_load_raw,_nikon_yuv_load_raw,_nikon_load_raw,_pentax_load_raw,_kodak_rgb_load_raw,_kodak_ycbcr_load_raw,_kodak_65000_load_raw,_layer_thumb,_ppm_thumb
,_ppm16_thumb,_kodak_thumb_load_raw,_rollei_thumb,_smal_v6_load_raw,_smal_v9_load_raw,_foveon_sd_load_raw,_foveon_dp_load_raw,_jpeg_thumb,_foveon_thumb,_quicktake_100_load_raw,_kodak_radc_load_raw,_canon_rmf_load_raw,_redcine_load_raw,_minolta_rd175_load_raw,_packed_dng_load_raw,_lossless_dng_load_raw,_lossy_dng_load_raw,_canon_sraw_load_raw,_hasselblad_load_raw,_leaf_hdr_load_raw,_kodak_c330_load_raw,_kodak_c603_load_raw,_kodak_dc120_load_raw,_kodak_jpeg_load_raw,_rollei_load_raw,_identify,_write_ppm_tiff,_crop_masked_pixels,_remove_zeroes,_foveon_interpolate
,_scale_colors,_pre_interpolate,_lin_interpolate,_vng_interpolate,_ppg_interpolate,_ahd_interpolate,_median_filter,_blend_highlights,_recover_highlights,_fuji_rotate,_convert_to_rgb,_stretch,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiii = [b6,_fwrite__wrapper,_fread__wrapper,_snprintf];
var FUNCTION_TABLE_iii = [b7,_printf__wrapper,_strcmp,_fopen__wrapper,_utime__wrapper,_fcol,_calloc,_strcpy__wrapper,_strrchr,_strcat__wrapper,b7,b7,b7,b7,b7,b7];

  return { _testSetjmp: _testSetjmp, _i64Subtract: _i64Subtract, _strcat: _strcat, _free: _free, _main: _main, _strncpy: _strncpy, _memmove: _memmove, _bitshift64Ashr: _bitshift64Ashr, _saveSetjmp: _saveSetjmp, _memset: _memset, _malloc: _malloc, _i64Add: _i64Add, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_di: dynCall_di, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



